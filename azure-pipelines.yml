# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- mlz-azure-pipelines

pool:
  vmImage: ubuntu-latest

variables:
  ServiceConnectionName: $(CAzureConnection)
  GServiceConnectionName: $(GAzureConnection)
  
jobs:
- job: CommercialCloud_bicep
  steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: $(ServiceConnectionName)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az deployment sub create \
          --name $(DeploymentName) \
          --location $(Location) \
          --template-file $(TemplateFile)
- job: GovCloud_bicep
  steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: $(GServiceConnectionName)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az deployment sub create \
          --name $(DeploymentName) \
          --location $(GLocation) \
          --template-file $(TemplateFile)
- job: CommercialCloud_TF
  steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.12.3'
    - task: TerraformTaskV2@2
      inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'CAzureConnection'
            backendAzureRmResourceGroupName: 'mlzcicdtf'
            backendAzureRmStorageAccountName: 'mlzcicdtfstore'
            backendAzureRmContainerName: 'mlzcicdtfstorcontainer'
            backendAzureRmKey: 'tf/terraform.tfstate'
    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/src/terraform/mlz'
        environmentServiceNameAzureRM: 'CAzureConnection'