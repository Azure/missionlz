{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.24.24.22086",
      "templateHash": "5880375138312035236"
    }
  },
  "parameters": {
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "xadmin",
      "metadata": {
        "description": "Username for the Virtual Machine Administrator (Windows) Account"
      }
    },
    "arcgisServiceAccountIsDomainAccount": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether ArcGIS Service Account is a Domain Account."
      }
    },
    "arcgisServiceAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the ArcGIS (Windows) Service Account"
      }
    },
    "arcgisServiceAccountUserName": {
      "type": "string",
      "defaultValue": "xadmin",
      "metadata": {
        "description": "User name for the ArcGIS (Windows) Service Account"
      }
    },
    "dataStoreTypesForBaseDeploymentServers": {
      "type": "string",
      "defaultValue": "Relational",
      "allowedValues": [
        "Relational"
      ],
      "metadata": {
        "description": "(Optional) The types of ArcGIS Data Stores that are enabled for this base deployment servers"
      }
    },
    "debugMode": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether to enable debug settings on the site deployment. Used for troubleshooting only and should not be used for a Production Deployment"
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Required. Creating UTC for deployments."
      }
    },
    "enableMonitoring": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional) Indicates if the Azure Monitor Agent will be installed on the virtual machine."
      }
    },
    "enableServerLogHarvesterPlugin": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Server Log Harvester Plugin "
      }
    },
    "enableVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether an additional Managed Disk is attached to the Virtual Machine(s)"
      }
    },
    "externalDnsHostnamePrefix": {
      "type": "string",
      "defaultValue": "mt5",
      "metadata": {
        "description": "External DNS name for the site deployment. It will be a custom domain (e.g. mysite.contoso.com) if using a Private IP or an SSL certificate, otherwise will be the Azure DNS <dnsPrefixForPublicIpAddress>.<location>.cloudapp.azure.com"
      }
    },
    "externalDnsHostname": {
      "type": "string"
    },
    "isTileCacheDataStoreClustered": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "TileCache Datastore architecture mode set to `cluster` if true, else `masterSlave`"
      }
    },
    "isUpdatingCertificates": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "True if updating certificates of an existing deployment"
      }
    },
    "joinWindowsDomain": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether the virtual machines should join an existing Windows Active Directory which provides domain join and DNS services in the Virtual Network"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Required. Location of deployment."
      }
    },
    "ouPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Organizational Unit path in which the nodes and cluster will be present."
      }
    },
    "portalLicenseFile": {
      "type": "string",
      "defaultValue": "[variables('$fxv#0')]",
      "metadata": {
        "description": "The base64 encoded string for the Portal for ArcGIS License"
      }
    },
    "portalLicenseUserTypeId": {
      "type": "string",
      "defaultValue": "creatorUT",
      "allowedValues": [
        "creatorUT"
      ],
      "metadata": {
        "description": "Portal for ArcGIS License User Type Id to be used to Configure Portal Site"
      }
    },
    "primarySiteAdministratorAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "User name for the ArcGIS Server Site Primary Site Administrator"
      }
    },
    "primarySiteAdministratorAccountUserName": {
      "type": "string",
      "defaultValue": "sadmin",
      "metadata": {
        "description": "User name for the ArcGIS Server Site Primary Site Administrator"
      }
    },
    "resourceSuffix": {
      "type": "string",
      "defaultValue": "mt5",
      "maxLength": 3,
      "metadata": {
        "description": "(Optional) Prefix applied to all resources provisioned as part of this template"
      }
    },
    "serverLicenseFile": {
      "type": "string",
      "defaultValue": "[variables('$fxv#1')]",
      "metadata": {
        "description": "The base64 encoded string for the ArcGIS Server License"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Key / value pairs of metadata for the Azure resource group and resources."
      }
    },
    "useCloudStorage": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Storage is used for the server config and portal content store"
      }
    },
    "useAzureFiles": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "(Optional) Indicates whether Azure Files (SMB protocol) is used for the server config and portal content store"
      }
    },
    "virtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "metadata": {
        "description": "Required. Virtual Machin OS Disk Size."
      }
    },
    "windowsDomainAdministratorPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Optional) Password for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      }
    },
    "windowsDomainAdministratorUserName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "(Optional) Username for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      }
    },
    "windowsDomainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional) Username for the Active Directory Domain Administrator account where the virtual machine will be joined. Required if joinWindowsDomain = true"
      }
    },
    "architecture": {
      "type": "string",
      "defaultValue": "multitier",
      "allowedValues": [
        "singletier",
        "multitier"
      ]
    },
    "portalVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        327678
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the Portal tier of Virtual Machines"
      }
    },
    "secondaryDnsHostName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Private DNS name for the site deployment. It will be a custom domain (e.g. mysite.contoso.com) if using a Private IP or an SSL certificate, otherwise will be the Azure DNS <dnsPrefixForPublicIpAddress>.<location>.cloudapp.azure.com"
      }
    },
    "dataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Operating System (c Drive) Disk for the DataStore tier of Virtual Machines"
      }
    },
    "enableDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Indicates whether an additional Managed Disk is attached to the Data Store tier of Virtual Machines"
      }
    },
    "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "(Optional) Managed Disk Size for the Data Disk for the Data Store tier of Virtual Machines"
      }
    },
    "numberOfEsriServers": {
      "type": "int",
      "defaultValue": 2
    },
    "numberOfEsrispatiotemporalBigDataStoreVirtualMachines": {
      "type": "int",
      "defaultValue": 2
    },
    "numberOfTileCacheDataStoreVirtualMachineNames": {
      "type": "int",
      "defaultValue": 2
    },
    "numberOfGraphDataStoreVirtualMachineNames": {
      "type": "int",
      "defaultValue": 2
    },
    "numberOfFileShareVirtualMachineNames": {
      "type": "int",
      "defaultValue": 1
    },
    "numberOfPortalVirtualMachines": {
      "type": "int",
      "defaultValue": 2
    },
    "numberOfDataStoreVirtualMachines": {
      "type": "int",
      "defaultValue": 2
    },
    "numberOfObjectDataStoreVirtualMachines": {
      "type": "int",
      "defaultValue": 3,
      "minValue": 3
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS4_v2"
    },
    "hubResourceGroupName": {
      "type": "string"
    },
    "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
      "type": "int"
    },
    "enableTileCacheDataStore": {
      "type": "bool",
      "defaultValue": true
    },
    "enableGraphDataStore": {
      "type": "bool",
      "defaultValue": true
    },
    "enableSpatiotemporalBigDataStore": {
      "type": "bool",
      "defaultValue": true
    },
    "enableObjectDataStore": {
      "type": "bool",
      "defaultValue": true
    }
  },
  "variables": {
    "copy": [
      {
        "name": "dataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfDataStoreVirtualMachines')))]",
        "input": "[format('esri-ds-{0}', range(0, parameters('numberOfDataStoreVirtualMachines'))[copyIndex('dataStoreVirtualMachines')])]"
      },
      {
        "name": "fileShareVirtualMachines",
        "count": "[length(range(0, parameters('numberOfFileShareVirtualMachineNames')))]",
        "input": "[format('esri-fl-{0}', range(0, parameters('numberOfFileShareVirtualMachineNames'))[copyIndex('fileShareVirtualMachines')])]"
      },
      {
        "name": "graphDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfGraphDataStoreVirtualMachineNames')))]",
        "input": "[format('esri-gr-{0}', range(0, parameters('numberOfGraphDataStoreVirtualMachineNames'))[copyIndex('graphDataStoreVirtualMachines')])]"
      },
      {
        "name": "objectDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfObjectDataStoreVirtualMachines')))]",
        "input": "[format('esri-od-{0}', range(0, parameters('numberOfObjectDataStoreVirtualMachines'))[copyIndex('objectDataStoreVirtualMachines')])]"
      },
      {
        "name": "portalVirtualMachines",
        "count": "[length(range(0, parameters('numberOfPortalVirtualMachines')))]",
        "input": "[format('esri-pr-{0}', range(0, parameters('numberOfPortalVirtualMachines'))[copyIndex('portalVirtualMachines')])]"
      },
      {
        "name": "serverVirtualMachines",
        "count": "[length(range(0, parameters('numberOfEsriServers')))]",
        "input": "[format('esri-sv-{0}', range(0, parameters('numberOfEsriServers'))[copyIndex('serverVirtualMachines')])]"
      },
      {
        "name": "spatiotemporalBigDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfEsrispatiotemporalBigDataStoreVirtualMachines')))]",
        "input": "[format('esri-sp-{0}', range(0, parameters('numberOfEsrispatiotemporalBigDataStoreVirtualMachines'))[copyIndex('spatiotemporalBigDataStoreVirtualMachines')])]"
      },
      {
        "name": "tileCacheDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfTileCacheDataStoreVirtualMachineNames')))]",
        "input": "[format('esri-tc-{0}', range(0, parameters('numberOfTileCacheDataStoreVirtualMachineNames'))[copyIndex('tileCacheDataStoreVirtualMachines')])]"
      }
    ],
    "$fxv#0": "eyJNeUVzcmkiOnsidmVyc2lvbiI6IjExLjEiLCJkZWZpbml0aW9ucyI6eyJ1c2VyVHlwZXMiOlt7ImlkIjoiY3JlYXRvclVUIiwibmFtZSI6IkNyZWF0b3IiLCJkZXNjcmlwdGlvbiI6IkNyZWF0b3IiLCJsZXZlbCI6IjIiLCJpc0VzcmlEZWZhdWx0Ijp0cnVlLCJhcHBzIjpbeyJpc0FwcEJ1bmRsZSI6ZmFsc2UsImlkIjoicnVudGltZXN0YW5kYXJkIiwiZW50aXRsZW1lbnRzIjpbInJ1bnRpbWVzdGFuZGFyZCJdfSx7ImlzQXBwQnVuZGxlIjp0cnVlLCJpZCI6Im9mZmljZUFwcHNBQiIsImVudGl0bGVtZW50cyI6W119LHsiaXNBcHBCdW5kbGUiOnRydWUsImlkIjoiZXNzZW50aWFsQXBwc0FCIiwiZW50aXRsZW1lbnRzIjpbXX0seyJpc0FwcEJ1bmRsZSI6dHJ1ZSwiaWQiOiJmaWVsZEFwcHNBQiIsImVudGl0bGVtZW50cyI6W119XX1dLCJhcHBCdW5kbGVzIjpbeyJuYW1lIjoiT2ZmaWNlIEFwcHMiLCJkZXNjcmlwdGlvbiI6Ik9mZmljZSBBcHBzIiwiYXBwQnVuZGxlSXRlbUlkIjoib2ZmaWNlQXBwc0FCIiwiYXBwcyI6W3siaWQiOiJtYXBzZm9yT2ZmaWNlIiwiZW50aXRsZW1lbnRzIjpbIm1hcHNmb3JPZmZpY2UiXX0seyJpZCI6Im1hcHNmb3JTaGFyZXBvaW50IiwiZW50aXRsZW1lbnRzIjpbIm1hcHNmb3JTaGFyZXBvaW50Il19XX0seyJuYW1lIjoiRXNzZW50aWFsIEFwcHMiLCJkZXNjcmlwdGlvbiI6IkVzc2VudGlhbCBBcHBzIiwiYXBwQnVuZGxlSXRlbUlkIjoiZXNzZW50aWFsQXBwc0FCIiwiYXBwcyI6W3siaWQiOiJhcmNnaXNhZG9iZWNjIiwiZW50aXRsZW1lbnRzIjpbImFyY2dpc2Fkb2JlY2MiXX0seyJpZCI6ImFyY2dpc3Bvd2VyYmkiLCJlbnRpdGxlbWVudHMiOlsiYXJjZ2lzcG93ZXJiaSJdfSx7ImlkIjoiUXVpY2tDYXB0dXJlV2ViRGVzaWduZXIiLCJlbnRpdGxlbWVudHMiOlsiUXVpY2tDYXB0dXJlV2ViRGVzaWduZXIiXX0seyJpZCI6ImV4cGVyaWVuY2VCdWlsZGVyIiwiZW50aXRsZW1lbnRzIjpbImV4cGVyaWVuY2VCdWlsZGVyIl19LHsiaWQiOiJhcmNnaXNzdG9yeW1hcHMiLCJlbnRpdGxlbWVudHMiOlsiYXJjZ2lzc3RvcnltYXBzIl19LHsiaWQiOiJIdWJmb3JBcmNHSVMiLCJlbnRpdGxlbWVudHMiOlsiSHViZm9yQXJjR0lTIl19LHsiaWQiOiJ3ZWJhcHBidWlsZGVyIiwiZW50aXRsZW1lbnRzIjpbIndlYmFwcGJ1aWxkZXIiXX0seyJpZCI6InN0b3J5bWFwcyIsImVudGl0bGVtZW50cyI6WyJzdG9yeW1hcHMiXX0seyJpZCI6ImFwcHN0dWRpbyIsImVudGl0bGVtZW50cyI6WyJhcHBzdHVkaW8iXX0seyJpZCI6Im9wc2Rhc2hib2FyZCIsImVudGl0bGVtZW50cyI6WyJvcHNkYXNoYm9hcmQiXX0seyJpZCI6Im9yZ3dlYnNpdGUiLCJlbnRpdGxlbWVudHMiOlsib3Jnd2Vic2l0ZSJdfSx7ImlkIjoiZGFzaGJvYXJkcyIsImVudGl0bGVtZW50cyI6WyJkYXNoYm9hcmRzIl19LHsiaWQiOiJhcmNnaXN3ZWJBcHBzIiwiZW50aXRsZW1lbnRzIjpbImluc3RhbnRhcHBzIiwic2NlbmVWaWV3ZXIiLCJtYXBWaWV3ZXIiLCJwcmVzZW50YXRpb25BcHAiLCJhY3Rpdml0eURhc2hib2FyZCIsInRlbXBsYXRlcyJdfV19LHsibmFtZSI6IkZpZWxkIEFwcHMiLCJkZXNjcmlwdGlvbiI6IkZpZWxkIEFwcHMiLCJhcHBCdW5kbGVJdGVtSWQiOiJmaWVsZEFwcHNBQiIsImFwcHMiOlt7ImlkIjoiZmllbGRtYXBzIiwiZW50aXRsZW1lbnRzIjpbImZpZWxkbWFwcyJdfSx7ImlkIjoid29ya2ZvcmNlIiwiZW50aXRsZW1lbnRzIjpbIndvcmtmb3JjZSJdfSx7ImlkIjoiY29sbGVjdG9yIiwiZW50aXRsZW1lbnRzIjpbImNvbGxlY3RvciJdfSx7ImlkIjoic3VydmV5MTIzIiwiZW50aXRsZW1lbnRzIjpbInN1cnZleTEyMyJdfSx7ImlkIjoiUXVpY2tDYXB0dXJlIiwiZW50aXRsZW1lbnRzIjpbIlF1aWNrQ2FwdHVyZSJdfV19XX0sInByb3Zpc2lvbiI6eyJleHRlbnNpb25zIjpbXSwidXNlclR5cGVzIjpbeyJpZCI6ImNyZWF0b3JVVCIsIm1heFVzZXJzIjoxLCJzdGFydERhdGUiOjE2OTExMDcyMDAwMDAsImFwcHMiOm51bGx9LHsiaWQiOiJjcmVhdG9yVVQiLCJtYXhVc2VycyI6MCwic3RhcnREYXRlIjoxNzE3NDU5MjAwMDAwLCJhcHBzIjpudWxsfV0sImFwcEJ1bmRsZXMiOltdLCJhcHBzIjpbXX0sInBvcnRhbENhcGFiaWxpdGllcyI6W10sImxpY2Vuc2VNYW5hZ2VtZW50IjpudWxsLCJmaWxlSWQiOjQyNzY1Mn0sInNpZ25hdHVyZSI6Im9jZ2NQd1poajlpVVFkTnZVc0hJaFkrNCtRb0RMcUhlZ1kvRWdaMFVKRnJwcDArRmRZUU5meGNRelJMOG9MdWcwQ0trNXVJREdlZlFCczhTZVBqSm84Y2JlZDd1VE9ibHhEZjhoWXRPOTU3SkRvU1hDWU5zOWVRVCtISGY1K0YwbFpwbkhLaFFXZ0RWQVUwK1VibXB0RGRFbUZQTk9mM1g4MUlIdktYYmVBQT0ifQ==",
    "$fxv#1": "Ly8gQXJjR0lTR0lTU2VydmVyQWR2YW5jZWRfQXJjR0lTU2VydmVyXzEzNTc4NTQucHJ2Yw0KDQovL1Byb3Zpc2lvbg0KUHJvdmlzaW9uIElEPTExMjcxOUEwLUQ0NDItNDI1NC1CQTBDM0YxRDA1NzQ0RDE1DQpDb21tZW50PQ0KDQoNCi8vIFVzZXIgSW5mb3JtYXRpb24NCkZpcnN0IE5hbWU9TWF0dA0KTGFzdCBOYW1lPUhhbGxlbmJvcmcNCk9yZ2FuaXphdGlvbj1NaWNyb3NvZnQgQ29ycA0KRGVwYXJ0bWVudD1TdXBwbHkgQ2hhaW4gJiBFbmVyZ3kgRGVwdA0KRW1haWw9bWhhbGxlbmJvcmdAbWljcm9zb2Z0LmNvbQ0KQWRkcmVzcyAxPTEgTWljcm9zb2Z0IFdheQ0KQ2l0eT1SZWRtb25kDQpTdGF0ZS9Qcm92aW5jZT1XQQ0KTG9jYXRpb24gQ29kZT1VUw0KTG9jYXRpb249VVMNClppcC9Qb3N0YWwgQ29kZT05ODA1Mi04MzAwDQpQaG9uZSBOdW1iZXI9KzEgKDc4MSkgNDY0MTQzMA0KLy8gVmVyc2lvbj0xMS4xDQoNCi8vIEZlYXR1cmVzIGFuZCBhdXRob3JpemF0aW9uIG51bWJlcnMNCkFyY0dJUyBTZXJ2ZXI9RUNQMDExMTM3OTM2DQo=",
    "applicationGatewayName": "[format('appgw-esri-{0}', parameters('resourceSuffix'))]",
    "availabilitySetName": "[format('avset-esri-{0}', parameters('resourceSuffix'))]",
    "container": "artifacts",
    "dataStoreVirtualMachineNames": "[join(variables('dataStoreVirtualMachines'), ',')]",
    "dscDataStoreFunction": "DataStoreConfiguration",
    "dscPortalFunction": "PortalConfiguration",
    "dscServerScriptFunction": "ServerConfiguration",
    "dscSingleTierConfiguration": "BaseDeploymentSingleTierConfiguration",
    "dscsSatiotemporalBigDataStoreFunction": "SpatiotemporalBigDataStoreConfiguration",
    "fileShareDscScriptFunction": "FileShareConfiguration",
    "fileShareVirtualMachineName": "[join(variables('fileShareVirtualMachines'), ',')]",
    "keyVaultCertificatesOfficer": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
    "keyVaultName": "[format('kv-esri-{0}', parameters('resourceSuffix'))]",
    "keyVaultSecretsOfficer": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
    "networkInterfaceName": "[format('nic-esri-{0}', parameters('resourceSuffix'))]",
    "portalContext": "portal",
    "portalLicenseFileName": "ArcGIS_Enterprise_Portal_111_427652_20230804.json",
    "portalVirtualMachineNames": "[join(variables('portalVirtualMachines'), ',')]",
    "privatelink_blob_name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
    "privatelink_keyvaultDns_name": "[replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore')]",
    "publicIpAddressName": "[format('pip-esri-{0}', parameters('resourceSuffix'))]",
    "resourceGroupName": "[format('rg-esri-{0}', parameters('resourceSuffix'))]",
    "serverContext": "server",
    "serverLicenseFileName": "ArcGISGISServerAdvanced_ArcGISServer_1357854.prvc",
    "serverVirtualMachineNames": "[join(variables('serverVirtualMachines'), ',')]",
    "spatiotemporalBigDataStoreVirtualMachineNames": "[join(variables('spatiotemporalBigDataStoreVirtualMachines'), ',')]",
    "subscriptionId": "[subscription().subscriptionId]",
    "userAssignedManagedIdentityName": "[format('uami-esri-{0}', parameters('resourceSuffix'))]",
    "virtualMachineName": "[format('vm-esri-{0}', parameters('resourceSuffix'))]",
    "virtualNetworkName": "[format('vnet-esri-{0}', parameters('resourceSuffix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('resource-group-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('resourceGroupName')]"
          },
          "tags": "[if(contains(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject('value', parameters('tags')['Microsoft.Resources/resourceGroups']), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "11178565106565234598"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2019-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('userAssignedManagedIdentityName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "17398199403731213097"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject())]"
            }
          ],
          "outputs": {
            "clientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('storage-account-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerName": {
            "value": "[variables('container')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "blobsPrivateDnsZoneResourceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/privateDnsZones', variables('privatelink_blob_name'))]"
          },
          "resourcePrefix": {
            "value": "[parameters('resourceSuffix')]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "useCloudStorage": {
            "value": "[parameters('useCloudStorage')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "14515823561639240223"
            }
          },
          "parameters": {
            "containerName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "storageSKU": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ]
            },
            "tags": {
              "type": "object"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            },
            "blobsPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "fileShareName": {
              "type": "string",
              "defaultValue": "fileshare"
            },
            "useCloudStorage": {
              "type": "bool"
            }
          },
          "variables": {
            "uniqueStorageName": "[take(format('{0}', uniqueString(resourceGroup().id)), 10)]",
            "zones": [
              "[parameters('blobsPrivateDnsZoneResourceId')]"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}esri', variables('uniqueStorageName'))]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Storage/storageAccounts'), parameters('tags')['Microsoft.Storage/storageAccounts'], createObject())]",
              "sku": {
                "name": "[parameters('storageSKU')]"
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "allowBlobPublicAccess": false,
                "allowCrossTenantReplication": false,
                "allowedCopyScope": "PrivateLink",
                "allowSharedKeyAccess": true,
                "defaultToOAuthAuthentication": false,
                "dnsEndpointType": "Standard",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Allow"
                },
                "publicNetworkAccess": "enabled",
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', format('{0}esri', variables('uniqueStorageName')), 'default')]",
              "properties": {
                "protocolSettings": {
                  "smb": {}
                },
                "cors": {
                  "corsRules": []
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}esri', variables('uniqueStorageName')))]"
              ]
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/queueServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', format('{0}esri', variables('uniqueStorageName')), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}esri', variables('uniqueStorageName')))]"
              ]
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/tableServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', format('{0}esri', variables('uniqueStorageName')), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}esri', variables('uniqueStorageName')))]"
              ]
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', format('{0}esri', variables('uniqueStorageName')), 'default', parameters('fileShareName'))]",
              "properties": {
                "accessTier": "TransactionOptimized",
                "shareQuota": 5120,
                "enabledProtocols": "SMB"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', format('{0}esri', variables('uniqueStorageName')), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/{1}', format('{0}esri', variables('uniqueStorageName')), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}esri', variables('uniqueStorageName')))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/{1}/{2}', format('{0}esri', variables('uniqueStorageName')), 'default', parameters('containerName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('{0}esri', variables('uniqueStorageName')), 'default')]"
              ]
            },
            {
              "copy": {
                "name": "privateEndpoints",
                "count": "[length(variables('zones'))]"
              },
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-{1}', replace(format('{0}esri', variables('uniqueStorageName')), parameters('resourcePrefix'), format('{0}-pe-', parameters('resourcePrefix'))), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('{0}-{1}', replace(format('{0}esri', variables('uniqueStorageName')), parameters('resourcePrefix'), format('{0}-nic-', parameters('resourcePrefix'))), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-{1}', replace(format('{0}esri', variables('uniqueStorageName')), parameters('resourcePrefix'), format('{0}-nic-', parameters('resourcePrefix'))), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}esri', variables('uniqueStorageName')))]",
                      "groupIds": [
                        "[split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]]"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}esri', variables('uniqueStorageName')))]"
              ]
            },
            {
              "copy": {
                "name": "privateDnsZoneGroups",
                "count": "[length(variables('zones'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', format('{0}-{1}', replace(format('{0}esri', variables('uniqueStorageName')), parameters('resourcePrefix'), format('{0}-pe-', parameters('resourcePrefix'))), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]), format('{0}esri', variables('uniqueStorageName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateDnsZoneId": "[variables('zones')[copyIndex()]]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', replace(format('{0}esri', variables('uniqueStorageName')), parameters('resourcePrefix'), format('{0}-pe-', parameters('resourcePrefix'))), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]))]",
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}esri', variables('uniqueStorageName')))]"
              ]
            }
          ],
          "outputs": {
            "storageEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', format('{0}esri', variables('uniqueStorageName'))), '2023-01-01').primaryEndpoints.blob]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[format('{0}esri', variables('uniqueStorageName'))]"
            },
            "cloudStorageAccountCredentialsUserName": {
              "type": "string",
              "value": "[format('{0}{1}', format('{0}esri', variables('uniqueStorageName')), replace(split(reference(resourceId('Microsoft.Storage/storageAccounts', format('{0}esri', variables('uniqueStorageName'))), '2023-01-01').primaryEndpoints.blob, format('https://{0}', format('{0}esri', variables('uniqueStorageName'))))[1], '/', ''))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('virtual-network-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationGatewayName": {
            "value": "[variables('applicationGatewayName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceGroup": {
            "value": "[variables('resourceGroupName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualNetworkName": {
            "value": "[variables('virtualNetworkName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "13054350384353126191"
            }
          },
          "parameters": {
            "applicationGatewayName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceGroup": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "virtualNetworkName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-04-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/virtualNetworks'), parameters('tags')['Microsoft.Network/virtualNetworks'], createObject())]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "172.0.0.0/16"
                  ]
                },
                "subnets": [
                  {
                    "name": "default",
                    "properties": {
                      "addressPrefix": "172.0.0.0/24",
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                  },
                  {
                    "name": "appGatewaySubnet",
                    "properties": {
                      "addressPrefix": "172.0.1.0/28",
                      "applicationGatewayIPConfigurations": [
                        {
                          "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/gatewayIPConfigurations', parameters('applicationGatewayName'), 'appGatewayIpConfig')]"
                        }
                      ],
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets"
                  }
                ],
                "virtualNetworkPeerings": [],
                "enableDdosProtection": false
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), 'appGatewaySubnet')]",
              "properties": {
                "addressPrefix": "172.0.1.0/28",
                "applicationGatewayIPConfigurations": [
                  {
                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/gatewayIPConfigurations', parameters('applicationGatewayName'), 'appGatewayIpConfig')]"
                  }
                ],
                "delegations": [],
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), 'default')]",
              "properties": {
                "addressPrefix": "172.0.0.0/24",
                "delegations": [],
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
              ]
            }
          ],
          "outputs": {
            "subnetResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'default')]"
            },
            "vNetid": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            },
            "vNetName": {
              "type": "string",
              "value": "[parameters('virtualNetworkName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('public-ip-address-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hostname": {
            "value": "[parameters('externalDnsHostnamePrefix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publicIpAddressName": {
            "value": "[variables('publicIpAddressName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "publicIpAllocationMethod": {
            "value": "Static"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "6179697160012144824"
            }
          },
          "parameters": {
            "hostname": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "publicIpAddressName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "publicIpAllocationMethod": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2023-04-01",
              "name": "[parameters('publicIpAddressName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/publicIPAddresses'), parameters('tags')['Microsoft.Network/publicIPAddresses'], createObject())]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]",
                "idleTimeoutInMinutes": 11,
                "dnsSettings": {
                  "domainNameLabel": "[parameters('hostname')]",
                  "fqdn": "[parameters('hostname')]"
                },
                "ipTags": []
              }
            }
          ],
          "outputs": {
            "pipFqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName')), '2023-04-01').dnsSettings.fqdn]"
            },
            "pipIp": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName')), '2023-04-01').ipAddress]"
            },
            "pipId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
            },
            "pipName": {
              "type": "string",
              "value": "[parameters('publicIpAddressName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('avset-server-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "availabilitySetName": {
            "value": "av-set-server"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "6084140178254085459"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('avset-portal-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "availabilitySetName": {
            "value": "av-set-portal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "6084140178254085459"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('avset-datastore-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "availabilitySetName": {
            "value": "av-set-datastore"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "6084140178254085459"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('avset-spatiotemporal-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "availabilitySetName": {
            "value": "av-set-spatiotemporal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "6084140178254085459"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('avset-tilecache-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "availabilitySetName": {
            "value": "av-set-tilecache"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "6084140178254085459"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('avset-graph-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "availabilitySetName": {
            "value": "av-set-graph"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "6084140178254085459"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('avset-odata-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "availabilitySetName": {
            "value": "av-set-odata"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "6084140178254085459"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'singletier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('virtual-machine-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": "[variables('availabilitySetName')]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[variables('networkInterfaceName')]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "singletier"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('virtualMachineName')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "11879991564850804226"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(not(equals(parameters('serverFunction'), 'fileshare')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', parameters('windowsDomainName'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierServerVirtualMachines",
        "count": "[length(variables('serverVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('esri-server-{0}', copyIndex())]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-server-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('serverVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "server"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('serverVirtualMachines')[copyIndex()]]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "11879991564850804226"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(not(equals(parameters('serverFunction'), 'fileshare')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', parameters('windowsDomainName'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-server-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierPortalVirtualMachines",
        "count": "[length(variables('portalVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('esri-portal-{0}', copyIndex())]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-portal-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('portalVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "portal"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('portalVirtualMachines')[copyIndex()]]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "11879991564850804226"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(not(equals(parameters('serverFunction'), 'fileshare')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', parameters('windowsDomainName'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-portal-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierDatastoreServerVirtualMachines",
        "count": "[length(variables('dataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('esri-datastore-{0}', copyIndex())]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-datastore-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('dataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "datastore"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('dataStoreVirtualMachines')[copyIndex()]]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "11879991564850804226"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(not(equals(parameters('serverFunction'), 'fileshare')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', parameters('windowsDomainName'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-datastore-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierFileServerVirtualMachines",
        "count": "[length(variables('fileShareVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('esri-fileserver-{0}', copyIndex())]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": ""
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('fileShareVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "fileshare"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('fileShareVirtualMachines')[copyIndex()]]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "11879991564850804226"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(not(equals(parameters('serverFunction'), 'fileshare')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', parameters('windowsDomainName'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierSpatiotemporalBigDataStoreVirtualMachines",
        "count": "[length(variables('spatiotemporalBigDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('esri-spatiotemporal-{0}', copyIndex())]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-spatiotemporal-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "spatiotemporal"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()]]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "11879991564850804226"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(not(equals(parameters('serverFunction'), 'fileshare')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', parameters('windowsDomainName'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-spatiotemporal-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierTileCacheVirtualMachines",
        "count": "[length(variables('tileCacheDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('esri-tilecache-{0}', copyIndex())]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-tilecache-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('tileCacheDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "tilecache"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('tileCacheDataStoreVirtualMachines')[copyIndex()]]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "11879991564850804226"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(not(equals(parameters('serverFunction'), 'fileshare')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', parameters('windowsDomainName'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-tilecache-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierGraphVirtualMachines",
        "count": "[length(variables('graphDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('esri-graph-{0}', copyIndex())]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-graph-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('graphDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "graph"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('graphDataStoreVirtualMachines')[copyIndex()]]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "11879991564850804226"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(not(equals(parameters('serverFunction'), 'fileshare')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', parameters('windowsDomainName'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-graph-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierObjectDataStoreVirtualMachines",
        "count": "[length(variables('objectDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('esri-odata-{0}', copyIndex())]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-odata-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('objectDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "objectDataStore"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('objectDataStoreVirtualMachines')[copyIndex()]]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "11879991564850804226"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(not(equals(parameters('serverFunction'), 'fileshare')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', parameters('windowsDomainName'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('avset-odata-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('key-vault-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "domainJoinPassword": "[if(parameters('joinWindowsDomain'), createObject('value', parameters('windowsDomainAdministratorPassword')), createObject('value', 'None'))]",
          "domainJoinUserPrincipalName": "[if(parameters('joinWindowsDomain'), createObject('value', parameters('windowsDomainAdministratorUserName')), createObject('value', 'None'))]",
          "keyVaultCertificatesOfficerRoleDefinitionResourceId": {
            "value": "[variables('keyVaultCertificatesOfficer')]"
          },
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "keyVaultSecretsOfficerRoleDefinitionResourceId": {
            "value": "[variables('keyVaultSecretsOfficer')]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "primarySiteAdministratorAccountPassword": {
            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
          },
          "primarySiteAdministratorAccountUserName": {
            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "keyVaultPrivateDnsZoneResourceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/privateDnsZones', variables('privatelink_keyvaultDns_name'))]"
          },
          "resourcePrefix": {
            "value": "[parameters('resourceSuffix')]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "13800721472514889579"
            }
          },
          "parameters": {
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "securestring"
            },
            "keyVaultCertificatesOfficerRoleDefinitionResourceId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultSecretsOfficerRoleDefinitionResourceId": {
              "type": "string"
            },
            "localAdministratorPassword": {
              "type": "securestring"
            },
            "localAdministratorUsername": {
              "type": "securestring"
            },
            "location": {
              "type": "string"
            },
            "primarySiteAdministratorAccountPassword": {
              "type": "securestring"
            },
            "primarySiteAdministratorAccountUserName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "keyVaultPrivateDnsZoneResourceId": {
              "type": "string"
            }
          },
          "variables": {
            "Secrets": [
              {
                "name": "DomainJoinPassword",
                "value": "[parameters('domainJoinPassword')]"
              },
              {
                "name": "DomainJoinUserPrincipalName",
                "value": "[parameters('domainJoinUserPrincipalName')]"
              },
              {
                "name": "LocalAdministratorPassword",
                "value": "[parameters('localAdministratorPassword')]"
              },
              {
                "name": "LocalAdministratorUsername",
                "value": "[parameters('localAdministratorUsername')]"
              },
              {
                "name": "PrimarySiteAdministratorAccountUserName",
                "value": "[parameters('primarySiteAdministratorAccountUserName')]"
              },
              {
                "name": "PrimarySiteAdministratorAccountPassword",
                "value": "[parameters('primarySiteAdministratorAccountPassword')]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-10-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": false,
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "networkAcls": {
                  "bypass": "AzureServices"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[replace(parameters('keyVaultName'), parameters('resourcePrefix'), format('{0}-pe', parameters('resourcePrefix')))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[replace(parameters('keyVaultName'), parameters('resourcePrefix'), format('{0}-nic', parameters('resourcePrefix')))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[replace(parameters('keyVaultName'), parameters('resourcePrefix'), format('{0}-nic', parameters('resourcePrefix')))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                      "groupIds": [
                        "vault"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', replace(parameters('keyVaultName'), parameters('resourcePrefix'), format('{0}-pe', parameters('resourcePrefix'))), parameters('keyVaultName'))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', replace(parameters('keyVaultName'), parameters('resourcePrefix'), format('{0}-pe', parameters('resourcePrefix'))))]"
              ]
            },
            {
              "copy": {
                "name": "secrets",
                "count": "[length(variables('Secrets'))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('Secrets')[copyIndex()].name)]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
              "properties": {
                "value": "[variables('Secrets')[copyIndex()].value]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('keyVaultSecretsOfficerRoleDefinitionResourceId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('keyVaultSecretsOfficerRoleDefinitionResourceId')]",
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('keyVaultCertificatesOfficerRoleDefinitionResourceId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('keyVaultCertificatesOfficerRoleDefinitionResourceId')]",
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2021-10-01').vaultUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('role-assignment-01-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "7643159478700486253"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('role-assignment-02-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "3444926648128925089"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('resourceGroupName'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('artifacts-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerName": {
            "value": "[variables('container')]"
          },
          "identityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "portalLicenseFile": {
            "value": "[parameters('portalLicenseFile')]"
          },
          "portalLicenseFileName": {
            "value": "[variables('portalLicenseFileName')]"
          },
          "serverLicenseFile": {
            "value": "[parameters('serverLicenseFile')]"
          },
          "serverLicenseFileName": {
            "value": "[variables('serverLicenseFileName')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "15591137024821901344"
            }
          },
          "parameters": {
            "containerName": {
              "type": "string"
            },
            "identityId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "portalLicenseFile": {
              "type": "string"
            },
            "portalLicenseFileName": {
              "type": "string"
            },
            "serverLicenseFile": {
              "type": "string"
            },
            "serverLicenseFileName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "utcValue": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            }
          },
          "variables": {
            "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "licenseFiles",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('identityId'))]": {}
                }
              },
              "kind": "AzurePowerShell",
              "properties": {
                "arguments": "[format('-Location {0} -portalLicensefile {1} -portalLicenseFileName {2} -serverLicenseFileName {3} -serverLicensefile {4} -StorageAccountName {5} -ContainerName {6} -utcValue {7}', parameters('location'), parameters('portalLicenseFile'), parameters('portalLicenseFileName'), parameters('serverLicenseFileName'), parameters('serverLicenseFile'), parameters('storageAccountName'), parameters('containerName'), parameters('utcValue'))]",
                "environmentVariables": [],
                "containerSettings": {},
                "forceUpdateTag": "[parameters('utcValue')]",
                "azPowerShellVersion": "8.3",
                "timeout": "PT30M",
                "scriptContent": "        param(\r\n        [string]$ContainerName,\r\n        [string]$PortalLicensefile,\r\n        [string]$PortalLicenseFileName,\r\n        [string]$ServerLicensefile,\r\n        [string]$ServerLicenseFileName,\r\n        [string]$StorageAccountName\r\n      )\r\n      New-Item -ItemType File $portalLicenseFileName\r\n      New-Item -ItemType File $serverLicenseFileName\r\n      $plf = \"/mnt/azscripts/azscriptinput/$portalLicenseFileName\"\r\n      $slf = \"/mnt/azscripts/azscriptinput/$serverLicenseFileName\"\r\n      $portalLicense = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($portalLicensefile))\r\n      $portalLicense | Out-File $plf\r\n      $serverLicense = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($serverLicensefile))\r\n      $serverLicense | Out-File $slf\r\n      # upload blobs to container using managed identity assigned to deployment script\r\n      $ctx = New-AzStorageContext -StorageAccountName $storageAccountName -UseConnectedAccount\r\n      Set-AzStorageBlobContent -File $plf -Container $containerName -Blob $portalLicenseFileName -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File $slf -Container $containerName -Blob $serverLicenseFileName -Context $ctx -Force\r\n    ",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "createAddCertificate",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Resources/deploymentScripts'), parameters('tags')['Microsoft.Resources/deploymentScripts'], createObject())]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('identityId'))]": {}
                }
              },
              "kind": "AzurePowerShell",
              "properties": {
                "arguments": "[format('-Location {0} -KeyVaultName {1} -StorageAccountName {2} -ContainerName {3} -CloudSuffix {4} -utcValue {5}', parameters('location'), parameters('keyVaultName'), parameters('storageAccountName'), parameters('containerName'), variables('cloudSuffix'), parameters('utcValue'))]",
                "environmentVariables": [],
                "containerSettings": {},
                "forceUpdateTag": "[parameters('utcValue')]",
                "azPowerShellVersion": "8.3",
                "timeout": "PT30M",
                "scriptContent": "        param(\r\n        [string]$ContainerName,\r\n        [string]$KeyVaultName,\r\n        [string]$Location,\r\n        [string]$StorageAccountName,\r\n        [string]$CloudSuffix\r\n      )\r\n      # download required files from ESRI github repo\r\n      Invoke-WebRequest https://github.com/Esri/arcgis-azure-templates/raw/main/Releases/11.1/DSC.zip -OutFile ./DSC.zip\r\n      Invoke-WebRequest https://github.com/Esri/arcgis-azure-templates/raw/main/Releases/11.1/GenerateSSLCerts.ps1 -OutFile ./GenerateSSLCerts.ps1\r\n      #Invoke-WebRequest https://github.com/Esri/arcgis-azure-templates/raw/main/SelfSignedCertificates/wildcard.${location}.cloudapp.usgovcloudapi.net.pfx -OutFile ./wildcard.usgovvirginia.cloudapp.usgovcloudapi.net.pfx\r\n      Invoke-WebRequest https://github.com/mikedzikowski/testcert/raw/main/wildcard_mikedzikowski_com.pfx -OutFile ./wildcard_mikedzikowski_com.pfx\r\n      \r\n      # import self-signed certificate into key vault\r\n      $file = \"wildcard_mikedzikowski_com.pfx\"\r\n      $password = ConvertTo-SecureString -String \"miked123\" -AsPlainText -Force\r\n      $cert = Get-Content ./wildcard_mikedzikowski_com.pfx -AsByteStream\r\n      $base64String = ([System.Convert]::ToBase64String($Cert))\r\n      Import-AzKeyVaultCertificate -VaultName $keyVaultName -FilePath ./wildcard_mikedzikowski_com.pfx -Name \"pfx$location\" -Password $password\r\n      Start-Sleep 10\r\n      # export Azure Key Vault certificate to .cer file\r\n      $azKeyVaultCert = Get-AzKeyVaultCertificate -VaultName $keyVaultName -Name \"pfx$location\"\r\n      Write-Output $azKeyVaultCert\r\n      $azKeyVaultCertBytes = $azKeyVaultCert.Certificate.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert)\r\n      Write-Output $azKeyVaultCertBytes\r\n      $certificateName = \"wildcardesri.mikedzikowski.com-PublicKey.cer\"\r\n      Write-Output $certificateName\r\n      $cerCertFile = \"/mnt/azscripts/azscriptinput/$certificateName\"\r\n      Write-Output $cerCertFile\r\n      [System.IO.File]::WriteAllBytes($cerCertFile, $azKeyVaultCertBytes)\r\n      if((Test-Path -Path $cerCertFile) -eq $true)\r\n      {\r\n          Write-Host \"Exported certificate to file - $certificateName\"\r\n      }\r\n      else {\r\n          Write-Host \"Public key was not exported\"\r\n      }\r\n      # upload blobs to container using managed identity assigned to deployment script\r\n      $ctx = New-AzStorageContext -StorageAccountName $storageAccountName -UseConnectedAccount\r\n      Set-AzStorageBlobContent -File $certificateName -Container $containerName -Blob $certificateName -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File ./DSC.zip -Container $containerName -Blob DSC.zip -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File ./wildcard_mikedzikowski_com.pfx -Container $containerName -Blob \"wildcard_mikedzikowski_com.pfx\" -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File ./GenerateSSLCerts.ps1 -Container $containerName -Blob GenerateSSLCerts.ps1 -Context $ctx -Force\r\n      $DeploymentScriptOutputs = @{}\r\n      $DeploymentScriptOutputs['text'] = $Base64String\r\n    ",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
              }
            }
          ],
          "outputs": {
            "frontendCertificate": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'createAddCertificate'), '2020-10-01').outputs.text]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "multiTierFileServerVirtualMachines",
        "multiTierPortalVirtualMachines",
        "multiTierServerVirtualMachines",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('role-assignment-01-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('role-assignment-02-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-machine-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('certificates-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "fileUri": {
            "value": "[format('{0}{1}/GenerateSSLCerts.ps1', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "portalInternalCertificateFileName": {
            "value": ""
          },
          "portalVirtualMachineNames": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('portalVirtualMachineNames')))]",
          "serverInternalCertificateFileName": {
            "value": ""
          },
          "serverVirtualMachineNames": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('serverVirtualMachineNames')))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualMachineName": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('fileShareVirtualMachineName')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "102982320520446907"
            }
          },
          "parameters": {
            "fileShareName": {
              "type": "string",
              "defaultValue": "fileshare"
            },
            "fileUri": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object"
            },
            "timestamp": {
              "type": "string",
              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
            },
            "useSelfSignedInternalSSLCertificate": {
              "type": "bool",
              "defaultValue": true
            },
            "virtualMachineName": {
              "type": "string"
            },
            "serverVirtualMachineNames": {
              "type": "string"
            },
            "portalVirtualMachineNames": {
              "type": "string"
            },
            "serverInternalCertificateFileName": {
              "type": "string"
            },
            "portalInternalCertificateFileName": {
              "type": "string"
            }
          },
          "variables": {
            "selfSignedSSLCertificatePassword": "miked123"
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.10",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "timestamp": "[parameters('timestamp')]"
                },
                "protectedSettings": {
                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File .\\GenerateSSLCerts.ps1 -ServerMachineNames \"{0}\" -PortalMachineNames \"{1}\" -FileShareName \"{2}\" {3}', parameters('serverVirtualMachineNames'), parameters('portalVirtualMachineNames'), parameters('fileShareName'), if(parameters('useSelfSignedInternalSSLCertificate'), format('-UseInternalSelfSignedCertificate -CertificatePassword {0}', variables('selfSignedSSLCertificatePassword')), format('-ServerInternalCertificateFileName \"{0}\" -PortalInternalCertificateFileName \"{1}\"', if(empty(parameters('serverInternalCertificateFileName')), '', parameters('serverInternalCertificateFileName')), if(empty(parameters('portalInternalCertificateFileName')), '', parameters('portalInternalCertificateFileName')))))]",
                  "fileUris": [
                    "[parameters('fileUri')]"
                  ],
                  "managedIdentity": {}
                }
              }
            }
          ],
          "outputs": {
            "vmId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
            },
            "serverBackendSSLCert": {
              "type": "string",
              "value": "[split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2023-03-01').instanceView.substatuses[0].message, '###DATA###')[0]]"
            },
            "portalBackendSSLCert": {
              "type": "string",
              "value": "[split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2023-03-01').instanceView.substatuses[0].message, '###DATA###')[1]]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('artifacts-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "multiTierFileServerVirtualMachines",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('resource-group-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-machine-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('esri-multiserver-configuration-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "applicationGatewayName": {
            "value": "[variables('applicationGatewayName')]"
          },
          "arcgisServiceAccountIsDomainAccount": {
            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
          },
          "arcgisServiceAccountPassword": {
            "value": "[parameters('arcgisServiceAccountPassword')]"
          },
          "arcgisServiceAccountUserName": {
            "value": "[parameters('arcgisServiceAccountUserName')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "cloudStorageAccountCredentialsUserName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.cloudStorageAccountCredentialsUserName.value]"
          },
          "dataStoreVirtualMachineNames": {
            "value": "[variables('dataStoreVirtualMachineNames')]"
          },
          "dataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('dataStoreVirtualMachineOSDiskSize')]"
          },
          "dataStoreVirtualMachines": {
            "value": "[variables('dataStoreVirtualMachines')]"
          },
          "debugMode": {
            "value": "[parameters('debugMode')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "dscDataStoreFunction": {
            "value": "[variables('dscDataStoreFunction')]"
          },
          "dscPortalFunction": {
            "value": "[variables('dscPortalFunction')]"
          },
          "dscServerScriptFunction": {
            "value": "[variables('dscServerScriptFunction')]"
          },
          "dscSpatioTemporalFunction": {
            "value": "[variables('dscsSatiotemporalBigDataStoreFunction')]"
          },
          "enableDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableDataStoreVirtualMachineDataDisk')]"
          },
          "enableServerLogHarvesterPlugin": {
            "value": "[parameters('enableServerLogHarvesterPlugin')]"
          },
          "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk')]"
          },
          "enableVirtualMachineDataDisk": {
            "value": "[parameters('enableVirtualMachineDataDisk')]"
          },
          "externalDnsHostname": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "externalDnsHostnamePrefix": {
            "value": "[parameters('externalDnsHostnamePrefix')]"
          },
          "fileShareDscScriptFunction": {
            "value": "[variables('fileShareDscScriptFunction')]"
          },
          "fileShareVirtualMachineName": {
            "value": "[variables('fileShareVirtualMachineName')]"
          },
          "iDns": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('esri-fileserver-{0}', 0)), '2022-09-01').outputs.networkInterfaceInternalDomainNameSuffix.value]"
          },
          "isUpdatingCertificates": {
            "value": "[parameters('isUpdatingCertificates')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "keyVaultUri": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "portalBackendSslCert": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.portalBackendSSLCert.value]"
          },
          "portalContext": {
            "value": "[variables('portalContext')]"
          },
          "portalLicenseFileName": {
            "value": "[variables('portalLicenseFileName')]"
          },
          "portalLicenseUserTypeId": {
            "value": "[parameters('portalLicenseUserTypeId')]"
          },
          "portalVirtualMachineNames": {
            "value": "[variables('portalVirtualMachineNames')]"
          },
          "portalVirtualMachineOSDiskSize": {
            "value": "[parameters('portalVirtualMachineOSDiskSize')]"
          },
          "portalVirtualMachines": {
            "value": "[variables('portalVirtualMachines')]"
          },
          "primarySiteAdministratorAccountPassword": {
            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
          },
          "primarySiteAdministratorAccountUserName": {
            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
          },
          "publicIpId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('public-ip-address-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.pipId.value]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          },
          "resourceSuffix": {
            "value": "[parameters('resourceSuffix')]"
          },
          "secondaryDnsHostName": {
            "value": "[parameters('secondaryDnsHostName')]"
          },
          "serverBackendSSLCert": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.serverBackendSSLCert.value]"
          },
          "serverContext": {
            "value": "[variables('serverContext')]"
          },
          "serverLicenseFileName": {
            "value": "[variables('serverLicenseFileName')]"
          },
          "serverVirtualMachineNames": {
            "value": "[variables('serverVirtualMachineNames')]"
          },
          "serverVirtualMachines": {
            "value": "[variables('serverVirtualMachines')]"
          },
          "spatiotemporalBigDataStoreVirtualMachineNames": {
            "value": "[variables('spatiotemporalBigDataStoreVirtualMachineNames')]"
          },
          "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]"
          },
          "spatiotemporalBigDataStoreVirtualMachines": {
            "value": "[variables('spatiotemporalBigDataStoreVirtualMachines')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "storageUriPrefix": {
            "value": "[format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "useAzureFiles": {
            "value": "[parameters('useAzureFiles')]"
          },
          "useCloudStorage": {
            "value": "[parameters('useCloudStorage')]"
          },
          "userAssignedIdenityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineOSDiskSize": {
            "value": "[parameters('virtualMachineOSDiskSize')]"
          },
          "virtualNetworkId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetid.value]"
          },
          "virtualNetworkName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "86778012850878802"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "applicationGatewayName": {
              "type": "string"
            },
            "arcgisServiceAccountIsDomainAccount": {
              "type": "bool"
            },
            "arcgisServiceAccountPassword": {
              "type": "securestring"
            },
            "arcgisServiceAccountUserName": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "cloudStorageAccountCredentialsUserName": {
              "type": "string"
            },
            "dataStoreVirtualMachineNames": {
              "type": "string"
            },
            "dataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "dataStoreVirtualMachines": {
              "type": "array"
            },
            "debugMode": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "dscDataStoreFunction": {
              "type": "string"
            },
            "dscPortalFunction": {
              "type": "string"
            },
            "dscServerScriptFunction": {
              "type": "string"
            },
            "dscSpatioTemporalFunction": {
              "type": "string"
            },
            "enableDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "enableServerLogHarvesterPlugin": {
              "type": "bool"
            },
            "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "enableVirtualMachineDataDisk": {
              "type": "bool"
            },
            "externalDnsHostname": {
              "type": "string"
            },
            "externalDnsHostnamePrefix": {
              "type": "string"
            },
            "fileShareDscScriptFunction": {
              "type": "string"
            },
            "fileShareVirtualMachineName": {
              "type": "string"
            },
            "iDns": {
              "type": "string"
            },
            "isUpdatingCertificates": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "portalBackendSslCert": {
              "type": "string"
            },
            "portalContext": {
              "type": "string"
            },
            "portalLicenseFileName": {
              "type": "string"
            },
            "portalLicenseUserTypeId": {
              "type": "string"
            },
            "portalVirtualMachineNames": {
              "type": "string"
            },
            "portalVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "portalVirtualMachines": {
              "type": "array"
            },
            "primarySiteAdministratorAccountPassword": {
              "type": "securestring"
            },
            "primarySiteAdministratorAccountUserName": {
              "type": "string"
            },
            "publicIpId": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "resourceSuffix": {
              "type": "string"
            },
            "secondaryDnsHostName": {
              "type": "string"
            },
            "serverBackendSSLCert": {
              "type": "string"
            },
            "serverContext": {
              "type": "string"
            },
            "serverLicenseFileName": {
              "type": "string"
            },
            "serverVirtualMachineNames": {
              "type": "string"
            },
            "serverVirtualMachines": {
              "type": "array"
            },
            "spatiotemporalBigDataStoreVirtualMachineNames": {
              "type": "string"
            },
            "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "spatiotemporalBigDataStoreVirtualMachines": {
              "type": "array"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageUriPrefix": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]"
            },
            "tags": {
              "type": "object"
            },
            "useAzureFiles": {
              "type": "bool"
            },
            "useCloudStorage": {
              "type": "bool"
            },
            "userAssignedIdenityResourceId": {
              "type": "string"
            },
            "virtualMachineOSDiskSize": {
              "type": "int"
            },
            "virtualNetworkId": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('fileshare-dsc-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('fileShareDscScriptFunction')]"
                  },
                  "dscScript": {
                    "value": "FileShareConfiguration.ps1"
                  },
                  "enableVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "externalDNSHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalContext": {
                    "value": "[parameters('portalContext')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineOSDiskSize": {
                    "value": "[parameters('virtualMachineOSDiskSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "12851309664161664646"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enableVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "externalDNSHostName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "portalContext": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineOSDiskSize": {
                      "type": "int"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('fileShareVirtualMachineName'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "DebugMode": "[parameters('debugMode')]",
                            "EnableDataDisk": "[parameters('enableVirtualMachineDataDisk')]",
                            "ExternalDNSHostName": "[parameters('externalDNSHostName')]",
                            "IsBaseDeployment": "True",
                            "FileShareName": "[parameters('fileShareName')]",
                            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                            "PortalContext": "[parameters('portalContext')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('fileShareVirtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('fileShareVirtualMachineName')), '2023-03-01', 'full').identity.tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "MachineAdministratorCredential": {
                              "userName": "[parameters('adminUsername')]",
                              "password": "[parameters('adminPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('fileShareVirtualMachineName'), 'DSCConfiguration'), '2018-06-01').provisioningState]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('applicationgateway-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGatewayName": {
                    "value": "[parameters('applicationGatewayName')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "iDns": {
                    "value": "[parameters('iDns')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "keyVaultUri": {
                    "value": "[parameters('keyVaultUri')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalBackendSslCert": {
                    "value": "[parameters('portalBackendSslCert')]"
                  },
                  "portalVirtualMachineNames": {
                    "value": "[parameters('portalVirtualMachineNames')]"
                  },
                  "publicIpId": {
                    "value": "[parameters('publicIpId')]"
                  },
                  "resourceGroup": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "resourceSuffix": {
                    "value": "[parameters('resourceSuffix')]"
                  },
                  "serverBackendSSLCert": {
                    "value": "[parameters('serverBackendSSLCert')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "userAssignedIdenityResourceId": {
                    "value": "[parameters('userAssignedIdenityResourceId')]"
                  },
                  "virtualNetworkName": {
                    "value": "[parameters('virtualNetworkName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "12801531379794266496"
                    }
                  },
                  "parameters": {
                    "applicationGatewayName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region for the site deployment. All Resources provisioned are created here"
                      }
                    },
                    "joinWindowsDomain": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "(Optional) Indicates whether the virtual machines should join an existing Windows Active Directory which provides domain join and DNS services in the Virtual Network"
                      }
                    },
                    "windowsDomainName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "(Optional) Domain FQDN where the virtual machine will be joined. Required if joinWindowsDomain = true"
                      }
                    },
                    "externalDnsHostName": {
                      "type": "string",
                      "metadata": {
                        "description": "DNS name for the site deployment. It will be a custom domain (e.g. mysite.contoso.com) if using a Private IP or an SSL certificate, otherwise will be the Azure DNS <dnsPrefixForPublicIpAddress>.<location>.cloudapp.azure.com"
                      }
                    },
                    "resourceGroup": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "userAssignedIdenityResourceId": {
                      "type": "string"
                    },
                    "publicIpId": {
                      "type": "string"
                    },
                    "resourceSuffix": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "serverBackendSSLCert": {
                      "type": "string"
                    },
                    "portalBackendSslCert": {
                      "type": "string"
                    },
                    "portalVirtualMachineNames": {
                      "type": "string"
                    },
                    "iDns": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "serverBackEndVirtualMachines": "[split(parameters('serverVirtualMachineNames'), ',')]",
                    "portalBackEndVirtualMachines": "[split(parameters('portalVirtualMachineNames'), ',')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('applicationGatewayName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdenityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "sku": {
                          "name": "Standard_v2",
                          "tier": "Standard_v2",
                          "capacity": 2
                        },
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                              }
                            }
                          }
                        ],
                        "sslCertificates": [
                          {
                            "name": "frontendCert",
                            "properties": {
                              "keyVaultSecretId": "[format('{0}secrets/pfx{1}', parameters('keyVaultUri'), parameters('location'))]"
                            }
                          }
                        ],
                        "trustedRootCertificates": [
                          {
                            "name": "serverBackendSSLCert",
                            "properties": {
                              "data": "[parameters('serverBackendSSLCert')]"
                            }
                          },
                          {
                            "name": "portalBackendSSLCert",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]",
                            "properties": {
                              "data": "[parameters('portalBackendSslCert')]"
                            }
                          }
                        ],
                        "trustedClientCertificates": [],
                        "sslProfiles": [],
                        "frontendIPConfigurations": [
                          {
                            "name": "pipIpConfig",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "publicIPAddress": {
                                "id": "[parameters('publicIpId')]"
                              }
                            }
                          },
                          {
                            "name": "[format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "privateIPAddress": "172.0.1.9",
                              "privateIPAllocationMethod": "Static",
                              "subnet": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                              }
                            }
                          }
                        ],
                        "frontendPorts": [
                          {
                            "name": "[format('EnterprisePort443{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "port": 443
                            }
                          },
                          {
                            "name": "[format('EnterprisePort80{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "[format('ServerBackendPool{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "copy": [
                                {
                                  "name": "backendAddresses",
                                  "count": "[length(variables('serverBackEndVirtualMachines'))]",
                                  "input": {
                                    "fqdn": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('iDns')))]"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('{0}PortalBackendPool', parameters('resourceSuffix'))]",
                            "properties": {
                              "copy": [
                                {
                                  "name": "backendAddresses",
                                  "count": "[length(variables('portalBackEndVirtualMachines'))]",
                                  "input": {
                                    "fqdn": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('iDns')))]"
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "loadDistributionPolicies": [],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[format('PortalHttpsSetting{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "port": 7443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "connectionDraining": {
                                "enabled": true,
                                "drainTimeoutInSec": 60
                              },
                              "pickHostNameFromBackendAddress": true,
                              "path": "/arcgis/",
                              "requestTimeout": 180,
                              "probe": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}PortalProbeName', parameters('resourceSuffix')))]"
                              },
                              "trustedRootCertificates": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]"
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('ServerHttpsSetting{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "port": 6443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "connectionDraining": {
                                "enabled": true,
                                "drainTimeoutInSec": 60
                              },
                              "pickHostNameFromBackendAddress": true,
                              "path": "/arcgis/",
                              "requestTimeout": 180,
                              "probe": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}ServerProbeName', parameters('resourceSuffix')))]"
                              },
                              "trustedRootCertificates": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'serverBackendSSLCert')]"
                                }
                              ]
                            }
                          }
                        ],
                        "backendSettingsCollection": [],
                        "httpListeners": [
                          {
                            "name": "[format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                              },
                              "frontendPort": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]"
                              },
                              "protocol": "Http",
                              "hostNames": [
                                "[parameters('externalDnsHostName')]"
                              ],
                              "requireServerNameIndication": false
                            }
                          },
                          {
                            "name": "[format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                              },
                              "frontendPort": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]"
                              },
                              "protocol": "Https",
                              "sslCertificate": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/sslCertificates', parameters('applicationGatewayName'), 'frontendCert')]"
                              },
                              "hostNames": [
                                "[parameters('externalDnsHostName')]"
                              ],
                              "requireServerNameIndication": false
                            }
                          }
                        ],
                        "listeners": [],
                        "urlPathMaps": [
                          {
                            "name": "[format('{0}EnterprisePathMap', parameters('resourceSuffix'))]",
                            "properties": {
                              "defaultBackendAddressPool": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                              },
                              "defaultBackendHttpSettings": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                              },
                              "pathRules": [
                                {
                                  "name": "serverPathRule",
                                  "properties": {
                                    "paths": [
                                      "/server/*"
                                    ],
                                    "backendAddressPool": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                                    },
                                    "backendHttpSettings": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                                    },
                                    "rewriteRuleSet": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}ServerRewriteRuleSet', parameters('resourceSuffix')))]"
                                    }
                                  }
                                },
                                {
                                  "name": "portalPathRule",
                                  "properties": {
                                    "paths": [
                                      "/portal/*",
                                      "/portal"
                                    ],
                                    "backendAddressPool": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('{0}PortalBackendPool', parameters('resourceSuffix')))]"
                                    },
                                    "backendHttpSettings": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('PortalHttpsSetting{0}', parameters('resourceSuffix')))]"
                                    },
                                    "rewriteRuleSet": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}PortalRewriteRuleSet', parameters('resourceSuffix')))]"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "[format('{0}EnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                            "properties": {
                              "ruleType": "PathBasedRouting",
                              "priority": 10,
                              "httpListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "urlPathMap": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/urlPathMaps', parameters('applicationGatewayName'), format('{0}EnterprisePathMap', parameters('resourceSuffix')))]"
                              }
                            }
                          },
                          {
                            "name": "[format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                            "properties": {
                              "ruleType": "Basic",
                              "priority": 20,
                              "httpListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "redirectConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/redirectConfigurations', parameters('applicationGatewayName'), format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix')))]"
                              }
                            }
                          }
                        ],
                        "routingRules": [],
                        "probes": [
                          {
                            "name": "[format('{0}ServerProbeName', parameters('resourceSuffix'))]",
                            "properties": {
                              "protocol": "Https",
                              "path": "/arcgis/rest/info/healthcheck",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "pickHostNameFromBackendHttpSettings": true,
                              "minServers": 0,
                              "match": {
                                "statusCodes": [
                                  "200"
                                ]
                              }
                            }
                          },
                          {
                            "name": "[format('{0}PortalProbeName', parameters('resourceSuffix'))]",
                            "properties": {
                              "protocol": "Https",
                              "path": "/arcgis/portaladmin/healthCheck",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "pickHostNameFromBackendHttpSettings": true,
                              "minServers": 0,
                              "match": {
                                "statusCodes": [
                                  "200"
                                ]
                              }
                            }
                          }
                        ],
                        "rewriteRuleSets": [
                          {
                            "name": "[format('{0}PortalRewriteRuleSet', parameters('resourceSuffix'))]",
                            "properties": {
                              "rewriteRules": [
                                {
                                  "ruleSequence": 50,
                                  "conditions": [],
                                  "name": "XForwardedHostRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [
                                      {
                                        "headerName": "X-Forwarded-Host",
                                        "headerValue": "{http_req_host}"
                                      }
                                    ],
                                    "responseHeaderConfigurations": []
                                  }
                                },
                                {
                                  "ruleSequence": 100,
                                  "conditions": [
                                    {
                                      "variable": "http_resp_Location",
                                      "pattern": "(https?):\\/\\/[^\\/]+:7443\\/(?:arcgis|portal)(.*)$",
                                      "ignoreCase": true,
                                      "negate": false
                                    }
                                  ],
                                  "name": "PortalRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [],
                                    "responseHeaderConfigurations": [
                                      {
                                        "headerName": "RewriteLocationValue",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                      },
                                      {
                                        "headerName": "Location",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('{0}ServerRewriteRuleSet', parameters('resourceSuffix'))]",
                            "properties": {
                              "rewriteRules": [
                                {
                                  "ruleSequence": 50,
                                  "conditions": [],
                                  "name": "XForwardedHostRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [
                                      {
                                        "headerName": "X-Forwarded-Host",
                                        "headerValue": "{http_req_host}"
                                      }
                                    ],
                                    "responseHeaderConfigurations": []
                                  }
                                },
                                {
                                  "ruleSequence": 100,
                                  "conditions": [
                                    {
                                      "variable": "http_resp_Location",
                                      "pattern": "(https?):\\/\\/[^\\/]+:6443\\/(?:arcgis|server)(.*)$",
                                      "ignoreCase": true,
                                      "negate": false
                                    }
                                  ],
                                  "name": "ServerRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [],
                                    "responseHeaderConfigurations": [
                                      {
                                        "headerName": "RewriteLocationValue",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                      },
                                      {
                                        "headerName": "Location",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "redirectConfigurations": [
                          {
                            "name": "[format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix'))]",
                            "properties": {
                              "redirectType": "Permanent",
                              "targetListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "includePath": true,
                              "includeQueryString": true,
                              "requestRoutingRules": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/requestRoutingRules', parameters('applicationGatewayName'), format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix')))]"
                                }
                              ]
                            }
                          }
                        ],
                        "privateLinkConfigurations": []
                      }
                    }
                  ],
                  "outputs": {
                    "applicationGatewayPrivateIpAddress": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '2023-06-01').frontendIPConfigurations[1].properties.privateIPAddress]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('privatednszone-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "externalDnsHostname": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "applicationGatewayPrivateIPAddress": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('applicationgateway-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.applicationGatewayPrivateIpAddress.value]"
                  },
                  "virtualNetworkId": {
                    "value": "[parameters('virtualNetworkId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "3281377029628545889"
                    }
                  },
                  "parameters": {
                    "externalDnsHostname": {
                      "type": "string"
                    },
                    "virtualNetworkId": {
                      "type": "string"
                    },
                    "applicationGatewayPrivateIPAddress": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "privateDNSZoneName": "[format('{0}.{1}', split(parameters('externalDnsHostname'), '.')[1], split(parameters('externalDnsHostname'), '.')[2])]",
                    "aRecordName": "[split(parameters('externalDnsHostname'), '.')[0]]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('privateDNSZoneName')]",
                      "location": "global",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', variables('privateDNSZoneName'), 'vnetLink')]",
                      "location": "global",
                      "properties": {
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkId')]"
                        },
                        "registrationEnabled": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', variables('privateDNSZoneName'), variables('aRecordName'))]",
                      "properties": {
                        "ttl": 3600,
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('applicationGatewayPrivateIPAddress')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('applicationgateway-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriServers",
                "count": "[length(parameters('serverVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-dsc-{1}{2}', parameters('serverVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscServerScriptFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscServerScriptFunction'))]"
                  },
                  "enableServerLogHarvesterPlugin": {
                    "value": "[parameters('enableServerLogHarvesterPlugin')]"
                  },
                  "enableVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "isUpdatingCertificates": {
                    "value": "[parameters('isUpdatingCertificates')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "publicKeySSLCertificateFileName": {
                    "value": "[format('wildcard{0}-PublicKey.cer', replace(parameters('externalDnsHostname'), parameters('externalDnsHostnamePrefix'), ''))]"
                  },
                  "serverContext": {
                    "value": "[parameters('serverContext')]"
                  },
                  "serverLicenseFileName": {
                    "value": "[parameters('serverLicenseFileName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('serverVirtualMachines')[copyIndex()]]"
                  },
                  "virtualMachineOSDiskSize": {
                    "value": "[parameters('virtualMachineOSDiskSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "7935642733269117722"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enableServerLogHarvesterPlugin": {
                      "type": "bool"
                    },
                    "enableVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "isUpdatingCertificates": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "publicKeySSLCertificateFileName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "serverContext": {
                      "type": "string"
                    },
                    "serverLicenseFileName": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "virtualMachineOSDiskSize": {
                      "type": "int"
                    }
                  },
                  "variables": {
                    "selfSignedSSLCertificatePassword": "miked123",
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "DebugMode": "[string(parameters('debugMode'))]",
                            "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
                            "EnableLogHarvesterPlugin": "[string(parameters('enableServerLogHarvesterPlugin'))]",
                            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
                            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                            "ServerContext": "[parameters('serverContext')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "ServerLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('serverLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "ServerInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[variables('selfSignedSSLCertificatePassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscsStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('privatednszone-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriDataStoreServers",
                "count": "[length(parameters('dataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-dsc-{1}{2}', parameters('dataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "dataStoreVirtualMachineNames": {
                    "value": "[parameters('dataStoreVirtualMachineNames')]"
                  },
                  "dataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('dataStoreVirtualMachineOSDiskSize')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscDataStoreFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscDataStoreFunction'))]"
                  },
                  "enableDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableDataStoreVirtualMachineDataDisk')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('dataStoreVirtualMachines')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "15068024200808749958"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "dataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "dataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "enableDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "DataStoreMachineNames": "[parameters('dataStoreVirtualMachineNames')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('dataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableDataStoreVirtualMachineDataDisk'))]",
                            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscsStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                    }
                  }
                }
              },
              "dependsOn": [
                "dscEsriServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('privatednszone-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriSpatioTemporalServers",
                "count": "[length(parameters('spatiotemporalBigDataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-dsc-{1}{2}', parameters('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscSpatioTemporalFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscSpatioTemporalFunction'))]"
                  },
                  "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "spatiotemporalBigDataStoreVirtualMachineNames": {
                    "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineNames')]"
                  },
                  "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "3767455116188625292"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "spatiotemporalBigDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "SpatiotemporalBigDataStoreMachineNames": "[parameters('spatiotemporalBigDataStoreVirtualMachineNames')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk'))]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "dscEsriDataStoreServers",
                "dscEsriServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('privatednszone-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriPortalServers",
                "count": "[length(parameters('portalVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-dsc-{1}{2}', parameters('portalVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscPortalFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscPortalFunction'))]"
                  },
                  "enablePortalVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "isUpdatingCertificates": {
                    "value": "[parameters('isUpdatingCertificates')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalContext": {
                    "value": "[parameters('portalContext')]"
                  },
                  "portalLicenseFileName": {
                    "value": "[parameters('portalLicenseFileName')]"
                  },
                  "portalLicenseUserTypeId": {
                    "value": "[parameters('portalLicenseUserTypeId')]"
                  },
                  "portalVirtualMachineNames": {
                    "value": "[parameters('portalVirtualMachineNames')]"
                  },
                  "portalVirtualMachineOSDiskSize": {
                    "value": "[parameters('portalVirtualMachineOSDiskSize')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "publicKeySSLCertificateFileName": {
                    "value": "[format('wildcard{0}-PublicKey.cer', replace(parameters('externalDnsHostname'), parameters('externalDnsHostnamePrefix'), ''))]"
                  },
                  "secondaryDnsHostName": {
                    "value": "[parameters('secondaryDnsHostName')]"
                  },
                  "serverContext": {
                    "value": "[parameters('serverContext')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('portalVirtualMachines')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "5802423355423352340"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enablePortalVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "isUpdatingCertificates": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "portalContext": {
                      "type": "string"
                    },
                    "portalLicenseFileName": {
                      "type": "string"
                    },
                    "portalLicenseUserTypeId": {
                      "type": "string"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "publicKeySSLCertificateFileName": {
                      "type": "string"
                    },
                    "secondaryDnsHostName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "portalVirtualMachineNames": {
                      "type": "string"
                    },
                    "portalVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "serverContext": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "useSelfSignedInternalSSLCertificate": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "selfSignedSSLCertificatePassword": "miked123",
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "DebugMode": "[string(parameters('debugMode'))]",
                            "EnableDataDisk": "[string(parameters('enablePortalVirtualMachineDataDisk'))]",
                            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
                            "OSDiskSize": "[parameters('portalVirtualMachineOSDiskSize')]",
                            "PortalContext": "[parameters('portalContext')]",
                            "PortalLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('portalLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "PortalMachineNames": "[parameters('portalVirtualMachineNames')]",
                            "PrivateDNSHostName": "[parameters('secondaryDnsHostName')]",
                            "ServerContext": "[parameters('serverContext')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "PortalLicenseUserTypeId": "[parameters('portalLicenseUserTypeId')]",
                            "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "PortalInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), variables('selfSignedSSLCertificatePassword'), '')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscsStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                    }
                  }
                }
              },
              "dependsOn": [
                "dscEsriDataStoreServers",
                "dscEsriServers",
                "dscEsriSpatioTemporalServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('privatednszone-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('artifacts-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('certificates-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "multiTierDatastoreServerVirtualMachines",
        "multiTierFileServerVirtualMachines",
        "multiTierGraphVirtualMachines",
        "multiTierObjectDataStoreVirtualMachines",
        "multiTierPortalVirtualMachines",
        "multiTierServerVirtualMachines",
        "multiTierSpatiotemporalBigDataStoreVirtualMachines",
        "multiTierTileCacheVirtualMachines",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('public-ip-address-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-network-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'singletier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('server-configuration-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "arcgisServiceAccountIsDomainAccount": {
            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
          },
          "arcgisServiceAccountPassword": {
            "value": "[parameters('arcgisServiceAccountPassword')]"
          },
          "arcgisServiceAccountUserName": {
            "value": "[parameters('arcgisServiceAccountUserName')]"
          },
          "cloudStorageAccountCredentialsUserName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.cloudStorageAccountCredentialsUserName.value]"
          },
          "dataStoreTypesForBaseDeploymentServers": {
            "value": "[parameters('dataStoreTypesForBaseDeploymentServers')]"
          },
          "debugMode": {
            "value": "[parameters('debugMode')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "dscConfiguration": {
            "value": "[variables('dscSingleTierConfiguration')]"
          },
          "dscScript": {
            "value": "[format('{0}.ps1', variables('dscSingleTierConfiguration'))]"
          },
          "enableServerLogHarvesterPlugin": {
            "value": "[parameters('enableServerLogHarvesterPlugin')]"
          },
          "enableVirtualMachineDataDisk": {
            "value": "[parameters('enableVirtualMachineDataDisk')]"
          },
          "hostname": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('public-ip-address-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.pipFqdn.value]"
          },
          "isTileCacheDataStoreClustered": {
            "value": "[parameters('isTileCacheDataStoreClustered')]"
          },
          "isUpdatingCertificates": {
            "value": "[parameters('isUpdatingCertificates')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "portalContext": {
            "value": "[variables('portalContext')]"
          },
          "portalLicenseFileName": {
            "value": "[variables('portalLicenseFileName')]"
          },
          "portalLicenseUserTypeId": {
            "value": "[parameters('portalLicenseUserTypeId')]"
          },
          "primarySiteAdministratorAccountPassword": {
            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
          },
          "primarySiteAdministratorAccountUserName": {
            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
          },
          "publicKeySSLCertificateFileName": {
            "value": "[format('wildcard{0}-PublicKey.cer', replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('public-ip-address-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.pipFqdn.value, parameters('externalDnsHostnamePrefix'), ''))]"
          },
          "serverContext": {
            "value": "[variables('serverContext')]"
          },
          "serverLicenseFileName": {
            "value": "[variables('serverLicenseFileName')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "storageUriPrefix": {
            "value": "[format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "useAzureFiles": {
            "value": "[parameters('useAzureFiles')]"
          },
          "useCloudStorage": {
            "value": "[parameters('useCloudStorage')]"
          },
          "virtualMachineName": {
            "value": "[variables('virtualMachineName')]"
          },
          "virtualMachineOSDiskSize": {
            "value": "[parameters('virtualMachineOSDiskSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.24.24.22086",
              "templateHash": "9574934045465230931"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "arcgisServiceAccountIsDomainAccount": {
              "type": "bool"
            },
            "arcgisServiceAccountPassword": {
              "type": "securestring"
            },
            "arcgisServiceAccountUserName": {
              "type": "string"
            },
            "cloudStorageAccountCredentialsUserName": {
              "type": "string"
            },
            "dataStoreTypesForBaseDeploymentServers": {
              "type": "string"
            },
            "debugMode": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "dscConfiguration": {
              "type": "string"
            },
            "dscScript": {
              "type": "string"
            },
            "enableServerLogHarvesterPlugin": {
              "type": "bool"
            },
            "enableVirtualMachineDataDisk": {
              "type": "bool"
            },
            "hostname": {
              "type": "string"
            },
            "isTileCacheDataStoreClustered": {
              "type": "bool"
            },
            "isUpdatingCertificates": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "portalContext": {
              "type": "string"
            },
            "portalLicenseFileName": {
              "type": "string"
            },
            "portalLicenseUserTypeId": {
              "type": "string"
            },
            "primarySiteAdministratorAccountPassword": {
              "type": "securestring"
            },
            "primarySiteAdministratorAccountUserName": {
              "type": "string"
            },
            "publicKeySSLCertificateFileName": {
              "type": "string"
            },
            "serverContext": {
              "type": "string"
            },
            "serverLicenseFileName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageUriPrefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "useAzureFiles": {
              "type": "bool"
            },
            "useCloudStorage": {
              "type": "bool"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineOSDiskSize": {
              "type": "int"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('desired-state-configuration-{0}', parameters('deploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "dataStoreTypesForBaseDeploymentServers": {
                    "value": "[parameters('dataStoreTypesForBaseDeploymentServers')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscConfiguration')]"
                  },
                  "dscScript": {
                    "value": "[parameters('dscScript')]"
                  },
                  "enableServerLogHarvesterPlugin": {
                    "value": "[parameters('enableServerLogHarvesterPlugin')]"
                  },
                  "enableVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "hostname": {
                    "value": "[parameters('hostname')]"
                  },
                  "isTileCacheDataStoreClustered": {
                    "value": "[parameters('isTileCacheDataStoreClustered')]"
                  },
                  "isUpdatingCertificates": {
                    "value": "[parameters('isUpdatingCertificates')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalContext": {
                    "value": "[parameters('portalContext')]"
                  },
                  "portalLicenseFileName": {
                    "value": "[parameters('portalLicenseFileName')]"
                  },
                  "portalLicenseUserTypeId": {
                    "value": "[parameters('portalLicenseUserTypeId')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "publicKeySSLCertificateFileName": {
                    "value": "[parameters('publicKeySSLCertificateFileName')]"
                  },
                  "serverContext": {
                    "value": "[parameters('serverContext')]"
                  },
                  "serverLicenseFileName": {
                    "value": "[parameters('serverLicenseFileName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('virtualMachineName')]"
                  },
                  "virtualMachineOSDiskSize": {
                    "value": "[parameters('virtualMachineOSDiskSize')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "14019972421510644500"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "dataStoreTypesForBaseDeploymentServers": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enableServerLogHarvesterPlugin": {
                      "type": "bool"
                    },
                    "enableVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "hostname": {
                      "type": "string"
                    },
                    "isTileCacheDataStoreClustered": {
                      "type": "bool"
                    },
                    "isUpdatingCertificates": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "portalContext": {
                      "type": "string"
                    },
                    "portalLicenseFileName": {
                      "type": "string"
                    },
                    "portalLicenseUserTypeId": {
                      "type": "string"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "publicKeySSLCertificateFileName": {
                      "type": "string"
                    },
                    "serverContext": {
                      "type": "string"
                    },
                    "serverLicenseFileName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "useSelfSignedInternalSSLCertificate": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "virtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "storageAccountName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "selfSignedSSLCertificatePassword": "[format('*.{0}.cloudapp.azure.com', parameters('location'))]",
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "PortalLicenseUserTypeId": "[parameters('portalLicenseUserTypeId')]",
                            "MachineName": "[parameters('virtualMachineNames')]",
                            "PeerMachineName": "[parameters('virtualMachineNames')]",
                            "ExternalDNSHostName": "[parameters('hostname')]",
                            "PrivateDNSHostName": "",
                            "DataStoreTypes": "[parameters('dataStoreTypesForBaseDeploymentServers')]",
                            "IsTileCacheDataStoreClustered": "[parameters('isTileCacheDataStoreClustered')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
                            "EnableLogHarvesterPlugin": "[string(parameters('enableServerLogHarvesterPlugin'))]",
                            "DebugMode": "[string(parameters('debugMode'))]",
                            "ServerContext": "[parameters('serverContext')]",
                            "PortalContext": "[parameters('portalContext')]",
                            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "configurationArguments": {
                            "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "ServerLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('serverLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "PortalLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('portalLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "MachineAdministratorCredential": {
                              "userName": "[parameters('adminUsername')]",
                              "password": "[parameters('adminPassword')]"
                            },
                            "ServerInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), variables('selfSignedSSLCertificatePassword'), '')]"
                            },
                            "PortalInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), variables('selfSignedSSLCertificatePassword'), '')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('artifacts-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('certificates-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('public-ip-address-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('virtual-machine-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-account-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ]
}