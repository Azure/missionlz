{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.24.24.22086",
      "templateHash": "1800344657355701437"
    }
  },
  "parameters": {
    "containerName": {
      "type": "string"
    },
    "diskEncryptionSetResourceId": {
      "type": "string"
    },
    "hybridUseBenefit": {
      "type": "bool"
    },
    "localAdministratorPassword": {
      "type": "securestring"
    },
    "localAdministratorUsername": {
      "type": "securestring"
    },
    "location": {
      "type": "string"
    },
    "storageAccountName": {
      "type": "string"
    },
    "subnetResourceId": {
      "type": "string"
    },
    "tags": {
      "type": "object"
    },
    "userAssignedIdentityPrincipalId": {
      "type": "string"
    },
    "userAssignedIdentityResourceId": {
      "type": "string"
    },
    "virtualMachineName": {
      "type": "string"
    },
    "portalLicenseFile": {
      "type": "string"
    },
    "portalLicenseFileName": {
      "type": "string"
    },
    "serverLicenseFile": {
      "type": "string"
    },
    "serverLicenseFileName": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-04-01",
      "name": "[format('nic-{0}', parameters('virtualMachineName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[parameters('subnetResourceId')]"
              },
              "primary": true,
              "privateIPAddressVersion": "IPv4"
            }
          }
        ],
        "enableAcceleratedNetworking": true,
        "enableIPForwarding": false
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-03-01",
      "name": "[parameters('virtualMachineName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
        }
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2s_v3"
        },
        "osProfile": {
          "computerName": "[parameters('virtualMachineName')]",
          "adminUsername": "[parameters('localAdministratorUsername')]",
          "adminPassword": "[parameters('localAdministratorPassword')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": true,
            "patchSettings": {
              "patchMode": "AutomaticByOS",
              "assessmentMode": "ImageDefault"
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2019-datacenter-core-g2",
            "version": "latest"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "deleteOption": "Delete",
            "managedDisk": {
              "diskEncryptionSet": {
                "id": "[parameters('diskEncryptionSetResourceId')]"
              },
              "storageAccountType": "Premium_LRS"
            },
            "name": "[format('disk-{0}', parameters('virtualMachineName'))]",
            "osType": "Windows"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
              "properties": {
                "deleteOption": "Delete"
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": false
          }
        },
        "securityProfile": {
          "encryptionAtHost": true,
          "uefiSettings": {
            "secureBootEnabled": true,
            "vTpmEnabled": true
          },
          "securityType": "TrustedLaunch"
        },
        "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/runCommands",
      "apiVersion": "2023-03-01",
      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'appAzModules')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
      "properties": {
        "treatFailureAsDeploymentFailure": true,
        "asyncExecution": false,
        "parameters": [
          {
            "name": "ContainerName",
            "value": "[parameters('containerName')]"
          },
          {
            "name": "StorageAccountName",
            "value": "[parameters('storageAccountName')]"
          },
          {
            "name": "StorageEndpoint",
            "value": "[environment().suffixes.storage]"
          },
          {
            "name": "UserAssignedIdentityObjectId",
            "value": "[parameters('userAssignedIdentityPrincipalId')]"
          }
        ],
        "source": {
          "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.12.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg','az.keyvault.4.12.0.nupkg', 'az.storage.5.1.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/runCommands",
      "apiVersion": "2023-03-01",
      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'artifacts')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
      "properties": {
        "treatFailureAsDeploymentFailure": true,
        "asyncExecution": false,
        "parameters": [
          {
            "name": "ContainerName",
            "value": "[parameters('containerName')]"
          },
          {
            "name": "StorageAccountName",
            "value": "[parameters('storageAccountName')]"
          },
          {
            "name": "StorageEndpoint",
            "value": "[environment().suffixes.storage]"
          },
          {
            "name": "UserAssignedIdentityObjectId",
            "value": "[parameters('userAssignedIdentityPrincipalId')]"
          },
          {
            "name": "PortalLicensefile",
            "value": "[parameters('portalLicenseFile')]"
          },
          {
            "name": "PortalLicenseFileName",
            "value": "[parameters('portalLicenseFileName')]"
          },
          {
            "name": "ServerLicensefile",
            "value": "[parameters('serverLicenseFile')]"
          },
          {
            "name": "ServerLicenseFileName",
            "value": "[parameters('serverLicenseFileName')]"
          },
          {
            "name": "TenantId",
            "value": "[subscription().tenantId]"
          }
        ],
        "source": {
          "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$PortalLicenseFileName,\r\n          [string]$ServerLicensefile,\r\n          [string]$ServerLicenseFileName,\r\n          [string]$TenantId\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        New-Item -ItemType File $portalLicenseFileName\r\n        New-Item -ItemType File $serverLicenseFileName\r\n        $plf = \"/mnt/azscripts/azscriptinput/$portalLicenseFileName\"\r\n        $slf = \"/mnt/azscripts/azscriptinput/$serverLicenseFileName\"\r\n        $portalLicense = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($portalLicensefile))\r\n        $portalLicense | Out-File $plf\r\n        $serverLicense = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($serverLicensefile))\r\n        $serverLicense | Out-File $slf\r\n        # upload blobs to container using managed identity assigned to deployment script\r\n        $ctx = New-AzStorageContext -StorageAccountName $storageAccountName -UseConnectedAccount\r\n        Set-AzStorageBlobContent -File $plf -Container $containerName -Blob $portalLicenseFileName -Context $ctx -Force\r\n        Set-AzStorageBlobContent -File $slf -Container $containerName -Blob $serverLicenseFileName -Context $ctx -Force\r\n      "
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'appAzModules')]",
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "value": "[parameters('virtualMachineName')]"
    }
  }
}