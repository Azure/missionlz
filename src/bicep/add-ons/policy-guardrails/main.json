{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.32.4.45862",
      "templateHash": "14011558573294774032"
    }
  },
  "parameters": {
    "hubVirtualNetworkResourceId": {
      "type": "string",
      "metadata": {
        "description": "Hub Virtual Network Resource Id"
      }
    },
    "policySetName": {
      "type": "string",
      "metadata": {
        "description": "Policy set name"
      }
    },
    "policySetDisplayName": {
      "type": "string",
      "metadata": {
        "description": "Policy set display name"
      }
    },
    "policySetDescription": {
      "type": "string",
      "metadata": {
        "description": "Policy set description"
      }
    },
    "policySetCategory": {
      "type": "string",
      "metadata": {
        "description": "Policy set category"
      }
    },
    "targetManagementGroup": {
      "type": "string",
      "metadata": {
        "description": "Management group to assign the policy set"
      }
    },
    "policyAssignmentDisplayName": {
      "type": "string",
      "metadata": {
        "description": "Display name for the policy assignment"
      }
    },
    "vnetRegion": {
      "type": "string",
      "metadata": {
        "description": "Region for the virtual network"
      }
    },
    "requiredRoutes": {
      "type": "array",
      "metadata": {
        "description": "Array of required routes"
      }
    },
    "disableBgpPropagation": {
      "type": "bool",
      "metadata": {
        "description": "Disable BGP Propagation"
      }
    },
    "nextHopIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Next Hop IP Address"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "name": "Append-AppService-httpsonly",
      "type": "Microsoft.Authorization/policyDefinitions",
      "apiVersion": "2021-06-01",
      "properties": {
        "policyType": "Custom",
        "mode": "All",
        "displayName": "AppService append enable https only setting to enforce https setting.",
        "description": "Appends the AppService sites object to ensure that HTTPS only is enabled for server/service authentication.",
        "metadata": {
          "version": "1.0.0",
          "category": "App Service"
        },
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Append",
            "allowedValues": [
              "Append",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Web/sites"
              },
              {
                "field": "Microsoft.Web/sites/httpsOnly",
                "notequals": true
              }
            ]
          },
          "then": {
            "effect": "[[parameters('effect')]",
            "details": [
              {
                "field": "Microsoft.Web/sites/httpsOnly",
                "value": true
              }
            ]
          }
        }
      }
    },
    "$fxv#1": {
      "name": "Append-AppService-latestTLS",
      "type": "Microsoft.Authorization/policyDefinitions",
      "apiVersion": "2021-06-01",
      "properties": {
        "policyType": "Custom",
        "mode": "All",
        "displayName": "AppService append sites with minimum TLS version to enforce.",
        "description": "Append the AppService sites object to ensure that the minimum TLS version is set to the required minimum TLS version. Please note, Append does not enforce compliance; use 'Deny' for compliance enforcement.",
        "metadata": {
          "version": "1.1.0",
          "category": "App Service",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ]
        },
        "parameters": {
          "effect": {
            "type": "String",
            "defaultValue": "Append",
            "allowedValues": [
              "Append",
              "Disabled"
            ],
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            }
          },
          "minTlsVersion": {
            "type": "String",
            "defaultValue": "1.2",
            "allowedValues": [
              "1.2",
              "1.0",
              "1.1"
            ],
            "metadata": {
              "displayName": "Select minimum TLS version",
              "description": "Select the minimum TLS version for a Web App configuration to enforce"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "Microsoft.Web/sites/config/minTlsVersion",
                "exists": "true"
              },
              {
                "field": "Microsoft.Web/sites/config/minTlsVersion",
                "notEquals": "[[parameters('minTlsVersion')]"
              }
            ]
          },
          "then": {
            "effect": "[[parameters('effect')]",
            "details": [
              {
                "field": "Microsoft.Web/sites/config/minTlsVersion",
                "value": "[[parameters('minTlsVersion')]"
              }
            ]
          }
        }
      }
    },
    "$fxv#2": {
      "name": "Deploy-Custom-Route-Table",
      "type": "Microsoft.Authorization/policyDefinitions",
      "apiVersion": "2021-06-01",
      "scope": null,
      "properties": {
        "policyType": "Custom",
        "mode": "Indexed",
        "displayName": "Deploy a route table with specific user defined routes",
        "description": "Deploys a route table with specific user defined routes when one does not exist. The route table deployed by the policy must be manually associated to subnet(s)",
        "metadata": {
          "version": "1.0.0",
          "category": "Network",
          "source": "https://github.com/Azure/Enterprise-Scale/",
          "alzCloudEnvironments": [
            "AzureCloud",
            "AzureChinaCloud",
            "AzureUSGovernment"
          ]
        },
        "parameters": {
          "effect": {
            "type": "String",
            "metadata": {
              "displayName": "Effect",
              "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
              "DeployIfNotExists",
              "Disabled"
            ],
            "defaultValue": "DeployIfNotExists"
          },
          "requiredRoutes": {
            "type": "Array",
            "metadata": {
              "displayName": "requiredRoutes",
              "description": "Routes that must exist in compliant route tables deployed by this policy"
            }
          },
          "vnetRegion": {
            "type": "String",
            "metadata": {
              "displayName": "vnetRegion",
              "description": "Only VNets in this region will be evaluated against this policy"
            }
          },
          "disableBgpPropagation": {
            "type": "Boolean",
            "metadata": {
              "displayName": "DisableBgpPropagation",
              "description": "Disable BGP Propagation"
            },
            "defaultValue": false
          },
          "nextHopIpAddress": {
            "type": "String",
            "metadata": {
              "displayName": "Next Hop IP Address",
              "description": "The IP address to which the default route should point"
            }
          }
        },
        "policyRule": {
          "if": {
            "allOf": [
              {
                "field": "type",
                "equals": "Microsoft.Network/routeTables"
              },
              {
                "field": "location",
                "equals": "[[parameters('vnetRegion')]"
              }
            ]
          },
          "then": {
            "effect": "[[parameters('effect')]",
            "details": {
              "type": "Microsoft.Network/routeTables",
              "existenceCondition": {
                "anyOf": [
                  {
                    "allOf": [
                      {
                        "field": "Microsoft.Network/routeTables/routes[*].name",
                        "equals": "default_route"
                      },
                      {
                        "field": "Microsoft.Network/routeTables/routes[*].addressPrefix",
                        "equals": "0.0.0.0/0"
                      },
                      {
                        "field": "Microsoft.Network/routeTables/routes[*].nextHopIpAddress",
                        "equals": "[[parameters('nextHopIpAddress')]"
                      }
                    ]
                  }
                ]
              },
              "roleDefinitionIds": [
                "/subscriptions/e867a45d-e513-44ac-931e-4741cef80b24/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7"
              ],
              "deployment": {
                "properties": {
                  "mode": "incremental",
                  "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                      "vnetRegion": {
                        "type": "string"
                      },
                      "requiredRoutes": {
                        "type": "array"
                      },
                      "disableBgpPropagation": {
                        "type": "bool"
                      },
                      "nextHopIpAddress": {
                        "type": "string"
                      }
                    },
                    "variables": {
                      "copyLoop": [
                        {
                          "name": "routes",
                          "count": "[[length(parameters('requiredRoutes'))]",
                          "input": {
                            "name": "[[concat('route-',copyIndex('routes'))]",
                            "properties": {
                              "addressPrefix": "[[split(parameters('requiredRoutes')[copyIndex('routes')], ';')]",
                              "nextHopType": "[[split(parameters('requiredRoutes')[copyIndex('routes')], ';')]",
                              "nextHopIpAddress": "[[if(equals(toLower(split(parameters('requiredRoutes')[copyIndex('routes')], ';')),'virtualappliance'),split(parameters('requiredRoutes')[copyIndex('routes')], ';'), null())]"
                            }
                          }
                        }
                      ]
                    },
                    "resources": [
                      {
                        "type": "Microsoft.Network/routeTables",
                        "apiVersion": "2021-02-01",
                        "name": "[[guid(resourceGroup().id, 'routeTable')]",
                        "location": "[[parameters('vnetRegion')]",
                        "properties": {
                          "disableBgpRoutePropagation": "[[parameters('disableBgpPropagation')]",
                          "routes": [
                            {
                              "name": "default_route",
                              "properties": {
                                "addressPrefix": "0.0.0.0/0",
                                "nextHopType": "VirtualAppliance",
                                "nextHopIpAddress": "[[parameters('nextHopIpAddress')]"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "parameters": {
                    "vnetRegion": {
                      "value": "[[parameters('vnetRegion')]"
                    },
                    "requiredRoutes": {
                      "value": "[[parameters('requiredRoutes')]"
                    },
                    "disableBgpPropagation": {
                      "value": "[[parameters('disableBgpPropagation')]"
                    },
                    "nextHopIpAddress": {
                      "value": "[[parameters('nextHopIpAddress')]"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "customPolicyDefinitions": [
      "[variables('$fxv#0')]",
      "[variables('$fxv#1')]",
      "[variables('$fxv#2')]"
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "policyDefinitions",
      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('targetManagementGroup'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "targetManagementGroup": {
            "value": "[parameters('targetManagementGroup')]"
          },
          "customPolicyDefinitions": {
            "value": "[variables('customPolicyDefinitions')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "12164790363675153553"
            }
          },
          "parameters": {
            "targetManagementGroup": {
              "type": "string",
              "metadata": {
                "description": "Target management group Id"
              }
            },
            "customPolicyDefinitions": {
              "type": "array",
              "metadata": {
                "description": "Array of custom policy definitions"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "policyDefinitions",
                "count": "[length(parameters('customPolicyDefinitions'))]"
              },
              "type": "Microsoft.Authorization/policyDefinitions",
              "apiVersion": "2023-04-01",
              "name": "[parameters('customPolicyDefinitions')[copyIndex()].name]",
              "properties": "[parameters('customPolicyDefinitions')[copyIndex()].properties]"
            }
          ],
          "outputs": {
            "policyDefinitionIds": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('customPolicyDefinitions'))]",
                "input": "[format('/providers/Microsoft.Management/managementGroups/{0}/providers/Microsoft.Authorization/policyDefinitions/{1}', parameters('targetManagementGroup'), parameters('customPolicyDefinitions')[copyIndex()].name)]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('policySet-{0}', parameters('policySetName'))]",
      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('targetManagementGroup'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "policySetName": {
            "value": "[parameters('policySetName')]"
          },
          "policySetDisplayName": {
            "value": "[parameters('policySetDisplayName')]"
          },
          "policySetDescription": {
            "value": "[parameters('policySetDescription')]"
          },
          "policySetCategory": {
            "value": "[parameters('policySetCategory')]"
          },
          "policyDefinitionIds": {
            "value": "[reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('targetManagementGroup')), 'Microsoft.Resources/deployments', 'policyDefinitions'), '2022-09-01').outputs.policyDefinitionIds.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "13640056829310916652"
            }
          },
          "parameters": {
            "policySetName": {
              "type": "string",
              "metadata": {
                "description": "Policy set name"
              }
            },
            "policySetDisplayName": {
              "type": "string",
              "metadata": {
                "description": "Policy set display name"
              }
            },
            "policySetDescription": {
              "type": "string",
              "metadata": {
                "description": "Policy set description"
              }
            },
            "policySetCategory": {
              "type": "string",
              "metadata": {
                "description": "Policy set category"
              }
            },
            "policyDefinitionIds": {
              "type": "array",
              "metadata": {
                "description": "Policy definition IDs"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/policySetDefinitions",
              "apiVersion": "2023-04-01",
              "name": "[parameters('policySetName')]",
              "properties": {
                "copy": [
                  {
                    "name": "policyDefinitions",
                    "count": "[length(parameters('policyDefinitionIds'))]",
                    "input": {
                      "policyDefinitionId": "[parameters('policyDefinitionIds')[copyIndex('policyDefinitions')]]"
                    }
                  }
                ],
                "displayName": "[parameters('policySetDisplayName')]",
                "description": "[parameters('policySetDescription')]",
                "metadata": {
                  "category": "[parameters('policySetCategory')]"
                },
                "policyType": "Custom"
              }
            }
          ],
          "outputs": {
            "policySetId": {
              "type": "string",
              "value": "[extensionResourceId(managementGroup().id, 'Microsoft.Authorization/policySetDefinitions', parameters('policySetName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('targetManagementGroup')), 'Microsoft.Resources/deployments', 'policyDefinitions')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deploy-mlzPolicyAssignmentIdentity",
      "subscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "identityName": {
            "value": "mlzPolicyAssignmentIdentity"
          },
          "identityLocation": {
            "value": "usgovvirginia"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "14011144466231829481"
            }
          },
          "parameters": {
            "identityName": {
              "type": "string"
            },
            "identityLocation": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('identityName')]",
              "location": "[parameters('identityLocation')]"
            }
          ],
          "outputs": {
            "identityResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
            },
            "identityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('policyAssignment-{0}', parameters('policySetName'))]",
      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('targetManagementGroup'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "policySetName": {
            "value": "[parameters('policySetName')]"
          },
          "policyAssignmentDisplayName": {
            "value": "[parameters('policyAssignmentDisplayName')]"
          },
          "policyLocation": {
            "value": "usgovvirginia"
          },
          "policySetId": {
            "value": "[reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('targetManagementGroup')), 'Microsoft.Resources/deployments', format('policySet-{0}', parameters('policySetName'))), '2022-09-01').outputs.policySetId.value]"
          },
          "mlzPolicyUserAssignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Resources/deployments', 'deploy-mlzPolicyAssignmentIdentity'), '2022-09-01').outputs.identityResourceId.value]"
          },
          "vnetRegion": {
            "value": "[parameters('vnetRegion')]"
          },
          "requiredRoutes": {
            "value": "[parameters('requiredRoutes')]"
          },
          "disableBgpPropagation": {
            "value": "[parameters('disableBgpPropagation')]"
          },
          "nextHopIpAddress": {
            "value": "[parameters('nextHopIpAddress')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "14041490058329664139"
            }
          },
          "parameters": {
            "policySetId": {
              "type": "string",
              "metadata": {
                "description": "Policy set ID"
              }
            },
            "policySetName": {
              "type": "string",
              "metadata": {
                "description": "Policy set name"
              }
            },
            "policyLocation": {
              "type": "string",
              "metadata": {
                "description": "Policy location"
              }
            },
            "policyAssignmentDisplayName": {
              "type": "string",
              "metadata": {
                "description": "Policy assignment display name"
              }
            },
            "mlzPolicyUserAssignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "User assigned identity for the policy assignment"
              }
            },
            "vnetRegion": {
              "type": "string",
              "metadata": {
                "description": "Region for the virtual network"
              }
            },
            "requiredRoutes": {
              "type": "array",
              "metadata": {
                "description": "Array of required routes"
              }
            },
            "disableBgpPropagation": {
              "type": "bool",
              "metadata": {
                "description": "Disable BGP Propagation"
              }
            },
            "nextHopIpAddress": {
              "type": "string",
              "metadata": {
                "description": "Next Hop IP Address"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/policyAssignments",
              "apiVersion": "2022-06-01",
              "name": "[parameters('policySetName')]",
              "location": "[parameters('policyLocation')]",
              "properties": {
                "displayName": "[parameters('policyAssignmentDisplayName')]",
                "policyDefinitionId": "[parameters('policySetId')]",
                "metadata": {
                  "policyTargetScope": "managementGroup"
                },
                "enforcementMode": "Default",
                "parameters": {
                  "vnetRegion": {
                    "value": "[parameters('vnetRegion')]"
                  },
                  "requiredRoutes": {
                    "value": "[parameters('requiredRoutes')]"
                  },
                  "disableBgpPropagation": {
                    "value": "[parameters('disableBgpPropagation')]"
                  },
                  "nextHopIpAddress": {
                    "value": "[parameters('nextHopIpAddress')]"
                  }
                }
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('mlzPolicyUserAssignedIdentityId'))]": {}
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Resources/deployments', 'deploy-mlzPolicyAssignmentIdentity')]",
        "[extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('targetManagementGroup')), 'Microsoft.Resources/deployments', format('policySet-{0}', parameters('policySetName')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "roleAssignment-mlzPolicyAssignmentIdentity",
      "subscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "targetResourceId": {
            "value": "[resourceId('Microsoft.Resources/resourceGroups', split(parameters('hubVirtualNetworkResourceId'), '/')[4])]"
          },
          "roleDefinitionId": {
            "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]"
          },
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Resources/deployments', 'deploy-mlzPolicyAssignmentIdentity'), '2022-09-01').outputs.identityPrincipalId.value]"
          },
          "principalType": {
            "value": "ServicePrincipal"
          },
          "description": {
            "value": "Role assignment for policy managed identity"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "10296095440786899315"
            }
          },
          "parameters": {
            "targetResourceId": {
              "type": "string"
            },
            "roleDefinitionId": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "description": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                "description": "[parameters('description')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Resources/deployments', 'deploy-mlzPolicyAssignmentIdentity')]"
      ]
    }
  ]
}