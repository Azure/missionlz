{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "16070271507397737264"
    }
  },
  "parameters": {
    "activeDirectorySolution": {
      "type": "string",
      "allowedValues": [
        "ActiveDirectoryDomainServices",
        "MicrosoftEntraDomainServices",
        "MicrosoftEntraId",
        "MicrosoftEntraIdIntuneEnrollment"
      ],
      "metadata": {
        "description": "The service providing domain services for Azure Virtual Desktop.  This is needed to properly configure the session hosts and if applicable, the Azure Storage Account."
      }
    },
    "artifactsContainerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Blobs container hosting the required artifacts."
      }
    },
    "artifactsStorageAccountResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the storage account hosting the artifacts in Blob storage."
      }
    },
    "availability": {
      "type": "string",
      "defaultValue": "AvailabilityZones",
      "allowedValues": [
        "AvailabilitySets",
        "AvailabilityZones",
        "None"
      ],
      "metadata": {
        "description": "The desired availability option when deploying a pooled host pool. The best practice is to deploy to availability zones for the highest resilency and service level agreement."
      }
    },
    "avdAgentMsiName": {
      "type": "string",
      "metadata": {
        "description": "The blob name of the MSI file for the AVD Agent installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
      }
    },
    "avdAgentBootLoaderMsiName": {
      "type": "string",
      "metadata": {
        "description": "The blob name of the MSI file for the AVD Agent Boot Loader installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
      }
    },
    "avdObjectId": {
      "type": "string",
      "metadata": {
        "description": "The object ID for the Azure Virtual Desktop enterprise application in Microsoft Entra ID.  The object ID can found by selecting Microsoft Applications using the Application type filter in the Enterprise Applications blade of Microsoft Entra ID."
      }
    },
    "azureNetAppFilesSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The subnet address prefix for the Azure NetApp Files delegated subnet."
      }
    },
    "azurePowerShellModuleMsiName": {
      "type": "string",
      "metadata": {
        "description": "The blob name of the MSI file for the  Azure PowerShell Module installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
      }
    },
    "customRdpProperty": {
      "type": "string",
      "defaultValue": "audiocapturemode:i:1;camerastoredirect:s:*;use multimon:i:0;drivestoredirect:s:;encode redirected video capture:i:1;redirected video capture encoding quality:i:1;audiomode:i:0;devicestoredirect:s:;redirectclipboard:i:0;redirectcomports:i:0;redirectlocation:i:1;redirectprinters:i:0;redirectsmartcards:i:1;redirectwebauthn:i:1;usbdevicestoredirect:s:;keyboardhook:i:2;",
      "metadata": {
        "description": "The RDP properties to add or remove RDP functionality on the AVD host pool. The string must end with a semi-colon. Settings reference: https://learn.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files"
      }
    },
    "deployActivityLogDiagnosticSetting": {
      "type": "bool",
      "metadata": {
        "description": "Choose whether to deploy a diagnostic setting for the Activity Log."
      }
    },
    "deployDefender": {
      "type": "bool",
      "metadata": {
        "description": "Choose whether to deploy Defender for Cloud."
      }
    },
    "deployNetworkWatcherControlPlane": {
      "type": "bool",
      "metadata": {
        "description": "Choose whether to deploy Network Watcher for the AVD control plane location."
      }
    },
    "deployNetworkWatcherVirtualMachines": {
      "type": "bool",
      "metadata": {
        "description": "Choose whether to deploy Network Watcher for the AVD session hosts location. This is necessary when the control plane and session hosts are in different locations."
      }
    },
    "deployPolicy": {
      "type": "bool",
      "metadata": {
        "description": "Choose whether to deploy a policy assignment."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
      }
    },
    "desktopFriendlyName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The friendly name for the SessionDesktop application in the desktop application group."
      }
    },
    "diskSku": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The storage SKU for the managed disks on the AVD session hosts. Production deployments should use Premium_LRS."
      }
    },
    "domainJoinPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the account to domain join the AVD session hosts."
      }
    },
    "domainJoinUserPrincipalName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The user principal name for the account to domain join the AVD session hosts."
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the domain that provides ADDS to the AVD session hosts."
      }
    },
    "drainMode": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "The drain mode option enables drain mode for the sessions hosts in this deployment to prevent users from accessing the hosts until they have been validated."
      }
    },
    "emailSecurityContact": {
      "type": "string",
      "metadata": {
        "description": "The email address to use for Defender for Cloud notifications."
      }
    },
    "environmentAbbreviation": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "prod",
        "test"
      ],
      "metadata": {
        "description": "The abbreviation for the target environment."
      }
    },
    "fslogixShareSizeInGB": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {
        "description": "The file share size(s) in GB for the Fslogix storage solution."
      }
    },
    "fslogixContainerType": {
      "type": "string",
      "defaultValue": "ProfileContainer",
      "allowedValues": [
        "CloudCacheProfileContainer",
        "CloudCacheProfileOfficeContainer",
        "ProfileContainer",
        "ProfileOfficeContainer"
      ],
      "metadata": {
        "description": "If deploying FSLogix, select the desired type of container for user profiles. https://learn.microsoft.com/en-us/fslogix/concepts-container-types"
      }
    },
    "fslogixStorageService": {
      "type": "string",
      "defaultValue": "AzureFiles Standard",
      "allowedValues": [
        "AzureNetAppFiles Premium",
        "AzureNetAppFiles Standard",
        "AzureFiles Premium",
        "AzureFiles Standard",
        "None"
      ],
      "metadata": {
        "description": "Enable an Fslogix storage option to manage user profiles for the AVD session hosts. The selected service & SKU should provide sufficient IOPS for all of your users. https://docs.microsoft.com/en-us/azure/architecture/example-scenario/wvd/windows-virtual-desktop-fslogix#performance-requirements"
      }
    },
    "hostPoolPublicNetworkAccess": {
      "type": "string",
      "allowedValues": [
        "Disabled",
        "Enabled",
        "EnabledForClientsOnly",
        "EnabledForSessionHostsOnly"
      ],
      "metadata": {
        "description": "The type of public network access for the host pool."
      }
    },
    "hostPoolType": {
      "type": "string",
      "defaultValue": "Pooled DepthFirst",
      "allowedValues": [
        "Pooled DepthFirst",
        "Pooled BreadthFirst",
        "Personal Automatic",
        "Personal Direct"
      ],
      "metadata": {
        "description": "These options specify the host pool type and depending on the type provides the load balancing options and assignment types."
      }
    },
    "hubAzureFirewallResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the Azure Firewall in the HUB subscription"
      }
    },
    "hubVirtualNetworkResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the Azure Virtual Network in the HUB subscription."
      }
    },
    "identifier": {
      "type": "string",
      "defaultValue": "avd",
      "maxLength": 3,
      "metadata": {
        "description": "The unique identifier between each business unit or project supporting AVD in your tenant. This is the unique naming component between each AVD stamp."
      }
    },
    "imageVersionResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID for the Compute Gallery Image Version. Do not set this value if using a marketplace image."
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "office-365",
      "metadata": {
        "description": "Offer for the virtual machine image"
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsDesktop",
      "metadata": {
        "description": "Publisher for the virtual machine image"
      }
    },
    "imageSku": {
      "type": "string",
      "defaultValue": "win11-22h2-avd-m365",
      "metadata": {
        "description": "SKU for the virtual machine image"
      }
    },
    "locationControlPlane": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The deployment location for the AVD management resources."
      }
    },
    "locationVirtualMachines": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The deployment location for the AVD sessions hosts. This is necessary when the users are closer to a different location than the control plane location."
      }
    },
    "logAnalyticsWorkspaceRetention": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 30,
      "maxValue": 730,
      "metadata": {
        "description": "The retention for the Log Analytics Workspace to setup the AVD monitoring solution"
      }
    },
    "logAnalyticsWorkspaceSku": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "allowedValues": [
        "Free",
        "Standard",
        "Premium",
        "PerNode",
        "PerGB2018",
        "Standalone",
        "CapacityReservation"
      ],
      "metadata": {
        "description": "The SKU for the Log Analytics Workspace to setup the AVD monitoring solution"
      }
    },
    "monitoring": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploys the required monitoring resources to enable AVD Insights and monitor features in the automation account."
      }
    },
    "operationsLogAnalyticsWorkspaceResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Log Analytics Workspace to use for log storage."
      }
    },
    "organizationalUnitPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The distinguished name for the target Organization Unit in Active Directory Domain Services."
      }
    },
    "policy": {
      "type": "string",
      "defaultValue": "NISTRev4",
      "metadata": {
        "description": "The policy to assign to the workload."
      }
    },
    "recoveryServices": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable backups to an Azure Recovery Services vault.  For a pooled host pool this will enable backups on the Azure file share.  For a personal host pool this will enable backups on the AVD sessions hosts."
      }
    },
    "scalingBeginPeakTime": {
      "type": "string",
      "defaultValue": "9:00",
      "metadata": {
        "description": "The time when session hosts will scale up and continue to stay on to support peak demand; Format 24 hours e.g. 9:00 for 9am"
      }
    },
    "scalingEndPeakTime": {
      "type": "string",
      "defaultValue": "17:00",
      "metadata": {
        "description": "The time when session hosts will scale down and stay off to support low demand; Format 24 hours e.g. 17:00 for 5pm"
      }
    },
    "scalingLimitSecondsToForceLogOffUser": {
      "type": "string",
      "defaultValue": "0",
      "metadata": {
        "description": "The number of seconds to wait before automatically signing out users. If set to 0 any session host that has user sessions will be left untouched"
      }
    },
    "scalingMinimumNumberOfRdsh": {
      "type": "string",
      "defaultValue": "0",
      "metadata": {
        "description": "The minimum number of session host VMs to keep running during off-peak hours. The scaling tool will not work if all virtual machines are turned off and the Start VM On Connect solution is not enabled."
      }
    },
    "scalingSessionThresholdPerCPU": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "The maximum number of sessions per CPU that will be used as a threshold to determine when new session host VMs need to be started during peak hours"
      }
    },
    "scalingTool": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploys the required resources for the Scaling Tool. https://docs.microsoft.com/en-us/azure/virtual-desktop/scaling-automation-logic-apps"
      }
    },
    "securityPrincipals": {
      "type": "array",
      "metadata": {
        "description": "The array of Security Principals with their object IDs and display names to assign to the AVD Application Group and FSLogix Storage."
      }
    },
    "sessionHostCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 5000,
      "metadata": {
        "description": "The number of session hosts to deploy in the host pool. Ensure you have the approved quota to deploy the desired count."
      }
    },
    "sessionHostIndex": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 4999,
      "metadata": {
        "description": "The starting number for the session hosts. This is important when adding virtual machines to ensure an update deployment is not performed on an existing, active session host."
      }
    },
    "sharedServicesSubnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the subnet in the Shared Services subscription. This is required for the private endpoint on the AVD Global Workspace."
      }
    },
    "stampIndex": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 9,
      "metadata": {
        "description": "The stamp index allows for multiple AVD stamps with the same business unit or project to support different use cases. For example, \"0\" could be used for an office workers host pool and \"1\" could be used for a developers host pool within the \"finance\" business unit."
      }
    },
    "storageCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 100,
      "metadata": {
        "description": "The number of storage accounts to deploy to support sharding across multiple storage accounts. https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding"
      }
    },
    "storageIndex": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 99,
      "metadata": {
        "description": "The starting number for the names of the storage accounts to support sharding across multiple storage accounts. https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding"
      }
    },
    "subnetAddressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.140.0/24"
      ],
      "minLength": 1,
      "maxLength": 2,
      "metadata": {
        "description": "The address prefix(es) for the new subnet(s) that will be created in the spoke virtual network(s). Specify only one address prefix in the array if the session hosts location and the control plan location are the same. If different locations are specified, add a second address prefix for the hosts virtual network."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The Key / value pairs of metadata for the Azure resource groups and resources."
      }
    },
    "usersPerCore": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of users per core is used to determine the maximum number of users per session host."
      }
    },
    "validationEnvironment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "The validation environment setting on the AVD host pool determines whether the hostpool should receive AVD preview features for testing."
      }
    },
    "virtualMachineVirtualCpuCount": {
      "type": "int",
      "metadata": {
        "description": "The number of virtual CPUs per virtual machine for the selected virtual machine size."
      }
    },
    "virtualMachinePassword": {
      "type": "securestring",
      "metadata": {
        "description": "The local administrator password for the AVD session hosts"
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_D4ads_v5",
      "metadata": {
        "description": "The virtual machine SKU for the AVD session hosts."
      }
    },
    "virtualMachineUsername": {
      "type": "string",
      "metadata": {
        "description": "The local administrator username for the AVD session hosts"
      }
    },
    "virtualNetworkAddressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.140.0/24"
      ],
      "minLength": 1,
      "maxLength": 2,
      "metadata": {
        "description": "The address prefix for the new spoke virtual network(s). Specify only one address prefix in the array if the session hosts location and the control plan location are the same. If different locations are specified, add a second address prefix for the hosts virtual network."
      }
    },
    "workspaceFriendlyName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The friendly name for the AVD workspace that is displayed in the end-user client."
      }
    },
    "workspacePublicNetworkAccess": {
      "type": "string",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "The public network access setting on the AVD workspace either disables public network access or allows both public and private network access."
      }
    }
  },
  "variables": {
    "maxResourcesPerTemplateDeployment": 88,
    "divisionValue": "[div(parameters('sessionHostCount'), variables('maxResourcesPerTemplateDeployment'))]",
    "divisionRemainderValue": "[mod(parameters('sessionHostCount'), variables('maxResourcesPerTemplateDeployment'))]",
    "sessionHostBatchCount": "[if(greater(variables('divisionRemainderValue'), 0), add(variables('divisionValue'), 1), variables('divisionValue'))]",
    "maxAvSetMembers": 200,
    "beginAvSetRange": "[div(parameters('sessionHostIndex'), variables('maxAvSetMembers'))]",
    "endAvSetRange": "[div(add(parameters('sessionHostCount'), parameters('sessionHostIndex')), variables('maxAvSetMembers'))]",
    "availabilitySetsCount": "[length(range(variables('beginAvSetRange'), add(sub(variables('endAvSetRange'), variables('beginAvSetRange')), 1)))]",
    "artifactsUri": "[format('https://{0}.blob.{1}/{2}/', variables('artifactsStorageAccountName'), environment().suffixes.storage, parameters('artifactsContainerName'))]",
    "artifactsStorageAccountName": "[split(parameters('artifactsStorageAccountResourceId'), '/')[8]]",
    "customImageId": "[if(empty(parameters('imageVersionResourceId')), 'null', format('\"{0}\"', parameters('imageVersionResourceId')))]",
    "deployFslogix": "[if(or(equals(parameters('fslogixStorageService'), 'None'), not(contains(parameters('activeDirectorySolution'), 'DomainServices'))), false(), true())]",
    "deploymentLocations": "[union(createArray(parameters('locationControlPlane')), createArray(parameters('locationVirtualMachines')))]",
    "fileShareNames": {
      "CloudCacheProfileContainer": [
        "profile-containers"
      ],
      "CloudCacheProfileOfficeContainer": [
        "office-containers",
        "profile-containers"
      ],
      "ProfileContainer": [
        "profile-containers"
      ],
      "ProfileOfficeContainer": [
        "office-containers",
        "profile-containers"
      ]
    },
    "fileShares": "[variables('fileShareNames')[parameters('fslogixContainerType')]]",
    "netbios": "[split(parameters('domainName'), '.')[0]]",
    "pooledHostPool": "[if(equals(split(parameters('hostPoolType'), ' ')[0], 'Pooled'), true(), false())]",
    "privateDnsZoneResourceIdPrefix": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4])]",
    "resourceGroupServices": "[union(createArray('controlPlane', 'feedWorkspace', 'hosts', 'management'), if(variables('deployFslogix'), createArray('storage'), createArray()))]",
    "roleDefinitions": {
      "DesktopVirtualizationPowerOnContributor": "489581de-a3bd-480d-9518-53dea7416b33",
      "DesktopVirtualizationUser": "1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
      "Reader": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
      "VirtualMachineUserLogin": "fb879df8-f326-4884-b1cf-06f3ad86be52"
    },
    "storageSku": "[if(equals(parameters('fslogixStorageService'), 'None'), 'None', split(parameters('fslogixStorageService'), ' ')[1])]",
    "storageService": "[split(parameters('fslogixStorageService'), ' ')[0]]",
    "storageSuffix": "[environment().suffixes.storage]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "additionalSubnets": "[if(and(and(contains(parameters('fslogixStorageService'), 'AzureNetAppFiles'), not(empty(parameters('azureNetAppFilesSubnetAddressPrefix')))), equals(length(variables('deploymentLocations')), 1)), createObject('value', createArray(createObject('name', 'AzureNetAppFiles', 'addressPrefix', parameters('azureNetAppFilesSubnetAddressPrefix')))), createObject('value', createArray()))]",
          "deployActivityLogDiagnosticSetting": {
            "value": "[parameters('deployActivityLogDiagnosticSetting')]"
          },
          "deployDefender": {
            "value": "[parameters('deployDefender')]"
          },
          "deploymentNameSuffix": {
            "value": "[format('cp-{0}', parameters('deploymentNameSuffix'))]"
          },
          "deployNetworkWatcher": {
            "value": "[parameters('deployNetworkWatcherControlPlane')]"
          },
          "deployPolicy": {
            "value": "[parameters('deployPolicy')]"
          },
          "emailSecurityContact": {
            "value": "[parameters('emailSecurityContact')]"
          },
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "firewallResourceId": {
            "value": "[parameters('hubAzureFirewallResourceId')]"
          },
          "hubVirtualNetworkResourceId": {
            "value": "[parameters('hubVirtualNetworkResourceId')]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "location": {
            "value": "[parameters('locationControlPlane')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[parameters('operationsLogAnalyticsWorkspaceResourceId')]"
          },
          "policy": {
            "value": "[parameters('policy')]"
          },
          "stampIndex": {
            "value": "[string(parameters('stampIndex'))]"
          },
          "subnetAddressPrefix": {
            "value": "[parameters('subnetAddressPrefixes')[0]]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualNetworkAddressPrefix": {
            "value": "[parameters('virtualNetworkAddressPrefixes')[0]]"
          },
          "workloadName": {
            "value": "avd"
          },
          "workloadShortName": {
            "value": "avd"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "16771750129279914222"
            }
          },
          "parameters": {
            "additionalSubnets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of additional subnets to support the tier3 workload."
              }
            },
            "deployActivityLogDiagnosticSetting": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy a diagnostic setting for the Activity Log."
              }
            },
            "deployDefender": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy Defender for Cloud."
              }
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "The suffix to append to the deployment name. It defaults to the current UTC date and time."
              }
            },
            "deployNetworkWatcher": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy Network Watcher for the deployment location."
              }
            },
            "deployPolicy": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy a policy assignment."
              }
            },
            "emailSecurityContact": {
              "type": "string",
              "metadata": {
                "description": "The email address to use for Defender for Cloud notifications."
              }
            },
            "environmentAbbreviation": {
              "type": "string",
              "defaultValue": "dev",
              "allowedValues": [
                "dev",
                "prod",
                "test"
              ],
              "metadata": {
                "description": "The abbreviation for the environment."
              }
            },
            "firewallResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Firewall in the HUB."
              }
            },
            "hubVirtualNetworkResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the HUB Virtual Network."
              }
            },
            "identifier": {
              "type": "string",
              "maxLength": 3,
              "metadata": {
                "description": "The identifier for the resource names. This value should represent the workload, project, or business unit."
              }
            },
            "keyVaultDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AuditEvent",
                  "enabled": true
                },
                {
                  "category": "AzurePolicyEvaluationDetails",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Key Vault Diagnostic Logs categories to collect. See \"https://learn.microsoft.com/en-us/azure/key-vault/general/logging?tabs=Vault\" for valid values."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location for the deployment. It defaults to the location of the deployment."
              }
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics Workspace to use for log storage."
              }
            },
            "logStorageSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
              }
            },
            "networkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Network Security Group diagnostic logs to apply to the workload Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
              }
            },
            "networkSecurityGroupDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The metrics to monitor for the Network Security Group."
              }
            },
            "networkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The rules to apply to the Network Security Group."
              }
            },
            "policy": {
              "type": "string",
              "defaultValue": "NISTRev4",
              "metadata": {
                "description": "The policy to assign to the workload."
              }
            },
            "stampIndex": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The stamp index allows for multiple AVD stamps with the same business unit or project to support different use cases."
              }
            },
            "subnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The address prefix for the workload subnet."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The tags to apply to the resources."
              }
            },
            "virtualNetworkAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The address prefix for the workload Virtual Network."
              }
            },
            "virtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The diagnostic logs to apply to the workload Virtual Network."
              }
            },
            "virtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The metrics to monitor for the workload Virtual Network."
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "tier3",
              "minLength": 1,
              "maxLength": 10,
              "metadata": {
                "description": "The name for the workload."
              }
            },
            "workloadShortName": {
              "type": "string",
              "defaultValue": "t3",
              "minLength": 1,
              "maxLength": 3,
              "metadata": {
                "description": "The short name for the workload."
              }
            }
          },
          "variables": {
            "hubResourceGroupName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
            "hubSubscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
            "subscriptionId": "[subscription().subscriptionId]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networks": {
                    "value": [
                      {
                        "name": "[parameters('workloadName')]",
                        "shortName": "[parameters('workloadShortName')]",
                        "deployUniqueResources": false,
                        "subscriptionId": "[variables('subscriptionId')]",
                        "nsgDiagLogs": "[parameters('networkSecurityGroupDiagnosticsLogs')]",
                        "nsgDiagMetrics": "[parameters('networkSecurityGroupDiagnosticsMetrics')]",
                        "nsgRules": "[parameters('networkSecurityGroupRules')]",
                        "vnetAddressPrefix": "[parameters('virtualNetworkAddressPrefix')]",
                        "vnetDiagLogs": "[parameters('virtualNetworkDiagnosticsLogs')]",
                        "vnetDiagMetrics": "[parameters('virtualNetworkDiagnosticsMetrics')]",
                        "subnetAddressPrefix": "[parameters('subnetAddressPrefix')]"
                      }
                    ]
                  },
                  "resourcePrefix": {
                    "value": "[parameters('identifier')]"
                  },
                  "stampIndex": {
                    "value": "[parameters('stampIndex')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "17469290750660856958"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networks": {
                      "type": "array"
                    },
                    "resourcePrefix": {
                      "type": "string"
                    },
                    "stampIndex": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneNames_Backup",
                        "count": "[length(items(variables('locations')))]",
                        "input": "[format('privatelink.{0}.backup.windowsazure.{1}', items(variables('locations'))[copyIndex('privateDnsZoneNames_Backup')].value.recoveryServicesGeo, coalesce(variables('privateDnsZoneSuffixes_Backup')[environment().name], variables('cloudSuffix')))]"
                      }
                    ],
                    "$fxv#0": {
                      "AzureChina": {
                        "chinaeast": {
                          "abbreviation": "cne",
                          "recoveryServicesGeo": "sha",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinaeast2": {
                          "abbreviation": "cne2",
                          "recoveryServicesGeo": "sha2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth": {
                          "abbreviation": "cnn",
                          "recoveryServicesGeo": "bjb",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth2": {
                          "abbreviation": "cnn2",
                          "recoveryServicesGeo": "bjb2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        }
                      },
                      "AzureCloud": {
                        "australiacentral": {
                          "abbreviation": "auc",
                          "recoveryServicesGeo": "acl",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiacentral2": {
                          "abbreviation": "auc2",
                          "recoveryServicesGeo": "acl2",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiaeast": {
                          "abbreviation": "aue",
                          "recoveryServicesGeo": "ae",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiasoutheast": {
                          "abbreviation": "ause",
                          "recoveryServicesGeo": "ase",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "brazilsouth": {
                          "abbreviation": "brs",
                          "recoveryServicesGeo": "brs",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "brazilsoutheast": {
                          "abbreviation": "brse",
                          "recoveryServicesGeo": "bse",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "canadacentral": {
                          "abbreviation": "cac",
                          "recoveryServicesGeo": "cnc",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "canadaeast": {
                          "abbreviation": "cae",
                          "recoveryServicesGeo": "cne",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "centralindia": {
                          "abbreviation": "inc",
                          "recoveryServicesGeo": "inc",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "centralus": {
                          "abbreviation": "usc",
                          "recoveryServicesGeo": "cus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "eastasia": {
                          "abbreviation": "ase",
                          "recoveryServicesGeo": "ea",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "eastus": {
                          "abbreviation": "use",
                          "recoveryServicesGeo": "eus",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "eastus2": {
                          "abbreviation": "use2",
                          "recoveryServicesGeo": "eus2",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "francecentral": {
                          "abbreviation": "frc",
                          "recoveryServicesGeo": "frc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "francesouth": {
                          "abbreviation": "frs",
                          "recoveryServicesGeo": "frs",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanynorth": {
                          "abbreviation": "den",
                          "recoveryServicesGeo": "gn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanywestcentral": {
                          "abbreviation": "dewc",
                          "recoveryServicesGeo": "gwc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "israelcentral": {
                          "abbreviation": "ilc",
                          "recoveryServicesGeo": "ilc",
                          "timeDifference": "+2:00",
                          "timeZone": "Israel Standard Time"
                        },
                        "italynorth": {
                          "abbreviation": "itn",
                          "recoveryServicesGeo": "itn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "japaneast": {
                          "abbreviation": "jpe",
                          "recoveryServicesGeo": "jpe",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "japanwest": {
                          "abbreviation": "jpw",
                          "recoveryServicesGeo": "jpw",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "jioindiacentral": {
                          "abbreviation": "injc",
                          "recoveryServicesGeo": "jic",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "jioindiawest": {
                          "abbreviation": "injw",
                          "recoveryServicesGeo": "jiw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "koreacentral": {
                          "abbreviation": "krc",
                          "recoveryServicesGeo": "krc",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "koreasouth": {
                          "abbreviation": "krs",
                          "recoveryServicesGeo": "krs",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "northcentralus": {
                          "abbreviation": "usnc",
                          "recoveryServicesGeo": "ncus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "northeurope": {
                          "abbreviation": "eun",
                          "recoveryServicesGeo": "ne",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "norwayeast": {
                          "abbreviation": "noe",
                          "recoveryServicesGeo": "nwe",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "norwaywest": {
                          "abbreviation": "now",
                          "recoveryServicesGeo": "nww",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "polandcentral": {
                          "abbreviation": "plc",
                          "recoveryServicesGeo": "plc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "qatarcentral": {
                          "abbreviation": "qac",
                          "recoveryServicesGeo": "qac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "southafricanorth": {
                          "abbreviation": "zan",
                          "recoveryServicesGeo": "san",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southafricawest": {
                          "abbreviation": "zaw",
                          "recoveryServicesGeo": "saw",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southcentralus": {
                          "abbreviation": "ussc",
                          "recoveryServicesGeo": "scus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "southeastasia": {
                          "abbreviation": "asse",
                          "recoveryServicesGeo": "sea",
                          "timeDifference": "+8:00",
                          "timeZone": "Singapore Standard Time"
                        },
                        "southindia": {
                          "abbreviation": "ins",
                          "recoveryServicesGeo": "ins",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "swedencentral": {
                          "abbreviation": "sec",
                          "recoveryServicesGeo": "sdc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandnorth": {
                          "abbreviation": "chn",
                          "recoveryServicesGeo": "szn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandwest": {
                          "abbreviation": "chw",
                          "recoveryServicesGeo": "szw",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "uaecentral": {
                          "abbreviation": "aec",
                          "recoveryServicesGeo": "uac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uaenorth": {
                          "abbreviation": "aen",
                          "recoveryServicesGeo": "uan",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uksouth": {
                          "abbreviation": "uks",
                          "recoveryServicesGeo": "uks",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "ukwest": {
                          "abbreviation": "ukw",
                          "recoveryServicesGeo": "ukw",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "westcentralus": {
                          "abbreviation": "uswc",
                          "recoveryServicesGeo": "wcus",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "westeurope": {
                          "abbreviation": "euw",
                          "recoveryServicesGeo": "we",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "westindia": {
                          "abbreviation": "inw",
                          "recoveryServicesGeo": "inw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "westus": {
                          "abbreviation": "usw",
                          "recoveryServicesGeo": "wus",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus2": {
                          "abbreviation": "usw2",
                          "recoveryServicesGeo": "wus2",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus3": {
                          "abbreviation": "usw3",
                          "recoveryServicesGeo": "wus3",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        }
                      },
                      "AzureUSGovernment": {
                        "usdodcentral": {
                          "abbreviation": "dodc",
                          "recoveryServicesGeo": "udc",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usdodeast": {
                          "abbreviation": "dode",
                          "recoveryServicesGeo": "ude",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usgovarizona": {
                          "abbreviation": "az",
                          "recoveryServicesGeo": "uga",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "usgovtexas": {
                          "abbreviation": "tx",
                          "recoveryServicesGeo": "ugt",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usgovvirginia": {
                          "abbreviation": "va",
                          "recoveryServicesGeo": "ugv",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        }
                      },
                      "USNat": {
                        "usnateast": {
                          "abbreviation": "east",
                          "recoveryServicesGeo": "exe",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usnatwest": {
                          "abbreviation": "west",
                          "recoveryServicesGeo": "exw",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        }
                      },
                      "USSec": {
                        "usseceast": {
                          "abbreviation": "east",
                          "recoveryServicesGeo": "rxe",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "ussecwest": {
                          "abbreviation": "west",
                          "recoveryServicesGeo": "rxw",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        }
                      }
                    },
                    "$fxv#1": "1.0.0",
                    "$fxv#2": {
                      "actionGroups": "ag",
                      "applicationGroups": "vdag",
                      "automationAccounts": "aa",
                      "availabilitySets": "avail",
                      "azureFirewalls": "afw",
                      "bastionHosts": "bas",
                      "computeGallieries": "cg",
                      "dataCollectionRuleAssociations": "dcra",
                      "dataCollectionRules": "dcr",
                      "diagnosticSettings": "diag",
                      "diskAccesses": "da",
                      "diskEncryptionSets": "des",
                      "disks": "disk",
                      "firewallPolicies": "afwp",
                      "hostPools": "vdpool",
                      "ipConfigurations": "ipconf",
                      "keyVaults": "kv",
                      "logAnalyticsWorkspaces": "log",
                      "netAppAccounts": "naa",
                      "netAppCapacityPools": "nacp",
                      "networkInterfaces": "nic",
                      "networkSecurityGroups": "nsg",
                      "networkWatchers": "nw",
                      "privateEndpoints": "pe",
                      "privateLinkScopes": "pls",
                      "publicIPAddresses": "pip",
                      "recoveryServicesVaults": "rsv",
                      "remoteApplicationGroups": "vdag",
                      "resourceGroups": "rg",
                      "routeTables": "rt",
                      "storageAccounts": "st",
                      "subnets": "snet",
                      "userAssignedIdentities": "id",
                      "virtualMachines": "vm",
                      "virtualNetworks": "vnet",
                      "workspaces": "vdws"
                    },
                    "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]",
                    "environmentName": {
                      "dev": "Development",
                      "prod": "Production",
                      "test": "Test"
                    },
                    "locations": "[variables('$fxv#0')[environment().name]]",
                    "mlzTags": {
                      "environment": "[variables('environmentName')[parameters('environmentAbbreviation')]]",
                      "landingZoneName": "MissionLandingZone",
                      "landingZoneVersion": "[variables('$fxv#1')]",
                      "resourcePrefix": "[parameters('resourcePrefix')]"
                    },
                    "resourceAbbreviations": "[variables('$fxv#2')]",
                    "tokens": {
                      "resource": "resource_token",
                      "service": "service_token"
                    },
                    "privateDnsZoneNames": "[union(createArray(format('privatelink.agentsvc.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudSuffix'))), format('privatelink.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudSuffix'))), format('privatelink.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureWebSites')[environment().name], format('appservice.{0}', variables('cloudSuffix')))), format('scm.privatelink.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureWebSites')[environment().name], format('appservice.{0}', variables('cloudSuffix')))), format('privatelink.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudSuffix'))), format('privatelink-global.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudSuffix'))), format('privatelink.file.{0}', environment().suffixes.storage), format('privatelink.queue.{0}', environment().suffixes.storage), format('privatelink.table.{0}', environment().suffixes.storage), format('privatelink.blob.{0}', environment().suffixes.storage), format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore')), format('privatelink.monitor.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix'))), format('privatelink.ods.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix'))), format('privatelink.oms.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix')))), variables('privateDnsZoneNames_Backup'))]",
                    "privateDnsZoneSuffixes_AzureAutomation": {
                      "AzureCloud": "net",
                      "AzureUSGovernment": "us",
                      "USNat": null,
                      "USSec": null
                    },
                    "privateDnsZoneSuffixes_AzureVirtualDesktop": {
                      "AzureCloud": "microsoft.com",
                      "AzureUSGovernment": "azure.us",
                      "USNat": null,
                      "USSec": null
                    },
                    "privateDnsZoneSuffixes_AzureWebSites": {
                      "AzureCloud": "azurewebsites.net",
                      "AzureUSGovernment": "azurewebsites.us",
                      "USNat": null,
                      "USSec": null
                    },
                    "privateDnsZoneSuffixes_Backup": {
                      "AzureCloud": "com",
                      "AzureUSGovernment": "us",
                      "USNat": null,
                      "USSec": null
                    },
                    "privateDnsZoneSuffixes_Monitor": {
                      "AzureCloud": "azure.com",
                      "AzureUSGovernment": "azure.us",
                      "USNat": null,
                      "USSec": null
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "namingConventions",
                        "count": "[length(parameters('networks'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('naming-convention-{0}-{1}', parameters('networks')[copyIndex()].shortName, parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "locationAbbreviation": {
                            "value": "[variables('locations')[parameters('location')].abbreviation]"
                          },
                          "environmentAbbreviation": {
                            "value": "[parameters('environmentAbbreviation')]"
                          },
                          "networkName": {
                            "value": "[parameters('networks')[copyIndex()].name]"
                          },
                          "networkShortName": {
                            "value": "[parameters('networks')[copyIndex()].shortName]"
                          },
                          "resourceAbbreviations": {
                            "value": "[variables('resourceAbbreviations')]"
                          },
                          "resourcePrefix": {
                            "value": "[parameters('resourcePrefix')]"
                          },
                          "stampIndex": {
                            "value": "[parameters('stampIndex')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('networks')[copyIndex()].subscriptionId]"
                          },
                          "tokens": {
                            "value": "[variables('tokens')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "3285265744534691733"
                            }
                          },
                          "parameters": {
                            "environmentAbbreviation": {
                              "type": "string"
                            },
                            "locationAbbreviation": {
                              "type": "string"
                            },
                            "networkName": {
                              "type": "string"
                            },
                            "networkShortName": {
                              "type": "string"
                            },
                            "resourceAbbreviations": {
                              "type": "object"
                            },
                            "resourcePrefix": {
                              "type": "string"
                            },
                            "stampIndex": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "subscriptionId": {
                              "type": "string"
                            },
                            "tokens": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "namingConvention": "[format('{0}-{1}{2}-{3}-{4}-{5}', toLower(parameters('resourcePrefix')), if(empty(parameters('stampIndex')), '', format('{0}-', parameters('stampIndex'))), parameters('tokens').resource, parameters('networkName'), parameters('environmentAbbreviation'), parameters('locationAbbreviation'))]",
                            "namingConvention_Service": "[format('{0}-{1}{2}-{3}-{4}-{5}-{6}', toLower(parameters('resourcePrefix')), if(empty(parameters('stampIndex')), '', format('{0}-', parameters('stampIndex'))), parameters('tokens').resource, parameters('tokens').service, parameters('networkName'), parameters('environmentAbbreviation'), parameters('locationAbbreviation'))]",
                            "names": {
                              "actionGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').actionGroups)]",
                              "applicationGroup": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').applicationGroups)]",
                              "automationAccount": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').automationAccounts)]",
                              "automationAccountDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').automationAccounts)]",
                              "automationAccountNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, parameters('resourceAbbreviations').automationAccounts)]",
                              "automationAccountPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, parameters('resourceAbbreviations').automationAccounts)]",
                              "availabilitySet": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').availabilitySets)]",
                              "azureFirewall": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').azureFirewalls)]",
                              "azureFirewallClientPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').publicIpAddresses), parameters('tokens').service, format('client-{0}', parameters('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallClientPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-client-{1}', parameters('resourceAbbreviations').publicIpAddresses, parameters('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').azureFirewalls)]",
                              "azureFirewallManagementPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').publicIpAddresses), parameters('tokens').service, format('mgmt-{0}', parameters('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallManagementPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-mgmt-{1}', parameters('resourceAbbreviations').publicIpAddresses, parameters('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallPolicy": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').firewallPolicies)]",
                              "bastionHost": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').bastionHosts)]",
                              "bastionHostNetworkSecurityGroup": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkSecurityGroups), parameters('tokens').service, parameters('resourceAbbreviations').bastionHosts)]",
                              "bastionHostDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').bastionHosts)]",
                              "bastionHostPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').publicIpAddresses), parameters('tokens').service, parameters('resourceAbbreviations').bastionHosts)]",
                              "bastionHostPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', parameters('resourceAbbreviations').publicIpAddresses, parameters('resourceAbbreviations').bastionHosts))]",
                              "computeGallery": "[replace(replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').computeGallieries), '-', '_')]",
                              "dataCollectionRuleAssociation": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').dataCollectionRuleAssociations)]",
                              "dataCollectionRule": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').dataCollectionRules)]",
                              "diskAccess": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').diskAccesses)]",
                              "diskEncryptionSet": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').diskEncryptionSets)]",
                              "hostPool": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').hostPools)]",
                              "hostPoolDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').hostPools)]",
                              "hostPoolNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, parameters('resourceAbbreviations').hostPools)]",
                              "hostPoolPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, parameters('resourceAbbreviations').hostPools)]",
                              "keyVault": "[format('{0}{1}', replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').keyVaults), '-', ''), parameters('networkName'), parameters('networkShortName')), uniqueString(parameters('resourcePrefix'), parameters('environmentAbbreviation'), parameters('subscriptionId')))]",
                              "keyVaultDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}{1}', parameters('tokens').service, parameters('resourceAbbreviations').keyVaults))]",
                              "keyVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}{1}', parameters('tokens').service, parameters('resourceAbbreviations').keyVaults))]",
                              "keyVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}{1}', parameters('tokens').service, parameters('resourceAbbreviations').keyVaults))]",
                              "logAnalyticsWorkspace": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').logAnalyticsWorkspaces)]",
                              "logAnalyticsWorkspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').logAnalyticsWorkspaces)]",
                              "netAppAccountCapacityPool": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').netAppCapacityPools)]",
                              "netAppAccount": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').netAppAccounts)]",
                              "networkSecurityGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').networkSecurityGroups)]",
                              "networkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').networkSecurityGroups)]",
                              "networkWatcher": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').networkWatchers)]",
                              "privateLinkScope": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').privateLinkScopes)]",
                              "privateLinkScopeNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, parameters('resourceAbbreviations').privateLinkScopes)]",
                              "privateLinkScopePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, parameters('resourceAbbreviations').privateLinkScopes)]",
                              "recoveryServicesVault": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').recoveryServicesVaults)]",
                              "recoveryServicesVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, parameters('resourceAbbreviations').recoveryServicesVaults)]",
                              "recoveryServicesVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, parameters('resourceAbbreviations').recoveryServicesVaults)]",
                              "resourceGroup": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').resourceGroups)]",
                              "routeTable": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').routeTables)]",
                              "storageAccount": "[toLower(replace(replace(replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').storageAccounts), parameters('networkName'), parameters('networkShortName')), '-', ''))]",
                              "storageAccountNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').storageAccounts))]",
                              "storageAccountPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').storageAccounts))]",
                              "subnet": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').subnets)]",
                              "userAssignedIdentity": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').userAssignedIdentities)]",
                              "virtualMachine": "[replace(replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').virtualMachines), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), '-', '')]",
                              "virtualMachineDisk": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').disks), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').virtualMachines))]",
                              "virtualMachineNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').virtualMachines))]",
                              "virtualNetwork": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').virtualNetworks)]",
                              "virtualNetworkDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').virtualNetworks)]",
                              "workspaceFeed": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').workspaces), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceFeedDiagnosticSetting": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceFeedNetworkInterface": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceFeedPrivateEndpoint": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobal": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').workspaces), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobalDiagnosticSetting": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobalNetworkInterface": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobalPrivateEndpoint": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "names": {
                              "type": "object",
                              "value": "[variables('names')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "locationProperties": {
                      "type": "object",
                      "value": "[variables('locations')[parameters('location')]]"
                    },
                    "mlzTags": {
                      "type": "object",
                      "value": "[variables('mlzTags')]"
                    },
                    "privateDnsZones": {
                      "type": "array",
                      "value": "[variables('privateDnsZoneNames')]"
                    },
                    "tiers": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('networks'))]",
                        "input": {
                          "name": "[parameters('networks')[copyIndex()].name]",
                          "shortName": "[parameters('networks')[copyIndex()].shortName]",
                          "deployUniqueResources": "[parameters('networks')[copyIndex()].deployUniqueResources]",
                          "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                          "nsgDiagLogs": "[parameters('networks')[copyIndex()].nsgDiagLogs]",
                          "nsgDiagMetrics": "[parameters('networks')[copyIndex()].nsgDiagMetrics]",
                          "nsgRules": "[parameters('networks')[copyIndex()].nsgRules]",
                          "vnetAddressPrefix": "[parameters('networks')[copyIndex()].vnetAddressPrefix]",
                          "vnetDiagLogs": "[parameters('networks')[copyIndex()].vnetDiagLogs]",
                          "vnetDiagMetrics": "[parameters('networks')[copyIndex()].vnetDiagMetrics]",
                          "subnetAddressPrefix": "[parameters('networks')[copyIndex()].subnetAddressPrefix]",
                          "namingConvention": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[copyIndex()].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
                        }
                      }
                    },
                    "tokens": {
                      "type": "object",
                      "value": "[variables('tokens')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "name": {
                    "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'network')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "5234750876173141008"
                    }
                  },
                  "parameters": {
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Resources/resourceGroups'), parameters('tags')['Microsoft.Resources/resourceGroups'], createObject()), parameters('mlzTags'))]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
                    },
                    "tags": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "additionalSubnets": {
                    "value": "[parameters('additionalSubnets')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deployNetworkWatcher": {
                    "value": "[parameters('deployNetworkWatcher')]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.networkSecurityGroup]"
                  },
                  "networkSecurityGroupRules": {
                    "value": "[parameters('networkSecurityGroupRules')]"
                  },
                  "networkWatcherName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.networkWatcher]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "routeTableName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.routeTable]"
                  },
                  "routeTableRouteNextHopIpAddress": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').ipConfigurations[0].properties.privateIPAddress]"
                  },
                  "subnetAddressPrefix": {
                    "value": "[parameters('subnetAddressPrefix')]"
                  },
                  "subnetName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.subnet]"
                  },
                  "subscriptionId": {
                    "value": "[variables('subscriptionId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualNetworkAddressPrefix": {
                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.virtualNetwork]"
                  },
                  "vNetDnsServers": {
                    "value": "[coalesce(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01'), 'dhcpOptions', 'dnsServers'), createArray())]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "2304559615281221523"
                    }
                  },
                  "parameters": {
                    "additionalSubnets": {
                      "type": "array"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deployNetworkWatcher": {
                      "type": "bool"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "networkSecurityGroupRules": {
                      "type": "array"
                    },
                    "networkWatcherName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "routeTableName": {
                      "type": "string"
                    },
                    "routeTableRouteNextHopIpAddress": {
                      "type": "string"
                    },
                    "subnetAddressPrefix": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "vNetDnsServers": {
                      "type": "array"
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "additionalSubnets": {
                            "value": "[parameters('additionalSubnets')]"
                          },
                          "deployNetworkWatcher": {
                            "value": "[parameters('deployNetworkWatcher')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          },
                          "networkSecurityGroupRules": {
                            "value": "[parameters('networkSecurityGroupRules')]"
                          },
                          "networkWatcherName": {
                            "value": "[parameters('networkWatcherName')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "routeTableName": {
                            "value": "[parameters('routeTableName')]"
                          },
                          "routeTableRouteNextHopIpAddress": {
                            "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                          },
                          "subnetAddressPrefix": {
                            "value": "[parameters('subnetAddressPrefix')]"
                          },
                          "subnetName": {
                            "value": "[parameters('subnetName')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualNetworkAddressPrefix": {
                            "value": "[parameters('virtualNetworkAddressPrefix')]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "vNetDnsServers": {
                            "value": "[parameters('vNetDnsServers')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "6762829727523882200"
                            }
                          },
                          "parameters": {
                            "additionalSubnets": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "deployNetworkWatcher": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            },
                            "networkSecurityGroupRules": {
                              "type": "array"
                            },
                            "networkWatcherName": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "routeTableName": {
                              "type": "string"
                            },
                            "routeTableRouteNextHopIpAddress": {
                              "type": "string"
                            },
                            "subnetAddressPrefix": {
                              "type": "string"
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "vNetDnsServers": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "delegations": {
                              "AzureNetAppFiles": [
                                {
                                  "name": "Microsoft.Netapp.volumes",
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/delegations', parameters('virtualNetworkName'), 'AzureNetAppFiles', 'Microsoft.Netapp.volumes')]",
                                  "properties": {
                                    "serviceName": "Microsoft.Netapp/volumes"
                                  },
                                  "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                                }
                              ]
                            },
                            "subnets": "[union(createArray(createObject('name', parameters('subnetName'), 'properties', createObject('addressPrefix', parameters('subnetAddressPrefix')))), parameters('additionalSubnets'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkSecurityGroup",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkSecurityGroupName')]"
                                  },
                                  "securityRules": {
                                    "value": "[parameters('networkSecurityGroupRules')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "17808155300289173522"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "securityRules": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkSecurityGroups",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('tags')['Microsoft.Network/networkSecurityGroups'], createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "securityRules": "[parameters('securityRules')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "routeTable",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "disableBgpRoutePropagation": {
                                    "value": true
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('routeTableName')]"
                                  },
                                  "routeNextHopIpAddress": {
                                    "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "14183263367109373810"
                                    }
                                  },
                                  "parameters": {
                                    "disableBgpRoutePropagation": {
                                      "type": "bool"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "routeAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "0.0.0.0/0"
                                    },
                                    "routeName": {
                                      "type": "string",
                                      "defaultValue": "default_route"
                                    },
                                    "routeNextHopIpAddress": {
                                      "type": "string"
                                    },
                                    "routeNextHopType": {
                                      "type": "string",
                                      "defaultValue": "VirtualAppliance"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/routeTables",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/routeTables'), parameters('tags')['Microsoft.Network/routeTables'], createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                        "routes": [
                                          {
                                            "name": "[parameters('routeName')]",
                                            "properties": {
                                              "addressPrefix": "[parameters('routeAddressPrefix')]",
                                              "nextHopIpAddress": "[parameters('routeNextHopIpAddress')]",
                                              "nextHopType": "[parameters('routeNextHopType')]"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "condition": "[parameters('deployNetworkWatcher')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkWatcher",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkWatcherName')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "10414727145294879682"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkWatchers",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/networkWatchers'), parameters('tags')['Microsoft.Network/networkWatchers'], createObject()), parameters('mlzTags'))]",
                                      "properties": {}
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "virtualNetwork",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "addressPrefix": {
                                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('virtualNetworkName')]"
                                  },
                                  "subnets": {
                                    "copy": [
                                      {
                                        "name": "value",
                                        "count": "[length(variables('subnets'))]",
                                        "input": "[createObject('name', variables('subnets')[copyIndex('value')].name, 'properties', createObject('addressPrefix', variables('subnets')[copyIndex('value')].properties.addressPrefix, 'delegations', coalesce(tryGet(variables('delegations'), variables('subnets')[copyIndex('value')].name), createArray()), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value), 'routeTable', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value), 'privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled'))]"
                                      }
                                    ]
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "vNetDnsServers": {
                                    "value": "[parameters('vNetDnsServers')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "17796159396533379538"
                                    }
                                  },
                                  "parameters": {
                                    "addressPrefix": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "subnets": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "vNetDnsServers": {
                                      "type": "array"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/virtualNetworks'), parameters('tags')['Microsoft.Network/virtualNetworks'], createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "addressSpace": {
                                          "addressPrefixes": [
                                            "[parameters('addressPrefix')]"
                                          ]
                                        },
                                        "subnets": "[parameters('subnets')]",
                                        "dhcpOptions": "[if(empty(parameters('vNetDnsServers')), null(), createObject('dnsServers', parameters('vNetDnsServers')))]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "addressPrefix": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').addressSpace.addressPrefixes[0]]"
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "value": "[parameters('vNetDnsServers')]"
                                    },
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    },
                                    "subnets": {
                                      "type": "array",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').subnets]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup')]",
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkWatcher')]",
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'routeTable')]"
                              ]
                            }
                          ],
                          "outputs": {
                            "virtualNetworkName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.name.value]"
                            },
                            "virtualNetworkResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value]"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.addressPrefix.value]"
                            },
                            "subnetName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].name]"
                            },
                            "subnetAddressPrefix": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].properties.addressPrefix]"
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].id]"
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.name.value]"
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-spoke-peering-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "hubVirtualNetworkResourceId": {
                            "value": "[parameters('hubVirtualNetworkResourceId')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "spokeShortName": {
                            "value": "[parameters('workloadShortName')]"
                          },
                          "spokeVirtualNetworkName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "14391533606363017348"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "hubVirtualNetworkResourceId": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "spokeShortName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkName": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('peer-{0}-to-hub-{1}', parameters('spokeShortName'), parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                                  },
                                  "virtualNetworkName": {
                                    "value": "[parameters('spokeVirtualNetworkName')]"
                                  },
                                  "virtualNetworkPeerName": {
                                    "value": "[format('to-{0}', split(parameters('hubVirtualNetworkResourceId'), '/')[8])]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "6494272065213199360"
                                    }
                                  },
                                  "parameters": {
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    },
                                    "virtualNetworkName": {
                                      "type": "string"
                                    },
                                    "virtualNetworkPeerName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('virtualNetworkPeerName'))]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-hub-peering-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "hubVirtualNetworkName": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]"
                          },
                          "resourceGroupName": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]"
                          },
                          "spokeShortName": {
                            "value": "[parameters('workloadShortName')]"
                          },
                          "spokeVirtualNetworkResourceId": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value]"
                          },
                          "subscriptionId": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "6626549726744561716"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "hubVirtualNetworkName": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "spokeShortName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkResourceId": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('peer-hub-to-{0}-{1}', parameters('spokeShortName'), parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('spokeVirtualNetworkResourceId')]"
                                  },
                                  "virtualNetworkName": {
                                    "value": "[parameters('hubVirtualNetworkName')]"
                                  },
                                  "virtualNetworkPeerName": {
                                    "value": "[format('to-{0}', split(parameters('spokeVirtualNetworkResourceId'), '/')[8])]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "6494272065213199360"
                                    }
                                  },
                                  "parameters": {
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    },
                                    "virtualNetworkName": {
                                      "type": "string"
                                    },
                                    "virtualNetworkPeerName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('virtualNetworkPeerName'))]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "networkSecurityGroupName": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupName.value]"
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tier": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
                  },
                  "tokens": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "3164647736851795292"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "tier": {
                      "type": "object"
                    },
                    "tokens": {
                      "type": "object"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[take(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, ''), 24)]"
                          },
                          "keyVaultNetworkInterfaceName": {
                            "value": "[replace(parameters('tier').namingConvention.keyVaultNetworkInterface, parameters('tokens').service, '')]"
                          },
                          "keyVaultPrivateDnsZoneResourceId": {
                            "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                          },
                          "keyVaultPrivateEndpointName": {
                            "value": "[replace(parameters('tier').namingConvention.keyVaultPrivateEndpoint, parameters('tokens').service, '')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "13329202385555792471"
                            }
                          },
                          "parameters": {
                            "diskEncryptionKeyExpirationInDays": {
                              "type": "int",
                              "defaultValue": 30
                            },
                            "keyVaultName": {
                              "type": "string"
                            },
                            "keyVaultNetworkInterfaceName": {
                              "type": "string"
                            },
                            "keyVaultPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "keyVaultPrivateEndpointName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "enabledForDeployment": false,
                                "enabledForDiskEncryption": true,
                                "enabledForTemplateDeployment": false,
                                "enablePurgeProtection": true,
                                "enableRbacAuthorization": true,
                                "enableSoftDelete": true,
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "defaultAction": "Deny",
                                  "ipRules": [],
                                  "virtualNetworkRules": []
                                },
                                "publicNetworkAccess": "Disabled",
                                "sku": {
                                  "family": "A",
                                  "name": "standard"
                                },
                                "softDeleteRetentionInDays": 7,
                                "tenantId": "[subscription().tenantId]"
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('keyVaultPrivateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('keyVaultNetworkInterfaceName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('keyVaultPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                                      "groupIds": [
                                        "vault"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultPrivateEndpointName'), parameters('keyVaultName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('keyVaultPrivateEndpointName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'DiskEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "keyUriWithVersion": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
                            },
                            "keyVaultResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                            },
                            "keyVaultName": {
                              "type": "string",
                              "value": "[parameters('keyVaultName')]"
                            },
                            "keyVaultUri": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri]"
                            },
                            "storageKeyName": {
                              "type": "string",
                              "value": "StorageEncryptionKey"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "diskEncryptionSetName": {
                            "value": "[parameters('tier').namingConvention.diskEncryptionSet]"
                          },
                          "keyUrl": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyUriWithVersion.value]"
                          },
                          "keyVaultResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), createObject('value', parameters('tags')['Microsoft.Compute/diskEncryptionSets']), createObject('value', createObject()))]",
                          "workloadShortName": {
                            "value": "[parameters('workloadShortName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "14213851547349403574"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "diskEncryptionSetName": {
                              "type": "string"
                            },
                            "keyUrl": {
                              "type": "string"
                            },
                            "keyVaultResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "workloadShortName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/diskEncryptionSets",
                              "apiVersion": "2023-04-02",
                              "name": "[parameters('diskEncryptionSetName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), parameters('tags')['Microsoft.Compute/diskEncryptionSets'], createObject()), parameters('mlzTags'))]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "activeKey": {
                                  "sourceVault": {
                                    "id": "[parameters('keyVaultResourceId')]"
                                  },
                                  "keyUrl": "[parameters('keyUrl')]"
                                },
                                "encryptionType": "EncryptionAtRestWithPlatformAndCustomerKeys",
                                "rotationToLatestKeyVersionEnabled": true
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('assign-role-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')), '2023-04-02', 'full').identity.principalId]"
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceGroup().id]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "2709473749440196253"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-id-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityName": {
                            "value": "[replace(parameters('tier').namingConvention.userAssignedIdentity, format('-{0}', parameters('tokens').service), '')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "7977802807183279972"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('userAssignedIdentityName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject()), parameters('mlzTags'))]"
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                              "name": "[guid(parameters('userAssignedIdentityName'), 'e147488a-f6f5-4113-8e2d-b22465e65bf6', parameters('keyVaultName'))]",
                              "properties": {
                                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2018-11-30').principalId]",
                                "principalType": "ServicePrincipal",
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "diskEncryptionSetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                    },
                    "keyVaultUri": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                    },
                    "keyVaultResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                    },
                    "storageKeyName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "blobsPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                  },
                  "keyVaultUri": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logStorageSkuName": {
                    "value": "[parameters('logStorageSkuName')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "network": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "serviceToken": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tablesPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.table.{0}', environment().suffixes.storage))]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "14643688362617900410"
                    }
                  },
                  "parameters": {
                    "blobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "logStorageSkuName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "network": {
                      "type": "object"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tablesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "storage",
                      "subscriptionId": "[parameters('network').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "blobsPrivateDnsZoneResourceId": {
                            "value": "[parameters('blobsPrivateDnsZoneResourceId')]"
                          },
                          "keyVaultUri": {
                            "value": "[parameters('keyVaultUri')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "serviceToken": {
                            "value": "[parameters('serviceToken')]"
                          },
                          "skuName": {
                            "value": "[parameters('logStorageSkuName')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('network').namingConvention.storageAccount]"
                          },
                          "storageAccountNetworkInterfaceNamePrefix": {
                            "value": "[parameters('network').namingConvention.storageAccountNetworkInterface]"
                          },
                          "storageAccountPrivateEndpointNamePrefix": {
                            "value": "[parameters('network').namingConvention.storageAccountPrivateEndpoint]"
                          },
                          "storageEncryptionKeyName": {
                            "value": "[parameters('storageEncryptionKeyName')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tablesPrivateDnsZoneResourceId": {
                            "value": "[parameters('tablesPrivateDnsZoneResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityResourceId": {
                            "value": "[parameters('userAssignedIdentityResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "3275873970878681803"
                            }
                          },
                          "parameters": {
                            "blobsPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "keyVaultUri": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "serviceToken": {
                              "type": "string"
                            },
                            "skuName": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "storageAccountNetworkInterfaceNamePrefix": {
                              "type": "string"
                            },
                            "storageAccountPrivateEndpointNamePrefix": {
                              "type": "string"
                            },
                            "storageEncryptionKeyName": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tablesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "zones": [
                              "[parameters('blobsPrivateDnsZoneResourceId')]",
                              "[parameters('tablesPrivateDnsZoneResourceId')]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('storageAccountName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Storage/storageAccounts'), parameters('tags')['Microsoft.Storage/storageAccounts'], createObject()), parameters('mlzTags'))]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "kind": "StorageV2",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "properties": {
                                "accessTier": "Hot",
                                "allowBlobPublicAccess": false,
                                "allowCrossTenantReplication": false,
                                "allowedCopyScope": "PrivateLink",
                                "allowSharedKeyAccess": true,
                                "defaultToOAuthAuthentication": false,
                                "dnsEndpointType": "Standard",
                                "encryption": {
                                  "identity": {
                                    "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId')]"
                                  },
                                  "keySource": "Microsoft.KeyVault",
                                  "keyvaultproperties": {
                                    "keyvaulturi": "[parameters('keyVaultUri')]",
                                    "keyname": "[parameters('storageEncryptionKeyName')]"
                                  },
                                  "requireInfrastructureEncryption": true,
                                  "services": {
                                    "blob": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "file": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "queue": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "table": {
                                      "keyType": "Account",
                                      "enabled": true
                                    }
                                  }
                                },
                                "minimumTlsVersion": "TLS1_2",
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "virtualNetworkRules": [],
                                  "ipRules": [],
                                  "defaultAction": "Deny"
                                },
                                "publicNetworkAccess": "Disabled",
                                "supportsHttpsTrafficOnly": true
                              }
                            },
                            {
                              "copy": {
                                "name": "privateEndpoints",
                                "count": "[length(variables('zones'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "customNetworkInterfaceName": "[replace(parameters('storageAccountNetworkInterfaceNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                                      "groupIds": [
                                        "[split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]]"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneGroups",
                                "count": "[length(variables('zones'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]), parameters('storageAccountName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[variables('zones')[copyIndex()]]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "storageAccountResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('network').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-diag-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deployActivityLogDiagnosticSetting": {
                    "value": "[parameters('deployActivityLogDiagnosticSetting')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "keyVaultDiagnosticLogs": {
                    "value": "[parameters('keyVaultDiagnosticsLogs')]"
                  },
                  "keyVaultName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "networkSecurityGroupDiagnosticsLogs": {
                    "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                  },
                  "networkSecurityGroupDiagnosticsMetrics": {
                    "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupName.value]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "storageAccountResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountResourceId.value]"
                  },
                  "tier": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
                  },
                  "virtualNetworkDiagnosticsLogs": {
                    "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                  },
                  "virtualNetworkDiagnosticsMetrics": {
                    "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "11781736497698198070"
                    }
                  },
                  "parameters": {
                    "deployActivityLogDiagnosticSetting": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "keyVaultDiagnosticLogs": {
                      "type": "array"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "networkSecurityGroupDiagnosticsLogs": {
                      "type": "array"
                    },
                    "networkSecurityGroupDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    },
                    "tier": {
                      "type": "object"
                    },
                    "virtualNetworkDiagnosticsLogs": {
                      "type": "array"
                    },
                    "virtualNetworkDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('deployActivityLogDiagnosticSetting')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-activity-diags-{0}-{1}', parameters('tier').shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "12283647734355805914"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "name": "[format('diag-activity-log-{0}', subscription().subscriptionId)]",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "logs": [
                                  {
                                    "category": "Administrative",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Security",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ServiceHealth",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Alert",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Recommendation",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Policy",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Autoscale",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ResourceHealth",
                                    "enabled": true
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-kv-diags-{0}-{1}', parameters('tier').shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultDiagnosticSettingName": {
                            "value": "[parameters('tier').namingConvention.keyVaultDiagnosticSetting]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "keyVaultStorageAccountId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('keyVaultDiagnosticLogs')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "8093795796510715487"
                            }
                          },
                          "parameters": {
                            "keyVaultDiagnosticSettingName": {
                              "type": "string"
                            },
                            "keyVaultName": {
                              "type": "string"
                            },
                            "keyVaultStorageAccountId": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                              "name": "[parameters('keyVaultDiagnosticSettingName')]",
                              "properties": {
                                "storageAccountId": "[parameters('keyVaultStorageAccountId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-nsg-diags-{0}-{1}', parameters('tier').shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                          },
                          "logStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "metrics": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
                          },
                          "networkSecurityGroupDiagnosticSettingName": {
                            "value": "[parameters('tier').namingConvention.networkSecurityGroupDiagnosticSetting]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "5404623751544471689"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "logStorageAccountResourceId": {
                              "type": "string"
                            },
                            "metrics": {
                              "type": "array"
                            },
                            "networkSecurityGroupDiagnosticSettingName": {
                              "type": "string"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('networkSecurityGroupName'))]",
                              "name": "[parameters('networkSecurityGroupDiagnosticSettingName')]",
                              "properties": {
                                "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-diags-{0}-{1}', parameters('tier').shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                          },
                          "logStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "metrics": {
                            "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                          },
                          "virtualNetworkDiagnosticSettingName": {
                            "value": "[parameters('tier').namingConvention.virtualNetworkDiagnosticSetting]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "16786768982582775994"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "logStorageAccountResourceId": {
                              "type": "string"
                            },
                            "metrics": {
                              "type": "array"
                            },
                            "virtualNetworkDiagnosticSettingName": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('virtualNetworkName'))]",
                              "name": "[parameters('virtualNetworkDiagnosticSettingName')]",
                              "properties": {
                                "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('deployPolicy')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-policy-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "tiers": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
                  },
                  "policy": {
                    "value": "[parameters('policy')]"
                  },
                  "resourceGroupNames": {
                    "value": [
                      "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "17490889481454359550"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "policy": {
                      "type": "string"
                    },
                    "resourceGroupNames": {
                      "type": "array"
                    },
                    "tiers": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "policyAssignment",
                        "count": "[length(parameters('tiers'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('assign-policy-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[copyIndex()].subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupNames')[copyIndex()]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "builtInAssignment": {
                            "value": "[parameters('policy')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "15712109524737684124"
                            }
                          },
                          "parameters": {
                            "builtInAssignment": {
                              "type": "string",
                              "defaultValue": "NISTRev4",
                              "allowedValues": [
                                "NISTRev4",
                                "NISTRev5",
                                "IL5",
                                "CMMC"
                              ],
                              "metadata": {
                                "description": "[NISTRev4/NISTRev5/IL5/CMMC] Built-in policy assignments to assign, default is NISTRev4. IL5 is only available for AzureUsGovernment and will switch to NISTRev4 if tried in AzureCloud."
                              }
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "deployRemediation": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Starts a policy remediation for the VM Agent policies in hub RG. Set to false by default since this is time consuming in deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "The location of this resource"
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": "    {\r\n        \"listOfMembersToExcludeFromWindowsVMAdministratorsGroup\": \r\n        {\r\n        \"value\": \"admin\"\r\n        },\r\n        \"listOfMembersToIncludeInWindowsVMAdministratorsGroup\": \r\n        {\r\n        \"value\": \"azureuser\"\r\n        },\r\n        \"logAnalyticsWorkspaceIdforVMReporting\": \r\n        {\r\n        \"value\": \"<LAWORKSPACE>\"\r\n        },\r\n        \"IncludeArcMachines\": \r\n        {\r\n            \"value\": \"true\"\r\n        },\r\n        \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": \r\n        {\r\n            \"value\": \"1.2\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": \r\n        {\r\n            \"value\": \"Compliant\"\r\n        },\r\n        \"requiredRetentionDays\": \r\n        {\r\n            \"value\": \"365\"\r\n        },\r\n        \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": \r\n        {\r\n            \"value\": \"NetworkWatcherRG\"\r\n        }\r\n    }",
                            "$fxv#1": "    {\r\n        \"IncludeArcMachines\": \r\n        {\r\n            \"value\": \"true\"\r\n        },\r\n        \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": \r\n        {\r\n            \"value\": \"1.2\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": \r\n        {\r\n            \"value\": \"Compliant\"\r\n        },\r\n        \"requiredRetentionDays\": \r\n        {\r\n            \"value\": \"365\"\r\n        },\r\n        \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": \r\n        {\r\n            \"value\": \"NetworkWatcherRG\"\r\n        }\r\n    }",
                            "$fxv#2": "{\r\n    \"IncludeArcMachines\" : { \r\n        \"value\" : \"false\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\" : { \r\n        \"value\" : \"Compliant\"\r\n        },\r\n        \"MinimumTLSVersionForWindowsServers\" : { \r\n        \"value\" : \"1.2\"\r\n        },\r\n        \"requiredRetentionDays\" : { \r\n        \"value\" : \"365\"\r\n        },\r\n        \"effect-febd0533-8e55-448f-b837-bd0e06f16469\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"allowedContainerImagesRegex-febd0533-8e55-448f-b837-bd0e06f16469\" : { \r\n        \"value\" : \"^(.+){0}$\"\r\n        },\r\n        \"effect-95edb821-ddaf-4404-9732-666045e056b4\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-440b515e-a580-421e-abeb-b159a61ddcbc\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-233a2a17-77ca-4fb1-9b6b-69223d272a44\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"cpuLimit-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"0\"\r\n        },\r\n        \"memoryLimit-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"0\"\r\n        },\r\n        \"effect-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"runAsUserRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"MustRunAsNonRoot\"\r\n        },\r\n        \"runAsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"supplementalGroupsRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"fsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"effect-1c6e92c9-99f0-4e55-9cf2-0c234dc48f99\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-47a1ee2f-2a2a-4576-bf2a-e0e36709c2b8\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-df49d893-a74c-421d-bc95-c663042e5b80\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-c26596ff-4d70-4e6a-9a30-c2506bd2f80c\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-511f5417-5d12-434d-ab2e-816901e72a5e\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-82985f06-dc18-4a48-bc1c-b9f4f0098cfe\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-098fc59e-46c7-4d99-9b16-64990e543d75\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"NetworkWatcherResourceGroupName\" : { \r\n        \"value\" : \"NetworkWatcherRG\"\r\n        },\r\n        \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n        \"value\" : \"enabled\"\r\n        },\r\n        \"aadAuthenticationInServiceFabricMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-71ef260a-8f18-47b7-abcb-62d0673d94dc\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-862e97cf-49fc-4a5c-9de4-40d4e2e7c8eb\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-d9da03a1-f3c3-412a-9709-947156872263\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-b4ac1030-89c5-4697-8e00-28b5ba6a8811\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-ea0dfaed-95fb-448c-934e-d6e713ce393d\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-41425d9f-d1a5-499a-9932-f8ed8453932c\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-fc4d8e41-e223-45ea-9bf5-eada37891d87\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-86efb160-8de7-451d-bc08-5d475b0aadae\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-4ec52d6d-beb7-40c4-9a9e-fe753254690e\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-64d314f6-6062-4780-a861-c23e8951bee5\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1fd32ebd-e4c3-4e13-a54a-d7422d4d95f6\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-fa298e57-9444-42ba-bf04-86e8470e32c7\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1f905d99-2ab7-462c-a6b0-f709acca6c8f\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ba769a63-b8cc-4b2d-abf6-ac33c7204be8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0aa61e00-0a01-4a3c-9945-e93cffedf0e6\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-47031206-ce96-41f8-861b-6a915f3de284\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-51522a96-0869-4791-82f3-981000c2c67f\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-b5ec538c-daa0-4006-8596-35468b9148e8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-56a5ee18-2ae6-4810-86f7-18e39ce5629b\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-2e94d99a-8a36-4563-bc77-810d8893b671\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1fafeaf6-7927-4059-a50a-8eb2a7a6f2b5\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-99e9ccd8-3db9-4592-b0d1-14b1715a4d8a\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1f68a601-6e6d-4e42-babf-3f643a047ea2\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ca91455f-eace-4f96-be59-e6e2c35b4816\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-702dd420-7fcc-42c5-afe8-4026edd20fe0\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"diagnosticsLogsInRedisCacheMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"secureTransferToStorageAccountMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-7d092e0a-7acd-40d2-a975-dca21cae48c4\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-2a1a9cdf-e04d-429a-8416-3bfb72a1b26f\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"disableUnrestrictedNetworkToStorageAccountMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-55615ac9-af46-4a59-874e-391cc3dfb490\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1b8ca024-1d5c-4dec-8995-b1a932b41780\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-53503636-bcc9-4748-9663-5348217f160f\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-40cec1dd-a100-4920-b15b-3024fe8901ab\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-a049bf77-880b-470f-ba6d-9f21c530cf83\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ee980b6d-0eca-4501-8d54-f6290fd512c3\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1d84d5fb-01f6-4d12-ba4f-4a26081d403d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-37e0d2fe-28a5-43d6-a273-67d37d1f5606\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"identityDesignateMoreThanOneOwnerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"diskEncryptionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"emailNotificationToSubscriptionOwnerHighSeverityAlertsEnabledEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlDbEncryptionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vulnerabilityAssessmentOnManagedInstanceMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePHPVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"aadAuthenticationInSqlServerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vmssEndpointProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vmssOsVulnerabilitiesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"adaptiveApplicationControlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForPostgreSQLEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"ensureJavaVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityDesignateLessThanOwnersMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"securityContactEmailAddressForSubscriptionEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppRestrictCORSAccessMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithWritePermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithReadPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveDeprecatedAccountMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"ensurePythonVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePythonVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePHPVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePythonVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForMySQLEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"systemUpdatesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureJavaVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForWritePermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureJavaVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"nextGenerationFirewallMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"useRbacRulesMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"webAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"sqlServerAuditingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vnetEnableDDoSProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"endpointProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"jitNetworkAccessMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"geoRedundantStorageShouldBeEnabledForStorageAccountsEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"vmssSystemUpdatesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"longtermGeoRedundantBackupEnabledAzureSQLDatabasesEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"systemConfigurationsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForReadPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"containerBenchmarkMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveDeprecatedAccountWithOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vulnerabilityAssessmentOnServerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"kubernetesServiceVersionUpToDateMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"sqlDbVulnerabilityAssesmentMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"membersToIncludeInLocalAdministratorsGroup\" : { \r\n        \"value\" : \"\"\r\n        },\r\n        \"membersToExcludeInLocalAdministratorsGroup\" : { \r\n        \"value\" : \"\"\r\n        },\r\n        \"logAnalyticsWorkspaceIDForVMAgents\" : { \r\n        \"value\" : \"<LAWORKSPACE>\"\r\n        },\r\n        \"PHPLatestVersionForAppServices\" : { \r\n        \"value\" : \"7.4\"\r\n        },\r\n        \"JavaLatestVersionForAppServices\" : { \r\n        \"value\" : \"11\"\r\n        },\r\n        \"WindowsPythonLatestVersionForAppServices\" : { \r\n        \"value\" : \"3.6\"\r\n        },\r\n        \"LinuxPythonLatestVersionForAppServices\" : { \r\n        \"value\" : \"3.9\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityEmailsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"vulnerabilityAssessmentMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForWebAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityEmailsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"microsoftIaaSAntimalwareExtensionShouldBeDeployedOnWindowsServersEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"securityCenterStandardPricingTierShouldBeSelectedEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachinesEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensurePHPVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityEmailAdminsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"securityContactPhoneNumberShouldBeProvidedForSubscriptionEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"threatDetectionTypesOnManagedInstanceMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForAPIAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityEmailAdminsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"threatDetectionTypesOnServerMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachineScaleSetsEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        }\r\n}",
                            "$fxv#3": "{\r\n    \"logAnalyticsWorkspaceId-f47b5582-33ec-4c5c-87c0-b010a6b2e917\" : { \r\n        \"value\" : \"<LAWORKSPACE>\"\r\n    },\r\n    \"effect-09024ccc-0c5f-475e-9457-b7c0d9ed487b\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"MembersToExclude-69bf4abd-ca1e-4cf6-8b5a-762d42e61d4f\" :{\r\n        \"value\": \"\"\r\n    },\r\n    \"MembersToInclude-30f71ea1-ac77-4f26-9fc5-2d926bbd4ba7\": {\r\n        \"value\": \"\"\r\n    },\r\n    \"effect-0961003e-5a0a-4549-abde-af6a37f2724d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0b15565f-aa9e-48ba-8619-45960f2c314d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0e60b895-3786-45da-8377-9c6b4b6ac5f9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-17k78e20-9358-41c9-923c-fb736d382a12\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-1bc1795e-d44a-4d48-9b3b-6fff0fd5f9ba\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"PHPLatestVersion\" : { \r\n    \"value\" : \"7.3\"\r\n    },\r\n    \"effect-22bee202-a82f-4305-9a2a-6d7f44d4dedb\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-26a828e1-e88f-464e-bbb3-c134a282b9de\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-34c877ad-507e-4c82-993e-3452a6e0ad3c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-3c735d8a-a4ba-4a3a-b7cf-db7754cf57f4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-404c3081-a854-4457-ae30-26a93ef643f9\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-47a6b606-51aa-4496-8bb7-64b11cf66adc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-496223c3-ad65-4ecd-878a-bae78737e9ed\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"JavaLatestVersion\" : { \r\n    \"value\" : \"11\"\r\n    },\r\n    \"effect-4f11b553-d42e-4e3a-89be-32ca364cad4c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-4f4f78b8-e367-4b10-a341-d9a4ad5cf1c7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5c607a2e-c700-4744-8254-d77e7c9eb5e4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5f76cf89-fbf2-47fd-a3f4-b891fa780b60\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6b1cbf55-e8b6-442f-ba4c-7246b6381474\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6d555dd1-86f2-4f1c-8ed7-5abae7c6cbab\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-7008174a-fd10-4ef0-817e-fc820a951d73\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"LinuxPythonLatestVersion\" : { \r\n    \"value\" : \"3.8\"\r\n    },\r\n    \"effect-7238174a-fd10-4ef0-817e-fc820a951d73\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7261b898-8a84-4db8-9e04-18527132abb3\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-74c3584d-afae-46f7-a20a-6f8adba71a16\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-86b3d65f-7626-441e-b690-81a8b71cff60\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-88999f4c-376a-45c8-bcb3-4058f713cf39\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-8c122334-9d20-4eb8-89ea-ac9a705b74ae\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-8cb6aa8b-9e41-4f4e-aa25-089a7ac2581e\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9297c21d-2ed6-4474-b48f-163f75654ce3\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-991310cd-e9f3-47bc-b7b6-f57b557d07db\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9b597639-28e4-48eb-b506-56b05d366257\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9d0b6ea4-93e2-4578-bf2f-6bb17d22b4bc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9daedab3-fb2d-461e-b861-71790eead4f6\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-a4af4a39-4135-47fb-b175-47fbdf85311d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n    \"value\" : \"enabled\"\r\n    },\r\n    \"effect-a70ca396-0a34-413a-88e1-b956c1e683be\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-aa633080-8b72-40c4-a2d7-d00c03e80bed\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-abfb4388-5bf4-4ad7-ba82-2cd2f41ceae9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-abfb7388-5bf4-4ad7-ba99-2cd2f41cebb9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-af6cd1bd-1635-48cb-bde7-5b15693900b9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\" : { \r\n    \"value\" : \"NetworkWatcherRG\"\r\n    },\r\n    \"effect-b7ddfbdc-1260-477d-91fd-98bd9be789a6\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c3f317a7-a95c-4547-b7e7-11017ebdf2fe\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-cb510bfd-1cba-4d9f-a230-cb0976f4bb71\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e1e5fd5d-3e4c-4ce1-8661-7d1873ae6b15\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e2c1c086-2d84-4019-bff3-c44ccd95113c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e3576e28-8b17-4677-84c3-db2990658d64\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e8cbc669-f12d-49eb-93e7-9273119e9933\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e9c8d085-d9cc-4b17-9cdc-059f1f01f19e\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ebb62a0c-3560-49e1-89ed-27e074e9f8ad\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-efbde977-ba53-4479-b8e9-10b957924fbf\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f0e6e85b-9b9f-4a4b-b67b-f730d42f1b0b\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f6de0be7-9a8a-4b8a-b349-43cf02d22f7c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f8456c1c-aa66-4dfb-861a-25d127b775c9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f9d614c5-c173-4d56-95a7-b4437057d193\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-fb893a29-21bb-418c-a157-e99480ec364c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-feedbf84-6b99-488c-acc2-71c829aa5ffc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-3b980d31-7904-4bb7-8575-5665739a8052\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6e2593d9-add6-4083-9c9b-4b7d2188c899\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b607c5de-e7d9-4eee-9e5c-83f1bcee4fa0\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-12430be1-6cc8-4527-a9a8-e3d38f250096\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"modeRequirement-12430be1-6cc8-4527-a9a8-e3d38f250096\" : { \r\n    \"value\" : \"Detection\"\r\n    },\r\n    \"effect-425bea59-a659-4cbb-8d31-34499bd030b8\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"modeRequirement-425bea59-a659-4cbb-8d31-34499bd030b8\" : { \r\n    \"value\" : \"Detection\"\r\n    },\r\n    \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-013e242c-8828-4970-87b3-ab247555486d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-d38fc420-0735-4ef3-ac11-c806f651a570\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-a1181c5f-672a-477a-979a-7d58aa086233\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-308fbb08-4ab8-4e67-9b29-592e93fb94fa\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-4da35fc9-c9e7-4960-aec9-797fe7d9051d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-523b5cd1-3e23-492f-a539-13118b6d1e3a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7fe3b40f-802b-4cdd-8bd4-fd799c948cc2\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-c25d9a16-bc35-4e15-a7e5-9db606bf9ed4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b0f33259-77d7-4c9e-aac6-3aabcfae693c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-0820b7b9-23aa-4725-a1ce-ae4558f718e5\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fab\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-358c20a6-3f9e-4f0e-97ff-c6ce485e2aac\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5744710e-cc2f-4ee8-8809-3b11e89f4bc9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ac4a19c2-fa67-49b4-8ae5-0b2e78c49457\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c9d007d0-c057-4772-b18c-01e546713bcd\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-e372f825-a257-4fb8-9175-797a8a8627d6\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-d158790f-bfb0-486c-8631-2dc6b4e8e6af\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-e802a67a-daf5-4436-9ea6-f6d821dd0c5d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-a451c1ef-c6ca-483d-87ed-f49761e3ffb5\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftSql-servers-firewallRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-securityRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-securityRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ae89ebca-1c92-4898-ac2c-9f63decb045c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-d26f7642-7545-4e18-9b75-8c9bbdee3a9a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-1a4e592a-6a6e-44a5-9814-e36264ca96e7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7796937f-307b-4598-941c-67d3a05ebfe7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-c5447c04-a4d7-4ba8-a263-c9ee321a6858\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-41388f1c-2db0-4c25-95b2-35d7f5ccbfa9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b02aacc0-b073-424e-8298-42b22829ee0a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-057d6cfe-9c4f-4a6d-bc60-14420ea1f1a9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0ec47710-77ff-4a3d-9181-6aa50af424d0\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-48af4db5-9b8b-401c-8e74-076be876a430\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-82339799-d096-41ae-8538-b108becf0970\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1b7aa243-30e4-4c9e-bca8-d0d3022b634a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ef2a8f2a-b3d9-49cd-a8a8-9a3aaaf647d9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-bb91dfba-c30d-4263-9add-9c2384e659a6\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e71308d3-144b-4262-b144-efdc3cc90517\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2bdd0062-9d75-436e-89df-487dd8e4b3c7\" : { \r\n    \"value\" : \"Disabled\"\r\n    },\r\n    \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-6fac406b-40ca-413b-bf8e-0bf964659c25\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-048248b0-55cd-46da-b1ff-39efd52db260\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0d134df8-db83-46fb-ad72-fe0c9428c8dd\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fb2\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\" : { \r\n    \"value\" : \"audit\"\r\n    },\r\n    \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c43e4a30-77cb-48ab-a4dd-93f175c63b57\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1f314764-cb73-4fc9-b863-8eca98ac36e9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-123a3936-f020-408a-ba0c-47873faf1534\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    }\r\n}\r\n",
                            "modifiedAssignment": "[if(and(equals(toLower(environment().name), toLower('AzureCloud')), equals(toLower(parameters('builtInAssignment')), toLower('IL5'))), 'NISTRev4', parameters('builtInAssignment'))]",
                            "assignmentName": "[format('{0} {1}', variables('modifiedAssignment'), resourceGroup().name)]",
                            "agentVmssAssignmentName": "[format('Deploy VMSS Agents {0}', resourceGroup().name)]",
                            "agentVmAssignmentName": "[format('Deploy VM Agents {0}', resourceGroup().name)]",
                            "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                            "lawsReaderRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('assignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', json(replace(variables('$fxv#0'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', json(replace(variables('$fxv#2'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', json(replace(variables('$fxv#3'), '<LAWORKSPACE>', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId))))[variables('modifiedAssignment')].id]",
                                "parameters": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', json(replace(variables('$fxv#0'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', json(replace(variables('$fxv#2'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', json(replace(variables('$fxv#3'), '<LAWORKSPACE>', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId))))[variables('modifiedAssignment')].parameters]"
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmssAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '75714362-cae7-409e-9b99-a8e5075b7fad')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '55f3eceb-5573-4f18-9695-226972c6d74a')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('assignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[if(empty(variables('modifiedAssignment')), '', reference(resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName')), '2020-09-01', 'full').identity.principalId)]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmssAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('deployRemediation')]",
                              "type": "Microsoft.PolicyInsights/remediations",
                              "apiVersion": "2019-07-01",
                              "name": "VM-Agent-Policy-Remediation",
                              "properties": {
                                "policyAssignmentId": "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]",
                                "resourceDiscoveryMode": "ReEvaluateCompliance"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Assign-Laws-Role-Policy-{0}', resourceGroup().name)]",
                              "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "targetResourceId": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[variables('lawsReaderRoleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "2709473749440196253"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('deployDefender')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('set-defender-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "emailSecurityContact": {
                    "value": "[parameters('emailSecurityContact')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "9328080537587895542"
                    }
                  },
                  "parameters": {
                    "defenderPlans": {
                      "type": "array",
                      "defaultValue": [
                        "VirtualMachines"
                      ],
                      "metadata": {
                        "description": "Defender Paid protection Plans. Even if a customer selects the free sku, at least 1 paid protection plan must be specified."
                      }
                    },
                    "enableAutoProvisioning": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Turn automatic deployment by Defender of the MMA (OMS VM extension) on or off"
                      }
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Specify the ID of your custom Log Analytics workspace to collect Defender data."
                      }
                    },
                    "emailSecurityContact": {
                      "type": "string",
                      "metadata": {
                        "description": "Email address of the contact, in the form of john@doe.com"
                      }
                    },
                    "policySetDescription": {
                      "type": "string",
                      "defaultValue": "The Microsoft Cloud Security Benchmark initiative represents the policies and controls implementing security recommendations defined in Microsoft Cloud Security Benchmark v2, see https://aka.ms/azsecbm. This also serves as the Microsoft Defender for Cloud default policy initiative. You can directly assign this initiative, or manage its policies and compliance results within Microsoft Defender.",
                      "metadata": {
                        "description": "Policy Initiative description field"
                      }
                    },
                    "defenderSkuTier": {
                      "type": "string",
                      "defaultValue": "Free",
                      "metadata": {
                        "description": "[Standard/Free] The SKU for Defender. It defaults to \"Free\"."
                      }
                    }
                  },
                  "variables": {
                    "autoProvisioning": "[if(parameters('enableAutoProvisioning'), 'On', 'Off')]",
                    "defenderPaidPlanConfig": {
                      "AzureCloud": {
                        "Api": {
                          "subPlan": "P1"
                        },
                        "appServices": {},
                        "KeyVaults": {
                          "subPlan": "PerKeyVault"
                        },
                        "Arm": {
                          "subPlan": "PerSubscription"
                        },
                        "CloudPosture": {
                          "extensions": [
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            },
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessVmScanning",
                              "isEnabled": "True"
                            },
                            {
                              "name": "EntraPermissionsManagement",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "Containers": {
                          "extensions": [
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "CosmosDbs": {},
                        "StorageAccounts": {
                          "subPlan": "DefenderForStorageV2",
                          "extensions": [
                            {
                              "name": "OnUploadMalwareScanning",
                              "isEnabled": "True",
                              "additionalExtensionProperties": {
                                "CapGBPerMonthPerStorageAccount": "5000"
                              }
                            },
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "VirtualMachines": {
                          "subPlan": "P1"
                        },
                        "SqlServerVirtualMachines": {},
                        "SqlServers": {},
                        "OpenSourceRelationalDatabases": {}
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "defenderFreeAllClouds",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[equals(parameters('defenderSkuTier'), 'Free')]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardNoSubplanNoExtensions",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), not(equals(environment().name, 'AzureCloud')))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardSubplanExtensionsAzureCloud",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), equals(environment().name, 'AzureCloud'))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]",
                        "subPlan": "[if(contains(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'subPlan'), variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]].subPlan, json('null'))]",
                        "extensions": "[if(contains(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'extensions'), variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]].extensions, json('null'))]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/autoProvisioningSettings",
                      "apiVersion": "2019-01-01",
                      "name": "default",
                      "properties": {
                        "autoProvision": "[variables('autoProvisioning')]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/workspaceSettings",
                      "apiVersion": "2019-01-01",
                      "name": "default",
                      "properties": {
                        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "scope": "[subscription().id]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('emailSecurityContact')))]",
                      "type": "Microsoft.Security/securityContacts",
                      "apiVersion": "2020-01-01-preview",
                      "name": "default",
                      "properties": {
                        "notificationsByRole": {
                          "roles": [
                            "AccountAdmin",
                            "Contributor",
                            "Owner",
                            "ServiceAdmin"
                          ],
                          "state": "On"
                        },
                        "alertNotifications": {
                          "state": "On"
                        },
                        "emails": "[parameters('emailSecurityContact')]"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2022-06-01",
                      "name": "Microsoft Cloud Security Benchmark",
                      "properties": {
                        "displayName": "Defender Default",
                        "description": "[parameters('policySetDescription')]",
                        "enforcementMode": "DoNotEnforce",
                        "parameters": {},
                        "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '1f3afdf9-d0c9-4c3d-847f-89da613e70a8')]"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "diskEncryptionSetResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
            },
            "locatonProperties": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locationProperties.value]"
            },
            "mlzTags": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
            },
            "namingConvention": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention]"
            },
            "privateDnsZones": {
              "type": "array",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
            },
            "resourcePrefix": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01', 'full').tags.resourcePrefix]"
            },
            "storageEncryptionKeyName": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
            },
            "subnetResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
            },
            "tier": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
            },
            "tokens": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
            }
          }
        }
      }
    },
    {
      "condition": "[equals(length(variables('deploymentLocations')), 2)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "additionalSubnets": "[if(and(and(contains(parameters('fslogixStorageService'), 'AzureNetAppFiles'), not(empty(parameters('azureNetAppFilesSubnetAddressPrefix')))), equals(length(variables('deploymentLocations')), 2)), createObject('value', createArray(createObject('name', 'AzureNetAppFiles', 'addressPrefix', parameters('azureNetAppFilesSubnetAddressPrefix')))), createObject('value', createArray()))]",
          "deployActivityLogDiagnosticSetting": {
            "value": false
          },
          "deployDefender": {
            "value": false
          },
          "deploymentNameSuffix": {
            "value": "[format('hosts-{0}', parameters('deploymentNameSuffix'))]"
          },
          "deployNetworkWatcher": {
            "value": "[parameters('deployNetworkWatcherVirtualMachines')]"
          },
          "deployPolicy": {
            "value": "[parameters('deployPolicy')]"
          },
          "emailSecurityContact": {
            "value": "[parameters('emailSecurityContact')]"
          },
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "firewallResourceId": {
            "value": "[parameters('hubAzureFirewallResourceId')]"
          },
          "hubVirtualNetworkResourceId": {
            "value": "[parameters('hubVirtualNetworkResourceId')]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "location": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[parameters('operationsLogAnalyticsWorkspaceResourceId')]"
          },
          "policy": {
            "value": "[parameters('policy')]"
          },
          "stampIndex": {
            "value": "[string(parameters('stampIndex'))]"
          },
          "subnetAddressPrefix": {
            "value": "[parameters('subnetAddressPrefixes')[1]]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualNetworkAddressPrefix": {
            "value": "[parameters('virtualNetworkAddressPrefixes')[1]]"
          },
          "workloadName": {
            "value": "avd"
          },
          "workloadShortName": {
            "value": "avd"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "16771750129279914222"
            }
          },
          "parameters": {
            "additionalSubnets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of additional subnets to support the tier3 workload."
              }
            },
            "deployActivityLogDiagnosticSetting": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy a diagnostic setting for the Activity Log."
              }
            },
            "deployDefender": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy Defender for Cloud."
              }
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "The suffix to append to the deployment name. It defaults to the current UTC date and time."
              }
            },
            "deployNetworkWatcher": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy Network Watcher for the deployment location."
              }
            },
            "deployPolicy": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy a policy assignment."
              }
            },
            "emailSecurityContact": {
              "type": "string",
              "metadata": {
                "description": "The email address to use for Defender for Cloud notifications."
              }
            },
            "environmentAbbreviation": {
              "type": "string",
              "defaultValue": "dev",
              "allowedValues": [
                "dev",
                "prod",
                "test"
              ],
              "metadata": {
                "description": "The abbreviation for the environment."
              }
            },
            "firewallResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Firewall in the HUB."
              }
            },
            "hubVirtualNetworkResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the HUB Virtual Network."
              }
            },
            "identifier": {
              "type": "string",
              "maxLength": 3,
              "metadata": {
                "description": "The identifier for the resource names. This value should represent the workload, project, or business unit."
              }
            },
            "keyVaultDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AuditEvent",
                  "enabled": true
                },
                {
                  "category": "AzurePolicyEvaluationDetails",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Key Vault Diagnostic Logs categories to collect. See \"https://learn.microsoft.com/en-us/azure/key-vault/general/logging?tabs=Vault\" for valid values."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location for the deployment. It defaults to the location of the deployment."
              }
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics Workspace to use for log storage."
              }
            },
            "logStorageSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
              }
            },
            "networkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Network Security Group diagnostic logs to apply to the workload Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
              }
            },
            "networkSecurityGroupDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The metrics to monitor for the Network Security Group."
              }
            },
            "networkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The rules to apply to the Network Security Group."
              }
            },
            "policy": {
              "type": "string",
              "defaultValue": "NISTRev4",
              "metadata": {
                "description": "The policy to assign to the workload."
              }
            },
            "stampIndex": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The stamp index allows for multiple AVD stamps with the same business unit or project to support different use cases."
              }
            },
            "subnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The address prefix for the workload subnet."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The tags to apply to the resources."
              }
            },
            "virtualNetworkAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The address prefix for the workload Virtual Network."
              }
            },
            "virtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The diagnostic logs to apply to the workload Virtual Network."
              }
            },
            "virtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The metrics to monitor for the workload Virtual Network."
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "tier3",
              "minLength": 1,
              "maxLength": 10,
              "metadata": {
                "description": "The name for the workload."
              }
            },
            "workloadShortName": {
              "type": "string",
              "defaultValue": "t3",
              "minLength": 1,
              "maxLength": 3,
              "metadata": {
                "description": "The short name for the workload."
              }
            }
          },
          "variables": {
            "hubResourceGroupName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
            "hubSubscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
            "subscriptionId": "[subscription().subscriptionId]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networks": {
                    "value": [
                      {
                        "name": "[parameters('workloadName')]",
                        "shortName": "[parameters('workloadShortName')]",
                        "deployUniqueResources": false,
                        "subscriptionId": "[variables('subscriptionId')]",
                        "nsgDiagLogs": "[parameters('networkSecurityGroupDiagnosticsLogs')]",
                        "nsgDiagMetrics": "[parameters('networkSecurityGroupDiagnosticsMetrics')]",
                        "nsgRules": "[parameters('networkSecurityGroupRules')]",
                        "vnetAddressPrefix": "[parameters('virtualNetworkAddressPrefix')]",
                        "vnetDiagLogs": "[parameters('virtualNetworkDiagnosticsLogs')]",
                        "vnetDiagMetrics": "[parameters('virtualNetworkDiagnosticsMetrics')]",
                        "subnetAddressPrefix": "[parameters('subnetAddressPrefix')]"
                      }
                    ]
                  },
                  "resourcePrefix": {
                    "value": "[parameters('identifier')]"
                  },
                  "stampIndex": {
                    "value": "[parameters('stampIndex')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "17469290750660856958"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networks": {
                      "type": "array"
                    },
                    "resourcePrefix": {
                      "type": "string"
                    },
                    "stampIndex": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneNames_Backup",
                        "count": "[length(items(variables('locations')))]",
                        "input": "[format('privatelink.{0}.backup.windowsazure.{1}', items(variables('locations'))[copyIndex('privateDnsZoneNames_Backup')].value.recoveryServicesGeo, coalesce(variables('privateDnsZoneSuffixes_Backup')[environment().name], variables('cloudSuffix')))]"
                      }
                    ],
                    "$fxv#0": {
                      "AzureChina": {
                        "chinaeast": {
                          "abbreviation": "cne",
                          "recoveryServicesGeo": "sha",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinaeast2": {
                          "abbreviation": "cne2",
                          "recoveryServicesGeo": "sha2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth": {
                          "abbreviation": "cnn",
                          "recoveryServicesGeo": "bjb",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth2": {
                          "abbreviation": "cnn2",
                          "recoveryServicesGeo": "bjb2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        }
                      },
                      "AzureCloud": {
                        "australiacentral": {
                          "abbreviation": "auc",
                          "recoveryServicesGeo": "acl",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiacentral2": {
                          "abbreviation": "auc2",
                          "recoveryServicesGeo": "acl2",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiaeast": {
                          "abbreviation": "aue",
                          "recoveryServicesGeo": "ae",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiasoutheast": {
                          "abbreviation": "ause",
                          "recoveryServicesGeo": "ase",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "brazilsouth": {
                          "abbreviation": "brs",
                          "recoveryServicesGeo": "brs",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "brazilsoutheast": {
                          "abbreviation": "brse",
                          "recoveryServicesGeo": "bse",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "canadacentral": {
                          "abbreviation": "cac",
                          "recoveryServicesGeo": "cnc",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "canadaeast": {
                          "abbreviation": "cae",
                          "recoveryServicesGeo": "cne",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "centralindia": {
                          "abbreviation": "inc",
                          "recoveryServicesGeo": "inc",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "centralus": {
                          "abbreviation": "usc",
                          "recoveryServicesGeo": "cus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "eastasia": {
                          "abbreviation": "ase",
                          "recoveryServicesGeo": "ea",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "eastus": {
                          "abbreviation": "use",
                          "recoveryServicesGeo": "eus",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "eastus2": {
                          "abbreviation": "use2",
                          "recoveryServicesGeo": "eus2",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "francecentral": {
                          "abbreviation": "frc",
                          "recoveryServicesGeo": "frc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "francesouth": {
                          "abbreviation": "frs",
                          "recoveryServicesGeo": "frs",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanynorth": {
                          "abbreviation": "den",
                          "recoveryServicesGeo": "gn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanywestcentral": {
                          "abbreviation": "dewc",
                          "recoveryServicesGeo": "gwc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "israelcentral": {
                          "abbreviation": "ilc",
                          "recoveryServicesGeo": "ilc",
                          "timeDifference": "+2:00",
                          "timeZone": "Israel Standard Time"
                        },
                        "italynorth": {
                          "abbreviation": "itn",
                          "recoveryServicesGeo": "itn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "japaneast": {
                          "abbreviation": "jpe",
                          "recoveryServicesGeo": "jpe",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "japanwest": {
                          "abbreviation": "jpw",
                          "recoveryServicesGeo": "jpw",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "jioindiacentral": {
                          "abbreviation": "injc",
                          "recoveryServicesGeo": "jic",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "jioindiawest": {
                          "abbreviation": "injw",
                          "recoveryServicesGeo": "jiw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "koreacentral": {
                          "abbreviation": "krc",
                          "recoveryServicesGeo": "krc",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "koreasouth": {
                          "abbreviation": "krs",
                          "recoveryServicesGeo": "krs",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "northcentralus": {
                          "abbreviation": "usnc",
                          "recoveryServicesGeo": "ncus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "northeurope": {
                          "abbreviation": "eun",
                          "recoveryServicesGeo": "ne",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "norwayeast": {
                          "abbreviation": "noe",
                          "recoveryServicesGeo": "nwe",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "norwaywest": {
                          "abbreviation": "now",
                          "recoveryServicesGeo": "nww",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "polandcentral": {
                          "abbreviation": "plc",
                          "recoveryServicesGeo": "plc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "qatarcentral": {
                          "abbreviation": "qac",
                          "recoveryServicesGeo": "qac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "southafricanorth": {
                          "abbreviation": "zan",
                          "recoveryServicesGeo": "san",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southafricawest": {
                          "abbreviation": "zaw",
                          "recoveryServicesGeo": "saw",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southcentralus": {
                          "abbreviation": "ussc",
                          "recoveryServicesGeo": "scus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "southeastasia": {
                          "abbreviation": "asse",
                          "recoveryServicesGeo": "sea",
                          "timeDifference": "+8:00",
                          "timeZone": "Singapore Standard Time"
                        },
                        "southindia": {
                          "abbreviation": "ins",
                          "recoveryServicesGeo": "ins",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "swedencentral": {
                          "abbreviation": "sec",
                          "recoveryServicesGeo": "sdc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandnorth": {
                          "abbreviation": "chn",
                          "recoveryServicesGeo": "szn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandwest": {
                          "abbreviation": "chw",
                          "recoveryServicesGeo": "szw",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "uaecentral": {
                          "abbreviation": "aec",
                          "recoveryServicesGeo": "uac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uaenorth": {
                          "abbreviation": "aen",
                          "recoveryServicesGeo": "uan",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uksouth": {
                          "abbreviation": "uks",
                          "recoveryServicesGeo": "uks",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "ukwest": {
                          "abbreviation": "ukw",
                          "recoveryServicesGeo": "ukw",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "westcentralus": {
                          "abbreviation": "uswc",
                          "recoveryServicesGeo": "wcus",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "westeurope": {
                          "abbreviation": "euw",
                          "recoveryServicesGeo": "we",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "westindia": {
                          "abbreviation": "inw",
                          "recoveryServicesGeo": "inw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "westus": {
                          "abbreviation": "usw",
                          "recoveryServicesGeo": "wus",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus2": {
                          "abbreviation": "usw2",
                          "recoveryServicesGeo": "wus2",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus3": {
                          "abbreviation": "usw3",
                          "recoveryServicesGeo": "wus3",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        }
                      },
                      "AzureUSGovernment": {
                        "usdodcentral": {
                          "abbreviation": "dodc",
                          "recoveryServicesGeo": "udc",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usdodeast": {
                          "abbreviation": "dode",
                          "recoveryServicesGeo": "ude",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usgovarizona": {
                          "abbreviation": "az",
                          "recoveryServicesGeo": "uga",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "usgovtexas": {
                          "abbreviation": "tx",
                          "recoveryServicesGeo": "ugt",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usgovvirginia": {
                          "abbreviation": "va",
                          "recoveryServicesGeo": "ugv",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        }
                      },
                      "USNat": {
                        "usnateast": {
                          "abbreviation": "east",
                          "recoveryServicesGeo": "exe",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usnatwest": {
                          "abbreviation": "west",
                          "recoveryServicesGeo": "exw",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        }
                      },
                      "USSec": {
                        "usseceast": {
                          "abbreviation": "east",
                          "recoveryServicesGeo": "rxe",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "ussecwest": {
                          "abbreviation": "west",
                          "recoveryServicesGeo": "rxw",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        }
                      }
                    },
                    "$fxv#1": "1.0.0",
                    "$fxv#2": {
                      "actionGroups": "ag",
                      "applicationGroups": "vdag",
                      "automationAccounts": "aa",
                      "availabilitySets": "avail",
                      "azureFirewalls": "afw",
                      "bastionHosts": "bas",
                      "computeGallieries": "cg",
                      "dataCollectionRuleAssociations": "dcra",
                      "dataCollectionRules": "dcr",
                      "diagnosticSettings": "diag",
                      "diskAccesses": "da",
                      "diskEncryptionSets": "des",
                      "disks": "disk",
                      "firewallPolicies": "afwp",
                      "hostPools": "vdpool",
                      "ipConfigurations": "ipconf",
                      "keyVaults": "kv",
                      "logAnalyticsWorkspaces": "log",
                      "netAppAccounts": "naa",
                      "netAppCapacityPools": "nacp",
                      "networkInterfaces": "nic",
                      "networkSecurityGroups": "nsg",
                      "networkWatchers": "nw",
                      "privateEndpoints": "pe",
                      "privateLinkScopes": "pls",
                      "publicIPAddresses": "pip",
                      "recoveryServicesVaults": "rsv",
                      "remoteApplicationGroups": "vdag",
                      "resourceGroups": "rg",
                      "routeTables": "rt",
                      "storageAccounts": "st",
                      "subnets": "snet",
                      "userAssignedIdentities": "id",
                      "virtualMachines": "vm",
                      "virtualNetworks": "vnet",
                      "workspaces": "vdws"
                    },
                    "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]",
                    "environmentName": {
                      "dev": "Development",
                      "prod": "Production",
                      "test": "Test"
                    },
                    "locations": "[variables('$fxv#0')[environment().name]]",
                    "mlzTags": {
                      "environment": "[variables('environmentName')[parameters('environmentAbbreviation')]]",
                      "landingZoneName": "MissionLandingZone",
                      "landingZoneVersion": "[variables('$fxv#1')]",
                      "resourcePrefix": "[parameters('resourcePrefix')]"
                    },
                    "resourceAbbreviations": "[variables('$fxv#2')]",
                    "tokens": {
                      "resource": "resource_token",
                      "service": "service_token"
                    },
                    "privateDnsZoneNames": "[union(createArray(format('privatelink.agentsvc.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudSuffix'))), format('privatelink.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudSuffix'))), format('privatelink.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureWebSites')[environment().name], format('appservice.{0}', variables('cloudSuffix')))), format('scm.privatelink.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureWebSites')[environment().name], format('appservice.{0}', variables('cloudSuffix')))), format('privatelink.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudSuffix'))), format('privatelink-global.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudSuffix'))), format('privatelink.file.{0}', environment().suffixes.storage), format('privatelink.queue.{0}', environment().suffixes.storage), format('privatelink.table.{0}', environment().suffixes.storage), format('privatelink.blob.{0}', environment().suffixes.storage), format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore')), format('privatelink.monitor.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix'))), format('privatelink.ods.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix'))), format('privatelink.oms.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix')))), variables('privateDnsZoneNames_Backup'))]",
                    "privateDnsZoneSuffixes_AzureAutomation": {
                      "AzureCloud": "net",
                      "AzureUSGovernment": "us",
                      "USNat": null,
                      "USSec": null
                    },
                    "privateDnsZoneSuffixes_AzureVirtualDesktop": {
                      "AzureCloud": "microsoft.com",
                      "AzureUSGovernment": "azure.us",
                      "USNat": null,
                      "USSec": null
                    },
                    "privateDnsZoneSuffixes_AzureWebSites": {
                      "AzureCloud": "azurewebsites.net",
                      "AzureUSGovernment": "azurewebsites.us",
                      "USNat": null,
                      "USSec": null
                    },
                    "privateDnsZoneSuffixes_Backup": {
                      "AzureCloud": "com",
                      "AzureUSGovernment": "us",
                      "USNat": null,
                      "USSec": null
                    },
                    "privateDnsZoneSuffixes_Monitor": {
                      "AzureCloud": "azure.com",
                      "AzureUSGovernment": "azure.us",
                      "USNat": null,
                      "USSec": null
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "namingConventions",
                        "count": "[length(parameters('networks'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('naming-convention-{0}-{1}', parameters('networks')[copyIndex()].shortName, parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "locationAbbreviation": {
                            "value": "[variables('locations')[parameters('location')].abbreviation]"
                          },
                          "environmentAbbreviation": {
                            "value": "[parameters('environmentAbbreviation')]"
                          },
                          "networkName": {
                            "value": "[parameters('networks')[copyIndex()].name]"
                          },
                          "networkShortName": {
                            "value": "[parameters('networks')[copyIndex()].shortName]"
                          },
                          "resourceAbbreviations": {
                            "value": "[variables('resourceAbbreviations')]"
                          },
                          "resourcePrefix": {
                            "value": "[parameters('resourcePrefix')]"
                          },
                          "stampIndex": {
                            "value": "[parameters('stampIndex')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('networks')[copyIndex()].subscriptionId]"
                          },
                          "tokens": {
                            "value": "[variables('tokens')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "3285265744534691733"
                            }
                          },
                          "parameters": {
                            "environmentAbbreviation": {
                              "type": "string"
                            },
                            "locationAbbreviation": {
                              "type": "string"
                            },
                            "networkName": {
                              "type": "string"
                            },
                            "networkShortName": {
                              "type": "string"
                            },
                            "resourceAbbreviations": {
                              "type": "object"
                            },
                            "resourcePrefix": {
                              "type": "string"
                            },
                            "stampIndex": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "subscriptionId": {
                              "type": "string"
                            },
                            "tokens": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "namingConvention": "[format('{0}-{1}{2}-{3}-{4}-{5}', toLower(parameters('resourcePrefix')), if(empty(parameters('stampIndex')), '', format('{0}-', parameters('stampIndex'))), parameters('tokens').resource, parameters('networkName'), parameters('environmentAbbreviation'), parameters('locationAbbreviation'))]",
                            "namingConvention_Service": "[format('{0}-{1}{2}-{3}-{4}-{5}-{6}', toLower(parameters('resourcePrefix')), if(empty(parameters('stampIndex')), '', format('{0}-', parameters('stampIndex'))), parameters('tokens').resource, parameters('tokens').service, parameters('networkName'), parameters('environmentAbbreviation'), parameters('locationAbbreviation'))]",
                            "names": {
                              "actionGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').actionGroups)]",
                              "applicationGroup": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').applicationGroups)]",
                              "automationAccount": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').automationAccounts)]",
                              "automationAccountDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').automationAccounts)]",
                              "automationAccountNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, parameters('resourceAbbreviations').automationAccounts)]",
                              "automationAccountPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, parameters('resourceAbbreviations').automationAccounts)]",
                              "availabilitySet": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').availabilitySets)]",
                              "azureFirewall": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').azureFirewalls)]",
                              "azureFirewallClientPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').publicIpAddresses), parameters('tokens').service, format('client-{0}', parameters('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallClientPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-client-{1}', parameters('resourceAbbreviations').publicIpAddresses, parameters('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').azureFirewalls)]",
                              "azureFirewallManagementPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').publicIpAddresses), parameters('tokens').service, format('mgmt-{0}', parameters('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallManagementPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-mgmt-{1}', parameters('resourceAbbreviations').publicIpAddresses, parameters('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallPolicy": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').firewallPolicies)]",
                              "bastionHost": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').bastionHosts)]",
                              "bastionHostNetworkSecurityGroup": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkSecurityGroups), parameters('tokens').service, parameters('resourceAbbreviations').bastionHosts)]",
                              "bastionHostDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').bastionHosts)]",
                              "bastionHostPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').publicIpAddresses), parameters('tokens').service, parameters('resourceAbbreviations').bastionHosts)]",
                              "bastionHostPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', parameters('resourceAbbreviations').publicIpAddresses, parameters('resourceAbbreviations').bastionHosts))]",
                              "computeGallery": "[replace(replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').computeGallieries), '-', '_')]",
                              "dataCollectionRuleAssociation": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').dataCollectionRuleAssociations)]",
                              "dataCollectionRule": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').dataCollectionRules)]",
                              "diskAccess": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').diskAccesses)]",
                              "diskEncryptionSet": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').diskEncryptionSets)]",
                              "hostPool": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').hostPools)]",
                              "hostPoolDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').hostPools)]",
                              "hostPoolNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, parameters('resourceAbbreviations').hostPools)]",
                              "hostPoolPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, parameters('resourceAbbreviations').hostPools)]",
                              "keyVault": "[format('{0}{1}', replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').keyVaults), '-', ''), parameters('networkName'), parameters('networkShortName')), uniqueString(parameters('resourcePrefix'), parameters('environmentAbbreviation'), parameters('subscriptionId')))]",
                              "keyVaultDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}{1}', parameters('tokens').service, parameters('resourceAbbreviations').keyVaults))]",
                              "keyVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}{1}', parameters('tokens').service, parameters('resourceAbbreviations').keyVaults))]",
                              "keyVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}{1}', parameters('tokens').service, parameters('resourceAbbreviations').keyVaults))]",
                              "logAnalyticsWorkspace": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').logAnalyticsWorkspaces)]",
                              "logAnalyticsWorkspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').logAnalyticsWorkspaces)]",
                              "netAppAccountCapacityPool": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').netAppCapacityPools)]",
                              "netAppAccount": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').netAppAccounts)]",
                              "networkSecurityGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').networkSecurityGroups)]",
                              "networkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').networkSecurityGroups)]",
                              "networkWatcher": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').networkWatchers)]",
                              "privateLinkScope": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').privateLinkScopes)]",
                              "privateLinkScopeNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, parameters('resourceAbbreviations').privateLinkScopes)]",
                              "privateLinkScopePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, parameters('resourceAbbreviations').privateLinkScopes)]",
                              "recoveryServicesVault": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').recoveryServicesVaults)]",
                              "recoveryServicesVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, parameters('resourceAbbreviations').recoveryServicesVaults)]",
                              "recoveryServicesVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, parameters('resourceAbbreviations').recoveryServicesVaults)]",
                              "resourceGroup": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').resourceGroups)]",
                              "routeTable": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').routeTables)]",
                              "storageAccount": "[toLower(replace(replace(replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').storageAccounts), parameters('networkName'), parameters('networkShortName')), '-', ''))]",
                              "storageAccountNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').storageAccounts))]",
                              "storageAccountPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').storageAccounts))]",
                              "subnet": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').subnets)]",
                              "userAssignedIdentity": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').userAssignedIdentities)]",
                              "virtualMachine": "[replace(replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').virtualMachines), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), '-', '')]",
                              "virtualMachineDisk": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').disks), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').virtualMachines))]",
                              "virtualMachineNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').virtualMachines))]",
                              "virtualNetwork": "[replace(variables('namingConvention'), parameters('tokens').resource, parameters('resourceAbbreviations').virtualNetworks)]",
                              "virtualNetworkDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, parameters('resourceAbbreviations').virtualNetworks)]",
                              "workspaceFeed": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').workspaces), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceFeedDiagnosticSetting": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceFeedNetworkInterface": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceFeedPrivateEndpoint": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobal": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').workspaces), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobalDiagnosticSetting": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobalNetworkInterface": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobalPrivateEndpoint": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, parameters('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "names": {
                              "type": "object",
                              "value": "[variables('names')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "locationProperties": {
                      "type": "object",
                      "value": "[variables('locations')[parameters('location')]]"
                    },
                    "mlzTags": {
                      "type": "object",
                      "value": "[variables('mlzTags')]"
                    },
                    "privateDnsZones": {
                      "type": "array",
                      "value": "[variables('privateDnsZoneNames')]"
                    },
                    "tiers": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('networks'))]",
                        "input": {
                          "name": "[parameters('networks')[copyIndex()].name]",
                          "shortName": "[parameters('networks')[copyIndex()].shortName]",
                          "deployUniqueResources": "[parameters('networks')[copyIndex()].deployUniqueResources]",
                          "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                          "nsgDiagLogs": "[parameters('networks')[copyIndex()].nsgDiagLogs]",
                          "nsgDiagMetrics": "[parameters('networks')[copyIndex()].nsgDiagMetrics]",
                          "nsgRules": "[parameters('networks')[copyIndex()].nsgRules]",
                          "vnetAddressPrefix": "[parameters('networks')[copyIndex()].vnetAddressPrefix]",
                          "vnetDiagLogs": "[parameters('networks')[copyIndex()].vnetDiagLogs]",
                          "vnetDiagMetrics": "[parameters('networks')[copyIndex()].vnetDiagMetrics]",
                          "subnetAddressPrefix": "[parameters('networks')[copyIndex()].subnetAddressPrefix]",
                          "namingConvention": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[copyIndex()].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
                        }
                      }
                    },
                    "tokens": {
                      "type": "object",
                      "value": "[variables('tokens')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "name": {
                    "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'network')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "5234750876173141008"
                    }
                  },
                  "parameters": {
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Resources/resourceGroups'), parameters('tags')['Microsoft.Resources/resourceGroups'], createObject()), parameters('mlzTags'))]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
                    },
                    "tags": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "additionalSubnets": {
                    "value": "[parameters('additionalSubnets')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deployNetworkWatcher": {
                    "value": "[parameters('deployNetworkWatcher')]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.networkSecurityGroup]"
                  },
                  "networkSecurityGroupRules": {
                    "value": "[parameters('networkSecurityGroupRules')]"
                  },
                  "networkWatcherName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.networkWatcher]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "routeTableName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.routeTable]"
                  },
                  "routeTableRouteNextHopIpAddress": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').ipConfigurations[0].properties.privateIPAddress]"
                  },
                  "subnetAddressPrefix": {
                    "value": "[parameters('subnetAddressPrefix')]"
                  },
                  "subnetName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.subnet]"
                  },
                  "subscriptionId": {
                    "value": "[variables('subscriptionId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualNetworkAddressPrefix": {
                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.virtualNetwork]"
                  },
                  "vNetDnsServers": {
                    "value": "[coalesce(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01'), 'dhcpOptions', 'dnsServers'), createArray())]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "2304559615281221523"
                    }
                  },
                  "parameters": {
                    "additionalSubnets": {
                      "type": "array"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deployNetworkWatcher": {
                      "type": "bool"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "networkSecurityGroupRules": {
                      "type": "array"
                    },
                    "networkWatcherName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "routeTableName": {
                      "type": "string"
                    },
                    "routeTableRouteNextHopIpAddress": {
                      "type": "string"
                    },
                    "subnetAddressPrefix": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "vNetDnsServers": {
                      "type": "array"
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "additionalSubnets": {
                            "value": "[parameters('additionalSubnets')]"
                          },
                          "deployNetworkWatcher": {
                            "value": "[parameters('deployNetworkWatcher')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          },
                          "networkSecurityGroupRules": {
                            "value": "[parameters('networkSecurityGroupRules')]"
                          },
                          "networkWatcherName": {
                            "value": "[parameters('networkWatcherName')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "routeTableName": {
                            "value": "[parameters('routeTableName')]"
                          },
                          "routeTableRouteNextHopIpAddress": {
                            "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                          },
                          "subnetAddressPrefix": {
                            "value": "[parameters('subnetAddressPrefix')]"
                          },
                          "subnetName": {
                            "value": "[parameters('subnetName')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualNetworkAddressPrefix": {
                            "value": "[parameters('virtualNetworkAddressPrefix')]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "vNetDnsServers": {
                            "value": "[parameters('vNetDnsServers')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "6762829727523882200"
                            }
                          },
                          "parameters": {
                            "additionalSubnets": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "deployNetworkWatcher": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            },
                            "networkSecurityGroupRules": {
                              "type": "array"
                            },
                            "networkWatcherName": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "routeTableName": {
                              "type": "string"
                            },
                            "routeTableRouteNextHopIpAddress": {
                              "type": "string"
                            },
                            "subnetAddressPrefix": {
                              "type": "string"
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "vNetDnsServers": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "delegations": {
                              "AzureNetAppFiles": [
                                {
                                  "name": "Microsoft.Netapp.volumes",
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/delegations', parameters('virtualNetworkName'), 'AzureNetAppFiles', 'Microsoft.Netapp.volumes')]",
                                  "properties": {
                                    "serviceName": "Microsoft.Netapp/volumes"
                                  },
                                  "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                                }
                              ]
                            },
                            "subnets": "[union(createArray(createObject('name', parameters('subnetName'), 'properties', createObject('addressPrefix', parameters('subnetAddressPrefix')))), parameters('additionalSubnets'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkSecurityGroup",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkSecurityGroupName')]"
                                  },
                                  "securityRules": {
                                    "value": "[parameters('networkSecurityGroupRules')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "17808155300289173522"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "securityRules": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkSecurityGroups",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('tags')['Microsoft.Network/networkSecurityGroups'], createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "securityRules": "[parameters('securityRules')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "routeTable",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "disableBgpRoutePropagation": {
                                    "value": true
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('routeTableName')]"
                                  },
                                  "routeNextHopIpAddress": {
                                    "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "14183263367109373810"
                                    }
                                  },
                                  "parameters": {
                                    "disableBgpRoutePropagation": {
                                      "type": "bool"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "routeAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "0.0.0.0/0"
                                    },
                                    "routeName": {
                                      "type": "string",
                                      "defaultValue": "default_route"
                                    },
                                    "routeNextHopIpAddress": {
                                      "type": "string"
                                    },
                                    "routeNextHopType": {
                                      "type": "string",
                                      "defaultValue": "VirtualAppliance"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/routeTables",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/routeTables'), parameters('tags')['Microsoft.Network/routeTables'], createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                        "routes": [
                                          {
                                            "name": "[parameters('routeName')]",
                                            "properties": {
                                              "addressPrefix": "[parameters('routeAddressPrefix')]",
                                              "nextHopIpAddress": "[parameters('routeNextHopIpAddress')]",
                                              "nextHopType": "[parameters('routeNextHopType')]"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "condition": "[parameters('deployNetworkWatcher')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkWatcher",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkWatcherName')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "10414727145294879682"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkWatchers",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/networkWatchers'), parameters('tags')['Microsoft.Network/networkWatchers'], createObject()), parameters('mlzTags'))]",
                                      "properties": {}
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "virtualNetwork",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "addressPrefix": {
                                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('virtualNetworkName')]"
                                  },
                                  "subnets": {
                                    "copy": [
                                      {
                                        "name": "value",
                                        "count": "[length(variables('subnets'))]",
                                        "input": "[createObject('name', variables('subnets')[copyIndex('value')].name, 'properties', createObject('addressPrefix', variables('subnets')[copyIndex('value')].properties.addressPrefix, 'delegations', coalesce(tryGet(variables('delegations'), variables('subnets')[copyIndex('value')].name), createArray()), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value), 'routeTable', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value), 'privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled'))]"
                                      }
                                    ]
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "vNetDnsServers": {
                                    "value": "[parameters('vNetDnsServers')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "17796159396533379538"
                                    }
                                  },
                                  "parameters": {
                                    "addressPrefix": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "subnets": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "vNetDnsServers": {
                                      "type": "array"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/virtualNetworks'), parameters('tags')['Microsoft.Network/virtualNetworks'], createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "addressSpace": {
                                          "addressPrefixes": [
                                            "[parameters('addressPrefix')]"
                                          ]
                                        },
                                        "subnets": "[parameters('subnets')]",
                                        "dhcpOptions": "[if(empty(parameters('vNetDnsServers')), null(), createObject('dnsServers', parameters('vNetDnsServers')))]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "addressPrefix": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').addressSpace.addressPrefixes[0]]"
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "value": "[parameters('vNetDnsServers')]"
                                    },
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    },
                                    "subnets": {
                                      "type": "array",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').subnets]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup')]",
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkWatcher')]",
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'routeTable')]"
                              ]
                            }
                          ],
                          "outputs": {
                            "virtualNetworkName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.name.value]"
                            },
                            "virtualNetworkResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value]"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.addressPrefix.value]"
                            },
                            "subnetName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].name]"
                            },
                            "subnetAddressPrefix": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].properties.addressPrefix]"
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].id]"
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.name.value]"
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-spoke-peering-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "hubVirtualNetworkResourceId": {
                            "value": "[parameters('hubVirtualNetworkResourceId')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "spokeShortName": {
                            "value": "[parameters('workloadShortName')]"
                          },
                          "spokeVirtualNetworkName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "14391533606363017348"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "hubVirtualNetworkResourceId": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "spokeShortName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkName": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('peer-{0}-to-hub-{1}', parameters('spokeShortName'), parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                                  },
                                  "virtualNetworkName": {
                                    "value": "[parameters('spokeVirtualNetworkName')]"
                                  },
                                  "virtualNetworkPeerName": {
                                    "value": "[format('to-{0}', split(parameters('hubVirtualNetworkResourceId'), '/')[8])]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "6494272065213199360"
                                    }
                                  },
                                  "parameters": {
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    },
                                    "virtualNetworkName": {
                                      "type": "string"
                                    },
                                    "virtualNetworkPeerName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('virtualNetworkPeerName'))]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-hub-peering-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "hubVirtualNetworkName": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]"
                          },
                          "resourceGroupName": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]"
                          },
                          "spokeShortName": {
                            "value": "[parameters('workloadShortName')]"
                          },
                          "spokeVirtualNetworkResourceId": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value]"
                          },
                          "subscriptionId": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "6626549726744561716"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "hubVirtualNetworkName": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "spokeShortName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkResourceId": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('peer-hub-to-{0}-{1}', parameters('spokeShortName'), parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('spokeVirtualNetworkResourceId')]"
                                  },
                                  "virtualNetworkName": {
                                    "value": "[parameters('hubVirtualNetworkName')]"
                                  },
                                  "virtualNetworkPeerName": {
                                    "value": "[format('to-{0}', split(parameters('spokeVirtualNetworkResourceId'), '/')[8])]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "6494272065213199360"
                                    }
                                  },
                                  "parameters": {
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    },
                                    "virtualNetworkName": {
                                      "type": "string"
                                    },
                                    "virtualNetworkPeerName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('virtualNetworkPeerName'))]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "networkSecurityGroupName": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupName.value]"
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tier": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
                  },
                  "tokens": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "3164647736851795292"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "tier": {
                      "type": "object"
                    },
                    "tokens": {
                      "type": "object"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[take(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, ''), 24)]"
                          },
                          "keyVaultNetworkInterfaceName": {
                            "value": "[replace(parameters('tier').namingConvention.keyVaultNetworkInterface, parameters('tokens').service, '')]"
                          },
                          "keyVaultPrivateDnsZoneResourceId": {
                            "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                          },
                          "keyVaultPrivateEndpointName": {
                            "value": "[replace(parameters('tier').namingConvention.keyVaultPrivateEndpoint, parameters('tokens').service, '')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "13329202385555792471"
                            }
                          },
                          "parameters": {
                            "diskEncryptionKeyExpirationInDays": {
                              "type": "int",
                              "defaultValue": 30
                            },
                            "keyVaultName": {
                              "type": "string"
                            },
                            "keyVaultNetworkInterfaceName": {
                              "type": "string"
                            },
                            "keyVaultPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "keyVaultPrivateEndpointName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "enabledForDeployment": false,
                                "enabledForDiskEncryption": true,
                                "enabledForTemplateDeployment": false,
                                "enablePurgeProtection": true,
                                "enableRbacAuthorization": true,
                                "enableSoftDelete": true,
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "defaultAction": "Deny",
                                  "ipRules": [],
                                  "virtualNetworkRules": []
                                },
                                "publicNetworkAccess": "Disabled",
                                "sku": {
                                  "family": "A",
                                  "name": "standard"
                                },
                                "softDeleteRetentionInDays": 7,
                                "tenantId": "[subscription().tenantId]"
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('keyVaultPrivateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('keyVaultNetworkInterfaceName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('keyVaultPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                                      "groupIds": [
                                        "vault"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultPrivateEndpointName'), parameters('keyVaultName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('keyVaultPrivateEndpointName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'DiskEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "keyUriWithVersion": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
                            },
                            "keyVaultResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                            },
                            "keyVaultName": {
                              "type": "string",
                              "value": "[parameters('keyVaultName')]"
                            },
                            "keyVaultUri": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri]"
                            },
                            "storageKeyName": {
                              "type": "string",
                              "value": "StorageEncryptionKey"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "diskEncryptionSetName": {
                            "value": "[parameters('tier').namingConvention.diskEncryptionSet]"
                          },
                          "keyUrl": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyUriWithVersion.value]"
                          },
                          "keyVaultResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), createObject('value', parameters('tags')['Microsoft.Compute/diskEncryptionSets']), createObject('value', createObject()))]",
                          "workloadShortName": {
                            "value": "[parameters('workloadShortName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "14213851547349403574"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "diskEncryptionSetName": {
                              "type": "string"
                            },
                            "keyUrl": {
                              "type": "string"
                            },
                            "keyVaultResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "workloadShortName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/diskEncryptionSets",
                              "apiVersion": "2023-04-02",
                              "name": "[parameters('diskEncryptionSetName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), parameters('tags')['Microsoft.Compute/diskEncryptionSets'], createObject()), parameters('mlzTags'))]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "activeKey": {
                                  "sourceVault": {
                                    "id": "[parameters('keyVaultResourceId')]"
                                  },
                                  "keyUrl": "[parameters('keyUrl')]"
                                },
                                "encryptionType": "EncryptionAtRestWithPlatformAndCustomerKeys",
                                "rotationToLatestKeyVersionEnabled": true
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('assign-role-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')), '2023-04-02', 'full').identity.principalId]"
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceGroup().id]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "2709473749440196253"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-id-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityName": {
                            "value": "[replace(parameters('tier').namingConvention.userAssignedIdentity, format('-{0}', parameters('tokens').service), '')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "7977802807183279972"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('userAssignedIdentityName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject()), parameters('mlzTags'))]"
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                              "name": "[guid(parameters('userAssignedIdentityName'), 'e147488a-f6f5-4113-8e2d-b22465e65bf6', parameters('keyVaultName'))]",
                              "properties": {
                                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2018-11-30').principalId]",
                                "principalType": "ServicePrincipal",
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "diskEncryptionSetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                    },
                    "keyVaultUri": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                    },
                    "keyVaultResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                    },
                    "storageKeyName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "blobsPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                  },
                  "keyVaultUri": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logStorageSkuName": {
                    "value": "[parameters('logStorageSkuName')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "network": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "serviceToken": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tablesPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.table.{0}', environment().suffixes.storage))]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "14643688362617900410"
                    }
                  },
                  "parameters": {
                    "blobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "logStorageSkuName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "network": {
                      "type": "object"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tablesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "storage",
                      "subscriptionId": "[parameters('network').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "blobsPrivateDnsZoneResourceId": {
                            "value": "[parameters('blobsPrivateDnsZoneResourceId')]"
                          },
                          "keyVaultUri": {
                            "value": "[parameters('keyVaultUri')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "serviceToken": {
                            "value": "[parameters('serviceToken')]"
                          },
                          "skuName": {
                            "value": "[parameters('logStorageSkuName')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('network').namingConvention.storageAccount]"
                          },
                          "storageAccountNetworkInterfaceNamePrefix": {
                            "value": "[parameters('network').namingConvention.storageAccountNetworkInterface]"
                          },
                          "storageAccountPrivateEndpointNamePrefix": {
                            "value": "[parameters('network').namingConvention.storageAccountPrivateEndpoint]"
                          },
                          "storageEncryptionKeyName": {
                            "value": "[parameters('storageEncryptionKeyName')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tablesPrivateDnsZoneResourceId": {
                            "value": "[parameters('tablesPrivateDnsZoneResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityResourceId": {
                            "value": "[parameters('userAssignedIdentityResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "3275873970878681803"
                            }
                          },
                          "parameters": {
                            "blobsPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "keyVaultUri": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "serviceToken": {
                              "type": "string"
                            },
                            "skuName": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "storageAccountNetworkInterfaceNamePrefix": {
                              "type": "string"
                            },
                            "storageAccountPrivateEndpointNamePrefix": {
                              "type": "string"
                            },
                            "storageEncryptionKeyName": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tablesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "zones": [
                              "[parameters('blobsPrivateDnsZoneResourceId')]",
                              "[parameters('tablesPrivateDnsZoneResourceId')]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('storageAccountName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Storage/storageAccounts'), parameters('tags')['Microsoft.Storage/storageAccounts'], createObject()), parameters('mlzTags'))]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "kind": "StorageV2",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "properties": {
                                "accessTier": "Hot",
                                "allowBlobPublicAccess": false,
                                "allowCrossTenantReplication": false,
                                "allowedCopyScope": "PrivateLink",
                                "allowSharedKeyAccess": true,
                                "defaultToOAuthAuthentication": false,
                                "dnsEndpointType": "Standard",
                                "encryption": {
                                  "identity": {
                                    "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId')]"
                                  },
                                  "keySource": "Microsoft.KeyVault",
                                  "keyvaultproperties": {
                                    "keyvaulturi": "[parameters('keyVaultUri')]",
                                    "keyname": "[parameters('storageEncryptionKeyName')]"
                                  },
                                  "requireInfrastructureEncryption": true,
                                  "services": {
                                    "blob": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "file": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "queue": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "table": {
                                      "keyType": "Account",
                                      "enabled": true
                                    }
                                  }
                                },
                                "minimumTlsVersion": "TLS1_2",
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "virtualNetworkRules": [],
                                  "ipRules": [],
                                  "defaultAction": "Deny"
                                },
                                "publicNetworkAccess": "Disabled",
                                "supportsHttpsTrafficOnly": true
                              }
                            },
                            {
                              "copy": {
                                "name": "privateEndpoints",
                                "count": "[length(variables('zones'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "customNetworkInterfaceName": "[replace(parameters('storageAccountNetworkInterfaceNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                                      "groupIds": [
                                        "[split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]]"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneGroups",
                                "count": "[length(variables('zones'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]), parameters('storageAccountName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[variables('zones')[copyIndex()]]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "storageAccountResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('network').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-diag-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deployActivityLogDiagnosticSetting": {
                    "value": "[parameters('deployActivityLogDiagnosticSetting')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "keyVaultDiagnosticLogs": {
                    "value": "[parameters('keyVaultDiagnosticsLogs')]"
                  },
                  "keyVaultName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "networkSecurityGroupDiagnosticsLogs": {
                    "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                  },
                  "networkSecurityGroupDiagnosticsMetrics": {
                    "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupName.value]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "storageAccountResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountResourceId.value]"
                  },
                  "tier": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
                  },
                  "virtualNetworkDiagnosticsLogs": {
                    "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                  },
                  "virtualNetworkDiagnosticsMetrics": {
                    "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "11781736497698198070"
                    }
                  },
                  "parameters": {
                    "deployActivityLogDiagnosticSetting": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "keyVaultDiagnosticLogs": {
                      "type": "array"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "networkSecurityGroupDiagnosticsLogs": {
                      "type": "array"
                    },
                    "networkSecurityGroupDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    },
                    "tier": {
                      "type": "object"
                    },
                    "virtualNetworkDiagnosticsLogs": {
                      "type": "array"
                    },
                    "virtualNetworkDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('deployActivityLogDiagnosticSetting')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-activity-diags-{0}-{1}', parameters('tier').shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "12283647734355805914"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "name": "[format('diag-activity-log-{0}', subscription().subscriptionId)]",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "logs": [
                                  {
                                    "category": "Administrative",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Security",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ServiceHealth",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Alert",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Recommendation",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Policy",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Autoscale",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ResourceHealth",
                                    "enabled": true
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-kv-diags-{0}-{1}', parameters('tier').shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultDiagnosticSettingName": {
                            "value": "[parameters('tier').namingConvention.keyVaultDiagnosticSetting]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "keyVaultStorageAccountId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('keyVaultDiagnosticLogs')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "8093795796510715487"
                            }
                          },
                          "parameters": {
                            "keyVaultDiagnosticSettingName": {
                              "type": "string"
                            },
                            "keyVaultName": {
                              "type": "string"
                            },
                            "keyVaultStorageAccountId": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                              "name": "[parameters('keyVaultDiagnosticSettingName')]",
                              "properties": {
                                "storageAccountId": "[parameters('keyVaultStorageAccountId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-nsg-diags-{0}-{1}', parameters('tier').shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                          },
                          "logStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "metrics": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
                          },
                          "networkSecurityGroupDiagnosticSettingName": {
                            "value": "[parameters('tier').namingConvention.networkSecurityGroupDiagnosticSetting]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "5404623751544471689"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "logStorageAccountResourceId": {
                              "type": "string"
                            },
                            "metrics": {
                              "type": "array"
                            },
                            "networkSecurityGroupDiagnosticSettingName": {
                              "type": "string"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('networkSecurityGroupName'))]",
                              "name": "[parameters('networkSecurityGroupDiagnosticSettingName')]",
                              "properties": {
                                "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-diags-{0}-{1}', parameters('tier').shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                          },
                          "logStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "metrics": {
                            "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                          },
                          "virtualNetworkDiagnosticSettingName": {
                            "value": "[parameters('tier').namingConvention.virtualNetworkDiagnosticSetting]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "16786768982582775994"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "logStorageAccountResourceId": {
                              "type": "string"
                            },
                            "metrics": {
                              "type": "array"
                            },
                            "virtualNetworkDiagnosticSettingName": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('virtualNetworkName'))]",
                              "name": "[parameters('virtualNetworkDiagnosticSettingName')]",
                              "properties": {
                                "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('deployPolicy')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-policy-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "tiers": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
                  },
                  "policy": {
                    "value": "[parameters('policy')]"
                  },
                  "resourceGroupNames": {
                    "value": [
                      "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "17490889481454359550"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "policy": {
                      "type": "string"
                    },
                    "resourceGroupNames": {
                      "type": "array"
                    },
                    "tiers": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "policyAssignment",
                        "count": "[length(parameters('tiers'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('assign-policy-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[copyIndex()].subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupNames')[copyIndex()]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "builtInAssignment": {
                            "value": "[parameters('policy')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "15712109524737684124"
                            }
                          },
                          "parameters": {
                            "builtInAssignment": {
                              "type": "string",
                              "defaultValue": "NISTRev4",
                              "allowedValues": [
                                "NISTRev4",
                                "NISTRev5",
                                "IL5",
                                "CMMC"
                              ],
                              "metadata": {
                                "description": "[NISTRev4/NISTRev5/IL5/CMMC] Built-in policy assignments to assign, default is NISTRev4. IL5 is only available for AzureUsGovernment and will switch to NISTRev4 if tried in AzureCloud."
                              }
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "deployRemediation": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Starts a policy remediation for the VM Agent policies in hub RG. Set to false by default since this is time consuming in deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "The location of this resource"
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": "    {\r\n        \"listOfMembersToExcludeFromWindowsVMAdministratorsGroup\": \r\n        {\r\n        \"value\": \"admin\"\r\n        },\r\n        \"listOfMembersToIncludeInWindowsVMAdministratorsGroup\": \r\n        {\r\n        \"value\": \"azureuser\"\r\n        },\r\n        \"logAnalyticsWorkspaceIdforVMReporting\": \r\n        {\r\n        \"value\": \"<LAWORKSPACE>\"\r\n        },\r\n        \"IncludeArcMachines\": \r\n        {\r\n            \"value\": \"true\"\r\n        },\r\n        \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": \r\n        {\r\n            \"value\": \"1.2\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": \r\n        {\r\n            \"value\": \"Compliant\"\r\n        },\r\n        \"requiredRetentionDays\": \r\n        {\r\n            \"value\": \"365\"\r\n        },\r\n        \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": \r\n        {\r\n            \"value\": \"NetworkWatcherRG\"\r\n        }\r\n    }",
                            "$fxv#1": "    {\r\n        \"IncludeArcMachines\": \r\n        {\r\n            \"value\": \"true\"\r\n        },\r\n        \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": \r\n        {\r\n            \"value\": \"1.2\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": \r\n        {\r\n            \"value\": \"Compliant\"\r\n        },\r\n        \"requiredRetentionDays\": \r\n        {\r\n            \"value\": \"365\"\r\n        },\r\n        \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": \r\n        {\r\n            \"value\": \"NetworkWatcherRG\"\r\n        }\r\n    }",
                            "$fxv#2": "{\r\n    \"IncludeArcMachines\" : { \r\n        \"value\" : \"false\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\" : { \r\n        \"value\" : \"Compliant\"\r\n        },\r\n        \"MinimumTLSVersionForWindowsServers\" : { \r\n        \"value\" : \"1.2\"\r\n        },\r\n        \"requiredRetentionDays\" : { \r\n        \"value\" : \"365\"\r\n        },\r\n        \"effect-febd0533-8e55-448f-b837-bd0e06f16469\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"allowedContainerImagesRegex-febd0533-8e55-448f-b837-bd0e06f16469\" : { \r\n        \"value\" : \"^(.+){0}$\"\r\n        },\r\n        \"effect-95edb821-ddaf-4404-9732-666045e056b4\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-440b515e-a580-421e-abeb-b159a61ddcbc\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-233a2a17-77ca-4fb1-9b6b-69223d272a44\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"cpuLimit-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"0\"\r\n        },\r\n        \"memoryLimit-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"0\"\r\n        },\r\n        \"effect-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"runAsUserRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"MustRunAsNonRoot\"\r\n        },\r\n        \"runAsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"supplementalGroupsRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"fsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"effect-1c6e92c9-99f0-4e55-9cf2-0c234dc48f99\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-47a1ee2f-2a2a-4576-bf2a-e0e36709c2b8\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-df49d893-a74c-421d-bc95-c663042e5b80\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-c26596ff-4d70-4e6a-9a30-c2506bd2f80c\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-511f5417-5d12-434d-ab2e-816901e72a5e\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-82985f06-dc18-4a48-bc1c-b9f4f0098cfe\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-098fc59e-46c7-4d99-9b16-64990e543d75\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"NetworkWatcherResourceGroupName\" : { \r\n        \"value\" : \"NetworkWatcherRG\"\r\n        },\r\n        \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n        \"value\" : \"enabled\"\r\n        },\r\n        \"aadAuthenticationInServiceFabricMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-71ef260a-8f18-47b7-abcb-62d0673d94dc\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-862e97cf-49fc-4a5c-9de4-40d4e2e7c8eb\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-d9da03a1-f3c3-412a-9709-947156872263\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-b4ac1030-89c5-4697-8e00-28b5ba6a8811\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-ea0dfaed-95fb-448c-934e-d6e713ce393d\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-41425d9f-d1a5-499a-9932-f8ed8453932c\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-fc4d8e41-e223-45ea-9bf5-eada37891d87\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-86efb160-8de7-451d-bc08-5d475b0aadae\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-4ec52d6d-beb7-40c4-9a9e-fe753254690e\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-64d314f6-6062-4780-a861-c23e8951bee5\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1fd32ebd-e4c3-4e13-a54a-d7422d4d95f6\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-fa298e57-9444-42ba-bf04-86e8470e32c7\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1f905d99-2ab7-462c-a6b0-f709acca6c8f\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ba769a63-b8cc-4b2d-abf6-ac33c7204be8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0aa61e00-0a01-4a3c-9945-e93cffedf0e6\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-47031206-ce96-41f8-861b-6a915f3de284\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-51522a96-0869-4791-82f3-981000c2c67f\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-b5ec538c-daa0-4006-8596-35468b9148e8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-56a5ee18-2ae6-4810-86f7-18e39ce5629b\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-2e94d99a-8a36-4563-bc77-810d8893b671\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1fafeaf6-7927-4059-a50a-8eb2a7a6f2b5\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-99e9ccd8-3db9-4592-b0d1-14b1715a4d8a\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1f68a601-6e6d-4e42-babf-3f643a047ea2\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ca91455f-eace-4f96-be59-e6e2c35b4816\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-702dd420-7fcc-42c5-afe8-4026edd20fe0\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"diagnosticsLogsInRedisCacheMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"secureTransferToStorageAccountMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-7d092e0a-7acd-40d2-a975-dca21cae48c4\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-2a1a9cdf-e04d-429a-8416-3bfb72a1b26f\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"disableUnrestrictedNetworkToStorageAccountMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-55615ac9-af46-4a59-874e-391cc3dfb490\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1b8ca024-1d5c-4dec-8995-b1a932b41780\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-53503636-bcc9-4748-9663-5348217f160f\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-40cec1dd-a100-4920-b15b-3024fe8901ab\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-a049bf77-880b-470f-ba6d-9f21c530cf83\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ee980b6d-0eca-4501-8d54-f6290fd512c3\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1d84d5fb-01f6-4d12-ba4f-4a26081d403d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-37e0d2fe-28a5-43d6-a273-67d37d1f5606\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"identityDesignateMoreThanOneOwnerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"diskEncryptionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"emailNotificationToSubscriptionOwnerHighSeverityAlertsEnabledEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlDbEncryptionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vulnerabilityAssessmentOnManagedInstanceMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePHPVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"aadAuthenticationInSqlServerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vmssEndpointProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vmssOsVulnerabilitiesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"adaptiveApplicationControlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForPostgreSQLEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"ensureJavaVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityDesignateLessThanOwnersMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"securityContactEmailAddressForSubscriptionEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppRestrictCORSAccessMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithWritePermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithReadPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveDeprecatedAccountMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"ensurePythonVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePythonVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePHPVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePythonVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForMySQLEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"systemUpdatesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureJavaVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForWritePermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureJavaVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"nextGenerationFirewallMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"useRbacRulesMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"webAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"sqlServerAuditingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vnetEnableDDoSProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"endpointProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"jitNetworkAccessMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"geoRedundantStorageShouldBeEnabledForStorageAccountsEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"vmssSystemUpdatesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"longtermGeoRedundantBackupEnabledAzureSQLDatabasesEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"systemConfigurationsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForReadPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"containerBenchmarkMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveDeprecatedAccountWithOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vulnerabilityAssessmentOnServerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"kubernetesServiceVersionUpToDateMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"sqlDbVulnerabilityAssesmentMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"membersToIncludeInLocalAdministratorsGroup\" : { \r\n        \"value\" : \"\"\r\n        },\r\n        \"membersToExcludeInLocalAdministratorsGroup\" : { \r\n        \"value\" : \"\"\r\n        },\r\n        \"logAnalyticsWorkspaceIDForVMAgents\" : { \r\n        \"value\" : \"<LAWORKSPACE>\"\r\n        },\r\n        \"PHPLatestVersionForAppServices\" : { \r\n        \"value\" : \"7.4\"\r\n        },\r\n        \"JavaLatestVersionForAppServices\" : { \r\n        \"value\" : \"11\"\r\n        },\r\n        \"WindowsPythonLatestVersionForAppServices\" : { \r\n        \"value\" : \"3.6\"\r\n        },\r\n        \"LinuxPythonLatestVersionForAppServices\" : { \r\n        \"value\" : \"3.9\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityEmailsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"vulnerabilityAssessmentMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForWebAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityEmailsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"microsoftIaaSAntimalwareExtensionShouldBeDeployedOnWindowsServersEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"securityCenterStandardPricingTierShouldBeSelectedEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachinesEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensurePHPVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityEmailAdminsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"securityContactPhoneNumberShouldBeProvidedForSubscriptionEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"threatDetectionTypesOnManagedInstanceMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForAPIAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityEmailAdminsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"threatDetectionTypesOnServerMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachineScaleSetsEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        }\r\n}",
                            "$fxv#3": "{\r\n    \"logAnalyticsWorkspaceId-f47b5582-33ec-4c5c-87c0-b010a6b2e917\" : { \r\n        \"value\" : \"<LAWORKSPACE>\"\r\n    },\r\n    \"effect-09024ccc-0c5f-475e-9457-b7c0d9ed487b\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"MembersToExclude-69bf4abd-ca1e-4cf6-8b5a-762d42e61d4f\" :{\r\n        \"value\": \"\"\r\n    },\r\n    \"MembersToInclude-30f71ea1-ac77-4f26-9fc5-2d926bbd4ba7\": {\r\n        \"value\": \"\"\r\n    },\r\n    \"effect-0961003e-5a0a-4549-abde-af6a37f2724d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0b15565f-aa9e-48ba-8619-45960f2c314d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0e60b895-3786-45da-8377-9c6b4b6ac5f9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-17k78e20-9358-41c9-923c-fb736d382a12\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-1bc1795e-d44a-4d48-9b3b-6fff0fd5f9ba\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"PHPLatestVersion\" : { \r\n    \"value\" : \"7.3\"\r\n    },\r\n    \"effect-22bee202-a82f-4305-9a2a-6d7f44d4dedb\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-26a828e1-e88f-464e-bbb3-c134a282b9de\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-34c877ad-507e-4c82-993e-3452a6e0ad3c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-3c735d8a-a4ba-4a3a-b7cf-db7754cf57f4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-404c3081-a854-4457-ae30-26a93ef643f9\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-47a6b606-51aa-4496-8bb7-64b11cf66adc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-496223c3-ad65-4ecd-878a-bae78737e9ed\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"JavaLatestVersion\" : { \r\n    \"value\" : \"11\"\r\n    },\r\n    \"effect-4f11b553-d42e-4e3a-89be-32ca364cad4c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-4f4f78b8-e367-4b10-a341-d9a4ad5cf1c7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5c607a2e-c700-4744-8254-d77e7c9eb5e4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5f76cf89-fbf2-47fd-a3f4-b891fa780b60\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6b1cbf55-e8b6-442f-ba4c-7246b6381474\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6d555dd1-86f2-4f1c-8ed7-5abae7c6cbab\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-7008174a-fd10-4ef0-817e-fc820a951d73\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"LinuxPythonLatestVersion\" : { \r\n    \"value\" : \"3.8\"\r\n    },\r\n    \"effect-7238174a-fd10-4ef0-817e-fc820a951d73\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7261b898-8a84-4db8-9e04-18527132abb3\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-74c3584d-afae-46f7-a20a-6f8adba71a16\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-86b3d65f-7626-441e-b690-81a8b71cff60\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-88999f4c-376a-45c8-bcb3-4058f713cf39\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-8c122334-9d20-4eb8-89ea-ac9a705b74ae\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-8cb6aa8b-9e41-4f4e-aa25-089a7ac2581e\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9297c21d-2ed6-4474-b48f-163f75654ce3\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-991310cd-e9f3-47bc-b7b6-f57b557d07db\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9b597639-28e4-48eb-b506-56b05d366257\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9d0b6ea4-93e2-4578-bf2f-6bb17d22b4bc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9daedab3-fb2d-461e-b861-71790eead4f6\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-a4af4a39-4135-47fb-b175-47fbdf85311d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n    \"value\" : \"enabled\"\r\n    },\r\n    \"effect-a70ca396-0a34-413a-88e1-b956c1e683be\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-aa633080-8b72-40c4-a2d7-d00c03e80bed\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-abfb4388-5bf4-4ad7-ba82-2cd2f41ceae9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-abfb7388-5bf4-4ad7-ba99-2cd2f41cebb9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-af6cd1bd-1635-48cb-bde7-5b15693900b9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\" : { \r\n    \"value\" : \"NetworkWatcherRG\"\r\n    },\r\n    \"effect-b7ddfbdc-1260-477d-91fd-98bd9be789a6\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c3f317a7-a95c-4547-b7e7-11017ebdf2fe\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-cb510bfd-1cba-4d9f-a230-cb0976f4bb71\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e1e5fd5d-3e4c-4ce1-8661-7d1873ae6b15\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e2c1c086-2d84-4019-bff3-c44ccd95113c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e3576e28-8b17-4677-84c3-db2990658d64\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e8cbc669-f12d-49eb-93e7-9273119e9933\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e9c8d085-d9cc-4b17-9cdc-059f1f01f19e\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ebb62a0c-3560-49e1-89ed-27e074e9f8ad\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-efbde977-ba53-4479-b8e9-10b957924fbf\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f0e6e85b-9b9f-4a4b-b67b-f730d42f1b0b\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f6de0be7-9a8a-4b8a-b349-43cf02d22f7c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f8456c1c-aa66-4dfb-861a-25d127b775c9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f9d614c5-c173-4d56-95a7-b4437057d193\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-fb893a29-21bb-418c-a157-e99480ec364c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-feedbf84-6b99-488c-acc2-71c829aa5ffc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-3b980d31-7904-4bb7-8575-5665739a8052\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6e2593d9-add6-4083-9c9b-4b7d2188c899\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b607c5de-e7d9-4eee-9e5c-83f1bcee4fa0\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-12430be1-6cc8-4527-a9a8-e3d38f250096\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"modeRequirement-12430be1-6cc8-4527-a9a8-e3d38f250096\" : { \r\n    \"value\" : \"Detection\"\r\n    },\r\n    \"effect-425bea59-a659-4cbb-8d31-34499bd030b8\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"modeRequirement-425bea59-a659-4cbb-8d31-34499bd030b8\" : { \r\n    \"value\" : \"Detection\"\r\n    },\r\n    \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-013e242c-8828-4970-87b3-ab247555486d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-d38fc420-0735-4ef3-ac11-c806f651a570\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-a1181c5f-672a-477a-979a-7d58aa086233\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-308fbb08-4ab8-4e67-9b29-592e93fb94fa\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-4da35fc9-c9e7-4960-aec9-797fe7d9051d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-523b5cd1-3e23-492f-a539-13118b6d1e3a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7fe3b40f-802b-4cdd-8bd4-fd799c948cc2\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-c25d9a16-bc35-4e15-a7e5-9db606bf9ed4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b0f33259-77d7-4c9e-aac6-3aabcfae693c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-0820b7b9-23aa-4725-a1ce-ae4558f718e5\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fab\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-358c20a6-3f9e-4f0e-97ff-c6ce485e2aac\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5744710e-cc2f-4ee8-8809-3b11e89f4bc9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ac4a19c2-fa67-49b4-8ae5-0b2e78c49457\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c9d007d0-c057-4772-b18c-01e546713bcd\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-e372f825-a257-4fb8-9175-797a8a8627d6\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-d158790f-bfb0-486c-8631-2dc6b4e8e6af\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-e802a67a-daf5-4436-9ea6-f6d821dd0c5d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-a451c1ef-c6ca-483d-87ed-f49761e3ffb5\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftSql-servers-firewallRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-securityRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-securityRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ae89ebca-1c92-4898-ac2c-9f63decb045c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-d26f7642-7545-4e18-9b75-8c9bbdee3a9a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-1a4e592a-6a6e-44a5-9814-e36264ca96e7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7796937f-307b-4598-941c-67d3a05ebfe7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-c5447c04-a4d7-4ba8-a263-c9ee321a6858\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-41388f1c-2db0-4c25-95b2-35d7f5ccbfa9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b02aacc0-b073-424e-8298-42b22829ee0a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-057d6cfe-9c4f-4a6d-bc60-14420ea1f1a9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0ec47710-77ff-4a3d-9181-6aa50af424d0\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-48af4db5-9b8b-401c-8e74-076be876a430\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-82339799-d096-41ae-8538-b108becf0970\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1b7aa243-30e4-4c9e-bca8-d0d3022b634a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ef2a8f2a-b3d9-49cd-a8a8-9a3aaaf647d9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-bb91dfba-c30d-4263-9add-9c2384e659a6\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e71308d3-144b-4262-b144-efdc3cc90517\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2bdd0062-9d75-436e-89df-487dd8e4b3c7\" : { \r\n    \"value\" : \"Disabled\"\r\n    },\r\n    \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-6fac406b-40ca-413b-bf8e-0bf964659c25\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-048248b0-55cd-46da-b1ff-39efd52db260\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0d134df8-db83-46fb-ad72-fe0c9428c8dd\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fb2\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\" : { \r\n    \"value\" : \"audit\"\r\n    },\r\n    \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c43e4a30-77cb-48ab-a4dd-93f175c63b57\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1f314764-cb73-4fc9-b863-8eca98ac36e9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-123a3936-f020-408a-ba0c-47873faf1534\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    }\r\n}\r\n",
                            "modifiedAssignment": "[if(and(equals(toLower(environment().name), toLower('AzureCloud')), equals(toLower(parameters('builtInAssignment')), toLower('IL5'))), 'NISTRev4', parameters('builtInAssignment'))]",
                            "assignmentName": "[format('{0} {1}', variables('modifiedAssignment'), resourceGroup().name)]",
                            "agentVmssAssignmentName": "[format('Deploy VMSS Agents {0}', resourceGroup().name)]",
                            "agentVmAssignmentName": "[format('Deploy VM Agents {0}', resourceGroup().name)]",
                            "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                            "lawsReaderRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('assignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', json(replace(variables('$fxv#0'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', json(replace(variables('$fxv#2'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', json(replace(variables('$fxv#3'), '<LAWORKSPACE>', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId))))[variables('modifiedAssignment')].id]",
                                "parameters": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', json(replace(variables('$fxv#0'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', json(replace(variables('$fxv#2'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', json(replace(variables('$fxv#3'), '<LAWORKSPACE>', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId))))[variables('modifiedAssignment')].parameters]"
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmssAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '75714362-cae7-409e-9b99-a8e5075b7fad')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '55f3eceb-5573-4f18-9695-226972c6d74a')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('assignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[if(empty(variables('modifiedAssignment')), '', reference(resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName')), '2020-09-01', 'full').identity.principalId)]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmssAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('deployRemediation')]",
                              "type": "Microsoft.PolicyInsights/remediations",
                              "apiVersion": "2019-07-01",
                              "name": "VM-Agent-Policy-Remediation",
                              "properties": {
                                "policyAssignmentId": "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]",
                                "resourceDiscoveryMode": "ReEvaluateCompliance"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Assign-Laws-Role-Policy-{0}', resourceGroup().name)]",
                              "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "targetResourceId": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[variables('lawsReaderRoleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "2709473749440196253"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('deployDefender')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('set-defender-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "emailSecurityContact": {
                    "value": "[parameters('emailSecurityContact')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "9328080537587895542"
                    }
                  },
                  "parameters": {
                    "defenderPlans": {
                      "type": "array",
                      "defaultValue": [
                        "VirtualMachines"
                      ],
                      "metadata": {
                        "description": "Defender Paid protection Plans. Even if a customer selects the free sku, at least 1 paid protection plan must be specified."
                      }
                    },
                    "enableAutoProvisioning": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Turn automatic deployment by Defender of the MMA (OMS VM extension) on or off"
                      }
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Specify the ID of your custom Log Analytics workspace to collect Defender data."
                      }
                    },
                    "emailSecurityContact": {
                      "type": "string",
                      "metadata": {
                        "description": "Email address of the contact, in the form of john@doe.com"
                      }
                    },
                    "policySetDescription": {
                      "type": "string",
                      "defaultValue": "The Microsoft Cloud Security Benchmark initiative represents the policies and controls implementing security recommendations defined in Microsoft Cloud Security Benchmark v2, see https://aka.ms/azsecbm. This also serves as the Microsoft Defender for Cloud default policy initiative. You can directly assign this initiative, or manage its policies and compliance results within Microsoft Defender.",
                      "metadata": {
                        "description": "Policy Initiative description field"
                      }
                    },
                    "defenderSkuTier": {
                      "type": "string",
                      "defaultValue": "Free",
                      "metadata": {
                        "description": "[Standard/Free] The SKU for Defender. It defaults to \"Free\"."
                      }
                    }
                  },
                  "variables": {
                    "autoProvisioning": "[if(parameters('enableAutoProvisioning'), 'On', 'Off')]",
                    "defenderPaidPlanConfig": {
                      "AzureCloud": {
                        "Api": {
                          "subPlan": "P1"
                        },
                        "appServices": {},
                        "KeyVaults": {
                          "subPlan": "PerKeyVault"
                        },
                        "Arm": {
                          "subPlan": "PerSubscription"
                        },
                        "CloudPosture": {
                          "extensions": [
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            },
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessVmScanning",
                              "isEnabled": "True"
                            },
                            {
                              "name": "EntraPermissionsManagement",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "Containers": {
                          "extensions": [
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "CosmosDbs": {},
                        "StorageAccounts": {
                          "subPlan": "DefenderForStorageV2",
                          "extensions": [
                            {
                              "name": "OnUploadMalwareScanning",
                              "isEnabled": "True",
                              "additionalExtensionProperties": {
                                "CapGBPerMonthPerStorageAccount": "5000"
                              }
                            },
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "VirtualMachines": {
                          "subPlan": "P1"
                        },
                        "SqlServerVirtualMachines": {},
                        "SqlServers": {},
                        "OpenSourceRelationalDatabases": {}
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "defenderFreeAllClouds",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[equals(parameters('defenderSkuTier'), 'Free')]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardNoSubplanNoExtensions",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), not(equals(environment().name, 'AzureCloud')))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardSubplanExtensionsAzureCloud",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), equals(environment().name, 'AzureCloud'))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]",
                        "subPlan": "[if(contains(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'subPlan'), variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]].subPlan, json('null'))]",
                        "extensions": "[if(contains(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'extensions'), variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]].extensions, json('null'))]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/autoProvisioningSettings",
                      "apiVersion": "2019-01-01",
                      "name": "default",
                      "properties": {
                        "autoProvision": "[variables('autoProvisioning')]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/workspaceSettings",
                      "apiVersion": "2019-01-01",
                      "name": "default",
                      "properties": {
                        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "scope": "[subscription().id]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('emailSecurityContact')))]",
                      "type": "Microsoft.Security/securityContacts",
                      "apiVersion": "2020-01-01-preview",
                      "name": "default",
                      "properties": {
                        "notificationsByRole": {
                          "roles": [
                            "AccountAdmin",
                            "Contributor",
                            "Owner",
                            "ServiceAdmin"
                          ],
                          "state": "On"
                        },
                        "alertNotifications": {
                          "state": "On"
                        },
                        "emails": "[parameters('emailSecurityContact')]"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2022-06-01",
                      "name": "Microsoft Cloud Security Benchmark",
                      "properties": {
                        "displayName": "Defender Default",
                        "description": "[parameters('policySetDescription')]",
                        "enforcementMode": "DoNotEnforce",
                        "parameters": {},
                        "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '1f3afdf9-d0c9-4c3d-847f-89da613e70a8')]"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "diskEncryptionSetResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
            },
            "locatonProperties": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locationProperties.value]"
            },
            "mlzTags": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
            },
            "namingConvention": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention]"
            },
            "privateDnsZones": {
              "type": "array",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
            },
            "resourcePrefix": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01', 'full').tags.resourcePrefix]"
            },
            "storageEncryptionKeyName": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
            },
            "subnetResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
            },
            "tier": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
            },
            "tokens": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
            }
          }
        }
      }
    },
    {
      "copy": {
        "name": "rgs",
        "count": "[length(variables('resourceGroupServices'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[copyIndex()], parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": "[if(or(equals(variables('resourceGroupServices')[copyIndex()], 'controlPlane'), equals(variables('resourceGroupServices')[copyIndex()], 'feedWorkspace')), createObject('value', parameters('locationControlPlane')), createObject('value', parameters('locationVirtualMachines')))]",
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "name": "[if(and(equals(length(variables('deploymentLocations')), 2), or(or(equals(variables('resourceGroupServices')[copyIndex()], 'hosts'), equals(variables('resourceGroupServices')[copyIndex()], 'management')), equals(variables('resourceGroupServices')[copyIndex()], 'storage'))), createObject('value', replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, variables('resourceGroupServices')[copyIndex()])), if(equals(variables('resourceGroupServices')[copyIndex()], 'feedWorkspace'), createObject('value', replace(replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, variables('resourceGroupServices')[copyIndex()]), format('-{0}', parameters('stampIndex')), '')), createObject('value', replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, variables('resourceGroupServices')[copyIndex()]))))]",
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "5234750876173141008"
            }
          },
          "parameters": {
            "mlzTags": {
              "type": "object"
            },
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2019-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Resources/resourceGroups'), parameters('tags')['Microsoft.Resources/resourceGroups'], createObject()), parameters('mlzTags'))]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
            },
            "tags": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-management-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "artifactsStorageAccountResourceId": {
            "value": "[parameters('artifactsStorageAccountResourceId')]"
          },
          "artifactsUri": {
            "value": "[variables('artifactsUri')]"
          },
          "availability": {
            "value": "[parameters('availability')]"
          },
          "avdObjectId": {
            "value": "[parameters('avdObjectId')]"
          },
          "azurePowerShellModuleMsiName": {
            "value": "[parameters('azurePowerShellModuleMsiName')]"
          },
          "deployFslogix": {
            "value": "[variables('deployFslogix')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "diskEncryptionSetResourceId": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value))]",
          "diskSku": {
            "value": "[parameters('diskSku')]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "enableMonitoring": {
            "value": "[parameters('monitoring')]"
          },
          "fslogixStorageService": {
            "value": "[parameters('fslogixStorageService')]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "imageVersionResourceId": {
            "value": "[parameters('imageVersionResourceId')]"
          },
          "locationVirtualMachines": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "logAnalyticsWorkspaceRetention": {
            "value": "[parameters('logAnalyticsWorkspaceRetention')]"
          },
          "logAnalyticsWorkspaceSku": {
            "value": "[parameters('logAnalyticsWorkspaceSku')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "namingConvention": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value))]",
          "organizationalUnitPath": {
            "value": "[parameters('organizationalUnitPath')]"
          },
          "privateDnsZoneResourceIdPrefix": {
            "value": "[variables('privateDnsZoneResourceIdPrefix')]"
          },
          "privateDnsZones": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value]"
          },
          "recoveryServices": {
            "value": "[parameters('recoveryServices')]"
          },
          "recoveryServicesGeo": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.recoveryServicesGeo), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.recoveryServicesGeo))]",
          "resourceGroupControlPlane": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[0], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "resourceGroupFeedWorkspace": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[1], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "resourceGroupHosts": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[2], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[3], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "resourceGroupStorage": "[if(variables('deployFslogix'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[4], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', ''))]",
          "roleDefinitions": {
            "value": "[variables('roleDefinitions')]"
          },
          "scalingTool": {
            "value": "[parameters('scalingTool')]"
          },
          "serviceToken": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
          },
          "sessionHostCount": {
            "value": "[parameters('sessionHostCount')]"
          },
          "stampIndex": {
            "value": "[parameters('stampIndex')]"
          },
          "storageService": {
            "value": "[variables('storageService')]"
          },
          "subnetResourceId": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeZone": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.timeZone), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.timeZone))]",
          "virtualMachinePassword": {
            "value": "[parameters('virtualMachinePassword')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "virtualMachineUsername": {
            "value": "[parameters('virtualMachineUsername')]"
          },
          "workspaceFeedNamingConvention": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.workspaceFeed]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "5006503674104982392"
            }
          },
          "parameters": {
            "activeDirectorySolution": {
              "type": "string"
            },
            "artifactsUri": {
              "type": "string"
            },
            "artifactsStorageAccountResourceId": {
              "type": "string"
            },
            "availability": {
              "type": "string"
            },
            "avdObjectId": {
              "type": "string"
            },
            "azurePowerShellModuleMsiName": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "diskSku": {
              "type": "string"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "deployFslogix": {
              "type": "bool"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "fslogixStorageService": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "imageVersionResourceId": {
              "type": "string"
            },
            "locationVirtualMachines": {
              "type": "string"
            },
            "logAnalyticsWorkspaceRetention": {
              "type": "int"
            },
            "logAnalyticsWorkspaceSku": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "namingConvention": {
              "type": "object"
            },
            "organizationalUnitPath": {
              "type": "string"
            },
            "privateDnsZoneResourceIdPrefix": {
              "type": "string"
            },
            "privateDnsZones": {
              "type": "array"
            },
            "recoveryServices": {
              "type": "bool"
            },
            "recoveryServicesGeo": {
              "type": "string"
            },
            "resourceGroupControlPlane": {
              "type": "string"
            },
            "resourceGroupFeedWorkspace": {
              "type": "string"
            },
            "resourceGroupHosts": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "resourceGroupStorage": {
              "type": "string"
            },
            "roleDefinitions": {
              "type": "object"
            },
            "scalingTool": {
              "type": "bool"
            },
            "serviceToken": {
              "type": "string"
            },
            "sessionHostCount": {
              "type": "int"
            },
            "stampIndex": {
              "type": "int"
            },
            "storageService": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeZone": {
              "type": "string"
            },
            "virtualMachinePassword": {
              "type": "securestring"
            },
            "virtualMachineUsername": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "workspaceFeedNamingConvention": {
              "type": "string"
            }
          },
          "variables": {
            "cpuCountMax": "[if(contains(parameters('hostPoolType'), 'Pooled'), 32, 128)]",
            "cpuCountMin": "[if(contains(parameters('hostPoolType'), 'Pooled'), 4, 2)]",
            "hostPoolName": "[parameters('namingConvention').hostPool]",
            "roleAssignments": "[union(createArray(createObject('roleDefinitionId', 'f353d9bd-d4a6-484e-a77a-8050b599b867', 'resourceGroup', parameters('resourceGroupManagement'), 'subscription', subscription().subscriptionId), createObject('roleDefinitionId', '86240b0e-9422-4c43-887b-b61143f32ba8', 'resourceGroup', parameters('resourceGroupControlPlane'), 'subscription', subscription().subscriptionId), createObject('roleDefinitionId', '2ad6aaab-ead9-4eaa-8ac5-da422f562408', 'resourceGroup', parameters('resourceGroupControlPlane'), 'subscription', subscription().subscriptionId), createObject('roleDefinitionId', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c', 'resourceGroup', parameters('resourceGroupManagement'), 'subscription', subscription().subscriptionId), createObject('roleDefinitionId', '21efdde3-836f-432b-bf3d-3e8e734d4b2b', 'resourceGroup', parameters('resourceGroupFeedWorkspace'), 'subscription', subscription().subscriptionId), createObject('roleDefinitionId', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1', 'resourceGroup', split(parameters('artifactsStorageAccountResourceId'), '/')[4], 'subscription', split(parameters('artifactsStorageAccountResourceId'), '/')[2])), if(parameters('deployFslogix'), createArray(createObject('roleDefinitionId', '17d1049b-9a84-46fb-8f53-869881c3d3ab', 'resourceGroup', parameters('resourceGroupStorage'), 'subscription', subscription().subscriptionId)), createArray()))]",
            "userAssignedIdentityNamePrefix": "[parameters('namingConvention').userAssignedIdentity]",
            "virtualNetworkName": "[split(parameters('subnetResourceId'), '/')[8]]",
            "virtualNetworkResourceGroupName": "[split(parameters('subnetResourceId'), '/')[4]]",
            "workspaceFeedName": "[replace(replace(parameters('workspaceFeedNamingConvention'), parameters('serviceToken'), 'feed'), format('-{0}', parameters('stampIndex')), '')]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(replace(variables('userAssignedIdentityNamePrefix'), parameters('serviceToken'), 'deployment'), parameters('roleDefinitions').Reader, subscription().id)]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitions').Reader)]",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('avdObjectId'), parameters('roleDefinitions').DesktopVirtualizationPowerOnContributor, subscription().id)]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitions').DesktopVirtualizationPowerOnContributor)]",
                "principalId": "[parameters('avdObjectId')]"
              }
            },
            {
              "condition": "[and(contains(parameters('hostPoolType'), 'Pooled'), parameters('recoveryServices'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-policy-disks-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupHosts')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "1118038782949885339"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/policyDefinitions",
                      "apiVersion": "2021-06-01",
                      "name": "DiskNetworkAccess",
                      "properties": {
                        "description": "[format('Disable network access to managed disks in the {0} resource group', parameters('resourceGroupName'))]",
                        "displayName": "[format('Disable Disk Access ({0})', parameters('resourceGroupName'))]",
                        "mode": "All",
                        "parameters": {},
                        "policyRule": {
                          "if": {
                            "field": "type",
                            "equals": "Microsoft.Compute/disks"
                          },
                          "then": {
                            "effect": "modify",
                            "details": {
                              "roleDefinitionIds": [
                                "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840"
                              ],
                              "operations": [
                                {
                                  "operation": "addOrReplace",
                                  "field": "Microsoft.Compute/disks/networkAccessPolicy",
                                  "value": "DenyAll"
                                },
                                {
                                  "operation": "addOrReplace",
                                  "field": "Microsoft.Compute/disks/publicNetworkAccess",
                                  "value": "Disabled"
                                }
                              ]
                            }
                          }
                        },
                        "policyType": "Custom"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "DiskNetworkAccess",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "policyDefinitionId": {
                            "value": "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess')]"
                          },
                          "policyDisplayName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess'), '2021-06-01').displayName]"
                          },
                          "policyName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess'), '2021-06-01').displayName]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "8887704563888977700"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "policyDefinitionId": {
                              "type": "string"
                            },
                            "policyDisplayName": {
                              "type": "string"
                            },
                            "policyName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2022-06-01",
                              "name": "[parameters('policyName')]",
                              "location": "[parameters('location')]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "displayName": "[parameters('policyDisplayName')]",
                                "policyDefinitionId": "[parameters('policyDefinitionId')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess')]"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "name": {
                    "value": "[replace(variables('userAssignedIdentityNamePrefix'), parameters('serviceToken'), 'deployment')]"
                  },
                  "tags": {
                    "value": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), variables('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject()), parameters('mlzTags'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "3826781973821991354"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "clientId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    },
                    "principalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "roleAssignments_deployment",
                "count": "[length(range(0, length(variables('roleAssignments'))))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-role-assignment-{0}-{1}', range(0, length(variables('roleAssignments')))[copyIndex()], parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].subscription]",
              "resourceGroup": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].resourceGroup]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "principalType": {
                    "value": "ServicePrincipal"
                  },
                  "roleDefinitionId": {
                    "value": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].roleDefinitionId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "1476792570487351405"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string"
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-artifacts-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[split(parameters('artifactsStorageAccountResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('artifactsStorageAccountResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "hostPoolName": {
                    "value": "[variables('hostPoolName')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "storageAccountName": {
                    "value": "[split(parameters('artifactsStorageAccountResourceId'), '/')[8]]"
                  },
                  "subscriptionId": {
                    "value": "[subscription().subscriptionId]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[replace(variables('userAssignedIdentityNamePrefix'), parameters('serviceToken'), 'artifacts')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "4373662163501292494"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('userAssignedIdentityName'), variables('roleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-artifacts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-artifacts-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-id-artifacts-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('userAssignedIdentityName')]"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject()), parameters('mlzTags'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "3826781973821991354"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "clientId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "principalId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "userAssignedIdentityClientId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-artifacts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-artifacts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-artifacts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-mgmt-vm-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "azurePowerShellModuleMsiName": {
                    "value": "[parameters('azurePowerShellModuleMsiName')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
                  },
                  "deploymentUserAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "diskName": {
                    "value": "[replace(parameters('namingConvention').virtualMachineDisk, parameters('serviceToken'), 'mgt')]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "hostPoolName": {
                    "value": "[variables('hostPoolName')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "networkInterfaceName": {
                    "value": "[replace(parameters('namingConvention').virtualMachineNetworkInterface, parameters('serviceToken'), 'mgt')]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "subnet": {
                    "value": "[split(parameters('subnetResourceId'), '/')[10]]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineName": {
                    "value": "[replace(parameters('namingConvention').virtualMachine, parameters('serviceToken'), 'mgt')]"
                  },
                  "virtualMachinePassword": {
                    "value": "[parameters('virtualMachinePassword')]"
                  },
                  "virtualMachineUsername": {
                    "value": "[parameters('virtualMachineUsername')]"
                  },
                  "virtualNetwork": {
                    "value": "[variables('virtualNetworkName')]"
                  },
                  "virtualNetworkResourceGroup": {
                    "value": "[variables('virtualNetworkResourceGroupName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "4632002593643351436"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "azurePowerShellModuleMsiName": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "diskName": {
                      "type": "string"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "subnet": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                    },
                    "virtualNetwork": {
                      "type": "string"
                    },
                    "virtualNetworkResourceGroup": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachinePassword": {
                      "type": "securestring"
                    },
                    "virtualMachineUsername": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "tagsVirtualMachines": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-05-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork'), parameters('subnet'))]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": false,
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-11-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[variables('tagsVirtualMachines')]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "Standard_B2s"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2019-datacenter-core-g2",
                            "version": "latest"
                          },
                          "osDisk": {
                            "deleteOption": "Delete",
                            "osType": "Windows",
                            "createOption": "FromImage",
                            "caching": "None",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "[parameters('diskSku')]"
                            },
                            "name": "[parameters('diskName')]"
                          },
                          "dataDisks": []
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('virtualMachineUsername')]",
                          "adminPassword": "[parameters('virtualMachinePassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "securityProfile": {
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch",
                          "encryptionAtHost": true
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "licenseType": "Windows_Server"
                      },
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('deploymentUserAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'IaaSAntimalware')]",
                      "location": "[parameters('location')]",
                      "tags": "[variables('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": false,
                        "settings": {
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "7",
                            "time": "120",
                            "scanType": "Quick"
                          },
                          "Exclusions": {}
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2019-07-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'JsonADDomainExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[variables('tagsVirtualMachines')]",
                      "properties": {
                        "forceUpdateTag": "[parameters('timestamp')]",
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('domainName')]",
                          "Options": "3",
                          "OUPath": "[parameters('organizationalUnitPath')]",
                          "Restart": "true",
                          "User": "[parameters('domainJoinUserPrincipalName')]"
                        },
                        "protectedSettings": {
                          "Password": "[parameters('domainJoinPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('CSE_InstallAzurePowerShellAzModule_{0}', parameters('timestamp')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('CSE_InstallAzurePowerShellAzModule_{0}', parameters('timestamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}{1}', parameters('artifactsUri'), parameters('azurePowerShellModuleMsiName'))]",
                              "[format('{0}Install-AzurePowerShellAzModule.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "parameters": {
                            "value": "[format('-Installer {0}', parameters('azurePowerShellModuleMsiName'))]"
                          },
                          "scriptFileName": {
                            "value": "Install-AzurePowerShellAzModule.ps1"
                          },
                          "tags": {
                            "value": "[variables('tagsVirtualMachines')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('virtualMachineName')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1897972445567182190"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'IaaSAntimalware')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Name": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('validate-deployment-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "fileUris": {
                    "value": [
                      "[format('{0}Get-Validations.ps1', parameters('artifactsUri'))]"
                    ]
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "parameters": {
                    "value": "[format('-ActiveDirectorySolution {0} -CpuCountMax {1} -CpuCountMin {2} -DomainName {3} -Environment {4} -imageVersionResourceId {5} -Location {6} -SessionHostCount {7} -StorageService {8} -SubscriptionId {9} -TenantId {10} -UserAssignedIdentityClientId {11} -VirtualMachineSize {12} -VirtualNetworkName {13} -VirtualNetworkResourceGroupName {14} -WorkspaceFeedName {15} -WorkspaceResourceGroupName {16}', parameters('activeDirectorySolution'), variables('cpuCountMax'), variables('cpuCountMin'), if(empty(parameters('domainName')), 'NotApplicable', parameters('domainName')), environment().name, if(empty(parameters('imageVersionResourceId')), 'NotApplicable', parameters('imageVersionResourceId')), parameters('locationVirtualMachines'), parameters('sessionHostCount'), parameters('storageService'), subscription().subscriptionId, tenant().tenantId, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value, parameters('virtualMachineSize'), variables('virtualNetworkName'), variables('virtualNetworkResourceGroupName'), variables('workspaceFeedName'), parameters('resourceGroupFeedWorkspace'))]"
                  },
                  "scriptFileName": {
                    "value": "Get-Validations.ps1"
                  },
                  "tags": {
                    "value": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), variables('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-mgmt-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.Name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "1897972445567182190"
                    }
                  },
                  "parameters": {
                    "fileUris": {
                      "type": "array"
                    },
                    "location": {
                      "type": "string"
                    },
                    "parameters": {
                      "type": "securestring"
                    },
                    "scriptFileName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "timestamp": "[parameters('timestamp')]"
                        },
                        "protectedSettings": {
                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                          "fileUris": "[parameters('fileUris')]",
                          "managedIdentity": {
                            "clientId": "[parameters('userAssignedIdentityClientId')]"
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "value": {
                      "type": "object",
                      "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-mgmt-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dataCollectionRuleName": {
                    "value": "[parameters('namingConvention').dataCollectionRule]"
                  },
                  "hostPoolName": {
                    "value": "[variables('hostPoolName')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('namingConvention').logAnalyticsWorkspace]"
                  },
                  "logAnalyticsWorkspaceRetention": {
                    "value": "[parameters('logAnalyticsWorkspaceRetention')]"
                  },
                  "logAnalyticsWorkspaceSku": {
                    "value": "[parameters('logAnalyticsWorkspaceSku')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "17584404965206329057"
                    }
                  },
                  "parameters": {
                    "dataCollectionRuleName": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceRetention": {
                      "type": "int"
                    },
                    "logAnalyticsWorkspaceSku": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('tags')['Microsoft.OperationalInsights/workspaces'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "sku": {
                          "name": "[parameters('logAnalyticsWorkspaceSku')]"
                        },
                        "retentionInDays": "[parameters('logAnalyticsWorkspaceRetention')]",
                        "workspaceCapping": {
                          "dailyQuotaGb": -1
                        },
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled"
                      }
                    },
                    {
                      "type": "Microsoft.Insights/dataCollectionRules",
                      "apiVersion": "2022-06-01",
                      "name": "[format('microsoft-avdi-{0}', parameters('dataCollectionRuleName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Insights/dataCollectionRules'), parameters('tags')['Microsoft.Insights/dataCollectionRules'], createObject()), parameters('mlzTags'))]",
                      "kind": "Windows",
                      "properties": {
                        "dataSources": {
                          "performanceCounters": [
                            {
                              "streams": [
                                "Microsoft-Perf"
                              ],
                              "samplingFrequencyInSeconds": 30,
                              "counterSpecifiers": [
                                "\\LogicalDisk(C:)\\Avg. Disk Queue Length",
                                "\\LogicalDisk(C:)\\Current Disk Queue Length",
                                "\\Memory\\Available Mbytes",
                                "\\Memory\\Page Faults/sec",
                                "\\Memory\\Pages/sec",
                                "\\Memory\\% Committed Bytes In Use",
                                "\\PhysicalDisk(*)\\Avg. Disk Queue Length",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Read",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Transfer",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Write",
                                "\\Processor Information(_Total)\\% Processor Time",
                                "\\User Input Delay per Process(*)\\Max Input Delay",
                                "\\User Input Delay per Session(*)\\Max Input Delay",
                                "\\RemoteFX Network(*)\\Current TCP RTT",
                                "\\RemoteFX Network(*)\\Current UDP Bandwidth"
                              ],
                              "name": "perfCounterDataSource10"
                            },
                            {
                              "streams": [
                                "Microsoft-Perf"
                              ],
                              "samplingFrequencyInSeconds": 60,
                              "counterSpecifiers": [
                                "\\LogicalDisk(C:)\\% Free Space",
                                "\\LogicalDisk(C:)\\Avg. Disk sec/Transfer",
                                "\\Terminal Services(*)\\Active Sessions",
                                "\\Terminal Services(*)\\Inactive Sessions",
                                "\\Terminal Services(*)\\Total Sessions"
                              ],
                              "name": "perfCounterDataSource30"
                            }
                          ],
                          "windowsEventLogs": [
                            {
                              "streams": [
                                "Microsoft-Event"
                              ],
                              "xPathQueries": [
                                "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Admin!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "System!*",
                                "Microsoft-FSLogix-Apps/Operational!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "Application!*[System[(Level=2 or Level=3)]]",
                                "Microsoft-FSLogix-Apps/Admin!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]"
                              ],
                              "name": "eventLogsDataSource"
                            }
                          ]
                        },
                        "destinations": {
                          "logAnalytics": [
                            {
                              "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                              "name": "la-workspace"
                            }
                          ]
                        },
                        "dataFlows": [
                          {
                            "streams": [
                              "Microsoft-Perf",
                              "Microsoft-Event"
                            ],
                            "destinations": [
                              "la-workspace"
                            ]
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "value": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                    },
                    "dataCollectionRuleResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/dataCollectionRules', format('microsoft-avdi-{0}', parameters('dataCollectionRuleName')))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[or(parameters('scalingTool'), equals(parameters('fslogixStorageService'), 'AzureFiles Premium'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-aa-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "automationAccountDiagnosticSettingName": {
                    "value": "[parameters('namingConvention').automationAccountDiagnosticSetting]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('namingConvention').automationAccount]"
                  },
                  "automationAccountNetworkInterfaceName": {
                    "value": "[parameters('namingConvention').automationAccountNetworkInterface]"
                  },
                  "automationAccountPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', startsWith(lambdaVariables('name'), 'privatelink.azure-automation')))[0])]"
                  },
                  "automationAccountPrivateEndpointName": {
                    "value": "[parameters('namingConvention').automationAccountPrivateEndpoint]"
                  },
                  "hostPoolName": {
                    "value": "[variables('hostPoolName')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceResourceId": "[if(parameters('enableMonitoring'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value), createObject('value', ''))]",
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "monitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-mgmt-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.Name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "9319944623731815673"
                    }
                  },
                  "parameters": {
                    "automationAccountDiagnosticSettingName": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "automationAccountNetworkInterfaceName": {
                      "type": "string"
                    },
                    "automationAccountPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "automationAccountPrivateEndpointName": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "monitoring": {
                      "type": "bool"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Automation/automationAccounts",
                      "apiVersion": "2021-06-22",
                      "name": "[parameters('automationAccountName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject()), parameters('mlzTags'))]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "sku": {
                          "name": "Free"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('automationAccountPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('automationAccountNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('automationAccountPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                              "groupIds": [
                                "DSCAndHybridWorker"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('automationAccountPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(split(parameters('automationAccountPrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('automationAccountPrivateEndpointName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'Scaling Tool')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups/hybridRunbookWorkers",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}/{2}', parameters('automationAccountName'), 'Scaling Tool', guid(resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Scaling Tool')))]",
                      "properties": {
                        "vmResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Scaling Tool')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'HybridWorkerForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Automation.HybridWorker",
                        "type": "HybridWorkerForWindows",
                        "typeHandlerVersion": "1.1",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "AutomationAccountURL": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2021-06-22').automationHybridServiceUrl]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('monitoring')]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('automationAccountName'))]",
                      "name": "[parameters('automationAccountDiagnosticSettingName')]",
                      "properties": {
                        "logs": [
                          {
                            "category": "DscNodeStatus",
                            "enabled": true
                          },
                          {
                            "category": "JobLogs",
                            "enabled": true
                          },
                          {
                            "category": "JobStreams",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('automationAccountName')]"
                    },
                    "hybridRunbookWorkerGroupName": {
                      "type": "string",
                      "value": "Scaling Tool"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-mgmt-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(parameters('recoveryServices'), or(and(and(contains(parameters('activeDirectorySolution'), 'DomainServices'), contains(parameters('hostPoolType'), 'Pooled')), contains(parameters('fslogixStorageService'), 'AzureFiles')), contains(parameters('hostPoolType'), 'Personal')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-rsv-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureBlobsPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), 'blob')))[0])]"
                  },
                  "azureQueueStoragePrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), 'queue')))[0])]"
                  },
                  "deployFslogix": {
                    "value": "[parameters('deployFslogix')]"
                  },
                  "hostPoolName": {
                    "value": "[variables('hostPoolName')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "recoveryServicesPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', startsWith(lambdaVariables('name'), format('privatelink.{0}.backup.windowsazure', parameters('recoveryServicesGeo')))))[0])]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[parameters('namingConvention').recoveryServicesVault]"
                  },
                  "recoveryServicesVaultNetworkInterfaceName": {
                    "value": "[parameters('namingConvention').recoveryServicesVaultNetworkInterface]"
                  },
                  "recoveryServicesVaultPrivateEndpointName": {
                    "value": "[parameters('namingConvention').recoveryServicesVaultPrivateEndpoint]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "6932707493637396571"
                    }
                  },
                  "parameters": {
                    "azureBlobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "azureQueueStoragePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "deployFslogix": {
                      "type": "bool"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "recoveryServicesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "recoveryServicesVaultNetworkInterfaceName": {
                      "type": "string"
                    },
                    "recoveryServicesVaultPrivateEndpointName": {
                      "type": "string"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeZone": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.RecoveryServices/vaults",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('recoveryServicesVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), parameters('tags')['Microsoft.RecoveryServices/vaults'], createObject()), parameters('mlzTags'))]",
                      "sku": {
                        "name": "RS0",
                        "tier": "Standard"
                      },
                      "properties": {}
                    },
                    {
                      "condition": "[and(parameters('deployFslogix'), equals(parameters('storageService'), 'AzureFiles'))]",
                      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('recoveryServicesVaultName'), 'AvdPolicyStorage')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), parameters('tags')['Microsoft.RecoveryServices/vaults'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "backupManagementType": "AzureStorage",
                        "schedulePolicy": {
                          "scheduleRunFrequency": "Daily",
                          "scheduleRunTimes": [
                            "23:00"
                          ],
                          "schedulePolicyType": "SimpleSchedulePolicy"
                        },
                        "retentionPolicy": {
                          "retentionPolicyType": "LongTermRetentionPolicy",
                          "dailySchedule": {
                            "retentionTimes": [
                              "23:00"
                            ],
                            "retentionDuration": {
                              "count": 30,
                              "durationType": "Days"
                            }
                          }
                        },
                        "timeZone": "[parameters('timeZone')]",
                        "workLoadType": "AzureFileShare"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('deployFslogix'))]",
                      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('recoveryServicesVaultName'), 'AvdPolicyVm')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), parameters('tags')['Microsoft.RecoveryServices/vaults'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "backupManagementType": "AzureIaasVM",
                        "instantRpRetentionRangeInDays": 2,
                        "policyType": "V2",
                        "retentionPolicy": {
                          "retentionPolicyType": "LongTermRetentionPolicy",
                          "dailySchedule": {
                            "retentionTimes": [
                              "23:00"
                            ],
                            "retentionDuration": {
                              "count": 30,
                              "durationType": "Days"
                            }
                          }
                        },
                        "schedulePolicy": {
                          "schedulePolicyType": "SimpleSchedulePolicyV2",
                          "scheduleRunFrequency": "Daily",
                          "dailySchedule": {
                            "scheduleRunTimes": [
                              "23:00"
                            ]
                          }
                        },
                        "timeZone": "[parameters('timeZone')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('recoveryServicesVaultPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('recoveryServicesVaultNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('recoveryServicesVaultPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]",
                              "groupIds": [
                                "AzureBackup"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('recoveryServicesVaultPrivateEndpointName'), parameters('recoveryServicesVaultName'))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(parameters('recoveryServicesPrivateDnsZoneResourceId'), '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('recoveryServicesPrivateDnsZoneResourceId')]"
                            }
                          },
                          {
                            "name": "[replace(parameters('azureQueueStoragePrivateDnsZoneResourceId'), '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('azureQueueStoragePrivateDnsZoneResourceId')]"
                            }
                          },
                          {
                            "name": "[replace(parameters('azureBlobsPrivateDnsZoneResourceId'), '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('azureBlobsPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('recoveryServicesVaultPrivateEndpointName'))]",
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('recoveryServicesVaultName')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "artifactsUserAssignedIdentityClientId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('artifactsStorageAccountResourceId'), '/')[2], split(parameters('artifactsStorageAccountResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-artifacts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityClientId.value]"
            },
            "artifactsUserAssignedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('artifactsStorageAccountResourceId'), '/')[2], split(parameters('artifactsStorageAccountResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-artifacts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value]"
            },
            "artifactsUserAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('artifactsStorageAccountResourceId'), '/')[2], split(parameters('artifactsStorageAccountResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-artifacts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
            },
            "automationAccountName": {
              "type": "string",
              "value": "[if(or(parameters('scalingTool'), equals(parameters('fslogixStorageService'), 'AzureFiles Premium')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-aa-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value, '')]"
            },
            "dataCollectionRuleResourceId": {
              "type": "string",
              "value": "[if(parameters('enableMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.dataCollectionRuleResourceId.value, '')]"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
            },
            "deploymentUserAssignedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
            },
            "deploymentUserAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            },
            "existingFeedWorkspace": {
              "type": "bool",
              "value": "[if(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('validate-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.value.value.existingWorkspace, 'true'), true(), false())]"
            },
            "hybridRunbookWorkerGroupName": {
              "type": "string",
              "value": "[if(or(parameters('scalingTool'), equals(parameters('fslogixStorageService'), 'AzureFiles Premium')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-aa-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hybridRunbookWorkerGroupName.value, '')]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[if(parameters('enableMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceName.value, '')]"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[if(parameters('enableMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value, '')]"
            },
            "recoveryServicesVaultName": {
              "type": "string",
              "value": "[if(and(parameters('recoveryServices'), or(and(and(contains(parameters('activeDirectorySolution'), 'DomainServices'), contains(parameters('hostPoolType'), 'Pooled')), contains(parameters('fslogixStorageService'), 'AzureFiles')), contains(parameters('hostPoolType'), 'Personal'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-rsv-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value, '')]"
            },
            "validateAcceleratedNetworking": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('validate-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.value.value.acceleratedNetworking]"
            },
            "validateANFDnsServers": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('validate-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.value.value.anfDnsServers]"
            },
            "validateANFfActiveDirectory": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('validate-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.value.value.anfActiveDirectory]"
            },
            "validateANFSubnetId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('validate-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.value.value.anfSubnetId]"
            },
            "validateAvailabilityZones": {
              "type": "array",
              "value": "[if(equals(parameters('availability'), 'AvailabilityZones'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('validate-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.value.value.availabilityZones, createArray('1'))]"
            },
            "virtualMachineName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-mgmt-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.Name.value]"
            }
          }
        }
      },
      "dependsOn": [
        "rgs",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-global-workspace-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[split(parameters('sharedServicesSubnetResourceId'), '/')[2]]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "existingWorkspace": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.existingFeedWorkspace.value]"
          },
          "globalWorkspacePrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value, lambda('name', startsWith(lambdaVariables('name'), 'privatelink-global.wvd')))[0])]"
          },
          "sharedServicesSubnetResourceId": {
            "value": "[parameters('sharedServicesSubnetResourceId')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "resourceGroupName": {
            "value": "[replace(replace(replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'globalWorkspace'), format('-{0}', parameters('stampIndex')), ''), parameters('identifier'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourcePrefix.value)]"
          },
          "workspaceGlobalName": {
            "value": "[replace(replace(replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.workspaceGlobal, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'global'), format('-{0}', parameters('stampIndex')), ''), parameters('identifier'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourcePrefix.value)]"
          },
          "workspaceGlobalNetworkInterfaceName": {
            "value": "[replace(replace(replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.workspaceGlobalNetworkInterface, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'global'), format('-{0}', parameters('stampIndex')), ''), parameters('identifier'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourcePrefix.value)]"
          },
          "workspaceGlobalPrivateEndpointName": {
            "value": "[replace(replace(replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.workspaceGlobalPrivateEndpoint, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'global'), format('-{0}', parameters('stampIndex')), ''), parameters('identifier'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourcePrefix.value)]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "7123749352570912766"
            }
          },
          "parameters": {
            "deploymentNameSuffix": {
              "type": "string"
            },
            "existingWorkspace": {
              "type": "bool"
            },
            "globalWorkspacePrivateDnsZoneResourceId": {
              "type": "string"
            },
            "sharedServicesSubnetResourceId": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "workspaceGlobalName": {
              "type": "string"
            },
            "workspaceGlobalNetworkInterfaceName": {
              "type": "string"
            },
            "workspaceGlobalPrivateEndpointName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[not(parameters('existingWorkspace'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-vnet-shared-services-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[split(parameters('sharedServicesSubnetResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[split(parameters('sharedServicesSubnetResourceId'), '/')[8]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "10316446539671133687"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2023-06-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[not(parameters('existingWorkspace'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-rg-vdws-global-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[split(parameters('sharedServicesSubnetResourceId'), '/')[2]]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": "[if(not(parameters('existingWorkspace')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('sharedServicesSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('get-vnet-shared-services-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.location.value), createObject('value', ''))]",
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "name": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "tags": {
                    "value": {}
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "5234750876173141008"
                    }
                  },
                  "parameters": {
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Resources/resourceGroups'), parameters('tags')['Microsoft.Resources/resourceGroups'], createObject()), parameters('mlzTags'))]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
                    },
                    "tags": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('sharedServicesSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('get-vnet-shared-services-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(parameters('existingWorkspace'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vdws-global-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "globalWorkspacePrivateDnsZoneResourceId": {
                    "value": "[parameters('globalWorkspacePrivateDnsZoneResourceId')]"
                  },
                  "location": "[if(not(parameters('existingWorkspace')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('sharedServicesSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('get-vnet-shared-services-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.location.value), createObject('value', ''))]",
                  "subnetResourceId": {
                    "value": "[parameters('sharedServicesSubnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "workspaceGlobalName": {
                    "value": "[parameters('workspaceGlobalName')]"
                  },
                  "workspaceGlobalNetworkInterfaceName": {
                    "value": "[parameters('workspaceGlobalNetworkInterfaceName')]"
                  },
                  "workspaceGlobalPrivateEndpointName": {
                    "value": "[parameters('workspaceGlobalPrivateEndpointName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "5080266010877897680"
                    }
                  },
                  "parameters": {
                    "globalWorkspacePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "workspaceGlobalName": {
                      "type": "string"
                    },
                    "workspaceGlobalNetworkInterfaceName": {
                      "type": "string"
                    },
                    "workspaceGlobalPrivateEndpointName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/workspaces",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('workspaceGlobalName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('workspaceGlobalPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('workspaceGlobalNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('workspaceGlobalPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceGlobalName'))]",
                              "groupIds": [
                                "global"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceGlobalName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('workspaceGlobalPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(split(parameters('globalWorkspacePrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('globalWorkspacePrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('workspaceGlobalPrivateEndpointName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(split(parameters('sharedServicesSubnetResourceId'), '/')[2], 'Microsoft.Resources/deployments', format('deploy-rg-vdws-global-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('sharedServicesSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('get-vnet-shared-services-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-control-plane-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "artifactsUri": {
            "value": "[variables('artifactsUri')]"
          },
          "avdPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value, lambda('name', startsWith(lambdaVariables('name'), 'privatelink.wvd')))[0])]"
          },
          "customImageId": {
            "value": "[variables('customImageId')]"
          },
          "customRdpProperty": {
            "value": "[parameters('customRdpProperty')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "deploymentUserAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "desktopFriendlyName": "[if(empty(parameters('desktopFriendlyName')), createObject('value', string(parameters('stampIndex'))), createObject('value', parameters('desktopFriendlyName')))]",
          "diskSku": {
            "value": "[parameters('diskSku')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "existingFeedWorkspace": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.existingFeedWorkspace.value]"
          },
          "hostPoolPublicNetworkAccess": {
            "value": "[parameters('hostPoolPublicNetworkAccess')]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "imageOffer": {
            "value": "[parameters('imageOffer')]"
          },
          "imagePublisher": {
            "value": "[parameters('imagePublisher')]"
          },
          "imageSku": {
            "value": "[parameters('imageSku')]"
          },
          "imageVersionResourceId": {
            "value": "[parameters('imageVersionResourceId')]"
          },
          "locationControlPlane": {
            "value": "[parameters('locationControlPlane')]"
          },
          "locationVirtualMachines": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "logAnalyticsWorkspaceResourceId": "[if(parameters('monitoring'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value), createObject('value', ''))]",
          "managementVirtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualMachineName.value]"
          },
          "maxSessionLimit": {
            "value": "[mul(parameters('usersPerCore'), parameters('virtualMachineVirtualCpuCount'))]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "monitoring": {
            "value": "[parameters('monitoring')]"
          },
          "namingConvention": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value]"
          },
          "resourceGroups": {
            "value": "[union(createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[0], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[1], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[2], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[3], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), if(variables('deployFslogix'), createArray(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[4], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createArray()))]"
          },
          "roleDefinitions": {
            "value": "[variables('roleDefinitions')]"
          },
          "securityPrincipalObjectIds": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
          },
          "serviceToken": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
          },
          "sessionHostNamePrefix": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.virtualMachine, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, '')), createObject('value', replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.virtualMachine, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, '')))]",
          "stampIndex": {
            "value": "[string(parameters('stampIndex'))]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "validationEnvironment": {
            "value": "[parameters('validationEnvironment')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "workspaceFriendlyName": {
            "value": "[parameters('workspaceFriendlyName')]"
          },
          "workspacePublicNetworkAccess": {
            "value": "[parameters('workspacePublicNetworkAccess')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "16589890425303482968"
            }
          },
          "parameters": {
            "activeDirectorySolution": {
              "type": "string"
            },
            "artifactsUri": {
              "type": "string"
            },
            "avdPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "customImageId": {
              "type": "string"
            },
            "customRdpProperty": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "desktopFriendlyName": {
              "type": "string"
            },
            "diskSku": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "existingFeedWorkspace": {
              "type": "bool"
            },
            "hostPoolPublicNetworkAccess": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "imageOffer": {
              "type": "string"
            },
            "imagePublisher": {
              "type": "string"
            },
            "imageSku": {
              "type": "string"
            },
            "imageVersionResourceId": {
              "type": "string"
            },
            "locationControlPlane": {
              "type": "string"
            },
            "locationVirtualMachines": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "maxSessionLimit": {
              "type": "int"
            },
            "mlzTags": {
              "type": "object"
            },
            "monitoring": {
              "type": "bool"
            },
            "namingConvention": {
              "type": "object"
            },
            "resourceGroups": {
              "type": "array"
            },
            "roleDefinitions": {
              "type": "object"
            },
            "securityPrincipalObjectIds": {
              "type": "array"
            },
            "serviceToken": {
              "type": "string"
            },
            "sessionHostNamePrefix": {
              "type": "string"
            },
            "stampIndex": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "validationEnvironment": {
              "type": "bool"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "workspaceFriendlyName": {
              "type": "string"
            },
            "workspacePublicNetworkAccess": {
              "type": "string"
            }
          },
          "variables": {
            "galleryImageOffer": "[if(empty(parameters('imageVersionResourceId')), format('\"{0}\"', parameters('imageOffer')), 'null')]",
            "galleryImagePublisher": "[if(empty(parameters('imageVersionResourceId')), format('\"{0}\"', parameters('imagePublisher')), 'null')]",
            "galleryImageSku": "[if(empty(parameters('imageVersionResourceId')), format('\"{0}\"', parameters('imageSku')), 'null')]",
            "galleryItemId": "[if(empty(parameters('imageVersionResourceId')), format('\"{0}.{1}{2}\"', parameters('imagePublisher'), parameters('imageOffer'), parameters('imageSku')), 'null')]",
            "hostPoolName": "[parameters('namingConvention').hostPool]",
            "imageType": "[if(empty(parameters('imageVersionResourceId')), '\"Gallery\"', '\"CustomImage\"')]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroups')[0]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "avdPrivateDnsZoneResourceId": {
                    "value": "[parameters('avdPrivateDnsZoneResourceId')]"
                  },
                  "customImageId": {
                    "value": "[parameters('customImageId')]"
                  },
                  "customRdpProperty": {
                    "value": "[parameters('customRdpProperty')]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "galleryImageOffer": {
                    "value": "[variables('galleryImageOffer')]"
                  },
                  "galleryImagePublisher": {
                    "value": "[variables('galleryImagePublisher')]"
                  },
                  "galleryImageSku": {
                    "value": "[variables('galleryImageSku')]"
                  },
                  "galleryItemId": {
                    "value": "[variables('galleryItemId')]"
                  },
                  "hostPoolDiagnosticSettingName": {
                    "value": "[parameters('namingConvention').hostPoolDiagnosticSetting]"
                  },
                  "hostPoolName": {
                    "value": "[variables('hostPoolName')]"
                  },
                  "hostPoolNetworkInterfaceName": {
                    "value": "[parameters('namingConvention').hostPoolNetworkInterface]"
                  },
                  "hostPoolPrivateEndpointName": {
                    "value": "[parameters('namingConvention').hostPoolPrivateEndpoint]"
                  },
                  "hostPoolPublicNetworkAccess": {
                    "value": "[parameters('hostPoolPublicNetworkAccess')]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "imageType": {
                    "value": "[variables('imageType')]"
                  },
                  "location": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "maxSessionLimit": {
                    "value": "[parameters('maxSessionLimit')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "monitoring": {
                    "value": "[parameters('monitoring')]"
                  },
                  "sessionHostNamePrefix": {
                    "value": "[parameters('sessionHostNamePrefix')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "validationEnvironment": {
                    "value": "[parameters('validationEnvironment')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "9757992956196370258"
                    }
                  },
                  "parameters": {
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "avdPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "customImageId": {
                      "type": "string"
                    },
                    "customRdpProperty": {
                      "type": "string"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "galleryImageOffer": {
                      "type": "string"
                    },
                    "galleryImagePublisher": {
                      "type": "string"
                    },
                    "galleryImageSku": {
                      "type": "string"
                    },
                    "galleryItemId": {
                      "type": "string"
                    },
                    "hostPoolDiagnosticSettingName": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolNetworkInterfaceName": {
                      "type": "string"
                    },
                    "hostPoolPrivateEndpointName": {
                      "type": "string"
                    },
                    "hostPoolPublicNetworkAccess": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "imageType": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "maxSessionLimit": {
                      "type": "int"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "monitoring": {
                      "type": "bool"
                    },
                    "sessionHostNamePrefix": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]"
                    },
                    "validationEnvironment": {
                      "type": "bool"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "customRdpProperty_Complete": "[if(contains(parameters('activeDirectorySolution'), 'MicrosoftEntraId'), format('{0}targetisaadjoined:i:1;enablerdsaadauth:i:1;', parameters('customRdpProperty')), parameters('customRdpProperty'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/hostPools",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('hostPoolName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.DesktopVirtualization/hostPools'), parameters('tags')['Microsoft.DesktopVirtualization/hostPools'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customRdpProperty": "[variables('customRdpProperty_Complete')]",
                        "hostPoolType": "[split(parameters('hostPoolType'), ' ')[0]]",
                        "loadBalancerType": "[if(contains(parameters('hostPoolType'), 'Pooled'), split(parameters('hostPoolType'), ' ')[1], 'Persistent')]",
                        "maxSessionLimit": "[parameters('maxSessionLimit')]",
                        "personalDesktopAssignmentType": "[if(contains(parameters('hostPoolType'), 'Personal'), split(parameters('hostPoolType'), ' ')[1], null())]",
                        "preferredAppGroupType": "Desktop",
                        "publicNetworkAccess": "[parameters('hostPoolPublicNetworkAccess')]",
                        "registrationInfo": {
                          "expirationTime": "[dateTimeAdd(parameters('time'), 'PT2H')]",
                          "registrationTokenOperation": "Update"
                        },
                        "startVMOnConnect": true,
                        "validationEnvironment": "[parameters('validationEnvironment')]",
                        "vmTemplate": "[format('{{\"domain\":\"{0}\",\"galleryImageOffer\":{1},\"galleryImagePublisher\":{2},\"galleryImageSKU\":{3},\"imageType\":{4},\"customImageId\":{5},\"namePrefix\":\"{6}\",\"osDiskType\":\"{7}\",\"vmSize\":{{\"id\":\"{8}\",\"cores\":null,\"ram\":null,\"rdmaEnabled\": false,\"supportsMemoryPreservingMaintenance\": true}},\"galleryItemId\":{9},\"hibernate\":false,\"diskSizeGB\":0,\"securityType\":\"TrustedLaunch\",\"secureBoot\":true,\"vTPM\":true,\"vmInfrastructureType\":\"Cloud\",\"virtualProcessorCount\":null,\"memoryGB\":null,\"maximumMemoryGB\":null,\"minimumMemoryGB\":null,\"dynamicMemoryConfig\":false}}', parameters('domainName'), parameters('galleryImageOffer'), parameters('galleryImagePublisher'), parameters('galleryImageSku'), parameters('imageType'), parameters('customImageId'), parameters('sessionHostNamePrefix'), parameters('diskSku'), parameters('virtualMachineSize'), parameters('galleryItemId'))]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('hostPoolPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('hostPoolNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('hostPoolPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]",
                              "groupIds": [
                                "connection"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('hostPoolPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(split(parameters('avdPrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('avdPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('hostPoolPrivateEndpointName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('monitoring')]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', parameters('hostPoolName'))]",
                      "name": "[parameters('hostPoolDiagnosticSettingName')]",
                      "properties": {
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('hostPoolName')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vdag-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroups')[0]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "desktopApplicationGroupName": {
                    "value": "[replace(parameters('namingConvention').applicationGroup, parameters('serviceToken'), 'desktop')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroups')[0]), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "locationControlPlane": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "locationVirtualMachines": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroups')[3]]"
                  },
                  "roleDefinitions": {
                    "value": "[parameters('roleDefinitions')]"
                  },
                  "securityPrincipalObjectIds": {
                    "value": "[parameters('securityPrincipalObjectIds')]"
                  },
                  "desktopFriendlyName": {
                    "value": "[parameters('desktopFriendlyName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "12397394016063106877"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "desktopApplicationGroupName": {
                      "type": "string"
                    },
                    "desktopFriendlyName": {
                      "type": "string"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "locationControlPlane": {
                      "type": "string"
                    },
                    "locationVirtualMachines": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "roleDefinitions": {
                      "type": "object"
                    },
                    "securityPrincipalObjectIds": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/applicationGroups",
                      "apiVersion": "2021-03-09-preview",
                      "name": "[parameters('desktopApplicationGroupName')]",
                      "location": "[parameters('locationControlPlane')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), if(contains(parameters('tags'), 'Microsoft.DesktopVirtualization/applicationGroups'), parameters('tags')['Microsoft.DesktopVirtualization/applicationGroups'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "hostPoolArmPath": "[parameters('hostPoolResourceId')]",
                        "applicationGroupType": "Desktop"
                      }
                    },
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(range(0, length(parameters('securityPrincipalObjectIds'))))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', parameters('desktopApplicationGroupName'))]",
                      "name": "[guid(parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]], parameters('roleDefinitions').DesktopVirtualizationUser, parameters('desktopApplicationGroupName'))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitions').DesktopVirtualizationUser)]",
                        "principalId": "[parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]]]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('desktopFriendlyName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vdapp-friendly-name-{0}', parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}Update-AvdDesktop.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "parameters": {
                            "value": "[format('-ApplicationGroupName {0} -Environment {1} -FriendlyName \"{2}\" -ResourceGroupName {3} -SubscriptionId {4} -Tenant {5} -UserAssignedIdentityClientId {6}', parameters('desktopApplicationGroupName'), environment().name, parameters('desktopFriendlyName'), resourceGroup().name, subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedIdentityClientId'))]"
                          },
                          "scriptFileName": {
                            "value": "Update-AvdDesktop.ps1"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('virtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1897972445567182190"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "applicationGroupReference": {
                      "type": "array",
                      "value": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                      ]
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroups')[0]), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vdws-feed-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroups')[1]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGroupReferences": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroups')[0]), 'Microsoft.Resources/deployments', format('deploy-vdag-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.applicationGroupReference.value]"
                  },
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "avdPrivateDnsZoneResourceId": {
                    "value": "[parameters('avdPrivateDnsZoneResourceId')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "existing": {
                    "value": "[parameters('existingFeedWorkspace')]"
                  },
                  "hostPoolName": {
                    "value": "[variables('hostPoolName')]"
                  },
                  "locationControlPlane": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "locationVirtualMachines": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "monitoring": {
                    "value": "[parameters('monitoring')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroups')[3]]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "workspaceFeedDiagnoticSettingName": {
                    "value": "[replace(replace(parameters('namingConvention').workspaceFeedDiagnosticSetting, parameters('serviceToken'), 'feed'), format('-{0}', parameters('stampIndex')), '')]"
                  },
                  "workspaceFeedName": {
                    "value": "[replace(replace(parameters('namingConvention').workspaceFeed, parameters('serviceToken'), 'feed'), format('-{0}', parameters('stampIndex')), '')]"
                  },
                  "workspaceFeedNetworkInterfaceName": {
                    "value": "[replace(replace(parameters('namingConvention').workspaceFeedNetworkInterface, parameters('serviceToken'), 'feed'), format('-{0}', parameters('stampIndex')), '')]"
                  },
                  "workspaceFeedPrivateEndpointName": {
                    "value": "[replace(replace(parameters('namingConvention').workspaceFeedPrivateEndpoint, parameters('serviceToken'), 'feed'), format('-{0}', parameters('stampIndex')), '')]"
                  },
                  "workspaceFriendlyName": "[if(empty(parameters('workspaceFriendlyName')), createObject('value', replace(replace(parameters('namingConvention').workspaceFeed, format('-{0}', parameters('serviceToken')), ''), format('-{0}', parameters('stampIndex')), '')), createObject('value', format('{0} ({1})', parameters('workspaceFriendlyName'), parameters('locationControlPlane'))))]",
                  "workspacePublicNetworkAccess": {
                    "value": "[parameters('workspacePublicNetworkAccess')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "15418443119610314281"
                    }
                  },
                  "parameters": {
                    "applicationGroupReferences": {
                      "type": "array"
                    },
                    "artifactsUri": {
                      "type": "string"
                    },
                    "avdPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "existing": {
                      "type": "bool"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "locationControlPlane": {
                      "type": "string"
                    },
                    "locationVirtualMachines": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "monitoring": {
                      "type": "bool"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "workspaceFeedDiagnoticSettingName": {
                      "type": "string"
                    },
                    "workspaceFeedName": {
                      "type": "string"
                    },
                    "workspaceFeedNetworkInterfaceName": {
                      "type": "string"
                    },
                    "workspaceFeedPrivateEndpointName": {
                      "type": "string"
                    },
                    "workspaceFriendlyName": {
                      "type": "string"
                    },
                    "workspacePublicNetworkAccess": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[not(parameters('existing'))]",
                      "type": "Microsoft.DesktopVirtualization/workspaces",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('workspaceFeedName')]",
                      "location": "[parameters('locationControlPlane')]",
                      "tags": "[parameters('mlzTags')]",
                      "properties": {
                        "applicationGroupReferences": "[parameters('applicationGroupReferences')]",
                        "friendlyName": "[parameters('workspaceFriendlyName')]",
                        "publicNetworkAccess": "[parameters('workspacePublicNetworkAccess')]"
                      }
                    },
                    {
                      "condition": "[not(parameters('existing'))]",
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('workspaceFeedPrivateEndpointName')]",
                      "location": "[parameters('locationControlPlane')]",
                      "tags": "[parameters('mlzTags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('workspaceFeedNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('workspaceFeedPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]",
                              "groupIds": [
                                "feed"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('existing'))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('workspaceFeedPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(split(parameters('avdPrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('avdPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('workspaceFeedPrivateEndpointName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('monitoring')]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', parameters('workspaceFeedName'))]",
                      "name": "[parameters('workspaceFeedDiagnoticSettingName')]",
                      "properties": {
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('existing')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('add-vdag-references-{0}', parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}Update-AvdWorkspace.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "parameters": {
                            "value": "[format('-ApplicationGroupReferences \"{0}\" -Environment {1} -ResourceGroupName {2} -SubscriptionId {3} -TenantId {4} -UserAssignedIdentityClientId {5} -WorkspaceName {6}', parameters('applicationGroupReferences'), environment().name, resourceGroup().name, subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedIdentityClientId'), parameters('workspaceFeedName'))]"
                          },
                          "scriptFileName": {
                            "value": "Update-AvdWorkspace.ps1"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('virtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1897972445567182190"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroups')[0]), 'Microsoft.Resources/deployments', format('deploy-vdag-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "hostPoolName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroups')[0]), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix')))]",
        "rgs",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-fslogix-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectoryConnection": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.validateANFfActiveDirectory.value]"
          },
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "artifactsUri": {
            "value": "[variables('artifactsUri')]"
          },
          "availability": {
            "value": "[parameters('availability')]"
          },
          "azureFilesPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value, lambda('name', contains(lambdaVariables('name'), 'file')))[0])]"
          },
          "delegatedSubnetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.validateANFSubnetId.value]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "deploymentUserAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "dnsServers": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.validateANFDnsServers.value]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "encryptionUserAssignedIdentityResourceId": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value))]",
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "fileShares": {
            "value": "[variables('fileShares')]"
          },
          "fslogixContainerType": {
            "value": "[parameters('fslogixContainerType')]"
          },
          "fslogixShareSizeInGB": {
            "value": "[parameters('fslogixShareSizeInGB')]"
          },
          "fslogixStorageService": {
            "value": "[parameters('fslogixStorageService')]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "keyVaultUri": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value))]",
          "location": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "managementVirtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualMachineName.value]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "namingConvention": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value))]",
          "netbios": {
            "value": "[variables('netbios')]"
          },
          "organizationalUnitPath": {
            "value": "[parameters('organizationalUnitPath')]"
          },
          "recoveryServices": {
            "value": "[parameters('recoveryServices')]"
          },
          "resourceGroupControlPlane": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[0], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[3], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "resourceGroupStorage": "[if(variables('deployFslogix'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[4], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', ''))]",
          "securityPrincipalNames": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').name))]"
          },
          "securityPrincipalObjectIds": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
          },
          "serviceToken": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
          },
          "smbServerLocation": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.timeZone), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.timeZone))]",
          "storageCount": {
            "value": "[parameters('storageCount')]"
          },
          "storageEncryptionKeyName": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEncryptionKeyName.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEncryptionKeyName.value))]",
          "storageIndex": {
            "value": "[parameters('storageIndex')]"
          },
          "storageService": {
            "value": "[variables('storageService')]"
          },
          "storageSku": {
            "value": "[variables('storageSku')]"
          },
          "subnetResourceId": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeZone": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.abbreviation), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.abbreviation))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "9004421119664706260"
            }
          },
          "parameters": {
            "artifactsUri": {
              "type": "string"
            },
            "activeDirectoryConnection": {
              "type": "string"
            },
            "activeDirectorySolution": {
              "type": "string"
            },
            "availability": {
              "type": "string"
            },
            "azureFilesPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "delegatedSubnetId": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "dnsServers": {
              "type": "string"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "encryptionUserAssignedIdentityResourceId": {
              "type": "string"
            },
            "environmentAbbreviation": {
              "type": "string"
            },
            "fileShares": {
              "type": "array"
            },
            "fslogixShareSizeInGB": {
              "type": "int"
            },
            "fslogixContainerType": {
              "type": "string"
            },
            "fslogixStorageService": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "identifier": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "namingConvention": {
              "type": "object"
            },
            "netbios": {
              "type": "string"
            },
            "organizationalUnitPath": {
              "type": "string"
            },
            "recoveryServices": {
              "type": "bool"
            },
            "resourceGroupControlPlane": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "resourceGroupStorage": {
              "type": "string"
            },
            "securityPrincipalObjectIds": {
              "type": "array"
            },
            "securityPrincipalNames": {
              "type": "array"
            },
            "serviceToken": {
              "type": "string"
            },
            "smbServerLocation": {
              "type": "string"
            },
            "storageCount": {
              "type": "int"
            },
            "storageEncryptionKeyName": {
              "type": "string"
            },
            "storageIndex": {
              "type": "int"
            },
            "storageSku": {
              "type": "string"
            },
            "storageService": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeZone": {
              "type": "string"
            }
          },
          "variables": {
            "hostPoolName": "[parameters('namingConvention').hostPool]",
            "tagsAutomationAccounts": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), variables('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject()), parameters('mlzTags'))]",
            "tagsNetAppAccount": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), variables('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.NetApp/netAppAccounts'), parameters('tags')['Microsoft.NetApp/netAppAccounts'], createObject()), parameters('mlzTags'))]",
            "tagsPrivateEndpoints": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), variables('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
            "tagsStorageAccounts": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), variables('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Storage/storageAccounts'), parameters('tags')['Microsoft.Storage/storageAccounts'], createObject()), parameters('mlzTags'))]",
            "tagsRecoveryServicesVault": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), variables('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.recoveryServices/vaults'), parameters('tags')['Microsoft.recoveryServices/vaults'], createObject()), parameters('mlzTags'))]",
            "tagsVirtualMachines": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), variables('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]"
          },
          "resources": [
            {
              "condition": "[and(equals(parameters('storageService'), 'AzureNetAppFiles'), contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-anf-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupStorage')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectoryConnection": {
                    "value": "[parameters('activeDirectoryConnection')]"
                  },
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "delegatedSubnetId": {
                    "value": "[parameters('delegatedSubnetId')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "dnsServers": {
                    "value": "[parameters('dnsServers')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "fileShares": {
                    "value": "[parameters('fileShares')]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "netAppAccountName": {
                    "value": "[parameters('namingConvention').netAppAccount]"
                  },
                  "netAppCapacityPoolName": {
                    "value": "[parameters('namingConvention').netAppAccountCapacityPool]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "securityPrincipalNames": {
                    "value": "[parameters('securityPrincipalNames')]"
                  },
                  "smbServerLocation": {
                    "value": "[parameters('smbServerLocation')]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "storageSku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "tagsNetAppAccount": {
                    "value": "[variables('tagsNetAppAccount')]"
                  },
                  "tagsVirtualMachines": {
                    "value": "[variables('tagsVirtualMachines')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "13110055829590706268"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "activeDirectoryConnection": {
                      "type": "string"
                    },
                    "delegatedSubnetId": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "dnsServers": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "fileShares": {
                      "type": "array"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "netAppAccountName": {
                      "type": "string"
                    },
                    "netAppCapacityPoolName": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "securityPrincipalNames": {
                      "type": "array"
                    },
                    "smbServerLocation": {
                      "type": "string"
                    },
                    "storageSku": {
                      "type": "string"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "tagsNetAppAccount": {
                      "type": "object"
                    },
                    "tagsVirtualMachines": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.NetApp/netAppAccounts",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('netAppAccountName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "activeDirectories": "[if(equals(parameters('activeDirectoryConnection'), 'false'), null(), createArray(createObject('aesEncryption', true(), 'domain', parameters('domainName'), 'dns', parameters('dnsServers'), 'organizationalUnit', parameters('organizationalUnitPath'), 'password', parameters('domainJoinPassword'), 'smbServerName', format('anf-{0}', parameters('smbServerLocation')), 'username', split(parameters('domainJoinUserPrincipalName'), '@')[0])))]",
                        "encryption": {
                          "keySource": "Microsoft.NetApp"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "coolAccess": false,
                        "encryptionType": "Single",
                        "qosType": "Auto",
                        "serviceLevel": "[parameters('storageSku')]",
                        "size": 4398046511104
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.NetApp/netAppAccounts', parameters('netAppAccountName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "volumes",
                        "count": "[length(range(0, length(parameters('fileShares'))))]"
                      },
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]])]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "avsDataStore": "Disabled",
                        "coolAccess": false,
                        "creationToken": "[parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]]]",
                        "defaultGroupQuotaInKiBs": 0,
                        "defaultUserQuotaInKiBs": 0,
                        "encryptionKeySource": "Microsoft.NetApp",
                        "isDefaultQuotaEnabled": false,
                        "kerberosEnabled": false,
                        "ldapEnabled": false,
                        "networkFeatures": "Standard",
                        "protocolTypes": [
                          "CIFS"
                        ],
                        "securityStyle": "ntfs",
                        "serviceLevel": "[parameters('storageSku')]",
                        "smbContinuouslyAvailable": true,
                        "smbEncryption": true,
                        "snapshotDirectoryVisible": true,
                        "subnetId": "[parameters('delegatedSubnetId')]",
                        "usageThreshold": 107374182400
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-fslogix-ntfs-permissions-{0}', parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}Set-NtfsPermissions.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "parameters": {
                            "value": "[format('-domainJoinPassword \"{0}\" -domainJoinUserPrincipalName {1} -fslogixContainerType {2} -securityPrincipalNames \"{3}\" -smbServerLocation {4} -storageService {5}', parameters('domainJoinPassword'), parameters('domainJoinUserPrincipalName'), parameters('fslogixContainerType'), parameters('securityPrincipalNames'), parameters('smbServerLocation'), parameters('storageService'))]"
                          },
                          "scriptFileName": {
                            "value": "Set-NtfsPermissions.ps1"
                          },
                          "tags": {
                            "value": "[parameters('tagsVirtualMachines')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1897972445567182190"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "volumes"
                      ]
                    }
                  ],
                  "outputs": {
                    "fileShares": {
                      "type": "array",
                      "value": "[if(contains(parameters('fslogixContainerType'), 'Office'), createArray(reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[0]]), '2021-06-01').mountTargets[0].smbServerFqdn, reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[1]]), '2021-06-01').mountTargets[0].smbServerFqdn), createArray(reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[0]]), '2021-06-01').mountTargets[0].smbServerFqdn))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(equals(parameters('storageService'), 'AzureFiles'), contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-azure-files-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupStorage')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('namingConvention').automationAccount]"
                  },
                  "availability": {
                    "value": "[parameters('availability')]"
                  },
                  "azureFilesPrivateDnsZoneResourceId": {
                    "value": "[parameters('azureFilesPrivateDnsZoneResourceId')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "enableRecoveryServices": {
                    "value": "[parameters('recoveryServices')]"
                  },
                  "encryptionUserAssignedIdentityResourceId": {
                    "value": "[parameters('encryptionUserAssignedIdentityResourceId')]"
                  },
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "fileShares": {
                    "value": "[parameters('fileShares')]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "fslogixShareSizeInGB": {
                    "value": "[parameters('fslogixShareSizeInGB')]"
                  },
                  "fslogixStorageService": {
                    "value": "[parameters('fslogixStorageService')]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "identifier": {
                    "value": "[parameters('identifier')]"
                  },
                  "keyVaultUri": {
                    "value": "[parameters('keyVaultUri')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "netbios": {
                    "value": "[parameters('netbios')]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[parameters('namingConvention').recoveryServicesVault]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "resourceGroupStorage": {
                    "value": "[parameters('resourceGroupStorage')]"
                  },
                  "securityPrincipalNames": {
                    "value": "[parameters('securityPrincipalNames')]"
                  },
                  "securityPrincipalObjectIds": {
                    "value": "[parameters('securityPrincipalObjectIds')]"
                  },
                  "serviceName": {
                    "value": "[parameters('serviceToken')]"
                  },
                  "storageAccountNamePrefix": {
                    "value": "[parameters('namingConvention').storageAccount]"
                  },
                  "storageAccountNetworkInterfaceNamePrefix": {
                    "value": "[parameters('namingConvention').storageAccountNetworkInterface]"
                  },
                  "storageAccountPrivateEndpointNamePrefix": {
                    "value": "[parameters('namingConvention').storageAccountPrivateEndpoint]"
                  },
                  "storageCount": {
                    "value": "[parameters('storageCount')]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[parameters('storageEncryptionKeyName')]"
                  },
                  "storageIndex": {
                    "value": "[parameters('storageIndex')]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "storageSku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tagsAutomationAccounts": {
                    "value": "[variables('tagsAutomationAccounts')]"
                  },
                  "tagsPrivateEndpoints": {
                    "value": "[variables('tagsPrivateEndpoints')]"
                  },
                  "tagsRecoveryServicesVault": {
                    "value": "[variables('tagsRecoveryServicesVault')]"
                  },
                  "tagsStorageAccounts": {
                    "value": "[variables('tagsStorageAccounts')]"
                  },
                  "tagsVirtualMachines": {
                    "value": "[variables('tagsVirtualMachines')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "4295038748137416254"
                    }
                  },
                  "parameters": {
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "artifactsUri": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "availability": {
                      "type": "string"
                    },
                    "azureFilesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "enableRecoveryServices": {
                      "type": "bool"
                    },
                    "encryptionUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "fileShares": {
                      "type": "array"
                    },
                    "fslogixShareSizeInGB": {
                      "type": "int"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "fslogixStorageService": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "identifier": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "netbios": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "resourceGroupStorage": {
                      "type": "string"
                    },
                    "securityPrincipalObjectIds": {
                      "type": "array"
                    },
                    "securityPrincipalNames": {
                      "type": "array"
                    },
                    "serviceName": {
                      "type": "string"
                    },
                    "storageAccountNamePrefix": {
                      "type": "string",
                      "minLength": 3
                    },
                    "storageAccountNetworkInterfaceNamePrefix": {
                      "type": "string"
                    },
                    "storageAccountPrivateEndpointNamePrefix": {
                      "type": "string"
                    },
                    "storageCount": {
                      "type": "int"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "storageIndex": {
                      "type": "int"
                    },
                    "storageSku": {
                      "type": "string"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tagsAutomationAccounts": {
                      "type": "object"
                    },
                    "tagsPrivateEndpoints": {
                      "type": "object"
                    },
                    "tagsRecoveryServicesVault": {
                      "type": "object"
                    },
                    "tagsStorageAccounts": {
                      "type": "object"
                    },
                    "tagsVirtualMachines": {
                      "type": "object"
                    },
                    "timeZone": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                    "smbMultiChannel": {
                      "multichannel": {
                        "enabled": true
                      }
                    },
                    "smbSettings": {
                      "versions": "SMB3.1.1;",
                      "authenticationMethods": "NTLMv2;Kerberos;",
                      "kerberosTicketEncryption": "AES-256;",
                      "channelEncryption": "AES-128-GCM;AES-256-GCM;"
                    },
                    "storageRedundancy": "[if(equals(parameters('availability'), 'availabilityZones'), '_ZRS', '_LRS')]",
                    "uniqueToken": "[uniqueString(parameters('identifier'), parameters('environmentAbbreviation'), subscription().subscriptionId)]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "storageAccounts",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}{1}{2}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'), variables('uniqueToken')), 24)]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsStorageAccounts')]",
                      "sku": {
                        "name": "[format('{0}{1}', parameters('storageSku'), variables('storageRedundancy'))]"
                      },
                      "kind": "[if(equals(parameters('storageSku'), 'Standard'), 'StorageV2', 'FileStorage')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('encryptionUserAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowCrossTenantReplication": false,
                        "allowedCopyScope": "PrivateLink",
                        "allowSharedKeyAccess": true,
                        "azureFilesIdentityBasedAuthentication": {
                          "directoryServiceOptions": "[if(equals(parameters('activeDirectorySolution'), 'MicrosoftEntraDomainServices'), 'AADDS', 'None')]"
                        },
                        "defaultToOAuthAuthentication": false,
                        "dnsEndpointType": "Standard",
                        "encryption": {
                          "identity": {
                            "userAssignedIdentity": "[parameters('encryptionUserAssignedIdentityResourceId')]"
                          },
                          "requireInfrastructureEncryption": true,
                          "keyvaultproperties": {
                            "keyvaulturi": "[parameters('keyVaultUri')]",
                            "keyname": "[parameters('storageEncryptionKeyName')]"
                          },
                          "services": "[if(equals(parameters('storageSku'), 'Standard'), createObject('file', createObject('keyType', 'Account', 'enabled', true()), 'table', createObject('keyType', 'Account', 'enabled', true()), 'queue', createObject('keyType', 'Account', 'enabled', true()), 'blob', createObject('keyType', 'Account', 'enabled', true())), createObject('file', createObject('keyType', 'Account', 'enabled', true())))]",
                          "keySource": "Microsoft.KeyVault"
                        },
                        "largeFileSharesState": "[if(equals(parameters('storageSku'), 'Standard'), 'Enabled', null())]",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "virtualNetworkRules": [],
                          "ipRules": [],
                          "defaultAction": "Deny"
                        },
                        "publicNetworkAccess": "Disabled",
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', take(format('{0}{1}{2}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'), variables('uniqueToken')), 24))]",
                      "name": "[guid(parameters('securityPrincipalObjectIds')[range(0, parameters('storageCount'))[copyIndex()]], variables('roleDefinitionId'), resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}{2}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'), variables('uniqueToken')), 24)))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('securityPrincipalObjectIds')[range(0, parameters('storageCount'))[copyIndex()]]]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}{2}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'), variables('uniqueToken')), 24))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}{2}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'), variables('uniqueToken')), 24))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "fileServices",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', take(format('{0}{1}{2}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'), variables('uniqueToken')), 24), 'default')]",
                      "properties": {
                        "protocolSettings": {
                          "smb": "[if(equals(parameters('storageSku'), 'Standard'), variables('smbSettings'), union(variables('smbSettings'), variables('smbMultiChannel')))]"
                        },
                        "shareDeleteRetentionPolicy": {
                          "enabled": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}{2}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'), variables('uniqueToken')), 24))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateEndpoints",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsPrivateEndpoints')]",
                      "properties": {
                        "customNetworkInterfaceName": "[format('{0}-{1}', replace(parameters('storageAccountNetworkInterfaceNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}{2}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'), variables('uniqueToken')), 24))]",
                              "groupIds": [
                                "file"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}{2}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'), variables('uniqueToken')), 24))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneGroups",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), format('{0}-{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('azureFilesPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]",
                        "storageAccounts"
                      ]
                    },
                    {
                      "copy": {
                        "name": "shares",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-file-shares-{0}-{1}', range(0, parameters('storageCount'))[copyIndex()], parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileShares": {
                            "value": "[parameters('fileShares')]"
                          },
                          "fslogixShareSizeInGB": {
                            "value": "[parameters('fslogixShareSizeInGB')]"
                          },
                          "storageAccountName": {
                            "value": "[take(format('{0}{1}{2}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'), variables('uniqueToken')), 24)]"
                          },
                          "storageSku": {
                            "value": "[parameters('storageSku')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "9292590375464354201"
                            }
                          },
                          "parameters": {
                            "fileShares": {
                              "type": "array"
                            },
                            "fslogixShareSizeInGB": {
                              "type": "int"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "storageSku": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "shares",
                                "count": "[length(range(0, length(parameters('fileShares'))))]"
                              },
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/default/{1}', parameters('storageAccountName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]])]",
                              "properties": {
                                "accessTier": "[if(equals(parameters('storageSku'), 'Premium'), 'Premium', 'TransactionOptimized')]",
                                "shareQuota": "[parameters('fslogixShareSizeInGB')]",
                                "enabledProtocols": "SMB"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "roleAssignment",
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}{2}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'), variables('uniqueToken')), 24))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('activeDirectorySolution'), 'DomainServices')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-fslogix-ntfs-permissions-{0}', parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}Set-NtfsPermissions.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "parameters": {
                            "value": "[format('-domainJoinPassword \"{0}\" -domainJoinUserPrincipalName {1} -activeDirectorySolution {2} -Environment {3} -fslogixContainerType {4} -netbios {5} -organizationalUnitPath \"{6}\" -securityPrincipalNames \"{7}\" -StorageAccountPrefix {8} -StorageAccountResourceGroupName {9} -storageCount {10} -storageIndex {11} -storageService {12} -StorageSuffix {13} -SubscriptionId {14} -TenantId {15} -UniqueToken {16} -UserAssignedIdentityClientId {17}', parameters('domainJoinPassword'), parameters('domainJoinUserPrincipalName'), parameters('activeDirectorySolution'), environment().name, parameters('fslogixContainerType'), parameters('netbios'), parameters('organizationalUnitPath'), parameters('securityPrincipalNames'), parameters('storageAccountNamePrefix'), parameters('resourceGroupStorage'), parameters('storageCount'), parameters('storageIndex'), parameters('storageService'), environment().suffixes.storage, subscription().subscriptionId, subscription().tenantId, variables('uniqueToken'), parameters('deploymentUserAssignedIdentityClientId'))]"
                          },
                          "scriptFileName": {
                            "value": "Set-NtfsPermissions.ps1"
                          },
                          "tags": {
                            "value": "[parameters('tagsVirtualMachines')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1897972445567182190"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateDnsZoneGroups",
                        "privateEndpoints",
                        "shares"
                      ]
                    },
                    {
                      "condition": "[and(parameters('enableRecoveryServices'), contains(parameters('hostPoolType'), 'Pooled'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-backup-azure-files-{0}', parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "fileShares": {
                            "value": "[parameters('fileShares')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "recoveryServicesVaultName": {
                            "value": "[parameters('recoveryServicesVaultName')]"
                          },
                          "resourceGroupStorage": {
                            "value": "[parameters('resourceGroupStorage')]"
                          },
                          "storageAccountNamePrefix": {
                            "value": "[parameters('storageAccountNamePrefix')]"
                          },
                          "storageCount": {
                            "value": "[parameters('storageCount')]"
                          },
                          "storageIndex": {
                            "value": "[parameters('storageIndex')]"
                          },
                          "tagsRecoveryServicesVault": {
                            "value": "[parameters('tagsRecoveryServicesVault')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "12166773491247934484"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "fileShares": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "recoveryServicesVaultName": {
                              "type": "string"
                            },
                            "resourceGroupStorage": {
                              "type": "string"
                            },
                            "storageAccountNamePrefix": {
                              "type": "string"
                            },
                            "storageCount": {
                              "type": "int"
                            },
                            "storageIndex": {
                              "type": "int"
                            },
                            "tagsRecoveryServicesVault": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "protectionContainers",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                              "properties": {
                                "backupManagementType": "AzureStorage",
                                "containerType": "StorageContainer",
                                "sourceResourceId": "[resourceId(parameters('resourceGroupStorage'), 'Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]"
                              }
                            },
                            {
                              "copy": {
                                "name": "protectedItems_fileShares",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('backup-file-shares-{0}-{1}', add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileShares": {
                                    "value": "[parameters('fileShares')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "protectionContainerName": {
                                    "value": "[format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))]"
                                  },
                                  "policyId": {
                                    "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('recoveryServicesVaultName'), 'AvdPolicyStorage')]"
                                  },
                                  "sourceResourceId": {
                                    "value": "[resourceId(parameters('resourceGroupStorage'), 'Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tagsRecoveryServicesVault')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "2095475027595413136"
                                    }
                                  },
                                  "parameters": {
                                    "fileShares": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "policyId": {
                                      "type": "string"
                                    },
                                    "protectionContainerName": {
                                      "type": "string"
                                    },
                                    "sourceResourceId": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "protectedItems_FileShare",
                                        "count": "[length(parameters('fileShares'))]"
                                      },
                                      "condition": "[contains(parameters('fileShares')[copyIndex()], 'profile')]",
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                      "apiVersion": "2022-03-01",
                                      "name": "[format('{0}/AzureFileShare;{1}', parameters('protectionContainerName'), parameters('fileShares')[copyIndex()])]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "protectedItemType": "AzureFileShareProtectedItem",
                                        "policyId": "[parameters('policyId')]",
                                        "sourceResourceId": "[parameters('sourceResourceId')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers', split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[0], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[1], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[2])]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "shares"
                      ]
                    },
                    {
                      "condition": "[and(equals(parameters('fslogixStorageService'), 'AzureFiles Premium'), greater(parameters('storageCount'), 0))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-file-share-scaling-{0}', parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "artifactsUri": {
                            "value": "[parameters('artifactsUri')]"
                          },
                          "automationAccountName": {
                            "value": "[parameters('automationAccountName')]"
                          },
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "deploymentUserAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "fslogixContainerType": {
                            "value": "[parameters('fslogixContainerType')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "managementVirtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          },
                          "storageAccountNamePrefix": {
                            "value": "[parameters('storageAccountNamePrefix')]"
                          },
                          "storageCount": {
                            "value": "[parameters('storageCount')]"
                          },
                          "storageIndex": {
                            "value": "[parameters('storageIndex')]"
                          },
                          "storageResourceGroupName": {
                            "value": "[parameters('resourceGroupStorage')]"
                          },
                          "tags": {
                            "value": "[parameters('tagsAutomationAccounts')]"
                          },
                          "timeZone": {
                            "value": "[parameters('timeZone')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "13109916327069907060"
                            }
                          },
                          "parameters": {
                            "artifactsUri": {
                              "type": "string"
                            },
                            "automationAccountName": {
                              "type": "string"
                            },
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "deploymentUserAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "fslogixContainerType": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "managementVirtualMachineName": {
                              "type": "string"
                            },
                            "storageAccountNamePrefix": {
                              "type": "string"
                            },
                            "storageCount": {
                              "type": "int"
                            },
                            "storageIndex": {
                              "type": "int"
                            },
                            "storageResourceGroupName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timeZone": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "runbookFileName": "Set-FileShareScaling.ps1",
                            "scriptFileName": "Set-AutomationRunbook.ps1",
                            "subscriptionId": "[subscription().subscriptionId]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-runbook-{0}', parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileUris": {
                                    "value": [
                                      "[format('{0}{1}', parameters('artifactsUri'), variables('runbookFileName'))]",
                                      "[format('{0}{1}', parameters('artifactsUri'), variables('scriptFileName'))]"
                                    ]
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "parameters": {
                                    "value": "[format('-AutomationAccountName {0} -Environment {1} -ResourceGroupName {2} -RunbookFileName {3} -SubscriptionId {4} -TenantId {5} -UserAssignedIdentityClientId {6}', parameters('automationAccountName'), environment().name, resourceGroup().name, variables('runbookFileName'), subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedIdentityClientId'))]"
                                  },
                                  "scriptFileName": {
                                    "value": "[variables('scriptFileName')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "userAssignedIdentityClientId": {
                                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                                  },
                                  "virtualMachineName": {
                                    "value": "[parameters('managementVirtualMachineName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "1897972445567182190"
                                    }
                                  },
                                  "parameters": {
                                    "fileUris": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "securestring"
                                    },
                                    "scriptFileName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "timestamp": {
                                      "type": "string",
                                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                                    },
                                    "userAssignedIdentityClientId": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-03-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "Microsoft.Compute",
                                        "type": "CustomScriptExtension",
                                        "typeHandlerVersion": "1.10",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                          "timestamp": "[parameters('timestamp')]"
                                        },
                                        "protectedSettings": {
                                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                          "fileUris": "[parameters('fileUris')]",
                                          "managedIdentity": {
                                            "clientId": "[parameters('userAssignedIdentityClientId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "value": {
                                      "type": "object",
                                      "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "schedules",
                                "count": "[length(range(parameters('storageIndex'), parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-schedules-{0}-{1}', range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "automationAccountName": {
                                    "value": "[parameters('automationAccountName')]"
                                  },
                                  "fslogixContainerType": {
                                    "value": "[parameters('fslogixContainerType')]"
                                  },
                                  "storageAccountName": {
                                    "value": "[format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], 2, '0'))]"
                                  },
                                  "timeZone": {
                                    "value": "[parameters('timeZone')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "14573879268973535875"
                                    }
                                  },
                                  "parameters": {
                                    "automationAccountName": {
                                      "type": "string"
                                    },
                                    "fslogixContainerType": {
                                      "type": "string"
                                    },
                                    "storageAccountName": {
                                      "type": "string"
                                    },
                                    "time": {
                                      "type": "string",
                                      "defaultValue": "[utcNow()]"
                                    },
                                    "timeZone": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "schedules_ProfileContainers",
                                        "count": "[length(range(0, 4))]"
                                      },
                                      "type": "Microsoft.Automation/automationAccounts/schedules",
                                      "apiVersion": "2022-08-08",
                                      "name": "[format('{0}/{1}', parameters('automationAccountName'), format('{0}_ProfileContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                      "properties": {
                                        "advancedSchedule": {},
                                        "description": null,
                                        "expiryTime": null,
                                        "frequency": "Hour",
                                        "interval": 1,
                                        "startTime": "[dateTimeAdd(parameters('time'), format('PT{0}M', mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                        "timeZone": "[parameters('timeZone')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "schedules_OfficeContainers",
                                        "count": "[length(range(0, 4))]"
                                      },
                                      "condition": "[contains(parameters('fslogixContainerType'), 'Office')]",
                                      "type": "Microsoft.Automation/automationAccounts/schedules",
                                      "apiVersion": "2022-08-08",
                                      "name": "[format('{0}/{1}', parameters('automationAccountName'), format('{0}_OfficeContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                      "properties": {
                                        "advancedSchedule": {},
                                        "description": null,
                                        "expiryTime": null,
                                        "frequency": "Hour",
                                        "interval": 1,
                                        "startTime": "[dateTimeAdd(parameters('time'), format('PT{0}M', mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                        "timeZone": "[parameters('timeZone')]"
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "jobSchedules",
                                "count": "[length(range(parameters('storageIndex'), parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-job-schedules-{0}-{1}', range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "automationAccountName": {
                                    "value": "[parameters('automationAccountName')]"
                                  },
                                  "environment": {
                                    "value": "[environment().name]"
                                  },
                                  "fslogixContainerType": {
                                    "value": "[parameters('fslogixContainerType')]"
                                  },
                                  "runbookName": {
                                    "value": "[replace(variables('runbookFileName'), '.ps1', '')]"
                                  },
                                  "resourceGroupName": {
                                    "value": "[parameters('storageResourceGroupName')]"
                                  },
                                  "storageAccountName": {
                                    "value": "[format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], 2, '0'))]"
                                  },
                                  "subscriptionId": {
                                    "value": "[variables('subscriptionId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "13412734519431227711"
                                    }
                                  },
                                  "parameters": {
                                    "automationAccountName": {
                                      "type": "string"
                                    },
                                    "environment": {
                                      "type": "string"
                                    },
                                    "fslogixContainerType": {
                                      "type": "string"
                                    },
                                    "resourceGroupName": {
                                      "type": "string"
                                    },
                                    "runbookName": {
                                      "type": "string"
                                    },
                                    "storageAccountName": {
                                      "type": "string"
                                    },
                                    "subscriptionId": {
                                      "type": "string"
                                    },
                                    "timestamp": {
                                      "type": "string",
                                      "defaultValue": "[utcNow('yyyyMMddHHmmss')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "jobSchedules_ProfileContainers",
                                        "count": "[length(range(0, 4))]"
                                      },
                                      "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                                      "apiVersion": "2022-08-08",
                                      "name": "[format('{0}/{1}', parameters('automationAccountName'), guid(parameters('timestamp'), parameters('runbookName'), parameters('storageAccountName'), 'ProfileContainers', string(range(0, 4)[copyIndex()])))]",
                                      "properties": {
                                        "parameters": {
                                          "environment": "[parameters('environment')]",
                                          "FileShareName": "profile-containers",
                                          "resourceGroupName": "[parameters('resourceGroupName')]",
                                          "storageAccountName": "[parameters('storageAccountName')]",
                                          "subscriptionId": "[parameters('subscriptionId')]"
                                        },
                                        "runbook": {
                                          "name": "[parameters('runbookName')]"
                                        },
                                        "runOn": null,
                                        "schedule": {
                                          "name": "[format('{0}_ProfileContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15))]"
                                        }
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "jobSchedules_OfficeContainers",
                                        "count": "[length(range(0, 4))]"
                                      },
                                      "condition": "[contains(parameters('fslogixContainerType'), 'Office')]",
                                      "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                                      "apiVersion": "2022-08-08",
                                      "name": "[format('{0}/{1}', parameters('automationAccountName'), guid(parameters('timestamp'), parameters('runbookName'), parameters('storageAccountName'), 'OfficeContainers', string(range(0, 4)[copyIndex()])))]",
                                      "properties": {
                                        "parameters": {
                                          "environment": "[parameters('environment')]",
                                          "FileShareName": "office-containers",
                                          "resourceGroupName": "[parameters('resourceGroupName')]",
                                          "storageAccountName": "[parameters('storageAccountName')]",
                                          "subscriptionId": "[parameters('subscriptionId')]"
                                        },
                                        "runbook": {
                                          "name": "[parameters('runbookName')]"
                                        },
                                        "runOn": null,
                                        "schedule": {
                                          "name": "[format('{0}_OfficeContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15))]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('deploy-runbook-{0}', parameters('deploymentNameSuffix')))]",
                                "schedules"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-role-assignment-storage-{0}', parameters('deploymentNameSuffix'))]",
                              "resourceGroup": "[parameters('storageResourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2022-08-08', 'full').identity.principalId]"
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "roleDefinitionId": {
                                    "value": "17d1049b-9a84-46fb-8f53-869881c3d3ab"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "1476792570487351405"
                                    }
                                  },
                                  "parameters": {
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
                                      "properties": {
                                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-fslogix-ntfs-permissions-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "netAppShares": {
              "type": "array",
              "value": "[if(equals(parameters('storageService'), 'AzureNetAppFiles'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupStorage')), 'Microsoft.Resources/deployments', format('deploy-anf-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.fileShares.value, createArray('None'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-control-plane-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix')))]",
        "rgs",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-session-hosts-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "acceleratedNetworking": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.validateAcceleratedNetworking.value]"
          },
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "artifactsUri": {
            "value": "[variables('artifactsUri')]"
          },
          "artifactsUserAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.artifactsUserAssignedIdentityClientId.value]"
          },
          "artifactsUserAssignedIdentityResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.artifactsUserAssignedIdentityResourceId.value]"
          },
          "automationAccountName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.automationAccountName.value]"
          },
          "availability": {
            "value": "[parameters('availability')]"
          },
          "availabilitySetsCount": {
            "value": "[variables('availabilitySetsCount')]"
          },
          "availabilitySetsIndex": {
            "value": "[variables('beginAvSetRange')]"
          },
          "availabilityZones": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.validateAvailabilityZones.value]"
          },
          "avdAgentBootLoaderMsiName": {
            "value": "[parameters('avdAgentBootLoaderMsiName')]"
          },
          "avdAgentMsiName": {
            "value": "[parameters('avdAgentMsiName')]"
          },
          "dataCollectionRuleResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.dataCollectionRuleResourceId.value]"
          },
          "deployFslogix": {
            "value": "[variables('deployFslogix')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "deploymentUserAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "diskEncryptionSetResourceId": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value))]",
          "diskSku": {
            "value": "[parameters('diskSku')]"
          },
          "divisionRemainderValue": {
            "value": "[variables('divisionRemainderValue')]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "drainMode": {
            "value": "[parameters('drainMode')]"
          },
          "enableRecoveryServices": {
            "value": "[parameters('recoveryServices')]"
          },
          "enableScalingTool": {
            "value": "[parameters('scalingTool')]"
          },
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "fslogixContainerType": {
            "value": "[parameters('fslogixContainerType')]"
          },
          "hostPoolName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-control-plane-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hostPoolName.value]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "hybridRunbookWorkerGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hybridRunbookWorkerGroupName.value]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "imageOffer": {
            "value": "[parameters('imageOffer')]"
          },
          "imagePublisher": {
            "value": "[parameters('imagePublisher')]"
          },
          "imageSku": {
            "value": "[parameters('imageSku')]"
          },
          "imageVersionResourceId": {
            "value": "[parameters('imageVersionResourceId')]"
          },
          "location": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "managementVirtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualMachineName.value]"
          },
          "maxResourcesPerTemplateDeployment": {
            "value": "[variables('maxResourcesPerTemplateDeployment')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "monitoring": {
            "value": "[parameters('monitoring')]"
          },
          "namingConvention": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value))]",
          "netAppFileShares": "[if(variables('deployFslogix'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-fslogix-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.netAppShares.value), createObject('value', createArray('None')))]",
          "organizationalUnitPath": {
            "value": "[parameters('organizationalUnitPath')]"
          },
          "pooledHostPool": {
            "value": "[variables('pooledHostPool')]"
          },
          "recoveryServicesVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.recoveryServicesVaultName.value]"
          },
          "resourceGroupControlPlane": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[0], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "resourceGroupHosts": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[2], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[3], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "roleDefinitions": {
            "value": "[variables('roleDefinitions')]"
          },
          "scalingBeginPeakTime": {
            "value": "[parameters('scalingBeginPeakTime')]"
          },
          "scalingEndPeakTime": {
            "value": "[parameters('scalingEndPeakTime')]"
          },
          "scalingLimitSecondsToForceLogOffUser": {
            "value": "[parameters('scalingLimitSecondsToForceLogOffUser')]"
          },
          "scalingMinimumNumberOfRdsh": {
            "value": "[parameters('scalingMinimumNumberOfRdsh')]"
          },
          "scalingSessionThresholdPerCPU": {
            "value": "[parameters('scalingSessionThresholdPerCPU')]"
          },
          "securityPrincipalObjectIds": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
          },
          "serviceToken": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
          },
          "sessionHostBatchCount": {
            "value": "[variables('sessionHostBatchCount')]"
          },
          "sessionHostIndex": {
            "value": "[parameters('sessionHostIndex')]"
          },
          "storageCount": {
            "value": "[parameters('storageCount')]"
          },
          "storageIndex": {
            "value": "[parameters('storageIndex')]"
          },
          "storageService": {
            "value": "[variables('storageService')]"
          },
          "storageSuffix": {
            "value": "[variables('storageSuffix')]"
          },
          "subnetResourceId": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeDifference": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.timeDifference), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.timeDifference))]",
          "timeZone": "[if(equals(length(variables('deploymentLocations')), 2), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.timeZone), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locatonProperties.value.timeZone))]",
          "virtualMachinePassword": {
            "value": "[parameters('virtualMachinePassword')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "virtualMachineUsername": {
            "value": "[parameters('virtualMachineUsername')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "5427307486288145574"
            }
          },
          "parameters": {
            "acceleratedNetworking": {
              "type": "string"
            },
            "activeDirectorySolution": {
              "type": "string"
            },
            "artifactsUri": {
              "type": "string"
            },
            "artifactsUserAssignedIdentityClientId": {
              "type": "string"
            },
            "artifactsUserAssignedIdentityResourceId": {
              "type": "string"
            },
            "automationAccountName": {
              "type": "string"
            },
            "availability": {
              "type": "string"
            },
            "availabilitySetsCount": {
              "type": "int"
            },
            "availabilitySetsIndex": {
              "type": "int"
            },
            "availabilityZones": {
              "type": "array"
            },
            "avdAgentBootLoaderMsiName": {
              "type": "string"
            },
            "avdAgentMsiName": {
              "type": "string"
            },
            "dataCollectionRuleResourceId": {
              "type": "string"
            },
            "deployFslogix": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "diskSku": {
              "type": "string"
            },
            "divisionRemainderValue": {
              "type": "int"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "drainMode": {
              "type": "bool"
            },
            "environmentAbbreviation": {
              "type": "string"
            },
            "fslogixContainerType": {
              "type": "string"
            },
            "hostPoolName": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "hybridRunbookWorkerGroupName": {
              "type": "string"
            },
            "identifier": {
              "type": "string"
            },
            "imageOffer": {
              "type": "string"
            },
            "imagePublisher": {
              "type": "string"
            },
            "imageSku": {
              "type": "string"
            },
            "imageVersionResourceId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "maxResourcesPerTemplateDeployment": {
              "type": "int"
            },
            "mlzTags": {
              "type": "object"
            },
            "monitoring": {
              "type": "bool"
            },
            "namingConvention": {
              "type": "object"
            },
            "netAppFileShares": {
              "type": "array"
            },
            "organizationalUnitPath": {
              "type": "string"
            },
            "pooledHostPool": {
              "type": "bool"
            },
            "enableRecoveryServices": {
              "type": "bool"
            },
            "enableScalingTool": {
              "type": "bool"
            },
            "recoveryServicesVaultName": {
              "type": "string"
            },
            "resourceGroupControlPlane": {
              "type": "string"
            },
            "resourceGroupHosts": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "roleDefinitions": {
              "type": "object"
            },
            "scalingBeginPeakTime": {
              "type": "string"
            },
            "scalingEndPeakTime": {
              "type": "string"
            },
            "scalingLimitSecondsToForceLogOffUser": {
              "type": "string"
            },
            "scalingMinimumNumberOfRdsh": {
              "type": "string"
            },
            "scalingSessionThresholdPerCPU": {
              "type": "string"
            },
            "securityPrincipalObjectIds": {
              "type": "array"
            },
            "serviceToken": {
              "type": "string"
            },
            "sessionHostBatchCount": {
              "type": "int"
            },
            "sessionHostIndex": {
              "type": "int"
            },
            "storageCount": {
              "type": "int"
            },
            "storageIndex": {
              "type": "int"
            },
            "storageService": {
              "type": "string"
            },
            "storageSuffix": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeDifference": {
              "type": "string"
            },
            "timeZone": {
              "type": "string"
            },
            "virtualMachinePassword": {
              "type": "securestring"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineUsername": {
              "type": "string"
            }
          },
          "variables": {
            "availabilitySetNamePrefix": "[parameters('namingConvention').availabilitySet]",
            "tagsAutomationAccounts": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject()), parameters('mlzTags'))]",
            "tagsAvailabilitySets": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/availabilitySets'), parameters('tags')['Microsoft.Compute/availabilitySets'], createObject()), parameters('mlzTags'))]",
            "tagsNetworkInterfaces": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject()), parameters('mlzTags'))]",
            "tagsRecoveryServicesVault": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.recoveryServices/vaults'), parameters('tags')['Microsoft.recoveryServices/vaults'], createObject()), parameters('mlzTags'))]",
            "tagsVirtualMachines": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
            "uniqueToken": "[uniqueString(parameters('identifier'), parameters('environmentAbbreviation'), subscription().subscriptionId)]",
            "virtualMachineNamePrefix": "[replace(parameters('namingConvention').virtualMachine, parameters('serviceToken'), '')]"
          },
          "resources": [
            {
              "condition": "[and(parameters('pooledHostPool'), equals(parameters('availability'), 'AvailabilitySets'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-avail-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "availabilitySetNamePrefix": {
                    "value": "[variables('availabilitySetNamePrefix')]"
                  },
                  "availabilitySetsCount": {
                    "value": "[parameters('availabilitySetsCount')]"
                  },
                  "availabilitySetsIndex": {
                    "value": "[parameters('availabilitySetsIndex')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tagsAvailabilitySets": {
                    "value": "[variables('tagsAvailabilitySets')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "15726849001161593480"
                    }
                  },
                  "parameters": {
                    "availabilitySetNamePrefix": {
                      "type": "string"
                    },
                    "availabilitySetsCount": {
                      "type": "int"
                    },
                    "availabilitySetsIndex": {
                      "type": "int"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tagsAvailabilitySets": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "availabilitySets",
                        "count": "[length(range(0, parameters('availabilitySetsCount')))]"
                      },
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2019-07-01",
                      "name": "[format('{0}-{1}', parameters('availabilitySetNamePrefix'), padLeft(add(range(0, parameters('availabilitySetsCount'))[copyIndex()], parameters('availabilitySetsIndex')), 2, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsAvailabilitySets')]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 2
                      }
                    }
                  ]
                }
              }
            },
            {
              "copy": {
                "name": "roleAssignments",
                "count": "[length(range(0, length(parameters('securityPrincipalObjectIds'))))]"
              },
              "condition": "[not(contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-role-assignments-{0}-{1}', range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()], parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]]]"
                  },
                  "principalType": {
                    "value": "Group"
                  },
                  "roleDefinitionId": {
                    "value": "[parameters('roleDefinitions').VirtualMachineUserLogin]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "1476792570487351405"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string"
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "copy": {
                "name": "virtualMachines",
                "count": "[length(range(1, parameters('sessionHostBatchCount')))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vms-{0}-{1}', sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "acceleratedNetworking": {
                    "value": "[parameters('acceleratedNetworking')]"
                  },
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "artifactsUserAssignedIdentityClientId": {
                    "value": "[parameters('artifactsUserAssignedIdentityClientId')]"
                  },
                  "artifactsUserAssignedIdentityResourceId": {
                    "value": "[parameters('artifactsUserAssignedIdentityResourceId')]"
                  },
                  "availability": {
                    "value": "[parameters('availability')]"
                  },
                  "availabilitySetNamePrefix": {
                    "value": "[variables('availabilitySetNamePrefix')]"
                  },
                  "availabilityZones": {
                    "value": "[parameters('availabilityZones')]"
                  },
                  "avdAgentBootLoaderMsiName": {
                    "value": "[parameters('avdAgentBootLoaderMsiName')]"
                  },
                  "avdAgentMsiName": {
                    "value": "[parameters('avdAgentMsiName')]"
                  },
                  "batchCount": {
                    "value": "[range(1, parameters('sessionHostBatchCount'))[copyIndex()]]"
                  },
                  "dataCollectionRuleAssociationName": {
                    "value": "[parameters('namingConvention').dataCollectionRuleAssociation]"
                  },
                  "dataCollectionRuleResourceId": {
                    "value": "[parameters('dataCollectionRuleResourceId')]"
                  },
                  "deployFslogix": {
                    "value": "[parameters('deployFslogix')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deploymentUserAssignedidentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "diskNamePrefix": {
                    "value": "[parameters('namingConvention').virtualMachineDisk]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "enableDrainMode": {
                    "value": "[parameters('drainMode')]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "imageVersionResourceId": {
                    "value": "[parameters('imageVersionResourceId')]"
                  },
                  "imageOffer": {
                    "value": "[parameters('imageOffer')]"
                  },
                  "imagePublisher": {
                    "value": "[parameters('imagePublisher')]"
                  },
                  "imageSku": {
                    "value": "[parameters('imageSku')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "monitoring": {
                    "value": "[parameters('monitoring')]"
                  },
                  "netAppFileShares": {
                    "value": "[parameters('netAppFileShares')]"
                  },
                  "networkInterfaceNamePrefix": {
                    "value": "[parameters('namingConvention').virtualMachineNetworkInterface]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "serviceToken": {
                    "value": "[parameters('serviceToken')]"
                  },
                  "sessionHostCount": "[if(and(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], parameters('sessionHostBatchCount')), greater(parameters('divisionRemainderValue'), 0)), createObject('value', parameters('divisionRemainderValue')), createObject('value', parameters('maxResourcesPerTemplateDeployment')))]",
                  "sessionHostIndex": "[if(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), createObject('value', parameters('sessionHostIndex')), createObject('value', add(mul(sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('maxResourcesPerTemplateDeployment')), parameters('sessionHostIndex'))))]",
                  "storageAccountPrefix": {
                    "value": "[parameters('namingConvention').storageAccount]"
                  },
                  "storageCount": {
                    "value": "[parameters('storageCount')]"
                  },
                  "storageIndex": {
                    "value": "[parameters('storageIndex')]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "storageSuffix": {
                    "value": "[parameters('storageSuffix')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tagsNetworkInterfaces": {
                    "value": "[variables('tagsNetworkInterfaces')]"
                  },
                  "tagsVirtualMachines": {
                    "value": "[variables('tagsVirtualMachines')]"
                  },
                  "uniqueToken": {
                    "value": "[variables('uniqueToken')]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[variables('virtualMachineNamePrefix')]"
                  },
                  "virtualMachinePassword": {
                    "value": "[parameters('virtualMachinePassword')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "virtualMachineUsername": {
                    "value": "[parameters('virtualMachineUsername')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "4097581622289323744"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "artifactsUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "artifactsUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "acceleratedNetworking": {
                      "type": "string"
                    },
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "availability": {
                      "type": "string"
                    },
                    "availabilitySetNamePrefix": {
                      "type": "string"
                    },
                    "availabilityZones": {
                      "type": "array"
                    },
                    "avdAgentBootLoaderMsiName": {
                      "type": "string"
                    },
                    "avdAgentMsiName": {
                      "type": "string"
                    },
                    "batchCount": {
                      "type": "int"
                    },
                    "dataCollectionRuleAssociationName": {
                      "type": "string"
                    },
                    "dataCollectionRuleResourceId": {
                      "type": "string"
                    },
                    "deployFslogix": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deploymentUserAssignedidentityClientId": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "diskNamePrefix": {
                      "type": "string"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "enableDrainMode": {
                      "type": "bool"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "imageOffer": {
                      "type": "string"
                    },
                    "imagePublisher": {
                      "type": "string"
                    },
                    "imageSku": {
                      "type": "string"
                    },
                    "imageVersionResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "monitoring": {
                      "type": "bool"
                    },
                    "netAppFileShares": {
                      "type": "array"
                    },
                    "networkInterfaceNamePrefix": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "sessionHostCount": {
                      "type": "int"
                    },
                    "sessionHostIndex": {
                      "type": "int"
                    },
                    "storageAccountPrefix": {
                      "type": "string"
                    },
                    "storageCount": {
                      "type": "int"
                    },
                    "storageIndex": {
                      "type": "int"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "storageSuffix": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tagsNetworkInterfaces": {
                      "type": "object"
                    },
                    "tagsVirtualMachines": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                    },
                    "uniqueToken": {
                      "type": "string"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    },
                    "virtualMachinePassword": {
                      "type": "securestring"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "virtualMachineUsername": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "amdVmSize": "[contains(variables('amdVmSizes'), parameters('virtualMachineSize'))]",
                    "amdVmSizes": [
                      "Standard_NV4as_v4",
                      "Standard_NV8as_v4",
                      "Standard_NV16as_v4",
                      "Standard_NV32as_v4"
                    ],
                    "fslogixExclusions": "[format('\"%TEMP%\\*\\*.VHDX\";\"%Windir%\\TEMP\\*\\*.VHDX\"{0}{1}{2}', variables('fslogixExclusionsCloudCache'), variables('fslogixExclusionsProfileContainers'), variables('fslogixExclusionsOfficeContainers'))]",
                    "fslogixExclusionsCloudCache": "[if(contains(parameters('fslogixContainerType'), 'CloudCache'), ';\"%ProgramData%\\fslogix\\Cache\\*\";\"%ProgramData%\\fslogix\\Proxy\\*\"', '')]",
                    "fslogixExclusionsOfficeContainers": "[if(contains(parameters('fslogixContainerType'), 'Office'), format(';\"{0}\";\"{1}.lock\";\"{2}.meta\";\"{3}.metadata\"', variables('fslogixOfficeShare'), variables('fslogixOfficeShare'), variables('fslogixOfficeShare'), variables('fslogixOfficeShare')), '')]",
                    "fslogixExclusionsProfileContainers": "[format(';\"{0}\";\"{1}.lock\";\"{2}.meta\";\"{3}.metadata\"', variables('fslogixProfileShare'), variables('fslogixProfileShare'), variables('fslogixProfileShare'), variables('fslogixProfileShare'))]",
                    "fslogixOfficeShare": "[format('\\\\{0}.file.{1}\\office-containers\\*\\*.VHDX', variables('storageAccountToken'), parameters('storageSuffix'))]",
                    "fslogixProfileShare": "[format('\\\\{0}.file.{1}\\profile-containers\\*\\*.VHDX', variables('storageAccountToken'), parameters('storageSuffix'))]",
                    "imageReference": "[if(empty(parameters('imageVersionResourceId')), createObject('publisher', parameters('imagePublisher'), 'offer', parameters('imageOffer'), 'sku', parameters('imageSku'), 'version', 'latest'), createObject('id', parameters('imageVersionResourceId')))]",
                    "intune": "[contains(parameters('activeDirectorySolution'), 'intuneEnrollment')]",
                    "nvidiaVmSize": "[contains(variables('nvidiaVmSizes'), parameters('virtualMachineSize'))]",
                    "nvidiaVmSizes": [
                      "Standard_NV6",
                      "Standard_NV12",
                      "Standard_NV24",
                      "Standard_NV12s_v3",
                      "Standard_NV24s_v3",
                      "Standard_NV48s_v3",
                      "Standard_NC4as_T4_v3",
                      "Standard_NC8as_T4_v3",
                      "Standard_NC16as_T4_v3",
                      "Standard_NC64as_T4_v3",
                      "Standard_NV6ads_A10_v5",
                      "Standard_NV12ads_A10_v5",
                      "Standard_NV18ads_A10_v5",
                      "Standard_NV36ads_A10_v5",
                      "Standard_NV36adms_A10_v5",
                      "Standard_NV72ads_A10_v5"
                    ],
                    "pooledHostPool": "[equals(split(parameters('hostPoolType'), ' ')[0], 'Pooled')]",
                    "sessionHostNamePrefix": "[replace(parameters('virtualMachineNamePrefix'), parameters('serviceToken'), '')]",
                    "storageAccountToken": "[take(format('{0}??{1}', parameters('storageAccountPrefix'), parameters('uniqueToken')), 24)]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "networkInterface",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-05-01",
                      "name": "[format('{0}-{1}', replace(parameters('networkInterfaceNamePrefix'), format('-{0}', parameters('serviceToken')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetworkInterfaces')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": "[if(equals(parameters('acceleratedNetworking'), 'True'), true(), false())]",
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "copy": {
                        "name": "virtualMachine",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "zones": "[if(equals(parameters('availability'), 'AvailabilityZones'), createArray(parameters('availabilityZones')[mod(range(0, parameters('sessionHostCount'))[copyIndex()], length(parameters('availabilityZones')))]), null())]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('artifactsUserAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "availabilitySet": "[if(equals(parameters('availability'), 'AvailabilitySets'), createObject('id', resourceId('Microsoft.Compute/availabilitySets', format('{0}-{1}', parameters('availabilitySetNamePrefix'), padLeft(div(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 200), 2, '0')))), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('imageReference')]",
                          "osDisk": {
                            "name": "[format('{0}-{1}', replace(parameters('diskNamePrefix'), format('-{0}', parameters('serviceToken')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                            "osType": "Windows",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "[parameters('diskSku')]"
                            }
                          },
                          "dataDisks": []
                        },
                        "osProfile": {
                          "computerName": "[format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                          "adminUsername": "[parameters('virtualMachineUsername')]",
                          "adminPassword": "[parameters('virtualMachinePassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}', replace(parameters('networkInterfaceNamePrefix'), format('-{0}', parameters('serviceToken')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "securityProfile": {
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "trustedLaunch",
                          "encryptionAtHost": true
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "licenseType": "[if(equals(parameters('imagePublisher'), 'MicrosoftWindowsDesktop'), 'Windows_Client', 'Windows_Server')]"
                      },
                      "dependsOn": [
                        "networkInterface"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_IaasAntimalware",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'IaaSAntimalware')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": false,
                        "settings": {
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "7",
                            "time": "120",
                            "scanType": "Quick"
                          },
                          "Exclusions": "[if(parameters('deployFslogix'), createObject('Paths', variables('fslogixExclusions')), createObject())]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_GuestAttestation",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AzureMonitorWindowsAgent",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[parameters('monitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dataCollectionRuleAssociation",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[parameters('monitoring')]",
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2022-06-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]",
                      "name": "[parameters('dataCollectionRuleAssociationName')]",
                      "properties": {
                        "dataCollectionRuleId": "[parameters('dataCollectionRuleResourceId')]",
                        "description": "AVD Insights data collection rule association"
                      },
                      "dependsOn": [
                        "extension_AzureMonitorWindowsAgent",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_CustomScriptExtension",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'CustomScriptExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "fileUris": [
                            "[format('{0}{1}', parameters('artifactsUri'), parameters('avdAgentBootLoaderMsiName'))]",
                            "[format('{0}{1}', parameters('artifactsUri'), parameters('avdAgentMsiName'))]",
                            "[format('{0}Set-SessionHostConfiguration.ps1', parameters('artifactsUri'))]"
                          ],
                          "timestamp": "[parameters('timestamp')]"
                        },
                        "protectedSettings": {
                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File Set-SessionHostConfiguration.ps1 -activeDirectorySolution {0} -amdVmSize {1} -avdAgentBootLoaderMsiName \"{2}\" -avdAgentMsiName \"{3}\" -Environment {4} -fslogix {5} -fslogixContainerType {6} -hostPoolName {7} -HostPoolRegistrationToken \"{8}\" -imageOffer {9} -imagePublisher {10} -netAppFileShares {11} -nvidiaVmSize {12} -pooledHostPool {13} -storageAccountPrefix {14} -storageCount {15} -storageIndex {16} -storageService {17} -storageSuffix {18} -uniqueToken {19}', parameters('activeDirectorySolution'), variables('amdVmSize'), parameters('avdAgentBootLoaderMsiName'), parameters('avdAgentMsiName'), environment().name, parameters('deployFslogix'), parameters('fslogixContainerType'), parameters('hostPoolName'), listRegistrationTokens(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName')), '2023-09-05').value[0].token, parameters('imageOffer'), parameters('imagePublisher'), parameters('netAppFileShares'), variables('nvidiaVmSize'), variables('pooledHostPool'), parameters('storageAccountPrefix'), parameters('storageCount'), parameters('storageIndex'), parameters('storageService'), parameters('storageSuffix'), parameters('uniqueToken'))]",
                          "managedidentity": {
                            "clientId": "[parameters('artifactsUserAssignedIdentityClientId')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataCollectionRuleAssociation",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_JsonADDomainExtension",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[contains(parameters('activeDirectorySolution'), 'DomainServices')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'JsonADDomainExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "forceUpdateTag": "[parameters('timestamp')]",
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('domainName')]",
                          "Options": "3",
                          "OUPath": "[parameters('organizationalUnitPath')]",
                          "Restart": "true",
                          "User": "[parameters('domainJoinUserPrincipalName')]"
                        },
                        "protectedSettings": {
                          "Password": "[parameters('domainJoinPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-drain-mode-{0}-{1}', parameters('batchCount'), parameters('deploymentNameSuffix')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AADLoginForWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[not(contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": "[if(variables('intune'), createObject('mdmId', '0000000a-0000-0000-c000-000000000000'), null())]"
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-drain-mode-{0}-{1}', parameters('batchCount'), parameters('deploymentNameSuffix')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AmdGpuDriverWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[variables('amdVmSize')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AmdGpuDriverWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.HpcCompute",
                        "type": "AmdGpuDriverWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_JsonADDomainExtension",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_NvidiaGpuDriverWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[variables('nvidiaVmSize')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'NvidiaGpuDriverWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.HpcCompute",
                        "type": "NvidiaGpuDriverWindows",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_JsonADDomainExtension",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableDrainMode')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-drain-mode-{0}-{1}', parameters('batchCount'), parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}Set-AvdDrainMode.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "parameters": {
                            "value": "[format('-Environment {0} -hostPoolName {1} -HostPoolResourceGroupName {2} -sessionHostCount {3} -sessionHostIndex {4} -SubscriptionId {5} -TenantId {6} -userAssignedidentityClientId {7} -virtualMachineNamePrefix {8}', environment().name, parameters('hostPoolName'), parameters('resourceGroupControlPlane'), parameters('sessionHostCount'), parameters('sessionHostIndex'), subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedidentityClientId'), variables('sessionHostNamePrefix'))]"
                          },
                          "scriptFileName": {
                            "value": "Set-AvdDrainMode.ps1"
                          },
                          "tags": {
                            "value": "[parameters('tagsVirtualMachines')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedidentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1897972445567182190"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "extension_CustomScriptExtension"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('deploy-avail-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(parameters('enableRecoveryServices'), contains(parameters('hostPoolType'), 'Personal'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-recovery-services-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deployFslogix": {
                    "value": "[parameters('deployFslogix')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "divisionRemainderValue": {
                    "value": "[parameters('divisionRemainderValue')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "maxResourcesPerTemplateDeployment": {
                    "value": "[parameters('maxResourcesPerTemplateDeployment')]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[parameters('recoveryServicesVaultName')]"
                  },
                  "resourceGroupHosts": {
                    "value": "[parameters('resourceGroupHosts')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "sessionHostBatchCount": {
                    "value": "[parameters('sessionHostBatchCount')]"
                  },
                  "sessionHostIndex": {
                    "value": "[parameters('sessionHostIndex')]"
                  },
                  "tagsRecoveryServicesVault": {
                    "value": "[variables('tagsRecoveryServicesVault')]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[variables('virtualMachineNamePrefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "15858638867683231606"
                    }
                  },
                  "parameters": {
                    "deployFslogix": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "divisionRemainderValue": {
                      "type": "int"
                    },
                    "location": {
                      "type": "string"
                    },
                    "maxResourcesPerTemplateDeployment": {
                      "type": "int"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "resourceGroupHosts": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "sessionHostBatchCount": {
                      "type": "int"
                    },
                    "sessionHostIndex": {
                      "type": "int"
                    },
                    "tagsRecoveryServicesVault": {
                      "type": "object"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "protectedItems_Vm",
                        "count": "[length(range(1, parameters('sessionHostBatchCount')))]"
                      },
                      "condition": "[not(parameters('deployFslogix'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-backup-protected-items-{0}-{1}', sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "policyId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.RecoveryServices/vaults/backupPolicies', parameters('recoveryServicesVaultName'), 'AvdPolicyVm')]"
                          },
                          "recoveryServicesVaultName": {
                            "value": "[parameters('recoveryServicesVaultName')]"
                          },
                          "sessionHostCount": "[if(and(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], parameters('sessionHostBatchCount')), greater(parameters('divisionRemainderValue'), 0)), createObject('value', parameters('divisionRemainderValue')), createObject('value', parameters('maxResourcesPerTemplateDeployment')))]",
                          "sessionHostIndex": "[if(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), createObject('value', parameters('sessionHostIndex')), createObject('value', add(mul(sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('maxResourcesPerTemplateDeployment')), parameters('sessionHostIndex'))))]",
                          "tags": {
                            "value": "[parameters('tagsRecoveryServicesVault')]"
                          },
                          "virtualMachineNamePrefix": {
                            "value": "[parameters('virtualMachineNamePrefix')]"
                          },
                          "virtualMachineResourceGroupName": {
                            "value": "[parameters('resourceGroupHosts')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "15632336424955932211"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "policyId": {
                              "type": "string"
                            },
                            "recoveryServicesVaultName": {
                              "type": "string"
                            },
                            "sessionHostCount": {
                              "type": "int"
                            },
                            "sessionHostIndex": {
                              "type": "int"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineNamePrefix": {
                              "type": "string"
                            },
                            "virtualMachineResourceGroupName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "v2VmContainer": "iaasvmcontainer;iaasvmcontainerv2;",
                            "v2Vm": "vm;iaasvmcontainerv2;"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "protectedItems_Vm",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/Azure/{1}{2};{3}{4}/{5}{6};{7}{8}', parameters('recoveryServicesVaultName'), variables('v2VmContainer'), parameters('virtualMachineResourceGroupName'), parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'), variables('v2Vm'), parameters('virtualMachineResourceGroupName'), parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "protectedItemType": "Microsoft.Compute/virtualMachines",
                                "policyId": "[parameters('policyId')]",
                                "sourceResourceId": "[resourceId(parameters('virtualMachineResourceGroupName'), 'Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0')))]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "virtualMachines"
              ]
            },
            {
              "condition": "[and(parameters('enableScalingTool'), parameters('pooledHostPool'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-scaling-tool-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('automationAccountName')]"
                  },
                  "beginPeakTime": {
                    "value": "[parameters('scalingBeginPeakTime')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "endPeakTime": {
                    "value": "[parameters('scalingEndPeakTime')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "hostPoolResourceGroupName": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "hybridRunbookWorkerGroupName": {
                    "value": "[parameters('hybridRunbookWorkerGroupName')]"
                  },
                  "limitSecondsToForceLogOffUser": {
                    "value": "[parameters('scalingLimitSecondsToForceLogOffUser')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "minimumNumberOfRdsh": {
                    "value": "[parameters('scalingMinimumNumberOfRdsh')]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "resourceGroupHosts": {
                    "value": "[parameters('resourceGroupHosts')]"
                  },
                  "sessionThresholdPerCPU": {
                    "value": "[parameters('scalingSessionThresholdPerCPU')]"
                  },
                  "tags": {
                    "value": "[variables('tagsAutomationAccounts')]"
                  },
                  "timeDifference": {
                    "value": "[parameters('timeDifference')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "13859924389856730938"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "beginPeakTime": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "endPeakTime": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolResourceGroupName": {
                      "type": "string"
                    },
                    "hybridRunbookWorkerGroupName": {
                      "type": "string"
                    },
                    "limitSecondsToForceLogOffUser": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "minimumNumberOfRdsh": {
                      "type": "string"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "resourceGroupHosts": {
                      "type": "string"
                    },
                    "sessionThresholdPerCPU": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]"
                    },
                    "timeDifference": {
                      "type": "string"
                    },
                    "timeZone": {
                      "type": "string"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleAssignments": [
                      "[parameters('resourceGroupControlPlane')]",
                      "[parameters('resourceGroupHosts')]"
                    ],
                    "runbookFileName": "Set-HostPoolScaling.ps1",
                    "scriptFileName": "Set-AutomationRunbook.ps1"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "schedules",
                        "count": "[length(range(0, 4))]"
                      },
                      "type": "Microsoft.Automation/automationAccounts/schedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), format('{0}_{1}min', parameters('hostPoolName'), mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                      "properties": {
                        "advancedSchedule": {},
                        "description": null,
                        "expiryTime": null,
                        "frequency": "Hour",
                        "interval": 1,
                        "startTime": "[dateTimeAdd(parameters('time'), format('PT{0}M', mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                        "timeZone": "[parameters('timeZone')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "jobSchedules",
                        "count": "[length(range(0, 4))]"
                      },
                      "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), guid(parameters('time'), variables('runbookFileName'), parameters('hostPoolName'), string(range(0, 4)[copyIndex()])))]",
                      "properties": {
                        "parameters": {
                          "beginPeakTime": "[parameters('beginPeakTime')]",
                          "endPeakTime": "[parameters('endPeakTime')]",
                          "EnvironmentName": "[environment().name]",
                          "hostPoolName": "[parameters('hostPoolName')]",
                          "limitSecondsToForceLogOffUser": "[parameters('limitSecondsToForceLogOffUser')]",
                          "LogOffMessageBody": "Your session will be logged off. Please save and close everything.",
                          "LogOffMessageTitle": "Machine is about to shutdown.",
                          "MaintenanceTagName": "Maintenance",
                          "minimumNumberOfRdsh": "[parameters('minimumNumberOfRdsh')]",
                          "ResourceGroupName": "[parameters('hostPoolResourceGroupName')]",
                          "sessionThresholdPerCPU": "[parameters('sessionThresholdPerCPU')]",
                          "SubscriptionId": "[subscription().subscriptionId]",
                          "TenantId": "[subscription().tenantId]",
                          "timeDifference": "[parameters('timeDifference')]"
                        },
                        "runbook": {
                          "name": "[replace(variables('runbookFileName'), '.ps1', '')]"
                        },
                        "runOn": "[parameters('hybridRunbookWorkerGroupName')]",
                        "schedule": {
                          "name": "[format('{0}_{1}min', parameters('hostPoolName'), mul(add(range(0, 4)[range(0, 4)[copyIndex()]], 1), 15))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('deploy-runboook-{0}', parameters('deploymentNameSuffix')))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/schedules', parameters('automationAccountName'), format('{0}_{1}min', parameters('hostPoolName'), mul(add(range(0, 4)[range(0, 4)[copyIndex()]], 1), 15)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-runboook-{0}', parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}{1}', parameters('artifactsUri'), variables('runbookFileName'))]",
                              "[format('{0}{1}', parameters('artifactsUri'), variables('scriptFileName'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "parameters": {
                            "value": "[format('-AutomationAccountName {0} -Environment {1} -ResourceGroupName {2} -RunbookFileName {3} -SubscriptionId {4} -TenantId {5} -UserAssignedIdentityClientId {6}', parameters('automationAccountName'), environment().name, resourceGroup().name, variables('runbookFileName'), subscription().subscriptionId, tenant().tenantId, parameters('userAssignedIdentityClientId'))]"
                          },
                          "scriptFileName": {
                            "value": "[variables('scriptFileName')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1897972445567182190"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(range(0, length(variables('roleAssignments'))))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-role-assignment-{0}-{1}', range(0, length(variables('roleAssignments')))[copyIndex()], parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2022-08-08', 'full').identity.principalId]"
                          },
                          "principalType": {
                            "value": "ServicePrincipal"
                          },
                          "roleDefinitionId": {
                            "value": "40c5ff49-9181-41f8-ae61-143b0e78555e"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "1476792570487351405"
                            }
                          },
                          "parameters": {
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string"
                            },
                            "roleDefinitionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                                "principalId": "[parameters('principalId')]",
                                "principalType": "[parameters('principalType')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-recovery-services-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-control-plane-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-fslogix-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix')))]",
        "rgs",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-cp-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-hosts-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-clean-up-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "fslogixStorageService": {
            "value": "[parameters('fslogixStorageService')]"
          },
          "location": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[3], parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "scalingTool": {
            "value": "[parameters('scalingTool')]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "virtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualMachineName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "10920830132301893366"
            }
          },
          "parameters": {
            "deploymentNameSuffix": {
              "type": "string"
            },
            "fslogixStorageService": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "scalingTool": {
              "type": "bool"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[and(not(parameters('scalingTool')), not(equals(parameters('fslogixStorageService'), 'AzureFiles Premium')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('remove-mgmt-vm-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Location": {
                    "value": "[parameters('location')]"
                  },
                  "UserAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "VirtualMachineName": {
                    "value": "[parameters('virtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "12142459402718959274"
                    }
                  },
                  "parameters": {
                    "Location": {
                      "type": "string"
                    },
                    "UserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "VirtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('VirtualMachineName'), 'RunCommand')]",
                      "location": "[parameters('Location')]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": true,
                        "parameters": [
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "ResourceGroupName",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "TenantId",
                            "value": "[tenant().tenantId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('UserAssignedIdentityClientId')]"
                          },
                          {
                            "name": "VirtualMachineName",
                            "value": "[parameters('VirtualMachineName')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        Start-Sleep -Seconds 30\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId\r\n        Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -NoWait -Force\r\n      "
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-fslogix-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', variables('resourceGroupServices')[3], parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-session-hosts-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ]
}