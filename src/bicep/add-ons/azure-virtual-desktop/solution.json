{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.34.44.8038",
      "templateHash": "4208343229627615971"
    }
  },
  "parameters": {
    "activeDirectorySolution": {
      "type": "string",
      "allowedValues": [
        "ActiveDirectoryDomainServices",
        "MicrosoftEntraDomainServices",
        "MicrosoftEntraId",
        "MicrosoftEntraIdIntuneEnrollment"
      ],
      "metadata": {
        "description": "The service providing domain services for Azure Virtual Desktop.  This is needed to properly configure the session hosts and if applicable, the Azure Storage Account."
      }
    },
    "availability": {
      "type": "string",
      "defaultValue": "AvailabilityZones",
      "allowedValues": [
        "AvailabilitySets",
        "AvailabilityZones",
        "None"
      ],
      "metadata": {
        "description": "The desired availability option when deploying a pooled host pool. The best practice is to deploy to availability zones for the highest resilency and service level agreement."
      }
    },
    "availabilityZones": {
      "type": "array",
      "defaultValue": [
        "1",
        "2",
        "3"
      ],
      "metadata": {
        "description": "The availability zones allowed for the AVD session hosts deployment location."
      }
    },
    "avdConfigurationZipFileName": {
      "type": "string",
      "defaultValue": "Configuration_1.0.02790.438.zip",
      "metadata": {
        "description": "The file name for the ZIP file containing the AVD agents and DSC configuration."
      }
    },
    "avdObjectId": {
      "type": "string",
      "metadata": {
        "description": "The object ID for the Azure Virtual Desktop enterprise application in Microsoft Entra ID.  The object ID can found by selecting Microsoft Applications using the Application type filter in the Enterprise Applications blade of Microsoft Entra ID."
      }
    },
    "azureNetAppFilesSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The subnet address prefix for the Azure NetApp Files delegated subnet."
      }
    },
    "customRdpProperty": {
      "type": "string",
      "defaultValue": "audiocapturemode:i:1;camerastoredirect:s:*;use multimon:i:0;drivestoredirect:s:;encode redirected video capture:i:1;redirected video capture encoding quality:i:1;audiomode:i:0;devicestoredirect:s:;redirectclipboard:i:0;redirectcomports:i:0;redirectlocation:i:1;redirectprinters:i:0;redirectsmartcards:i:1;redirectwebauthn:i:1;usbdevicestoredirect:s:;keyboardhook:i:2;",
      "metadata": {
        "description": "The RDP properties to add or remove RDP functionality on the AVD host pool. The string must end with a semi-colon. Settings reference: https://learn.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files"
      }
    },
    "deployActivityLogDiagnosticSetting": {
      "type": "bool",
      "metadata": {
        "description": "Choose whether to deploy a diagnostic setting for the Activity Log."
      }
    },
    "deployDefender": {
      "type": "bool",
      "metadata": {
        "description": "Choose whether to deploy Defender for Cloud."
      }
    },
    "deployNetworkWatcherTrafficAnalytics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "When set to true, deploys Network Watcher Traffic Analytics. It defaults to \"false\"."
      }
    },
    "deployPolicy": {
      "type": "bool",
      "metadata": {
        "description": "Choose whether to deploy a policy assignment."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
      }
    },
    "desktopFriendlyName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The friendly name for the SessionDesktop application in the desktop application group."
      }
    },
    "diskSku": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The storage SKU for the managed disks on the AVD session hosts. Production deployments should use Premium_LRS."
      }
    },
    "domainJoinPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the account to domain join the AVD session hosts."
      }
    },
    "domainJoinUserPrincipalName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The user principal name for the account to domain join the AVD session hosts."
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the domain that provides ADDS to the AVD session hosts."
      }
    },
    "drainMode": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "The drain mode option enables drain mode for the sessions hosts in this deployment to prevent users from accessing the hosts until they have been validated."
      }
    },
    "emailSecurityContact": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The email address to use for Defender for Cloud notifications."
      }
    },
    "enableAcceleratedNetworking": {
      "type": "bool",
      "metadata": {
        "description": "Determine whether to enable accelerated networking on the AVD session hosts. https://learn.microsoft.com/en-us/azure/virtual-network/accelerated-networking-overview"
      }
    },
    "enableApplicationInsights": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploys the required resources to monitor the function app for the Auto Increase Premium File Share solutions."
      }
    },
    "enableAvdInsights": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploys the required monitoring resources to enable AVD Insights."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable the partner telemetry deployment. This will allow ESRI to see data around the ArcGIS Pro deployments. https://learn.microsoft.com/en-us/partner-center/marketplace-offers/azure-partner-customer-usage-attribution"
      }
    },
    "environmentAbbreviation": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "prod",
        "test"
      ],
      "metadata": {
        "description": "The abbreviation for the target environment."
      }
    },
    "existingSharedActiveDirectoryConnection": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether the Shared Active Directory Connection for Azure NetApp Files already exists."
      }
    },
    "existingFeedWorkspaceResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID for the existing feed workspace within a business unit or project."
      }
    },
    "fslogixShareSizeInGB": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {
        "description": "The file share size(s) in GB for the Fslogix storage solution."
      }
    },
    "fslogixContainerType": {
      "type": "string",
      "defaultValue": "ProfileContainer",
      "allowedValues": [
        "CloudCacheProfileContainer",
        "CloudCacheProfileOfficeContainer",
        "ProfileContainer",
        "ProfileOfficeContainer"
      ],
      "metadata": {
        "description": "If deploying FSLogix, select the desired type of container for user profiles. https://learn.microsoft.com/en-us/fslogix/concepts-container-types"
      }
    },
    "fslogixStorageService": {
      "type": "string",
      "defaultValue": "AzureFiles Standard",
      "allowedValues": [
        "AzureNetAppFiles Premium",
        "AzureNetAppFiles Standard",
        "AzureFiles Premium",
        "AzureFiles Standard",
        "None"
      ],
      "metadata": {
        "description": "Enable an Fslogix storage option to manage user profiles for the AVD session hosts. The selected service & SKU should provide sufficient IOPS for all of your users. https://docs.microsoft.com/en-us/azure/architecture/example-scenario/wvd/windows-virtual-desktop-fslogix#performance-requirements"
      }
    },
    "functionAppSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The subnet address prefix for the delegated subnet for the Azure Function App. This subnet is required for the Auto Increase Premium File Share Quotas tool."
      }
    },
    "hostPoolPublicNetworkAccess": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Disabled",
        "Enabled",
        "EnabledForClientsOnly",
        "EnabledForSessionHostsOnly"
      ],
      "metadata": {
        "description": "The type of public network access for the host pool."
      }
    },
    "hostPoolType": {
      "type": "string",
      "defaultValue": "Pooled",
      "allowedValues": [
        "Pooled",
        "Personal"
      ],
      "metadata": {
        "description": "The type of AVD host pool."
      }
    },
    "hubAzureFirewallResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the Azure Firewall in the HUB subscription"
      }
    },
    "hubVirtualNetworkResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the Azure Virtual Network in the HUB subscription."
      }
    },
    "identifier": {
      "type": "string",
      "defaultValue": "avd",
      "maxLength": 3,
      "metadata": {
        "description": "The unique identifier between each business unit or project supporting AVD in your tenant. This is the unique naming component between each AVD stamp."
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "office-365",
      "metadata": {
        "description": "Offer for the virtual machine image"
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsDesktop",
      "metadata": {
        "description": "Publisher for the virtual machine image"
      }
    },
    "imageSku": {
      "type": "string",
      "defaultValue": "win11-22h2-avd-m365",
      "metadata": {
        "description": "SKU for the virtual machine image"
      }
    },
    "imageVersionResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID for the Compute Gallery Image Version. Do not set this value if using a marketplace image."
      }
    },
    "keyVaultDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AuditEvent",
          "enabled": true
        },
        {
          "category": "AzurePolicyEvaluationDetails",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Key Vault Diagnostic Logs categories to collect. See \"https://learn.microsoft.com/en-us/azure/key-vault/general/logging?tabs=Vault\" for valid values."
      }
    },
    "keyVaultDiagnosticMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "The Key Vault Diagnostic Metrics to collect. See the following URL for valid settings: \"https://learn.microsoft.com/azure/key-vault/general/logging?tabs=Vault\"."
      }
    },
    "locationVirtualMachines": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The deployment location for the AVD sessions hosts. This is necessary when the users are closer to a different location than the control plane location."
      }
    },
    "logAnalyticsWorkspaceRetention": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 30,
      "maxValue": 730,
      "metadata": {
        "description": "The retention for the Log Analytics Workspace to setup the AVD monitoring solution"
      }
    },
    "logAnalyticsWorkspaceSku": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "allowedValues": [
        "Free",
        "Standard",
        "Premium",
        "PerNode",
        "PerGB2018",
        "Standalone",
        "CapacityReservation"
      ],
      "metadata": {
        "description": "The SKU for the Log Analytics Workspace to setup the AVD monitoring solution"
      }
    },
    "logStorageSkuName": {
      "type": "string",
      "defaultValue": "Standard_GRS",
      "metadata": {
        "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
      }
    },
    "networkInterfaceDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of metrics to enable on the diagnostic setting for network interfaces."
      }
    },
    "networkSecurityGroupDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "NetworkSecurityGroupEvent",
          "enabled": true
        },
        {
          "category": "NetworkSecurityGroupRuleCounter",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Security Group diagnostic logs to apply to the workload Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
      }
    },
    "networkSecurityGroupRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The rules to apply to the Network Security Group."
      }
    },
    "networkWatcherFlowLogsRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "The number of days to retain Network Watcher Flow Logs. It defaults to \"30\"."
      }
    },
    "networkWatcherFlowLogsType": {
      "type": "string",
      "defaultValue": "VirtualNetwork",
      "allowedValues": [
        "NetworkSecurityGroup",
        "VirtualNetwork"
      ],
      "metadata": {
        "description": "When set to \"true\", enables Virtual Network Flow Logs. It defaults to \"true\" as its required by MCSB."
      }
    },
    "networkWatcherResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID for an existing network watcher for the desired deployment location. Only one network watcher per location can exist in a subscription. The value can be left empty to create a new network watcher resource."
      }
    },
    "operationsLogAnalyticsWorkspaceResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Log Analytics Workspace to use for log storage."
      }
    },
    "organizationalUnitPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The distinguished name for the target Organization Unit in Active Directory Domain Services."
      }
    },
    "policy": {
      "type": "string",
      "defaultValue": "NISTRev4",
      "metadata": {
        "description": "The policy to assign to the workload."
      }
    },
    "privateLinkScopeResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the Azure Monitor Private Link Scope in the Operations subscription / resource group."
      }
    },
    "profile": {
      "type": "string",
      "defaultValue": "Generic",
      "allowedValues": [
        "ArcGISPro",
        "Generic"
      ],
      "metadata": {
        "description": "The profile of the workload for the AVD session hosts. When ArcGISPro is selected, telemetry data is collected for ESRI in the Partner Center."
      }
    },
    "recoveryServices": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable backups to an Azure Recovery Services vault.  For a pooled host pool this will enable backups on the Azure file share.  For a personal host pool this will enable backups on the AVD sessions hosts."
      }
    },
    "scalingWeekdaysOffPeakStartTime": {
      "type": "string",
      "defaultValue": "17:00",
      "metadata": {
        "description": "Off peak start time for weekdays in HH:mm format."
      }
    },
    "scalingWeekdaysPeakStartTime": {
      "type": "string",
      "defaultValue": "09:00",
      "metadata": {
        "description": "Off peak start time for weekends in HH:mm format."
      }
    },
    "scalingWeekendsOffPeakStartTime": {
      "type": "string",
      "defaultValue": "17:00",
      "metadata": {
        "description": "Peak start time for weekdays in HH:mm format."
      }
    },
    "scalingWeekendsPeakStartTime": {
      "type": "string",
      "defaultValue": "09:00",
      "metadata": {
        "description": "Peak start time for weekends in HH:mm format."
      }
    },
    "securityPrincipals": {
      "type": "array",
      "metadata": {
        "description": "The array of Security Principals with their object IDs and display names to assign to the AVD Application Group and FSLogix Storage."
      }
    },
    "sessionHostCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 5000,
      "metadata": {
        "description": "The number of session hosts to deploy in the host pool. Ensure you have the approved quota to deploy the desired count."
      }
    },
    "sessionHostIndex": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 4999,
      "metadata": {
        "description": "The starting number for the session hosts. This is important when adding virtual machines to ensure an update deployment is not performed on an existing, active session host."
      }
    },
    "sharedServicesSubnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the subnet in the Shared Services subscription. This is required for the private endpoint on the AVD Global Workspace."
      }
    },
    "stampIndex": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 9,
      "metadata": {
        "description": "The stamp index allows for multiple AVD stamps with the same business unit or project to support different use cases. For example, \"0\" could be used for an office workers host pool and \"1\" could be used for a developers host pool within the \"finance\" business unit."
      }
    },
    "storageCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 100,
      "metadata": {
        "description": "The number of storage accounts to deploy to support sharding across multiple storage accounts. https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding"
      }
    },
    "storageIndex": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 99,
      "metadata": {
        "description": "The starting number for the names of the storage accounts to support sharding across multiple storage accounts. https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding"
      }
    },
    "subnetAddressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.140.0/24",
        "10.0.141.0/26"
      ],
      "minLength": 1,
      "maxLength": 2,
      "metadata": {
        "description": "The address prefix(es) for the new subnet(s) that will be created in the spoke virtual network(s). Specify only one address prefix in the array if the session hosts location and the control plan location are the same. If different locations are specified, add a second address prefix for the hosts virtual network."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The Key / value pairs of metadata for the Azure resource groups and resources."
      }
    },
    "usersPerCore": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of users per core is used to determine the maximum number of users per session host."
      }
    },
    "validationEnvironment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "The validation environment setting on the AVD host pool determines whether the hostpool should receive AVD preview features for testing."
      }
    },
    "virtualMachineAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The local administrator password for the AVD session hosts"
      }
    },
    "virtualMachineAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "The local administrator username for the AVD session hosts"
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_D4ads_v5",
      "metadata": {
        "description": "The virtual machine SKU for the AVD session hosts."
      }
    },
    "virtualMachineVirtualCpuCount": {
      "type": "int",
      "metadata": {
        "description": "The number of virtual CPUs per virtual machine for the selected virtual machine size."
      }
    },
    "virtualNetworkAddressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.140.0/23"
      ],
      "minLength": 1,
      "maxLength": 2,
      "metadata": {
        "description": "The address prefix for the new spoke virtual network(s). Specify only one address prefix in the array if the session hosts location and the control plan location are the same. If different locations are specified, add a second address prefix for the hosts virtual network."
      }
    },
    "virtualNetworkDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The diagnostic logs to apply to the workload Virtual Network."
      }
    },
    "virtualNetworkDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The metrics to monitor for the workload Virtual Network."
      }
    },
    "workspaceFriendlyName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The friendly name for the AVD workspace that is displayed in the end-user client."
      }
    },
    "workspacePublicNetworkAccess": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "The public network access setting on the AVD workspace either disables public network access or allows both public and private network access."
      }
    }
  },
  "variables": {
    "maxResourcesPerTemplateDeployment": 88,
    "divisionValue": "[div(parameters('sessionHostCount'), variables('maxResourcesPerTemplateDeployment'))]",
    "divisionRemainderValue": "[mod(parameters('sessionHostCount'), variables('maxResourcesPerTemplateDeployment'))]",
    "sessionHostBatchCount": "[if(greater(variables('divisionRemainderValue'), 0), add(variables('divisionValue'), 1), variables('divisionValue'))]",
    "maxAvSetMembers": 200,
    "beginAvSetRange": "[div(parameters('sessionHostIndex'), variables('maxAvSetMembers'))]",
    "endAvSetRange": "[div(add(parameters('sessionHostCount'), parameters('sessionHostIndex')), variables('maxAvSetMembers'))]",
    "availabilitySetsCount": "[length(range(variables('beginAvSetRange'), add(sub(variables('endAvSetRange'), variables('beginAvSetRange')), 1)))]",
    "customImageId": "[if(empty(parameters('imageVersionResourceId')), 'null', format('\"{0}\"', parameters('imageVersionResourceId')))]",
    "deployFslogix": "[if(and(contains(parameters('fslogixStorageService'), 'Azure'), contains(parameters('activeDirectorySolution'), 'DomainServices')), true(), false())]",
    "fileShareNames": {
      "CloudCacheProfileContainer": [
        "profile-containers"
      ],
      "CloudCacheProfileOfficeContainer": [
        "office-containers",
        "profile-containers"
      ],
      "ProfileContainer": [
        "profile-containers"
      ],
      "ProfileOfficeContainer": [
        "office-containers",
        "profile-containers"
      ]
    },
    "fileShares": "[variables('fileShareNames')[parameters('fslogixContainerType')]]",
    "netbios": "[split(parameters('domainName'), '.')[0]]",
    "privateDnsZoneResourceIdPrefix": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4])]",
    "storageSku": "[if(equals(parameters('fslogixStorageService'), 'None'), 'None', split(parameters('fslogixStorageService'), ' ')[1])]",
    "storageService": "[split(parameters('fslogixStorageService'), ' ')[0]]",
    "storageSuffix": "[environment().suffixes.storage]",
    "subnets": {
      "avdControlPlane": [
        {
          "name": "AvdControlPlane",
          "properties": {
            "addressPrefix": "[parameters('subnetAddressPrefixes')[1]]"
          }
        }
      ],
      "azureNetAppFiles": "[if(and(contains(parameters('fslogixStorageService'), 'AzureNetAppFiles'), not(empty(parameters('azureNetAppFilesSubnetAddressPrefix')))), createArray(createObject('name', 'AzureNetAppFiles', 'properties', createObject('addressPrefix', parameters('azureNetAppFilesSubnetAddressPrefix')))), createArray())]",
      "functionApp": "[if(equals(parameters('fslogixStorageService'), 'AzureFiles Premium'), createArray(createObject('name', 'FunctionAppOutbound', 'properties', createObject('addressPrefix', parameters('functionAppSubnetAddressPrefix')))), createArray())]"
    }
  },
  "resources": [
    {
      "condition": "[and(parameters('enableTelemetry'), equals(parameters('profile'), 'ArcGISPro'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "pid-4e82be1d-7fcb-4913-a90c-aa84d7ea3a1c",
      "location": "[parameters('locationVirtualMachines')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "location": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01', 'full').location]"
          },
          "networkName": {
            "value": "avd"
          },
          "networkShortName": {
            "value": "avd"
          },
          "resourcePrefix": {
            "value": "[parameters('identifier')]"
          },
          "stampIndex": {
            "value": "[string(parameters('stampIndex'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "9228782132572352624"
            }
          },
          "parameters": {
            "environmentAbbreviation": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "networkName": {
              "type": "string"
            },
            "networkShortName": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            },
            "stampIndex": {
              "type": "string",
              "defaultValue": ""
            },
            "tokens": {
              "type": "object",
              "defaultValue": {
                "purpose": "purpose_token",
                "resource": "resource_token",
                "service": "service_token"
              }
            }
          },
          "variables": {
            "$fxv#0": {
              "AzureChina": {
                "chinaeast": {
                  "abbreviation": "cne",
                  "recoveryServicesGeo": "sha",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "chinaeast2": {
                  "abbreviation": "cne2",
                  "recoveryServicesGeo": "sha2",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "chinanorth": {
                  "abbreviation": "cnn",
                  "recoveryServicesGeo": "bjb",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "chinanorth2": {
                  "abbreviation": "cnn2",
                  "recoveryServicesGeo": "bjb2",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                }
              },
              "AzureCloud": {
                "australiacentral": {
                  "abbreviation": "auc",
                  "recoveryServicesGeo": "acl",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "australiacentral2": {
                  "abbreviation": "auc2",
                  "recoveryServicesGeo": "acl2",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "australiaeast": {
                  "abbreviation": "aue",
                  "recoveryServicesGeo": "ae",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "australiasoutheast": {
                  "abbreviation": "ause",
                  "recoveryServicesGeo": "ase",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "brazilsouth": {
                  "abbreviation": "brs",
                  "recoveryServicesGeo": "brs",
                  "timeDifference": "-3:00",
                  "timeZone": "E. South America Standard Time"
                },
                "brazilsoutheast": {
                  "abbreviation": "brse",
                  "recoveryServicesGeo": "bse",
                  "timeDifference": "-3:00",
                  "timeZone": "E. South America Standard Time"
                },
                "canadacentral": {
                  "abbreviation": "cac",
                  "recoveryServicesGeo": "cnc",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "canadaeast": {
                  "abbreviation": "cae",
                  "recoveryServicesGeo": "cne",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "centralindia": {
                  "abbreviation": "inc",
                  "recoveryServicesGeo": "inc",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "centralus": {
                  "abbreviation": "usc",
                  "recoveryServicesGeo": "cus",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "eastasia": {
                  "abbreviation": "ase",
                  "recoveryServicesGeo": "ea",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "eastus": {
                  "abbreviation": "use",
                  "recoveryServicesGeo": "eus",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "eastus2": {
                  "abbreviation": "use2",
                  "recoveryServicesGeo": "eus2",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "francecentral": {
                  "abbreviation": "frc",
                  "recoveryServicesGeo": "frc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "francesouth": {
                  "abbreviation": "frs",
                  "recoveryServicesGeo": "frs",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "germanynorth": {
                  "abbreviation": "den",
                  "recoveryServicesGeo": "gn",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "germanywestcentral": {
                  "abbreviation": "dewc",
                  "recoveryServicesGeo": "gwc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "israelcentral": {
                  "abbreviation": "ilc",
                  "recoveryServicesGeo": "ilc",
                  "timeDifference": "+2:00",
                  "timeZone": "Israel Standard Time"
                },
                "italynorth": {
                  "abbreviation": "itn",
                  "recoveryServicesGeo": "itn",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "japaneast": {
                  "abbreviation": "jpe",
                  "recoveryServicesGeo": "jpe",
                  "timeDifference": "+9:00",
                  "timeZone": "Tokyo Standard Time"
                },
                "japanwest": {
                  "abbreviation": "jpw",
                  "recoveryServicesGeo": "jpw",
                  "timeDifference": "+9:00",
                  "timeZone": "Tokyo Standard Time"
                },
                "jioindiacentral": {
                  "abbreviation": "injc",
                  "recoveryServicesGeo": "jic",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "jioindiawest": {
                  "abbreviation": "injw",
                  "recoveryServicesGeo": "jiw",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "koreacentral": {
                  "abbreviation": "krc",
                  "recoveryServicesGeo": "krc",
                  "timeDifference": "+9:00",
                  "timeZone": "Korea Standard Time"
                },
                "koreasouth": {
                  "abbreviation": "krs",
                  "recoveryServicesGeo": "krs",
                  "timeDifference": "+9:00",
                  "timeZone": "Korea Standard Time"
                },
                "northcentralus": {
                  "abbreviation": "usnc",
                  "recoveryServicesGeo": "ncus",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "northeurope": {
                  "abbreviation": "eun",
                  "recoveryServicesGeo": "ne",
                  "timeDifference": "0:00",
                  "timeZone": "GMT Standard Time"
                },
                "norwayeast": {
                  "abbreviation": "noe",
                  "recoveryServicesGeo": "nwe",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "norwaywest": {
                  "abbreviation": "now",
                  "recoveryServicesGeo": "nww",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "polandcentral": {
                  "abbreviation": "plc",
                  "recoveryServicesGeo": "plc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "qatarcentral": {
                  "abbreviation": "qac",
                  "recoveryServicesGeo": "qac",
                  "timeDifference": "+3:00",
                  "timeZone": "Arabian Standard Time"
                },
                "southafricanorth": {
                  "abbreviation": "zan",
                  "recoveryServicesGeo": "san",
                  "timeDifference": "+2:00",
                  "timeZone": "South Africa Standard Time"
                },
                "southafricawest": {
                  "abbreviation": "zaw",
                  "recoveryServicesGeo": "saw",
                  "timeDifference": "+2:00",
                  "timeZone": "South Africa Standard Time"
                },
                "southcentralus": {
                  "abbreviation": "ussc",
                  "recoveryServicesGeo": "scus",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "southeastasia": {
                  "abbreviation": "asse",
                  "recoveryServicesGeo": "sea",
                  "timeDifference": "+8:00",
                  "timeZone": "Singapore Standard Time"
                },
                "southindia": {
                  "abbreviation": "ins",
                  "recoveryServicesGeo": "ins",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "swedencentral": {
                  "abbreviation": "sec",
                  "recoveryServicesGeo": "sdc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "switzerlandnorth": {
                  "abbreviation": "chn",
                  "recoveryServicesGeo": "szn",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "switzerlandwest": {
                  "abbreviation": "chw",
                  "recoveryServicesGeo": "szw",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "uaecentral": {
                  "abbreviation": "aec",
                  "recoveryServicesGeo": "uac",
                  "timeDifference": "+3:00",
                  "timeZone": "Arabian Standard Time"
                },
                "uaenorth": {
                  "abbreviation": "aen",
                  "recoveryServicesGeo": "uan",
                  "timeDifference": "+3:00",
                  "timeZone": "Arabian Standard Time"
                },
                "uksouth": {
                  "abbreviation": "uks",
                  "recoveryServicesGeo": "uks",
                  "timeDifference": "0:00",
                  "timeZone": "GMT Standard Time"
                },
                "ukwest": {
                  "abbreviation": "ukw",
                  "recoveryServicesGeo": "ukw",
                  "timeDifference": "0:00",
                  "timeZone": "GMT Standard Time"
                },
                "westcentralus": {
                  "abbreviation": "uswc",
                  "recoveryServicesGeo": "wcus",
                  "timeDifference": "-7:00",
                  "timeZone": "Mountain Standard Time"
                },
                "westeurope": {
                  "abbreviation": "euw",
                  "recoveryServicesGeo": "we",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "westindia": {
                  "abbreviation": "inw",
                  "recoveryServicesGeo": "inw",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "westus": {
                  "abbreviation": "usw",
                  "recoveryServicesGeo": "wus",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                },
                "westus2": {
                  "abbreviation": "usw2",
                  "recoveryServicesGeo": "wus2",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                },
                "westus3": {
                  "abbreviation": "usw3",
                  "recoveryServicesGeo": "wus3",
                  "timeDifference": "-7:00",
                  "timeZone": "Mountain Standard Time"
                }
              },
              "AzureUSGovernment": {
                "usdodcentral": {
                  "abbreviation": "dodc",
                  "recoveryServicesGeo": "udc",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "usdodeast": {
                  "abbreviation": "dode",
                  "recoveryServicesGeo": "ude",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "usgovarizona": {
                  "abbreviation": "az",
                  "recoveryServicesGeo": "uga",
                  "timeDifference": "-7:00",
                  "timeZone": "Mountain Standard Time"
                },
                "usgovtexas": {
                  "abbreviation": "tx",
                  "recoveryServicesGeo": "ugt",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "usgovvirginia": {
                  "abbreviation": "va",
                  "recoveryServicesGeo": "ugv",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                }
              },
              "USNat": {
                "usnateast": {
                  "abbreviation": "east",
                  "recoveryServicesGeo": "exe",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "usnatwest": {
                  "abbreviation": "west",
                  "recoveryServicesGeo": "exw",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                }
              },
              "USSec": {
                "usseceast": {
                  "abbreviation": "east",
                  "recoveryServicesGeo": "rxe",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "ussecwest": {
                  "abbreviation": "west",
                  "recoveryServicesGeo": "rxw",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                }
              }
            },
            "$fxv#1": {
              "actionGroups": "ag",
              "applicationGroups": "vdag",
              "applicationInsights": "appi",
              "appServicePlans": "asp",
              "automationAccounts": "aa",
              "availabilitySets": "avail",
              "azureFirewalls": "afw",
              "bastionHosts": "bas",
              "computeGallieries": "cg",
              "dataCollectionEndpoints": "dce",
              "dataCollectionRuleAssociations": "dcra",
              "dataCollectionRules": "dcr",
              "diagnosticSettings": "diag",
              "diskAccesses": "da",
              "diskEncryptionSets": "des",
              "disks": "disk",
              "firewallPolicies": "afwp",
              "functionApps": "func",
              "hostPools": "vdpool",
              "ipConfigurations": "ipconf",
              "keyVaults": "kv",
              "logAnalyticsWorkspaces": "log",
              "netAppAccounts": "naa",
              "netAppCapacityPools": "nacp",
              "networkInterfaces": "nic",
              "networkSecurityGroups": "nsg",
              "networkWatchers": "nw",
              "privateEndpoints": "pe",
              "privateLinkScopes": "pls",
              "publicIPAddresses": "pip",
              "recoveryServicesVaults": "rsv",
              "remoteApplicationGroups": "vdag",
              "resourceGroups": "rg",
              "routeTables": "rt",
              "scalingPlans": "vdscaling",
              "storageAccounts": "st",
              "subnets": "snet",
              "userAssignedIdentities": "id",
              "virtualMachines": "vm",
              "virtualNetworks": "vnet",
              "workspaces": "vdws"
            },
            "locations": "[variables('$fxv#0')[environment().name]]",
            "locationAbbreviation": "[variables('locations')[parameters('location')].abbreviation]",
            "resourceAbbreviations": "[variables('$fxv#1')]",
            "namingConvention": "[format('{0}-{1}{2}-{3}-{4}-{5}', toLower(parameters('resourcePrefix')), if(empty(parameters('stampIndex')), '', format('{0}-', parameters('stampIndex'))), parameters('tokens').resource, parameters('networkName'), variables('locationAbbreviation'), parameters('environmentAbbreviation'))]",
            "namingConvention_Service": "[format('{0}-{1}{2}-{3}-{4}-{5}-{6}', toLower(parameters('resourcePrefix')), if(empty(parameters('stampIndex')), '', format('{0}-', parameters('stampIndex'))), parameters('tokens').resource, parameters('networkName'), parameters('tokens').service, variables('locationAbbreviation'), parameters('environmentAbbreviation'))]",
            "names": {
              "actionGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').actionGroups)]",
              "applicationGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, format('{0}-desktop', variables('resourceAbbreviations').applicationGroups))]",
              "applicationInsights": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').applicationInsights)]",
              "appServicePlan": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').appServicePlans)]",
              "automationAccount": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').automationAccounts)]",
              "automationAccountDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
              "automationAccountNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
              "automationAccountPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
              "availabilitySet": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').availabilitySets)]",
              "azureFirewall": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').azureFirewalls)]",
              "azureFirewallClientPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), parameters('tokens').service, format('client-{0}', variables('resourceAbbreviations').azureFirewalls))]",
              "azureFirewallClientPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-client-{1}', variables('resourceAbbreviations').publicIPAddresses, variables('resourceAbbreviations').azureFirewalls))]",
              "azureFirewallDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').azureFirewalls)]",
              "azureFirewallManagementPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), parameters('tokens').service, format('mgmt-{0}', variables('resourceAbbreviations').azureFirewalls))]",
              "azureFirewallManagementPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-mgmt-{1}', variables('resourceAbbreviations').publicIPAddresses, variables('resourceAbbreviations').azureFirewalls))]",
              "azureFirewallPolicy": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').firewallPolicies)]",
              "bastionHost": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').bastionHosts)]",
              "bastionHostDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
              "bastionHostNetworkSecurityGroup": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkSecurityGroups), parameters('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
              "bastionHostNetworkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').networkSecurityGroups, variables('resourceAbbreviations').bastionHosts))]",
              "bastionHostPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), parameters('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
              "bastionHostPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').publicIPAddresses, variables('resourceAbbreviations').bastionHosts))]",
              "computeGallery": "[replace(replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').computeGallieries), '-', '_')]",
              "dataCollectionEndpoint": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').dataCollectionEndpoints)]",
              "dataCollectionRuleAssociation": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').dataCollectionRuleAssociations)]",
              "dataCollectionRule": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').dataCollectionRules)]",
              "diskAccess": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').diskAccesses)]",
              "diskAccessNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, variables('resourceAbbreviations').diskAccesses)]",
              "diskAccessPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, variables('resourceAbbreviations').diskAccesses)]",
              "diskEncryptionSet": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').diskEncryptionSets)]",
              "functionApp": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').functionApps)]",
              "functionAppNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').functionApps, parameters('tokens').service))]",
              "functionAppPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').functionApps, parameters('tokens').service))]",
              "hostPool": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').hostPools)]",
              "hostPoolDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').hostPools)]",
              "hostPoolNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, variables('resourceAbbreviations').hostPools)]",
              "hostPoolPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, variables('resourceAbbreviations').hostPools)]",
              "keyVault": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').keyVaults), '-', ''), parameters('networkName'), parameters('networkShortName'))]",
              "keyVaultDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').keyVaults, parameters('tokens').service))]",
              "keyVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').keyVaults, parameters('tokens').service))]",
              "keyVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').keyVaults, parameters('tokens').service))]",
              "logAnalyticsWorkspace": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
              "logAnalyticsWorkspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
              "netAppAccountCapacityPool": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').netAppCapacityPools)]",
              "netAppAccount": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').netAppAccounts)]",
              "networkSecurityGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').networkSecurityGroups)]",
              "networkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').networkSecurityGroups)]",
              "networkWatcher": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').networkWatchers)]",
              "networkWatcherFlowLogsNetworkSecurityGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, format('{0}-fl-nsg', variables('resourceAbbreviations').networkWatchers))]",
              "networkWatcherFlowLogsVirtualNetwork": "[replace(variables('namingConvention'), parameters('tokens').resource, format('{0}-fl-vnet', variables('resourceAbbreviations').networkWatchers))]",
              "privateLinkScope": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').privateLinkScopes)]",
              "privateLinkScopeNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, variables('resourceAbbreviations').privateLinkScopes)]",
              "privateLinkScopePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, variables('resourceAbbreviations').privateLinkScopes)]",
              "recoveryServicesVault": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').recoveryServicesVaults)]",
              "recoveryServicesVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, variables('resourceAbbreviations').recoveryServicesVaults)]",
              "recoveryServicesVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, variables('resourceAbbreviations').recoveryServicesVaults)]",
              "resourceGroup": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').resourceGroups)]",
              "routeTable": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').routeTables)]",
              "scalingPlan": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').scalingPlans)]",
              "scalingPlanDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').scalingPlans)]",
              "storageAccount": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').storageAccounts), parameters('networkName'), parameters('networkShortName'))]",
              "storageAccountDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, variables('resourceAbbreviations').storageAccounts))]",
              "storageAccountBlobNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-blob', variables('resourceAbbreviations').storageAccounts))]",
              "storageAccountFileNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-file', variables('resourceAbbreviations').storageAccounts))]",
              "storageAccountQueueNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-queue', variables('resourceAbbreviations').storageAccounts))]",
              "storageAccountTableNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-table', variables('resourceAbbreviations').storageAccounts))]",
              "storageAccountBlobPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-blob', variables('resourceAbbreviations').storageAccounts))]",
              "storageAccountFilePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-file', variables('resourceAbbreviations').storageAccounts))]",
              "storageAccountQueuePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-queue', variables('resourceAbbreviations').storageAccounts))]",
              "storageAccountTablePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-table', variables('resourceAbbreviations').storageAccounts))]",
              "subnet": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').subnets)]",
              "userAssignedIdentity": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').userAssignedIdentities)]",
              "virtualMachine": "[replace(replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').virtualMachines), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), '-', '')]",
              "virtualMachineDisk": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').disks), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, variables('resourceAbbreviations').virtualMachines))]",
              "virtualMachineNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, variables('resourceAbbreviations').virtualMachines))]",
              "virtualMachineNetworkInterfaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}-{2}', parameters('tokens').service, variables('resourceAbbreviations').networkInterfaces, variables('resourceAbbreviations').virtualMachines))]",
              "virtualNetwork": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').virtualNetworks)]",
              "virtualNetworkDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').virtualNetworks)]",
              "workspaceFeed": "[replace(replace(variables('namingConvention'), parameters('tokens').resource, format('{0}-feed', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
              "workspaceFeedDiagnosticSetting": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-feed', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
              "workspaceFeedNetworkInterface": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-feed', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
              "workspaceFeedPrivateEndpoint": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-feed', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
              "workspaceGlobal": "[replace(replace(variables('namingConvention'), parameters('tokens').resource, format('{0}-global', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
              "workspaceGlobalDiagnosticSetting": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-global', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
              "workspaceGlobalNetworkInterface": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-global', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
              "workspaceGlobalPrivateEndpoint": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-global', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]"
            }
          },
          "resources": [],
          "outputs": {
            "locations": {
              "type": "object",
              "value": "[variables('locations')]"
            },
            "names": {
              "type": "object",
              "value": "[variables('names')]"
            },
            "resourceAbbreviations": {
              "type": "object",
              "value": "[variables('resourceAbbreviations')]"
            },
            "tokens": {
              "type": "object",
              "value": "[parameters('tokens')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "additionalSubnets": {
            "value": "[union(variables('subnets').avdControlPlane, variables('subnets').azureNetAppFiles, variables('subnets').functionApp)]"
          },
          "deployActivityLogDiagnosticSetting": {
            "value": "[parameters('deployActivityLogDiagnosticSetting')]"
          },
          "deployDefender": {
            "value": "[parameters('deployDefender')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "deployNetworkWatcherTrafficAnalytics": {
            "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
          },
          "deployPolicy": {
            "value": "[parameters('deployPolicy')]"
          },
          "emailSecurityContact": {
            "value": "[parameters('emailSecurityContact')]"
          },
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "firewallResourceId": {
            "value": "[parameters('hubAzureFirewallResourceId')]"
          },
          "hubVirtualNetworkResourceId": {
            "value": "[parameters('hubVirtualNetworkResourceId')]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "keyVaultDiagnosticLogs": {
            "value": "[parameters('keyVaultDiagnosticsLogs')]"
          },
          "keyVaultDiagnosticMetrics": {
            "value": "[parameters('keyVaultDiagnosticMetrics')]"
          },
          "location": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[parameters('operationsLogAnalyticsWorkspaceResourceId')]"
          },
          "logStorageSkuName": {
            "value": "[parameters('logStorageSkuName')]"
          },
          "networkInterfaceDiagnosticsMetrics": {
            "value": "[parameters('networkInterfaceDiagnosticsMetrics')]"
          },
          "networkSecurityGroupDiagnosticsLogs": {
            "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
          },
          "networkSecurityGroupRules": {
            "value": "[parameters('networkSecurityGroupRules')]"
          },
          "networkWatcherFlowLogsRetentionDays": {
            "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
          },
          "networkWatcherFlowLogsType": {
            "value": "[parameters('networkWatcherFlowLogsType')]"
          },
          "networkWatcherResourceId": {
            "value": "[parameters('networkWatcherResourceId')]"
          },
          "policy": {
            "value": "[parameters('policy')]"
          },
          "stampIndex": {
            "value": "[string(parameters('stampIndex'))]"
          },
          "subnetAddressPrefix": {
            "value": "[parameters('subnetAddressPrefixes')[0]]"
          },
          "subnetName": {
            "value": "AvdSessionHosts"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualNetworkAddressPrefix": {
            "value": "[parameters('virtualNetworkAddressPrefixes')[0]]"
          },
          "virtualNetworkDiagnosticsLogs": {
            "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
          },
          "virtualNetworkDiagnosticsMetrics": {
            "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
          },
          "windowsAdministratorsGroupMembership": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "workloadName": {
            "value": "avd"
          },
          "workloadShortName": {
            "value": "avd"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "16182588157013041427"
            }
          },
          "parameters": {
            "additionalSubnets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of additional subnets to support the tier3 workload."
              }
            },
            "deployActivityLogDiagnosticSetting": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy a diagnostic setting for the Activity Log."
              }
            },
            "deployDefender": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy Defender for Cloud."
              }
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "The suffix to append to the deployment name. It defaults to the current UTC date and time."
              }
            },
            "deployNetworkWatcherTrafficAnalytics": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "When set to true, deploys Network Watcher Traffic Analytics. It defaults to \"false\"."
              }
            },
            "deployPolicy": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy a policy assignment."
              }
            },
            "emailSecurityContact": {
              "type": "string",
              "metadata": {
                "description": "The email address to use for Defender for Cloud notifications."
              }
            },
            "environmentAbbreviation": {
              "type": "string",
              "defaultValue": "dev",
              "allowedValues": [
                "dev",
                "prod",
                "test"
              ],
              "metadata": {
                "description": "The abbreviation for the environment."
              }
            },
            "firewallResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Firewall in the HUB."
              }
            },
            "hubVirtualNetworkResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the HUB Virtual Network."
              }
            },
            "identifier": {
              "type": "string",
              "maxLength": 3,
              "metadata": {
                "description": "The identifier for the resource names. This value should represent the workload, project, or business unit."
              }
            },
            "keyVaultDiagnosticLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AuditEvent",
                  "enabled": true
                },
                {
                  "category": "AzurePolicyEvaluationDetails",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Key Vault Diagnostic Logs categories to collect. See \"https://learn.microsoft.com/en-us/azure/key-vault/general/logging?tabs=Vault\" for valid values."
              }
            },
            "keyVaultDiagnosticMetrics": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AllMetrics",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "The Key Vault Diagnostic Metrics to collect. See the following URL for valid settings: \"https://learn.microsoft.com/azure/key-vault/general/logging?tabs=Vault\"."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location for the deployment. It defaults to the location of the deployment."
              }
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics Workspace to use for log storage."
              }
            },
            "logStorageSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
              }
            },
            "networkInterfaceDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AllMetrics",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of metrics to enable on the diagnostic setting for network interfaces."
              }
            },
            "networkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Network Security Group diagnostic logs to apply to the workload Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
              }
            },
            "networkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The rules to apply to the Network Security Group."
              }
            },
            "networkWatcherFlowLogsRetentionDays": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "The number of days to retain Network Watcher Flow Logs. It defaults to \"30\"."
              }
            },
            "networkWatcherFlowLogsType": {
              "type": "string",
              "defaultValue": "VirtualNetwork",
              "allowedValues": [
                "NetworkSecurityGroup",
                "VirtualNetwork"
              ],
              "metadata": {
                "description": "When set to \"true\", enables Virtual Network Flow Logs. It defaults to \"true\" as its required by MCSB."
              }
            },
            "networkWatcherResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource ID for an existing network watcher for the desired deployment location. Only one network watcher per location can exist in a subscription. The value can be left empty to create a new network watcher resource."
              }
            },
            "policy": {
              "type": "string",
              "defaultValue": "NISTRev4",
              "metadata": {
                "description": "The policy to assign to the workload."
              }
            },
            "stampIndex": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The stamp index allows for multiple AVD stamps with the same business unit or project to support different use cases."
              }
            },
            "subnetAddressPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The address prefix for the workload subnet."
              }
            },
            "subnetName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The custom name for the workload subnet if the naming convention is not desired. Subnets are child resources and do not require a unique name between virtual networks, only within the same virtual network."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The tags to apply to the resources."
              }
            },
            "virtualNetworkAddressPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The address prefix for the workload Virtual Network."
              }
            },
            "virtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "VMProtectionAlerts",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "The diagnostic logs to apply to the workload Virtual Network."
              }
            },
            "virtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AllMetrics",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "The metrics to monitor for the workload Virtual Network."
              }
            },
            "windowsAdministratorsGroupMembership": {
              "type": "string",
              "defaultValue": "xadmin",
              "metadata": {
                "description": "The local administrator username for Windows virtual machines. This value is needed if you plan to deploy the following Azure Policy initiatives: CMMC Level 3, DoD Impact Level 5, or NIST SP 800-53 Rev. 4 It defaults to \"xadmin\"."
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "tier3",
              "minLength": 1,
              "maxLength": 10,
              "metadata": {
                "description": "The name for the workload."
              }
            },
            "workloadShortName": {
              "type": "string",
              "defaultValue": "t3",
              "minLength": 1,
              "maxLength": 3,
              "metadata": {
                "description": "The short name for the workload."
              }
            }
          },
          "variables": {
            "hubResourceGroupName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
            "hubSubscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
            "subscriptionId": "[subscription().subscriptionId]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networks": {
                    "value": [
                      {
                        "name": "[parameters('workloadName')]",
                        "shortName": "[parameters('workloadShortName')]",
                        "deployUniqueResources": false,
                        "subscriptionId": "[variables('subscriptionId')]",
                        "networkWatcherResourceId": "[parameters('networkWatcherResourceId')]",
                        "nsgDiagLogs": "[parameters('networkSecurityGroupDiagnosticsLogs')]",
                        "nsgRules": "[parameters('networkSecurityGroupRules')]",
                        "vnetAddressPrefix": "[parameters('virtualNetworkAddressPrefix')]",
                        "vnetDiagLogs": "[parameters('virtualNetworkDiagnosticsLogs')]",
                        "vnetDiagMetrics": "[parameters('virtualNetworkDiagnosticsMetrics')]",
                        "subnetAddressPrefix": "[parameters('subnetAddressPrefix')]"
                      }
                    ]
                  },
                  "resourcePrefix": {
                    "value": "[parameters('identifier')]"
                  },
                  "stampIndex": {
                    "value": "[parameters('stampIndex')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "1480438041570891919"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networks": {
                      "type": "array"
                    },
                    "resourcePrefix": {
                      "type": "string"
                    },
                    "stampIndex": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "$fxv#0": "1.0.0",
                    "environmentName": {
                      "dev": "Development",
                      "prod": "Production",
                      "test": "Test"
                    },
                    "mlzTags": {
                      "environment": "[variables('environmentName')[parameters('environmentAbbreviation')]]",
                      "landingZoneName": "MissionLandingZone",
                      "landingZoneVersion": "[variables('$fxv#0')]",
                      "resourcePrefix": "[parameters('resourcePrefix')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "namingConventions",
                        "count": "[length(parameters('networks'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('naming-convention-{0}-{1}', parameters('networks')[copyIndex()].shortName, parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "environmentAbbreviation": {
                            "value": "[parameters('environmentAbbreviation')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "networkName": {
                            "value": "[parameters('networks')[copyIndex()].name]"
                          },
                          "networkShortName": {
                            "value": "[parameters('networks')[copyIndex()].shortName]"
                          },
                          "resourcePrefix": {
                            "value": "[parameters('resourcePrefix')]"
                          },
                          "stampIndex": {
                            "value": "[parameters('stampIndex')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "9228782132572352624"
                            }
                          },
                          "parameters": {
                            "environmentAbbreviation": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "networkName": {
                              "type": "string"
                            },
                            "networkShortName": {
                              "type": "string"
                            },
                            "resourcePrefix": {
                              "type": "string"
                            },
                            "stampIndex": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "tokens": {
                              "type": "object",
                              "defaultValue": {
                                "purpose": "purpose_token",
                                "resource": "resource_token",
                                "service": "service_token"
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": {
                              "AzureChina": {
                                "chinaeast": {
                                  "abbreviation": "cne",
                                  "recoveryServicesGeo": "sha",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinaeast2": {
                                  "abbreviation": "cne2",
                                  "recoveryServicesGeo": "sha2",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinanorth": {
                                  "abbreviation": "cnn",
                                  "recoveryServicesGeo": "bjb",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinanorth2": {
                                  "abbreviation": "cnn2",
                                  "recoveryServicesGeo": "bjb2",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                }
                              },
                              "AzureCloud": {
                                "australiacentral": {
                                  "abbreviation": "auc",
                                  "recoveryServicesGeo": "acl",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiacentral2": {
                                  "abbreviation": "auc2",
                                  "recoveryServicesGeo": "acl2",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiaeast": {
                                  "abbreviation": "aue",
                                  "recoveryServicesGeo": "ae",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiasoutheast": {
                                  "abbreviation": "ause",
                                  "recoveryServicesGeo": "ase",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "brazilsouth": {
                                  "abbreviation": "brs",
                                  "recoveryServicesGeo": "brs",
                                  "timeDifference": "-3:00",
                                  "timeZone": "E. South America Standard Time"
                                },
                                "brazilsoutheast": {
                                  "abbreviation": "brse",
                                  "recoveryServicesGeo": "bse",
                                  "timeDifference": "-3:00",
                                  "timeZone": "E. South America Standard Time"
                                },
                                "canadacentral": {
                                  "abbreviation": "cac",
                                  "recoveryServicesGeo": "cnc",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "canadaeast": {
                                  "abbreviation": "cae",
                                  "recoveryServicesGeo": "cne",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "centralindia": {
                                  "abbreviation": "inc",
                                  "recoveryServicesGeo": "inc",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "centralus": {
                                  "abbreviation": "usc",
                                  "recoveryServicesGeo": "cus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "eastasia": {
                                  "abbreviation": "ase",
                                  "recoveryServicesGeo": "ea",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "eastus": {
                                  "abbreviation": "use",
                                  "recoveryServicesGeo": "eus",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "eastus2": {
                                  "abbreviation": "use2",
                                  "recoveryServicesGeo": "eus2",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "francecentral": {
                                  "abbreviation": "frc",
                                  "recoveryServicesGeo": "frc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "francesouth": {
                                  "abbreviation": "frs",
                                  "recoveryServicesGeo": "frs",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "germanynorth": {
                                  "abbreviation": "den",
                                  "recoveryServicesGeo": "gn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "germanywestcentral": {
                                  "abbreviation": "dewc",
                                  "recoveryServicesGeo": "gwc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "israelcentral": {
                                  "abbreviation": "ilc",
                                  "recoveryServicesGeo": "ilc",
                                  "timeDifference": "+2:00",
                                  "timeZone": "Israel Standard Time"
                                },
                                "italynorth": {
                                  "abbreviation": "itn",
                                  "recoveryServicesGeo": "itn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "japaneast": {
                                  "abbreviation": "jpe",
                                  "recoveryServicesGeo": "jpe",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Tokyo Standard Time"
                                },
                                "japanwest": {
                                  "abbreviation": "jpw",
                                  "recoveryServicesGeo": "jpw",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Tokyo Standard Time"
                                },
                                "jioindiacentral": {
                                  "abbreviation": "injc",
                                  "recoveryServicesGeo": "jic",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "jioindiawest": {
                                  "abbreviation": "injw",
                                  "recoveryServicesGeo": "jiw",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "koreacentral": {
                                  "abbreviation": "krc",
                                  "recoveryServicesGeo": "krc",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Korea Standard Time"
                                },
                                "koreasouth": {
                                  "abbreviation": "krs",
                                  "recoveryServicesGeo": "krs",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Korea Standard Time"
                                },
                                "northcentralus": {
                                  "abbreviation": "usnc",
                                  "recoveryServicesGeo": "ncus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "northeurope": {
                                  "abbreviation": "eun",
                                  "recoveryServicesGeo": "ne",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "norwayeast": {
                                  "abbreviation": "noe",
                                  "recoveryServicesGeo": "nwe",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "norwaywest": {
                                  "abbreviation": "now",
                                  "recoveryServicesGeo": "nww",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "polandcentral": {
                                  "abbreviation": "plc",
                                  "recoveryServicesGeo": "plc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "qatarcentral": {
                                  "abbreviation": "qac",
                                  "recoveryServicesGeo": "qac",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "southafricanorth": {
                                  "abbreviation": "zan",
                                  "recoveryServicesGeo": "san",
                                  "timeDifference": "+2:00",
                                  "timeZone": "South Africa Standard Time"
                                },
                                "southafricawest": {
                                  "abbreviation": "zaw",
                                  "recoveryServicesGeo": "saw",
                                  "timeDifference": "+2:00",
                                  "timeZone": "South Africa Standard Time"
                                },
                                "southcentralus": {
                                  "abbreviation": "ussc",
                                  "recoveryServicesGeo": "scus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "southeastasia": {
                                  "abbreviation": "asse",
                                  "recoveryServicesGeo": "sea",
                                  "timeDifference": "+8:00",
                                  "timeZone": "Singapore Standard Time"
                                },
                                "southindia": {
                                  "abbreviation": "ins",
                                  "recoveryServicesGeo": "ins",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "swedencentral": {
                                  "abbreviation": "sec",
                                  "recoveryServicesGeo": "sdc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "switzerlandnorth": {
                                  "abbreviation": "chn",
                                  "recoveryServicesGeo": "szn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "switzerlandwest": {
                                  "abbreviation": "chw",
                                  "recoveryServicesGeo": "szw",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "uaecentral": {
                                  "abbreviation": "aec",
                                  "recoveryServicesGeo": "uac",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "uaenorth": {
                                  "abbreviation": "aen",
                                  "recoveryServicesGeo": "uan",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "uksouth": {
                                  "abbreviation": "uks",
                                  "recoveryServicesGeo": "uks",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "ukwest": {
                                  "abbreviation": "ukw",
                                  "recoveryServicesGeo": "ukw",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "westcentralus": {
                                  "abbreviation": "uswc",
                                  "recoveryServicesGeo": "wcus",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                },
                                "westeurope": {
                                  "abbreviation": "euw",
                                  "recoveryServicesGeo": "we",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "westindia": {
                                  "abbreviation": "inw",
                                  "recoveryServicesGeo": "inw",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "westus": {
                                  "abbreviation": "usw",
                                  "recoveryServicesGeo": "wus",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                },
                                "westus2": {
                                  "abbreviation": "usw2",
                                  "recoveryServicesGeo": "wus2",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                },
                                "westus3": {
                                  "abbreviation": "usw3",
                                  "recoveryServicesGeo": "wus3",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                }
                              },
                              "AzureUSGovernment": {
                                "usdodcentral": {
                                  "abbreviation": "dodc",
                                  "recoveryServicesGeo": "udc",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "usdodeast": {
                                  "abbreviation": "dode",
                                  "recoveryServicesGeo": "ude",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "usgovarizona": {
                                  "abbreviation": "az",
                                  "recoveryServicesGeo": "uga",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                },
                                "usgovtexas": {
                                  "abbreviation": "tx",
                                  "recoveryServicesGeo": "ugt",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "usgovvirginia": {
                                  "abbreviation": "va",
                                  "recoveryServicesGeo": "ugv",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                }
                              },
                              "USNat": {
                                "usnateast": {
                                  "abbreviation": "east",
                                  "recoveryServicesGeo": "exe",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "usnatwest": {
                                  "abbreviation": "west",
                                  "recoveryServicesGeo": "exw",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                }
                              },
                              "USSec": {
                                "usseceast": {
                                  "abbreviation": "east",
                                  "recoveryServicesGeo": "rxe",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "ussecwest": {
                                  "abbreviation": "west",
                                  "recoveryServicesGeo": "rxw",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                }
                              }
                            },
                            "$fxv#1": {
                              "actionGroups": "ag",
                              "applicationGroups": "vdag",
                              "applicationInsights": "appi",
                              "appServicePlans": "asp",
                              "automationAccounts": "aa",
                              "availabilitySets": "avail",
                              "azureFirewalls": "afw",
                              "bastionHosts": "bas",
                              "computeGallieries": "cg",
                              "dataCollectionEndpoints": "dce",
                              "dataCollectionRuleAssociations": "dcra",
                              "dataCollectionRules": "dcr",
                              "diagnosticSettings": "diag",
                              "diskAccesses": "da",
                              "diskEncryptionSets": "des",
                              "disks": "disk",
                              "firewallPolicies": "afwp",
                              "functionApps": "func",
                              "hostPools": "vdpool",
                              "ipConfigurations": "ipconf",
                              "keyVaults": "kv",
                              "logAnalyticsWorkspaces": "log",
                              "netAppAccounts": "naa",
                              "netAppCapacityPools": "nacp",
                              "networkInterfaces": "nic",
                              "networkSecurityGroups": "nsg",
                              "networkWatchers": "nw",
                              "privateEndpoints": "pe",
                              "privateLinkScopes": "pls",
                              "publicIPAddresses": "pip",
                              "recoveryServicesVaults": "rsv",
                              "remoteApplicationGroups": "vdag",
                              "resourceGroups": "rg",
                              "routeTables": "rt",
                              "scalingPlans": "vdscaling",
                              "storageAccounts": "st",
                              "subnets": "snet",
                              "userAssignedIdentities": "id",
                              "virtualMachines": "vm",
                              "virtualNetworks": "vnet",
                              "workspaces": "vdws"
                            },
                            "locations": "[variables('$fxv#0')[environment().name]]",
                            "locationAbbreviation": "[variables('locations')[parameters('location')].abbreviation]",
                            "resourceAbbreviations": "[variables('$fxv#1')]",
                            "namingConvention": "[format('{0}-{1}{2}-{3}-{4}-{5}', toLower(parameters('resourcePrefix')), if(empty(parameters('stampIndex')), '', format('{0}-', parameters('stampIndex'))), parameters('tokens').resource, parameters('networkName'), variables('locationAbbreviation'), parameters('environmentAbbreviation'))]",
                            "namingConvention_Service": "[format('{0}-{1}{2}-{3}-{4}-{5}-{6}', toLower(parameters('resourcePrefix')), if(empty(parameters('stampIndex')), '', format('{0}-', parameters('stampIndex'))), parameters('tokens').resource, parameters('networkName'), parameters('tokens').service, variables('locationAbbreviation'), parameters('environmentAbbreviation'))]",
                            "names": {
                              "actionGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').actionGroups)]",
                              "applicationGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, format('{0}-desktop', variables('resourceAbbreviations').applicationGroups))]",
                              "applicationInsights": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').applicationInsights)]",
                              "appServicePlan": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').appServicePlans)]",
                              "automationAccount": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').automationAccounts)]",
                              "automationAccountDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                              "automationAccountNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                              "automationAccountPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                              "availabilitySet": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').availabilitySets)]",
                              "azureFirewall": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').azureFirewalls)]",
                              "azureFirewallClientPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), parameters('tokens').service, format('client-{0}', variables('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallClientPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-client-{1}', variables('resourceAbbreviations').publicIPAddresses, variables('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').azureFirewalls)]",
                              "azureFirewallManagementPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), parameters('tokens').service, format('mgmt-{0}', variables('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallManagementPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-mgmt-{1}', variables('resourceAbbreviations').publicIPAddresses, variables('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallPolicy": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').firewallPolicies)]",
                              "bastionHost": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').bastionHosts)]",
                              "bastionHostDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                              "bastionHostNetworkSecurityGroup": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkSecurityGroups), parameters('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                              "bastionHostNetworkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').networkSecurityGroups, variables('resourceAbbreviations').bastionHosts))]",
                              "bastionHostPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), parameters('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                              "bastionHostPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').publicIPAddresses, variables('resourceAbbreviations').bastionHosts))]",
                              "computeGallery": "[replace(replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').computeGallieries), '-', '_')]",
                              "dataCollectionEndpoint": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').dataCollectionEndpoints)]",
                              "dataCollectionRuleAssociation": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').dataCollectionRuleAssociations)]",
                              "dataCollectionRule": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').dataCollectionRules)]",
                              "diskAccess": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').diskAccesses)]",
                              "diskAccessNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, variables('resourceAbbreviations').diskAccesses)]",
                              "diskAccessPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, variables('resourceAbbreviations').diskAccesses)]",
                              "diskEncryptionSet": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').diskEncryptionSets)]",
                              "functionApp": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').functionApps)]",
                              "functionAppNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').functionApps, parameters('tokens').service))]",
                              "functionAppPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').functionApps, parameters('tokens').service))]",
                              "hostPool": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').hostPools)]",
                              "hostPoolDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').hostPools)]",
                              "hostPoolNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, variables('resourceAbbreviations').hostPools)]",
                              "hostPoolPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, variables('resourceAbbreviations').hostPools)]",
                              "keyVault": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').keyVaults), '-', ''), parameters('networkName'), parameters('networkShortName'))]",
                              "keyVaultDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').keyVaults, parameters('tokens').service))]",
                              "keyVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').keyVaults, parameters('tokens').service))]",
                              "keyVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-{1}', variables('resourceAbbreviations').keyVaults, parameters('tokens').service))]",
                              "logAnalyticsWorkspace": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
                              "logAnalyticsWorkspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
                              "netAppAccountCapacityPool": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').netAppCapacityPools)]",
                              "netAppAccount": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').netAppAccounts)]",
                              "networkSecurityGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').networkSecurityGroups)]",
                              "networkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').networkSecurityGroups)]",
                              "networkWatcher": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').networkWatchers)]",
                              "networkWatcherFlowLogsNetworkSecurityGroup": "[replace(variables('namingConvention'), parameters('tokens').resource, format('{0}-fl-nsg', variables('resourceAbbreviations').networkWatchers))]",
                              "networkWatcherFlowLogsVirtualNetwork": "[replace(variables('namingConvention'), parameters('tokens').resource, format('{0}-fl-vnet', variables('resourceAbbreviations').networkWatchers))]",
                              "privateLinkScope": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').privateLinkScopes)]",
                              "privateLinkScopeNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, variables('resourceAbbreviations').privateLinkScopes)]",
                              "privateLinkScopePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, variables('resourceAbbreviations').privateLinkScopes)]",
                              "recoveryServicesVault": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').recoveryServicesVaults)]",
                              "recoveryServicesVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, variables('resourceAbbreviations').recoveryServicesVaults)]",
                              "recoveryServicesVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, variables('resourceAbbreviations').recoveryServicesVaults)]",
                              "resourceGroup": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').resourceGroups)]",
                              "routeTable": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').routeTables)]",
                              "scalingPlan": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').scalingPlans)]",
                              "scalingPlanDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').scalingPlans)]",
                              "storageAccount": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').storageAccounts), parameters('networkName'), parameters('networkShortName'))]",
                              "storageAccountDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, variables('resourceAbbreviations').storageAccounts))]",
                              "storageAccountBlobNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-blob', variables('resourceAbbreviations').storageAccounts))]",
                              "storageAccountFileNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-file', variables('resourceAbbreviations').storageAccounts))]",
                              "storageAccountQueueNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-queue', variables('resourceAbbreviations').storageAccounts))]",
                              "storageAccountTableNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-table', variables('resourceAbbreviations').storageAccounts))]",
                              "storageAccountBlobPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-blob', variables('resourceAbbreviations').storageAccounts))]",
                              "storageAccountFilePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-file', variables('resourceAbbreviations').storageAccounts))]",
                              "storageAccountQueuePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-queue', variables('resourceAbbreviations').storageAccounts))]",
                              "storageAccountTablePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-table', variables('resourceAbbreviations').storageAccounts))]",
                              "subnet": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').subnets)]",
                              "userAssignedIdentity": "[replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').userAssignedIdentities)]",
                              "virtualMachine": "[replace(replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').virtualMachines), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), '-', '')]",
                              "virtualMachineDisk": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').disks), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, variables('resourceAbbreviations').virtualMachines))]",
                              "virtualMachineNetworkInterface": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-{1}', parameters('tokens').service, variables('resourceAbbreviations').virtualMachines))]",
                              "virtualMachineNetworkInterfaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-{1}-{2}', parameters('tokens').service, variables('resourceAbbreviations').networkInterfaces, variables('resourceAbbreviations').virtualMachines))]",
                              "virtualNetwork": "[replace(variables('namingConvention'), parameters('tokens').resource, variables('resourceAbbreviations').virtualNetworks)]",
                              "virtualNetworkDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, variables('resourceAbbreviations').virtualNetworks)]",
                              "workspaceFeed": "[replace(replace(variables('namingConvention'), parameters('tokens').resource, format('{0}-feed', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceFeedDiagnosticSetting": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-feed', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceFeedNetworkInterface": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-feed', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceFeedPrivateEndpoint": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-feed', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobal": "[replace(replace(variables('namingConvention'), parameters('tokens').resource, format('{0}-global', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobalDiagnosticSetting": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), parameters('tokens').service, format('{0}-global', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobalNetworkInterface": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').networkInterfaces), parameters('tokens').service, format('{0}-global', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]",
                              "workspaceGlobalPrivateEndpoint": "[replace(replace(replace(variables('namingConvention_Service'), parameters('tokens').resource, variables('resourceAbbreviations').privateEndpoints), parameters('tokens').service, format('{0}-global', variables('resourceAbbreviations').workspaces)), format('-{0}', parameters('stampIndex')), '')]"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "locations": {
                              "type": "object",
                              "value": "[variables('locations')]"
                            },
                            "names": {
                              "type": "object",
                              "value": "[variables('names')]"
                            },
                            "resourceAbbreviations": {
                              "type": "object",
                              "value": "[variables('resourceAbbreviations')]"
                            },
                            "tokens": {
                              "type": "object",
                              "value": "[parameters('tokens')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('private-dns-zones-{0}', parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "locations": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[0].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locations.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "11668643656550300659"
                            }
                          },
                          "parameters": {
                            "locations": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneNames_Backup",
                                "count": "[length(items(parameters('locations')))]",
                                "input": "[format('privatelink.{0}.backup.windowsazure.{1}', items(parameters('locations'))[copyIndex('privateDnsZoneNames_Backup')].value.recoveryServicesGeo, coalesce(variables('privateDnsZoneSuffixes_Backup')[environment().name], variables('cloudSuffix')))]"
                              }
                            ],
                            "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]",
                            "privateDnsZoneNames": "[union(createArray(format('privatelink.agentsvc.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudSuffix'))), format('privatelink.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudSuffix'))), format('privatelink.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureWebSites')[environment().name], format('appservice.{0}', variables('cloudSuffix')))), format('scm.privatelink.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureWebSites')[environment().name], format('appservice.{0}', variables('cloudSuffix')))), format('privatelink.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudSuffix'))), format('privatelink-global.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudSuffix'))), format('privatelink.file.{0}', environment().suffixes.storage), format('privatelink.queue.{0}', environment().suffixes.storage), format('privatelink.table.{0}', environment().suffixes.storage), format('privatelink.blob.{0}', environment().suffixes.storage), format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore')), format('privatelink.monitor.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix'))), format('privatelink.ods.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix'))), format('privatelink.oms.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix'))), format('privatelink{0}', environment().suffixes.sqlServerHostname)), variables('privateDnsZoneNames_Backup'))]",
                            "privateDnsZoneSuffixes_AzureAutomation": {
                              "AzureCloud": "net",
                              "AzureUSGovernment": "us",
                              "USNat": null,
                              "USSec": null
                            },
                            "privateDnsZoneSuffixes_AzureVirtualDesktop": {
                              "AzureCloud": "microsoft.com",
                              "AzureUSGovernment": "azure.us",
                              "USNat": null,
                              "USSec": null
                            },
                            "privateDnsZoneSuffixes_AzureWebSites": {
                              "AzureCloud": "azurewebsites.net",
                              "AzureUSGovernment": "azurewebsites.us",
                              "USNat": null,
                              "USSec": null
                            },
                            "privateDnsZoneSuffixes_Backup": {
                              "AzureCloud": "com",
                              "AzureUSGovernment": "us",
                              "USNat": null,
                              "USSec": null
                            },
                            "privateDnsZoneSuffixes_Monitor": {
                              "AzureCloud": "azure.com",
                              "AzureUSGovernment": "azure.us",
                              "USNat": null,
                              "USSec": null
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "names": {
                              "type": "array",
                              "value": "[variables('privateDnsZoneNames')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[0].shortName, parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "locationProperties": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[0].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locations.value[parameters('location')]]"
                    },
                    "mlzTags": {
                      "type": "object",
                      "value": "[variables('mlzTags')]"
                    },
                    "privateDnsZones": {
                      "type": "array",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
                    },
                    "resourceAbbreviations": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[0].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceAbbreviations.value]"
                    },
                    "tiers": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('networks'))]",
                        "input": {
                          "name": "[parameters('networks')[copyIndex()].name]",
                          "shortName": "[parameters('networks')[copyIndex()].shortName]",
                          "deployUniqueResources": "[parameters('networks')[copyIndex()].deployUniqueResources]",
                          "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                          "networkWatcherResourceId": "[parameters('networks')[copyIndex()].networkWatcherResourceId]",
                          "nsgDiagLogs": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'nsgDiagLogs'), createArray())]",
                          "nsgRules": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'nsgRules'), createArray())]",
                          "vnetAddressPrefix": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'vnetAddressPrefix'), '')]",
                          "vnetDiagLogs": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'vnetDiagLogs'), createArray())]",
                          "vnetDiagMetrics": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'vnetDiagMetrics'), createArray())]",
                          "subnetAddressPrefix": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'subnetAddressPrefix'), '')]",
                          "namingConvention": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[copyIndex()].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
                        }
                      }
                    },
                    "tokens": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[0].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[not(empty(parameters('virtualNetworkAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "name": {
                    "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'network')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "10714136229010174835"
                    }
                  },
                  "parameters": {
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject()), parameters('mlzTags'))]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
                    },
                    "tags": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('virtualNetworkAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "additionalSubnets": {
                    "value": "[parameters('additionalSubnets')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deployUniqueResources": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].deployUniqueResources]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.networkSecurityGroup]"
                  },
                  "networkSecurityGroupRules": {
                    "value": "[parameters('networkSecurityGroupRules')]"
                  },
                  "networkWatcherName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.networkWatcher]"
                  },
                  "networkWatcherResourceId": {
                    "value": "[parameters('networkWatcherResourceId')]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "routeTableName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.routeTable]"
                  },
                  "routeTableRouteNextHopIpAddress": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').ipConfigurations[0].properties.privateIPAddress]"
                  },
                  "subnetAddressPrefix": {
                    "value": "[parameters('subnetAddressPrefix')]"
                  },
                  "subnetName": "[if(empty(parameters('subnetName')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.subnet), createObject('value', parameters('subnetName')))]",
                  "subscriptionId": {
                    "value": "[variables('subscriptionId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualNetworkAddressPrefix": {
                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.virtualNetwork]"
                  },
                  "vNetDnsServers": {
                    "value": "[coalesce(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01'), 'dhcpOptions', 'dnsServers'), createArray())]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "1598313111971784849"
                    }
                  },
                  "parameters": {
                    "additionalSubnets": {
                      "type": "array"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deployUniqueResources": {
                      "type": "bool"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "networkSecurityGroupRules": {
                      "type": "array"
                    },
                    "networkWatcherName": {
                      "type": "string"
                    },
                    "networkWatcherResourceId": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "routeTableName": {
                      "type": "string"
                    },
                    "routeTableRouteNextHopIpAddress": {
                      "type": "string"
                    },
                    "subnetAddressPrefix": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "vNetDnsServers": {
                      "type": "array"
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "additionalSubnets": {
                            "value": "[parameters('additionalSubnets')]"
                          },
                          "deployUniqueResources": {
                            "value": "[parameters('deployUniqueResources')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          },
                          "networkSecurityGroupRules": {
                            "value": "[parameters('networkSecurityGroupRules')]"
                          },
                          "networkWatcherName": {
                            "value": "[parameters('networkWatcherName')]"
                          },
                          "networkWatcherResourceId": {
                            "value": "[parameters('networkWatcherResourceId')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "routeTableName": {
                            "value": "[parameters('routeTableName')]"
                          },
                          "routeTableRouteNextHopIpAddress": {
                            "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                          },
                          "subnetAddressPrefix": {
                            "value": "[parameters('subnetAddressPrefix')]"
                          },
                          "subnetName": {
                            "value": "[parameters('subnetName')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualNetworkAddressPrefix": {
                            "value": "[parameters('virtualNetworkAddressPrefix')]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "vNetDnsServers": {
                            "value": "[parameters('vNetDnsServers')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "3149746153749859905"
                            }
                          },
                          "parameters": {
                            "additionalSubnets": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "deployUniqueResources": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            },
                            "networkSecurityGroupRules": {
                              "type": "array"
                            },
                            "networkWatcherName": {
                              "type": "string"
                            },
                            "networkWatcherResourceId": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "routeTableName": {
                              "type": "string"
                            },
                            "routeTableRouteNextHopIpAddress": {
                              "type": "string"
                            },
                            "subnetAddressPrefix": {
                              "type": "string"
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "vNetDnsServers": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "delegations": {
                              "AzureNetAppFiles": [
                                {
                                  "name": "Microsoft.Netapp.volumes",
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/delegations', parameters('virtualNetworkName'), 'AzureNetAppFiles', 'delegation')]",
                                  "properties": {
                                    "serviceName": "Microsoft.Netapp/volumes"
                                  },
                                  "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                                }
                              ],
                              "FunctionAppOutbound": [
                                {
                                  "name": "Microsoft.Web/sites",
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/delegations', parameters('virtualNetworkName'), 'FunctionAppOutbound', 'delegation')]",
                                  "properties": {
                                    "serviceName": "Microsoft.Web/serverfarms"
                                  },
                                  "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                                }
                              ]
                            },
                            "subnets": "[union(createArray(createObject('name', parameters('subnetName'), 'properties', createObject('addressPrefix', parameters('subnetAddressPrefix')))), parameters('additionalSubnets'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkSecurityGroup",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkSecurityGroupName')]"
                                  },
                                  "securityRules": {
                                    "value": "[parameters('networkSecurityGroupRules')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "2848497778353660105"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "securityRules": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkSecurityGroups",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkSecurityGroups'), createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "securityRules": "[parameters('securityRules')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "routeTable",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "disableBgpRoutePropagation": {
                                    "value": true
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('routeTableName')]"
                                  },
                                  "routeNextHopIpAddress": {
                                    "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "914277702978655849"
                                    }
                                  },
                                  "parameters": {
                                    "disableBgpRoutePropagation": {
                                      "type": "bool"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "routeAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "0.0.0.0/0"
                                    },
                                    "routeName": {
                                      "type": "string",
                                      "defaultValue": "default_route"
                                    },
                                    "routeNextHopIpAddress": {
                                      "type": "string"
                                    },
                                    "routeNextHopType": {
                                      "type": "string",
                                      "defaultValue": "VirtualAppliance"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/routeTables",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/routeTables'), createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                        "routes": [
                                          {
                                            "name": "[parameters('routeName')]",
                                            "properties": {
                                              "addressPrefix": "[parameters('routeAddressPrefix')]",
                                              "nextHopIpAddress": "[parameters('routeNextHopIpAddress')]",
                                              "nextHopType": "[parameters('routeNextHopType')]"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "condition": "[and(empty(parameters('networkWatcherResourceId')), parameters('deployUniqueResources'))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkWatcher",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkWatcherName')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "12263348954482410677"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkWatchers",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkWatchers'), createObject()), parameters('mlzTags'))]",
                                      "properties": {}
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "virtualNetwork",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "addressPrefix": {
                                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('virtualNetworkName')]"
                                  },
                                  "subnets": {
                                    "copy": [
                                      {
                                        "name": "value",
                                        "count": "[length(variables('subnets'))]",
                                        "input": "[createObject('name', variables('subnets')[copyIndex('value')].name, 'properties', createObject('addressPrefix', variables('subnets')[copyIndex('value')].properties.addressPrefix, 'delegations', coalesce(tryGet(variables('delegations'), variables('subnets')[copyIndex('value')].name), createArray()), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value), 'routeTable', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value), 'privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled'))]"
                                      }
                                    ]
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "vNetDnsServers": {
                                    "value": "[parameters('vNetDnsServers')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "1589827233480778884"
                                    }
                                  },
                                  "parameters": {
                                    "addressPrefix": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "subnets": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "vNetDnsServers": {
                                      "type": "array"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/virtualNetworks'), createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "addressSpace": {
                                          "addressPrefixes": [
                                            "[parameters('addressPrefix')]"
                                          ]
                                        },
                                        "subnets": "[parameters('subnets')]",
                                        "dhcpOptions": "[if(empty(parameters('vNetDnsServers')), null(), createObject('dnsServers', parameters('vNetDnsServers')))]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "addressPrefix": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').addressSpace.addressPrefixes[0]]"
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "value": "[parameters('vNetDnsServers')]"
                                    },
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    },
                                    "subnets": {
                                      "type": "array",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').subnets]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup')]",
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkWatcher')]",
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'routeTable')]"
                              ]
                            }
                          ],
                          "outputs": {
                            "networkSecurityGroupName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.name.value]"
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                            },
                            "subnets": {
                              "type": "array",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value]"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.addressPrefix.value]"
                            },
                            "virtualNetworkName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.name.value]"
                            },
                            "virtualNetworkResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-spoke-peering-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "hubVirtualNetworkResourceId": {
                            "value": "[parameters('hubVirtualNetworkResourceId')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "spokeShortName": {
                            "value": "[parameters('workloadShortName')]"
                          },
                          "spokeVirtualNetworkName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "11632352908435239806"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "hubVirtualNetworkResourceId": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "spokeShortName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkName": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('peer-{0}-to-hub-{1}', parameters('spokeShortName'), parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                                  },
                                  "virtualNetworkName": {
                                    "value": "[parameters('spokeVirtualNetworkName')]"
                                  },
                                  "virtualNetworkPeerName": {
                                    "value": "[format('to-{0}', split(parameters('hubVirtualNetworkResourceId'), '/')[8])]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "2683307436784299982"
                                    }
                                  },
                                  "parameters": {
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    },
                                    "virtualNetworkName": {
                                      "type": "string"
                                    },
                                    "virtualNetworkPeerName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('virtualNetworkPeerName'))]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-hub-peering-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "hubVirtualNetworkName": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]"
                          },
                          "resourceGroupName": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]"
                          },
                          "spokeShortName": {
                            "value": "[parameters('workloadShortName')]"
                          },
                          "spokeVirtualNetworkResourceId": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value]"
                          },
                          "subscriptionId": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "9320925578113753664"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "hubVirtualNetworkName": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "spokeShortName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkResourceId": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('peer-hub-to-{0}-{1}', parameters('spokeShortName'), parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('spokeVirtualNetworkResourceId')]"
                                  },
                                  "virtualNetworkName": {
                                    "value": "[parameters('hubVirtualNetworkName')]"
                                  },
                                  "virtualNetworkPeerName": {
                                    "value": "[format('to-{0}', split(parameters('spokeVirtualNetworkResourceId'), '/')[8])]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "2683307436784299982"
                                    }
                                  },
                                  "parameters": {
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    },
                                    "virtualNetworkName": {
                                      "type": "string"
                                    },
                                    "virtualNetworkPeerName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('virtualNetworkPeerName'))]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "networkSecurityGroupName": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupName.value]"
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupResourceId.value]"
                    },
                    "subnets": {
                      "type": "array",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value]"
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('virtualNetworkAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vnet-links-{0}-sub-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('hubSubscriptionId')]",
              "resourceGroup": "[variables('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureFirewallSku": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').sku.tier]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "privateDnsZoneNames": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  },
                  "virtualNetworkResourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "virtualNetworkSubscriptionId": {
                    "value": "[variables('subscriptionId')]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "1481145785892942468"
                    }
                  },
                  "parameters": {
                    "azureFirewallSku": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "privateDnsZoneNames": {
                      "type": "array"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "virtualNetworkResourceGroupName": {
                      "type": "string"
                    },
                    "virtualNetworkSubscriptionId": {
                      "type": "string"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[equals(parameters('azureFirewallSku'), 'Basic')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-links-{0}-rg-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneNames": {
                            "value": "[parameters('privateDnsZoneNames')]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "virtualNetworkResourceGroupName": {
                            "value": "[parameters('virtualNetworkResourceGroupName')]"
                          },
                          "virtualNetworkSubscriptionId": {
                            "value": "[parameters('virtualNetworkSubscriptionId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "5725628849440452886"
                            }
                          },
                          "parameters": {
                            "privateDnsZoneNames": {
                              "type": "array"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "virtualNetworkResourceGroupName": {
                              "type": "string"
                            },
                            "virtualNetworkSubscriptionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "virtualNetworkLinks",
                                "count": "[length(parameters('privateDnsZoneNames'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2018-09-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneNames')[copyIndex()], parameters('virtualNetworkName'))]",
                              "location": "global",
                              "properties": {
                                "registrationEnabled": false,
                                "virtualNetwork": {
                                  "id": "[resourceId(parameters('virtualNetworkSubscriptionId'), parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('virtualNetworkAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "resourceAbbreviations": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceAbbreviations.value]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].id]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tier": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
                  },
                  "tokens": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "14464738303390568736"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "resourceAbbreviations": {
                      "type": "object"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "tier": {
                      "type": "object"
                    },
                    "tokens": {
                      "type": "object"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "environmentAbbreviation": {
                            "value": "[parameters('environmentAbbreviation')]"
                          },
                          "keyVaultPrivateDnsZoneResourceId": {
                            "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "resourceAbbreviations": {
                            "value": "[parameters('resourceAbbreviations')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "tier": {
                            "value": "[parameters('tier')]"
                          },
                          "tokens": {
                            "value": "[parameters('tokens')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "13938047256128260542"
                            }
                          },
                          "parameters": {
                            "diskEncryptionKeyExpirationInDays": {
                              "type": "int",
                              "defaultValue": 30
                            },
                            "environmentAbbreviation": {
                              "type": "string"
                            },
                            "keyVaultPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "resourceAbbreviations": {
                              "type": "object"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "tier": {
                              "type": "object"
                            },
                            "tokens": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "keyVaultPrivateEndpointName": "[replace(parameters('tier').namingConvention.keyVaultPrivateEndpoint, parameters('tokens').service, 'cmk')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id))]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.KeyVault/vaults'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "enabledForDeployment": false,
                                "enabledForDiskEncryption": false,
                                "enabledForTemplateDeployment": false,
                                "enablePurgeProtection": true,
                                "enableRbacAuthorization": true,
                                "enableSoftDelete": true,
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "defaultAction": "Deny",
                                  "ipRules": [],
                                  "virtualNetworkRules": []
                                },
                                "publicNetworkAccess": "Disabled",
                                "sku": {
                                  "family": "A",
                                  "name": "premium"
                                },
                                "softDeleteRetentionInDays": "[if(or(equals(parameters('environmentAbbreviation'), 'dev'), equals(parameters('environmentAbbreviation'), 'test')), 7, 90)]",
                                "tenantId": "[subscription().tenantId]"
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[variables('keyVaultPrivateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "customNetworkInterfaceName": "[replace(parameters('tier').namingConvention.keyVaultNetworkInterface, parameters('tokens').service, 'cmk')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('keyVaultPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)))]",
                                      "groupIds": [
                                        "vault"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', variables('keyVaultPrivateEndpointName'), format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName'))]",
                                "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)), 'DiskEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA-HSM",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('keyVaultPrivateEndpointName'), format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)))]",
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName'))]",
                                "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)), 'StorageEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA-HSM",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', variables('keyVaultPrivateEndpointName'), format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)))]",
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName'))]",
                                "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "keyUriWithVersion": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
                            },
                            "keyVaultResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id)))]"
                            },
                            "keyVaultName": {
                              "type": "string",
                              "value": "[format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id))]"
                            },
                            "keyVaultUri": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('tier').namingConvention.keyVault, parameters('tokens').service, 'cmk'), resourceGroup().id))), '2022-07-01').vaultUri]"
                            },
                            "networkInterfaceResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName')), '2023-04-01').networkInterfaces[0].id]"
                            },
                            "storageKeyName": {
                              "type": "string",
                              "value": "StorageEncryptionKey"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "diskEncryptionSetName": {
                            "value": "[parameters('tier').namingConvention.diskEncryptionSet]"
                          },
                          "keyUrl": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyUriWithVersion.value]"
                          },
                          "keyVaultResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "workloadShortName": {
                            "value": "[parameters('workloadShortName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "17859665721688589598"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "diskEncryptionSetName": {
                              "type": "string"
                            },
                            "keyUrl": {
                              "type": "string"
                            },
                            "keyVaultResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "workloadShortName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/diskEncryptionSets",
                              "apiVersion": "2023-04-02",
                              "name": "[parameters('diskEncryptionSetName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), createObject()), parameters('mlzTags'))]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "activeKey": {
                                  "sourceVault": {
                                    "id": "[parameters('keyVaultResourceId')]"
                                  },
                                  "keyUrl": "[parameters('keyUrl')]"
                                },
                                "encryptionType": "EncryptionAtRestWithPlatformAndCustomerKeys",
                                "rotationToLatestKeyVersionEnabled": true
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('assign-role-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')), '2023-04-02', 'full').identity.principalId]"
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceGroup().id]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "18155836748375114276"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-id-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityName": {
                            "value": "[replace(parameters('tier').namingConvention.userAssignedIdentity, format('-{0}', parameters('tokens').service), '')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "18056209937389200392"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('userAssignedIdentityName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject()), parameters('mlzTags'))]"
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                              "name": "[guid(parameters('userAssignedIdentityName'), 'e147488a-f6f5-4113-8e2d-b22465e65bf6', parameters('keyVaultName'))]",
                              "properties": {
                                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2018-11-30').principalId]",
                                "principalType": "ServicePrincipal",
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "diskEncryptionSetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                    },
                    "keyVaultUri": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                    },
                    "keyVaultResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "value": [
                        "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceId.value]"
                      ]
                    },
                    "storageKeyName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('virtualNetworkAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "blobsPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                  },
                  "filesPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.file.{0}', environment().suffixes.storage))]"
                  },
                  "keyVaultUri": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logStorageSkuName": {
                    "value": "[parameters('logStorageSkuName')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "network": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
                  },
                  "queuesPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.queue.{0}', environment().suffixes.storage))]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "serviceToken": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].id]"
                  },
                  "tablesPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.table.{0}', environment().suffixes.storage))]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tier": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "4261099058887946055"
                    }
                  },
                  "parameters": {
                    "blobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "filesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "logStorageSkuName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "network": {
                      "type": "object"
                    },
                    "queuesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tablesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "tier": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "storage",
                      "subscriptionId": "[parameters('network').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "blobsPrivateDnsZoneResourceId": {
                            "value": "[parameters('blobsPrivateDnsZoneResourceId')]"
                          },
                          "filesPrivateDnsZoneResourceId": {
                            "value": "[parameters('filesPrivateDnsZoneResourceId')]"
                          },
                          "keyVaultUri": {
                            "value": "[parameters('keyVaultUri')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "queuesPrivateDnsZoneResourceId": {
                            "value": "[parameters('queuesPrivateDnsZoneResourceId')]"
                          },
                          "serviceToken": {
                            "value": "[parameters('serviceToken')]"
                          },
                          "skuName": {
                            "value": "[parameters('logStorageSkuName')]"
                          },
                          "storageEncryptionKeyName": {
                            "value": "[parameters('storageEncryptionKeyName')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tablesPrivateDnsZoneResourceId": {
                            "value": "[parameters('tablesPrivateDnsZoneResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "tier": {
                            "value": "[parameters('tier')]"
                          },
                          "userAssignedIdentityResourceId": {
                            "value": "[parameters('userAssignedIdentityResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "8021928454882184824"
                            }
                          },
                          "parameters": {
                            "blobsPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "filesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "keyVaultUri": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "queuesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "serviceToken": {
                              "type": "string"
                            },
                            "skuName": {
                              "type": "string"
                            },
                            "storageEncryptionKeyName": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tablesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "tier": {
                              "type": "object"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "subResources": [
                              {
                                "id": "[parameters('blobsPrivateDnsZoneResourceId')]",
                                "nic": "[parameters('tier').namingConvention.storageAccountBlobNetworkInterface]",
                                "pe": "[parameters('tier').namingConvention.storageAccountBlobPrivateEndpoint]"
                              },
                              {
                                "id": "[parameters('filesPrivateDnsZoneResourceId')]",
                                "nic": "[parameters('tier').namingConvention.storageAccountFileNetworkInterface]",
                                "pe": "[parameters('tier').namingConvention.storageAccountFilePrivateEndpoint]"
                              },
                              {
                                "id": "[parameters('queuesPrivateDnsZoneResourceId')]",
                                "nic": "[parameters('tier').namingConvention.storageAccountQueueNetworkInterface]",
                                "pe": "[parameters('tier').namingConvention.storageAccountQueuePrivateEndpoint]"
                              },
                              {
                                "id": "[parameters('tablesPrivateDnsZoneResourceId')]",
                                "nic": "[parameters('tier').namingConvention.storageAccountTableNetworkInterface]",
                                "pe": "[parameters('tier').namingConvention.storageAccountTablePrivateEndpoint]"
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-01-01",
                              "name": "[uniqueString(replace(parameters('tier').namingConvention.storageAccount, parameters('serviceToken'), 'log'), resourceGroup().id)]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject()), parameters('mlzTags'))]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "kind": "StorageV2",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "properties": {
                                "accessTier": "Hot",
                                "allowBlobPublicAccess": false,
                                "allowCrossTenantReplication": false,
                                "allowedCopyScope": "PrivateLink",
                                "allowSharedKeyAccess": false,
                                "defaultToOAuthAuthentication": false,
                                "dnsEndpointType": "Standard",
                                "encryption": {
                                  "identity": {
                                    "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId')]"
                                  },
                                  "keySource": "Microsoft.KeyVault",
                                  "keyvaultproperties": {
                                    "keyvaulturi": "[parameters('keyVaultUri')]",
                                    "keyname": "[parameters('storageEncryptionKeyName')]"
                                  },
                                  "requireInfrastructureEncryption": true,
                                  "services": {
                                    "blob": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "file": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "queue": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "table": {
                                      "keyType": "Account",
                                      "enabled": true
                                    }
                                  }
                                },
                                "minimumTlsVersion": "TLS1_2",
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "virtualNetworkRules": [],
                                  "ipRules": [],
                                  "defaultAction": "Deny"
                                },
                                "publicNetworkAccess": "Disabled",
                                "supportsHttpsTrafficOnly": true
                              }
                            },
                            {
                              "copy": {
                                "name": "privateEndpoints",
                                "count": "[length(variables('subResources'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[variables('subResources')[copyIndex()].pe]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "customNetworkInterfaceName": "[variables('subResources')[copyIndex()].nic]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('subResources')[copyIndex()].pe]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(replace(parameters('tier').namingConvention.storageAccount, parameters('serviceToken'), 'log'), resourceGroup().id))]",
                                      "groupIds": [
                                        "[split(split(variables('subResources')[copyIndex()].id, '/')[8], '.')[1]]"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(replace(parameters('tier').namingConvention.storageAccount, parameters('serviceToken'), 'log'), resourceGroup().id))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneGroups",
                                "count": "[length(variables('subResources'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', variables('subResources')[copyIndex()].pe, uniqueString(replace(parameters('tier').namingConvention.storageAccount, parameters('serviceToken'), 'log'), resourceGroup().id))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[variables('subResources')[copyIndex()].id]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('subResources')[copyIndex()].pe)]",
                                "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(replace(parameters('tier').namingConvention.storageAccount, parameters('serviceToken'), 'log'), resourceGroup().id))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(replace(parameters('tier').namingConvention.storageAccount, parameters('serviceToken'), 'log'), resourceGroup().id))]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "copy": {
                                "count": "[length(variables('subResources'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', variables('subResources')[copyIndex()].pe), '2023-04-01').networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('network').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.networkInterfaceResourceIds.value]"
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('network').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('virtualNetworkAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-diag-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deployActivityLogDiagnosticSetting": {
                    "value": "[parameters('deployActivityLogDiagnosticSetting')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deployNetworkWatcherTrafficAnalytics": {
                    "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                  },
                  "keyVaultDiagnosticLogs": {
                    "value": "[parameters('keyVaultDiagnosticLogs')]"
                  },
                  "keyVaultDiagnosticMetrics": {
                    "value": "[parameters('keyVaultDiagnosticMetrics')]"
                  },
                  "keyVaultName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "networkInterfaceDiagnosticsMetrics": {
                    "value": "[parameters('networkInterfaceDiagnosticsMetrics')]"
                  },
                  "networkInterfaceResourceIds": {
                    "value": "[union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceIds.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceIds.value)]"
                  },
                  "networkSecurityGroupDiagnosticsLogs": {
                    "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupName.value]"
                  },
                  "networkWatcherFlowLogsRetentionDays": {
                    "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                  },
                  "networkWatcherFlowLogsType": {
                    "value": "[parameters('networkWatcherFlowLogsType')]"
                  },
                  "networkWatcherResourceId": {
                    "value": "[parameters('networkWatcherResourceId')]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "serviceToken": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
                  },
                  "storageAccountResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountResourceId.value]"
                  },
                  "tiers": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
                  },
                  "virtualNetworkDiagnosticsLogs": {
                    "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                  },
                  "virtualNetworkDiagnosticsMetrics": {
                    "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "10376928947840907933"
                    }
                  },
                  "parameters": {
                    "deployActivityLogDiagnosticSetting": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deployNetworkWatcherTrafficAnalytics": {
                      "type": "bool"
                    },
                    "keyVaultDiagnosticLogs": {
                      "type": "array"
                    },
                    "keyVaultDiagnosticMetrics": {
                      "type": "array"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "networkInterfaceDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array"
                    },
                    "networkSecurityGroupDiagnosticsLogs": {
                      "type": "array"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "networkWatcherFlowLogsRetentionDays": {
                      "type": "int"
                    },
                    "networkWatcherFlowLogsType": {
                      "type": "string"
                    },
                    "networkWatcherResourceId": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    },
                    "tiers": {
                      "type": "array"
                    },
                    "virtualNetworkDiagnosticsLogs": {
                      "type": "array"
                    },
                    "virtualNetworkDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('deployActivityLogDiagnosticSetting')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-activity-diags-{0}-{1}', parameters('tiers')[0].shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[0].subscriptionId]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "4546639015146541763"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "name": "[format('diag-activity-log-{0}', subscription().subscriptionId)]",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "logs": [
                                  {
                                    "category": "Administrative",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Security",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ServiceHealth",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Alert",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Recommendation",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Policy",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Autoscale",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ResourceHealth",
                                    "enabled": true
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-kv-diags-{0}-{1}', parameters('tiers')[0].shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[0].subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultDiagnosticSettingName": {
                            "value": "[replace(parameters('tiers')[0].namingConvention.keyVaultDiagnosticSetting, format('{0}-', parameters('serviceToken')), '')]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "keyVaultStorageAccountId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('keyVaultDiagnosticLogs')]"
                          },
                          "metrics": {
                            "value": "[parameters('keyVaultDiagnosticMetrics')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "7992728370788470897"
                            }
                          },
                          "parameters": {
                            "keyVaultDiagnosticSettingName": {
                              "type": "string"
                            },
                            "keyVaultName": {
                              "type": "string"
                            },
                            "keyVaultStorageAccountId": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "metrics": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                              "name": "[parameters('keyVaultDiagnosticSettingName')]",
                              "properties": {
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]",
                                "storageAccountId": "[parameters('keyVaultStorageAccountId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-nsg-diags-{0}-{1}', parameters('tiers')[0].shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[0].subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "deployNetworkWatcherTrafficAnalytics": {
                            "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                          },
                          "flowLogsName": {
                            "value": "[parameters('tiers')[0].namingConvention.networkWatcherFlowLogsNetworkSecurityGroup]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                          },
                          "networkSecurityGroupDiagnosticSettingName": {
                            "value": "[parameters('tiers')[0].namingConvention.networkSecurityGroupDiagnosticSetting]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          },
                          "networkWatcherFlowLogsRetentionDays": {
                            "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                          },
                          "networkWatcherFlowLogsType": {
                            "value": "[parameters('networkWatcherFlowLogsType')]"
                          },
                          "networkWatcherName": "[if(empty(parameters('networkWatcherResourceId')), createObject('value', parameters('tiers')[0].namingConvention.networkWatcher), createObject('value', split(parameters('networkWatcherResourceId'), '/')[8]))]",
                          "networkWatcherResourceGroupName": "[if(empty(parameters('networkWatcherResourceId')), createObject('value', parameters('resourceGroupName')), createObject('value', split(parameters('networkWatcherResourceId'), '/')[4]))]",
                          "networkWatcherSubscriptionId": "[if(empty(parameters('networkWatcherResourceId')), createObject('value', parameters('tiers')[0].subscriptionId), createObject('value', split(parameters('networkWatcherResourceId'), '/')[2]))]",
                          "storageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "tiername": {
                            "value": "[parameters('tiers')[0].name]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "16127916004822619384"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "deployNetworkWatcherTrafficAnalytics": {
                              "type": "bool"
                            },
                            "flowLogsName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "networkSecurityGroupDiagnosticSettingName": {
                              "type": "string"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            },
                            "networkWatcherFlowLogsRetentionDays": {
                              "type": "int"
                            },
                            "networkWatcherFlowLogsType": {
                              "type": "string"
                            },
                            "networkWatcherName": {
                              "type": "string"
                            },
                            "networkWatcherResourceGroupName": {
                              "type": "string"
                            },
                            "networkWatcherSubscriptionId": {
                              "type": "string"
                            },
                            "storageAccountResourceId": {
                              "type": "string"
                            },
                            "tiername": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('networkSecurityGroupName'))]",
                              "name": "[parameters('networkSecurityGroupDiagnosticSettingName')]",
                              "properties": {
                                "logs": "[parameters('logs')]",
                                "metrics": [],
                                "storageAccountId": "[parameters('storageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              }
                            },
                            {
                              "condition": "[equals(parameters('networkWatcherFlowLogsType'), 'NetworkSecurityGroup')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-{0}-flowLogs-{1}', parameters('tiername'), parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('networkWatcherSubscriptionId')]",
                              "resourceGroup": "[parameters('networkWatcherResourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "deployNetworkWatcherTrafficAnalytics": {
                                    "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                                  },
                                  "flowLogsName": {
                                    "value": "[parameters('flowLogsName')]"
                                  },
                                  "flowLogsRetentionDays": {
                                    "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "logAnalyticsWorkspaceResourceId": {
                                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                  },
                                  "networkWatcherName": {
                                    "value": "[parameters('networkWatcherName')]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[parameters('storageAccountResourceId')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "5494377415743216586"
                                    }
                                  },
                                  "parameters": {
                                    "deployNetworkWatcherTrafficAnalytics": {
                                      "type": "bool"
                                    },
                                    "flowLogsName": {
                                      "type": "string"
                                    },
                                    "flowLogsRetentionDays": {
                                      "type": "int"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "logAnalyticsWorkspaceResourceId": {
                                      "type": "string"
                                    },
                                    "networkWatcherName": {
                                      "type": "string"
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string"
                                    },
                                    "targetResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkWatchers/flowLogs",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('networkWatcherName'), parameters('flowLogsName'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "targetResourceId": "[parameters('targetResourceId')]",
                                        "enabled": true,
                                        "storageId": "[parameters('storageAccountResourceId')]",
                                        "flowAnalyticsConfiguration": {
                                          "networkWatcherFlowAnalyticsConfiguration": {
                                            "enabled": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('deployNetworkWatcherTrafficAnalytics'), null())]",
                                            "workspaceResourceId": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('logAnalyticsWorkspaceResourceId'), null())]"
                                          }
                                        },
                                        "format": {
                                          "type": "JSON",
                                          "version": 2
                                        },
                                        "retentionPolicy": {
                                          "days": "[parameters('flowLogsRetentionDays')]",
                                          "enabled": true
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-diags-{0}-{1}', parameters('tiers')[0].shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[0].subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "deployNetworkWatcherTrafficAnalytics": {
                            "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                          },
                          "flowLogsName": {
                            "value": "[parameters('tiers')[0].namingConvention.networkWatcherFlowLogsVirtualNetwork]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                          },
                          "logStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "metrics": {
                            "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                          },
                          "networkWatcherFlowLogsRetentionDays": {
                            "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                          },
                          "networkWatcherFlowLogsType": {
                            "value": "[parameters('networkWatcherFlowLogsType')]"
                          },
                          "networkWatcherName": "[if(empty(parameters('networkWatcherResourceId')), createObject('value', parameters('tiers')[0].namingConvention.networkWatcher), createObject('value', split(parameters('networkWatcherResourceId'), '/')[8]))]",
                          "networkWatcherResourceGroupName": "[if(empty(parameters('networkWatcherResourceId')), createObject('value', parameters('resourceGroupName')), createObject('value', split(parameters('networkWatcherResourceId'), '/')[4]))]",
                          "networkWatcherSubscriptionId": "[if(empty(parameters('networkWatcherResourceId')), createObject('value', parameters('tiers')[0].subscriptionId), createObject('value', split(parameters('networkWatcherResourceId'), '/')[2]))]",
                          "tiername": {
                            "value": "[parameters('tiers')[0].name]"
                          },
                          "virtualNetworkDiagnosticSettingName": {
                            "value": "[parameters('tiers')[0].namingConvention.virtualNetworkDiagnosticSetting]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "9677917597269711503"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "deployNetworkWatcherTrafficAnalytics": {
                              "type": "bool"
                            },
                            "flowLogsName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "logStorageAccountResourceId": {
                              "type": "string"
                            },
                            "metrics": {
                              "type": "array"
                            },
                            "networkWatcherFlowLogsRetentionDays": {
                              "type": "int"
                            },
                            "networkWatcherFlowLogsType": {
                              "type": "string"
                            },
                            "networkWatcherName": {
                              "type": "string"
                            },
                            "networkWatcherResourceGroupName": {
                              "type": "string"
                            },
                            "networkWatcherSubscriptionId": {
                              "type": "string"
                            },
                            "supportedClouds": {
                              "type": "array",
                              "defaultValue": [
                                "AzureCloud"
                              ]
                            },
                            "tiername": {
                              "type": "string"
                            },
                            "virtualNetworkDiagnosticSettingName": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('virtualNetworkName'))]",
                              "name": "[parameters('virtualNetworkDiagnosticSettingName')]",
                              "properties": {
                                "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[if(contains(parameters('supportedClouds'), environment().name), parameters('logs'), createArray())]",
                                "metrics": "[parameters('metrics')]"
                              }
                            },
                            {
                              "condition": "[equals(parameters('networkWatcherFlowLogsType'), 'VirtualNetwork')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-{0}-flowLogs-{1}', parameters('tiername'), parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('networkWatcherSubscriptionId')]",
                              "resourceGroup": "[parameters('networkWatcherResourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "deployNetworkWatcherTrafficAnalytics": {
                                    "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                                  },
                                  "flowLogsName": {
                                    "value": "[parameters('flowLogsName')]"
                                  },
                                  "flowLogsRetentionDays": {
                                    "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "logAnalyticsWorkspaceResourceId": {
                                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                  },
                                  "networkWatcherName": {
                                    "value": "[parameters('networkWatcherName')]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[parameters('logStorageAccountResourceId')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "5494377415743216586"
                                    }
                                  },
                                  "parameters": {
                                    "deployNetworkWatcherTrafficAnalytics": {
                                      "type": "bool"
                                    },
                                    "flowLogsName": {
                                      "type": "string"
                                    },
                                    "flowLogsRetentionDays": {
                                      "type": "int"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "logAnalyticsWorkspaceResourceId": {
                                      "type": "string"
                                    },
                                    "networkWatcherName": {
                                      "type": "string"
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string"
                                    },
                                    "targetResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkWatchers/flowLogs",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('networkWatcherName'), parameters('flowLogsName'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "targetResourceId": "[parameters('targetResourceId')]",
                                        "enabled": true,
                                        "storageId": "[parameters('storageAccountResourceId')]",
                                        "flowAnalyticsConfiguration": {
                                          "networkWatcherFlowAnalyticsConfiguration": {
                                            "enabled": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('deployNetworkWatcherTrafficAnalytics'), null())]",
                                            "workspaceResourceId": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('logAnalyticsWorkspaceResourceId'), null())]"
                                          }
                                        },
                                        "format": {
                                          "type": "JSON",
                                          "version": 2
                                        },
                                        "retentionPolicy": {
                                          "days": "[parameters('flowLogsRetentionDays')]",
                                          "enabled": true
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "networkInterfaceDiagnostics",
                        "count": "[length(parameters('networkInterfaceResourceIds'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-nic-diags-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[split(parameters('networkInterfaceResourceIds')[copyIndex()], '/')[2]]",
                      "resourceGroup": "[split(parameters('networkInterfaceResourceIds')[copyIndex()], '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": []
                          },
                          "metrics": {
                            "value": "[parameters('networkInterfaceDiagnosticsMetrics')]"
                          },
                          "networkInterfaceResourceId": {
                            "value": "[parameters('networkInterfaceResourceIds')[copyIndex()]]"
                          },
                          "storageAccountResourceIds": {
                            "value": [
                              "[parameters('storageAccountResourceId')]"
                            ]
                          },
                          "tiers": {
                            "value": "[parameters('tiers')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "14579690623657477522"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "metrics": {
                              "type": "array"
                            },
                            "networkInterfaceResourceId": {
                              "type": "string"
                            },
                            "storageAccountResourceIds": {
                              "type": "array"
                            },
                            "tiers": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "networkInterfaceDiagnosticSettingName": "[parameters('tiers')[variables('tierIndex')].namingConvention.virtualMachineNetworkInterfaceDiagnosticSetting]",
                            "storageAccountResourceId": "[parameters('storageAccountResourceIds')[variables('tierIndex')]]",
                            "tierIndex": "[if(contains(parameters('networkInterfaceResourceId'), '-ops-'), 1, if(contains(parameters('networkInterfaceResourceId'), '-svcs-'), 2, if(contains(parameters('networkInterfaceResourceId'), '-id-'), 3, 0)))]"
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', split(parameters('networkInterfaceResourceId'), '/')[8])]",
                              "name": "[variables('networkInterfaceDiagnosticSettingName')]",
                              "properties": {
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]",
                                "storageAccountId": "[variables('storageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(parameters('deployPolicy'), not(empty(parameters('virtualNetworkAddressPrefix'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-policy-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "policy": {
                    "value": "[parameters('policy')]"
                  },
                  "resourceGroupNames": {
                    "value": [
                      "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                    ]
                  },
                  "serviceToken": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
                  },
                  "tiers": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
                  },
                  "windowsAdministratorsGroupMembership": {
                    "value": "[parameters('windowsAdministratorsGroupMembership')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "14853780038496961404"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "policy": {
                      "type": "string"
                    },
                    "resourceGroupNames": {
                      "type": "array"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "tiers": {
                      "type": "array"
                    },
                    "windowsAdministratorsGroupMembership": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "policyAssignment",
                        "count": "[length(parameters('tiers'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('assign-policy-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[copyIndex()].subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupNames')[copyIndex()]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "builtInAssignment": {
                            "value": "[parameters('policy')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "deployRemediation": {
                            "value": false
                          },
                          "networkWatcherResourceGroupName": "[if(not(empty(parameters('tiers')[copyIndex()].networkWatcherResourceId)), createObject('value', split(parameters('tiers')[copyIndex()].networkWatcherResourceId, '/')[4]), if(parameters('tiers')[copyIndex()].deployUniqueResources, createObject('value', replace(parameters('tiers')[copyIndex()].namingConvention.resourceGroup, parameters('serviceToken'), 'network')), createObject('value', replace(parameters('tiers')[0].namingConvention.resourceGroup, parameters('serviceToken'), 'network'))))]",
                          "windowsAdministratorsGroupMembership": {
                            "value": "[parameters('windowsAdministratorsGroupMembership')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "1911919983479917397"
                            }
                          },
                          "parameters": {
                            "builtInAssignment": {
                              "type": "string"
                            },
                            "deployRemediation": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "networkWatcherResourceGroupName": {
                              "type": "string"
                            },
                            "windowsAdministratorsGroupMembership": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "$fxv#0": "{\r\n  \"listOfMembersToExcludeFromWindowsVMAdministratorsGroup\": {\r\n    \"value\": \"admin\"\r\n  },\r\n  \"IncludeArcMachines\": {\r\n    \"value\": \"true\"\r\n  },\r\n  \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": {\r\n    \"value\": \"1.2\"\r\n  },\r\n  \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": {\r\n    \"value\": \"Compliant\"\r\n  },\r\n  \"requiredRetentionDays\": {\r\n    \"value\": \"365\"\r\n  }\r\n}",
                            "$fxv#1": "{\r\n  \"IncludeArcMachines\": {\r\n    \"value\": \"true\"\r\n  },\r\n  \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": {\r\n    \"value\": \"1.2\"\r\n  },\r\n  \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": {\r\n    \"value\": \"Compliant\"\r\n  },\r\n  \"requiredRetentionDays\": {\r\n    \"value\": \"365\"\r\n  }\r\n}",
                            "$fxv#2": "{\r\n  \"IncludeArcMachines\": {\r\n    \"value\": \"false\"\r\n  },\r\n  \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": {\r\n    \"value\": \"Compliant\"\r\n  },\r\n  \"MinimumTLSVersionForWindowsServers\": {\r\n    \"value\": \"1.2\"\r\n  },\r\n  \"requiredRetentionDays\": {\r\n    \"value\": \"365\"\r\n  },\r\n  \"effect-febd0533-8e55-448f-b837-bd0e06f16469\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"allowedContainerImagesRegex-febd0533-8e55-448f-b837-bd0e06f16469\": {\r\n    \"value\": \"^(.+){0}$\"\r\n  },\r\n  \"effect-95edb821-ddaf-4404-9732-666045e056b4\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-440b515e-a580-421e-abeb-b159a61ddcbc\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-233a2a17-77ca-4fb1-9b6b-69223d272a44\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-e345eecc-fa47-480f-9e88-67dcc122b164\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"cpuLimit-e345eecc-fa47-480f-9e88-67dcc122b164\": {\r\n    \"value\": \"0\"\r\n  },\r\n  \"memoryLimit-e345eecc-fa47-480f-9e88-67dcc122b164\": {\r\n    \"value\": \"0\"\r\n  },\r\n  \"effect-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"runAsUserRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\r\n    \"value\": \"MustRunAsNonRoot\"\r\n  },\r\n  \"runAsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\r\n    \"value\": \"RunAsAny\"\r\n  },\r\n  \"supplementalGroupsRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\r\n    \"value\": \"RunAsAny\"\r\n  },\r\n  \"fsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\r\n    \"value\": \"RunAsAny\"\r\n  },\r\n  \"effect-1c6e92c9-99f0-4e55-9cf2-0c234dc48f99\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-47a1ee2f-2a2a-4576-bf2a-e0e36709c2b8\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-df49d893-a74c-421d-bc95-c663042e5b80\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-c26596ff-4d70-4e6a-9a30-c2506bd2f80c\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-511f5417-5d12-434d-ab2e-816901e72a5e\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-82985f06-dc18-4a48-bc1c-b9f4f0098cfe\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-098fc59e-46c7-4d99-9b16-64990e543d75\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\": {\r\n    \"value\": \"enabled\"\r\n  },\r\n  \"aadAuthenticationInServiceFabricMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-71ef260a-8f18-47b7-abcb-62d0673d94dc\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-862e97cf-49fc-4a5c-9de4-40d4e2e7c8eb\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-d9da03a1-f3c3-412a-9709-947156872263\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-b4ac1030-89c5-4697-8e00-28b5ba6a8811\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-ea0dfaed-95fb-448c-934e-d6e713ce393d\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-41425d9f-d1a5-499a-9932-f8ed8453932c\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-fc4d8e41-e223-45ea-9bf5-eada37891d87\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-86efb160-8de7-451d-bc08-5d475b0aadae\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-4ec52d6d-beb7-40c4-9a9e-fe753254690e\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-64d314f6-6062-4780-a861-c23e8951bee5\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1fd32ebd-e4c3-4e13-a54a-d7422d4d95f6\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-fa298e57-9444-42ba-bf04-86e8470e32c7\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1f905d99-2ab7-462c-a6b0-f709acca6c8f\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-ba769a63-b8cc-4b2d-abf6-ac33c7204be8\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-0aa61e00-0a01-4a3c-9945-e93cffedf0e6\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-47031206-ce96-41f8-861b-6a915f3de284\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-51522a96-0869-4791-82f3-981000c2c67f\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-b5ec538c-daa0-4006-8596-35468b9148e8\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-56a5ee18-2ae6-4810-86f7-18e39ce5629b\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-2e94d99a-8a36-4563-bc77-810d8893b671\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1fafeaf6-7927-4059-a50a-8eb2a7a6f2b5\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-99e9ccd8-3db9-4592-b0d1-14b1715a4d8a\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1f68a601-6e6d-4e42-babf-3f643a047ea2\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-ca91455f-eace-4f96-be59-e6e2c35b4816\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-702dd420-7fcc-42c5-afe8-4026edd20fe0\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"diagnosticsLogsInRedisCacheMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"secureTransferToStorageAccountMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-7d092e0a-7acd-40d2-a975-dca21cae48c4\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-2a1a9cdf-e04d-429a-8416-3bfb72a1b26f\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"disableUnrestrictedNetworkToStorageAccountMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-55615ac9-af46-4a59-874e-391cc3dfb490\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1b8ca024-1d5c-4dec-8995-b1a932b41780\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-53503636-bcc9-4748-9663-5348217f160f\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-40cec1dd-a100-4920-b15b-3024fe8901ab\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-a049bf77-880b-470f-ba6d-9f21c530cf83\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-ee980b6d-0eca-4501-8d54-f6290fd512c3\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1d84d5fb-01f6-4d12-ba4f-4a26081d403d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-37e0d2fe-28a5-43d6-a273-67d37d1f5606\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"identityDesignateMoreThanOneOwnerMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"diskEncryptionMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"emailNotificationToSubscriptionOwnerHighSeverityAlertsEnabledEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"functionAppDisableRemoteDebuggingMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"sqlDbEncryptionMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"vulnerabilityAssessmentOnManagedInstanceMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensurePHPVersionLatestForAPIAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"aadAuthenticationInSqlServerMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"vmssEndpointProtectionMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"vmssOsVulnerabilitiesMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"adaptiveApplicationControlsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForPostgreSQLEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"ensureJavaVersionLatestForWebAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityDesignateLessThanOwnersMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"securityContactEmailAddressForSubscriptionEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"webAppRestrictCORSAccessMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityRemoveExternalAccountWithWritePermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityRemoveExternalAccountWithReadPermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityRemoveDeprecatedAccountMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"functionAppEnforceHttpsMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"ensurePythonVersionLatestForWebAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensurePythonVersionLatestForFunctionAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensurePHPVersionLatestForWebAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensurePythonVersionLatestForAPIAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForMySQLEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"systemUpdatesMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensureJavaVersionLatestForAPIAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensureHTTPVersionLatestForWebAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"apiAppRequireLatestTlsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityEnableMFAForWritePermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensureHTTPVersionLatestForAPIAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensureJavaVersionLatestForFunctionAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"nextGenerationFirewallMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"useRbacRulesMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"webAppEnforceHttpsMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"sqlServerAuditingMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"vnetEnableDDoSProtectionMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityEnableMFAForOwnerPermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"sqlServerAdvancedDataSecurityMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"sqlManagedInstanceAdvancedDataSecurityMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"endpointProtectionMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"jitNetworkAccessMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"apiAppEnforceHttpsMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"geoRedundantStorageShouldBeEnabledForStorageAccountsEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"vmssSystemUpdatesMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"webAppDisableRemoteDebuggingMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"longtermGeoRedundantBackupEnabledAzureSQLDatabasesEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"systemConfigurationsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensureHTTPVersionLatestForFunctionAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityEnableMFAForReadPermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"containerBenchmarkMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"apiAppDisableRemoteDebuggingMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityRemoveDeprecatedAccountWithOwnerPermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"vulnerabilityAssessmentOnServerMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"webAppRequireLatestTlsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityRemoveExternalAccountWithOwnerPermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"functionAppRequireLatestTlsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"kubernetesServiceVersionUpToDateMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"sqlDbVulnerabilityAssesmentMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"membersToExcludeInLocalAdministratorsGroup\": {\r\n    \"value\": \"admin\"\r\n  },\r\n  \"PHPLatestVersionForAppServices\": {\r\n    \"value\": \"7.4\"\r\n  },\r\n  \"JavaLatestVersionForAppServices\": {\r\n    \"value\": \"11\"\r\n  },\r\n  \"WindowsPythonLatestVersionForAppServices\": {\r\n    \"value\": \"3.6\"\r\n  },\r\n  \"LinuxPythonLatestVersionForAppServices\": {\r\n    \"value\": \"3.9\"\r\n  },\r\n  \"ensureDotNetFrameworkLatestForFunctionAppEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"sqlManagedInstanceAdvancedDataSecurityEmailsMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"vulnerabilityAssessmentMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"ensureDotNetFrameworkLatestForWebAppEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"sqlServerAdvancedDataSecurityEmailsMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"microsoftIaaSAntimalwareExtensionShouldBeDeployedOnWindowsServersEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"securityCenterStandardPricingTierShouldBeSelectedEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachinesEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"ensurePHPVersionLatestForFunctionAppEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"sqlManagedInstanceAdvancedDataSecurityEmailAdminsMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"securityContactPhoneNumberShouldBeProvidedForSubscriptionEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"threatDetectionTypesOnManagedInstanceMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"ensureDotNetFrameworkLatestForAPIAppEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"sqlServerAdvancedDataSecurityEmailAdminsMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"threatDetectionTypesOnServerMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachineScaleSetsEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  }\r\n}",
                            "$fxv#3": "{\r\n  \"effect-09024ccc-0c5f-475e-9457-b7c0d9ed487b\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0961003e-5a0a-4549-abde-af6a37f2724d\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0b15565f-aa9e-48ba-8619-45960f2c314d\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0e60b895-3786-45da-8377-9c6b4b6ac5f9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-17k78e20-9358-41c9-923c-fb736d382a12\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-1bc1795e-d44a-4d48-9b3b-6fff0fd5f9ba\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"PHPLatestVersion\": {\r\n    \"value\": \"7.3\"\r\n  },\r\n  \"effect-22bee202-a82f-4305-9a2a-6d7f44d4dedb\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-26a828e1-e88f-464e-bbb3-c134a282b9de\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-34c877ad-507e-4c82-993e-3452a6e0ad3c\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-3c735d8a-a4ba-4a3a-b7cf-db7754cf57f4\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-404c3081-a854-4457-ae30-26a93ef643f9\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-47a6b606-51aa-4496-8bb7-64b11cf66adc\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-496223c3-ad65-4ecd-878a-bae78737e9ed\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"JavaLatestVersion\": {\r\n    \"value\": \"11\"\r\n  },\r\n  \"effect-4f11b553-d42e-4e3a-89be-32ca364cad4c\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-4f4f78b8-e367-4b10-a341-d9a4ad5cf1c7\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-5c607a2e-c700-4744-8254-d77e7c9eb5e4\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-5f76cf89-fbf2-47fd-a3f4-b891fa780b60\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-6b1cbf55-e8b6-442f-ba4c-7246b6381474\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-6d555dd1-86f2-4f1c-8ed7-5abae7c6cbab\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-7008174a-fd10-4ef0-817e-fc820a951d73\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"LinuxPythonLatestVersion\": {\r\n    \"value\": \"3.8\"\r\n  },\r\n  \"effect-7238174a-fd10-4ef0-817e-fc820a951d73\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-7261b898-8a84-4db8-9e04-18527132abb3\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-74c3584d-afae-46f7-a20a-6f8adba71a16\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-86b3d65f-7626-441e-b690-81a8b71cff60\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-88999f4c-376a-45c8-bcb3-4058f713cf39\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-8c122334-9d20-4eb8-89ea-ac9a705b74ae\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-8cb6aa8b-9e41-4f4e-aa25-089a7ac2581e\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-9297c21d-2ed6-4474-b48f-163f75654ce3\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-991310cd-e9f3-47bc-b7b6-f57b557d07db\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-9b597639-28e4-48eb-b506-56b05d366257\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-9d0b6ea4-93e2-4578-bf2f-6bb17d22b4bc\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-9daedab3-fb2d-461e-b861-71790eead4f6\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-a4af4a39-4135-47fb-b175-47fbdf85311d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\": {\r\n    \"value\": \"enabled\"\r\n  },\r\n  \"effect-a70ca396-0a34-413a-88e1-b956c1e683be\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-aa633080-8b72-40c4-a2d7-d00c03e80bed\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-abfb4388-5bf4-4ad7-ba82-2cd2f41ceae9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-abfb7388-5bf4-4ad7-ba99-2cd2f41cebb9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-af6cd1bd-1635-48cb-bde7-5b15693900b9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b7ddfbdc-1260-477d-91fd-98bd9be789a6\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-c3f317a7-a95c-4547-b7e7-11017ebdf2fe\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-cb510bfd-1cba-4d9f-a230-cb0976f4bb71\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e1e5fd5d-3e4c-4ce1-8661-7d1873ae6b15\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e2c1c086-2d84-4019-bff3-c44ccd95113c\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e3576e28-8b17-4677-84c3-db2990658d64\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e8cbc669-f12d-49eb-93e7-9273119e9933\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e9c8d085-d9cc-4b17-9cdc-059f1f01f19e\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-ebb62a0c-3560-49e1-89ed-27e074e9f8ad\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-efbde977-ba53-4479-b8e9-10b957924fbf\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-f0e6e85b-9b9f-4a4b-b67b-f730d42f1b0b\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-f6de0be7-9a8a-4b8a-b349-43cf02d22f7c\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-f8456c1c-aa66-4dfb-861a-25d127b775c9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-f9d614c5-c173-4d56-95a7-b4437057d193\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-fb893a29-21bb-418c-a157-e99480ec364c\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-feedbf84-6b99-488c-acc2-71c829aa5ffc\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-3b980d31-7904-4bb7-8575-5665739a8052\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-6e2593d9-add6-4083-9c9b-4b7d2188c899\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b607c5de-e7d9-4eee-9e5c-83f1bcee4fa0\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-12430be1-6cc8-4527-a9a8-e3d38f250096\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"modeRequirement-12430be1-6cc8-4527-a9a8-e3d38f250096\": {\r\n    \"value\": \"Detection\"\r\n  },\r\n  \"effect-425bea59-a659-4cbb-8d31-34499bd030b8\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"modeRequirement-425bea59-a659-4cbb-8d31-34499bd030b8\": {\r\n    \"value\": \"Detection\"\r\n  },\r\n  \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-013e242c-8828-4970-87b3-ab247555486d\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-d38fc420-0735-4ef3-ac11-c806f651a570\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-a1181c5f-672a-477a-979a-7d58aa086233\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-308fbb08-4ab8-4e67-9b29-592e93fb94fa\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-4da35fc9-c9e7-4960-aec9-797fe7d9051d\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-523b5cd1-3e23-492f-a539-13118b6d1e3a\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-7fe3b40f-802b-4cdd-8bd4-fd799c948cc2\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-c25d9a16-bc35-4e15-a7e5-9db606bf9ed4\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b0f33259-77d7-4c9e-aac6-3aabcfae693c\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-0820b7b9-23aa-4725-a1ce-ae4558f718e5\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fab\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-358c20a6-3f9e-4f0e-97ff-c6ce485e2aac\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-5744710e-cc2f-4ee8-8809-3b11e89f4bc9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-ac4a19c2-fa67-49b4-8ae5-0b2e78c49457\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-c9d007d0-c057-4772-b18c-01e546713bcd\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-e372f825-a257-4fb8-9175-797a8a8627d6\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-d158790f-bfb0-486c-8631-2dc6b4e8e6af\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-e802a67a-daf5-4436-9ea6-f6d821dd0c5d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-a451c1ef-c6ca-483d-87ed-f49761e3ffb5\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftSql-servers-firewallRules-delete\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-delete\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-delete\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-securityRules-delete\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-securityRules-delete\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-ae89ebca-1c92-4898-ac2c-9f63decb045c\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-d26f7642-7545-4e18-9b75-8c9bbdee3a9a\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-1a4e592a-6a6e-44a5-9814-e36264ca96e7\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-7796937f-307b-4598-941c-67d3a05ebfe7\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-c5447c04-a4d7-4ba8-a263-c9ee321a6858\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-41388f1c-2db0-4c25-95b2-35d7f5ccbfa9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b02aacc0-b073-424e-8298-42b22829ee0a\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-057d6cfe-9c4f-4a6d-bc60-14420ea1f1a9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0ec47710-77ff-4a3d-9181-6aa50af424d0\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-48af4db5-9b8b-401c-8e74-076be876a430\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-82339799-d096-41ae-8538-b108becf0970\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1b7aa243-30e4-4c9e-bca8-d0d3022b634a\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-ef2a8f2a-b3d9-49cd-a8a8-9a3aaaf647d9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-bb91dfba-c30d-4263-9add-9c2384e659a6\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e71308d3-144b-4262-b144-efdc3cc90517\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-2bdd0062-9d75-436e-89df-487dd8e4b3c7\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-6fac406b-40ca-413b-bf8e-0bf964659c25\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-048248b0-55cd-46da-b1ff-39efd52db260\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0d134df8-db83-46fb-ad72-fe0c9428c8dd\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fb2\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-c43e4a30-77cb-48ab-a4dd-93f175c63b57\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1f314764-cb73-4fc9-b863-8eca98ac36e9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-123a3936-f020-408a-ba0c-47873faf1534\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  }\r\n}",
                            "modifiedAssignment": "[if(and(equals(toLower(environment().name), toLower('AzureCloud')), equals(toLower(parameters('builtInAssignment')), toLower('IL5'))), 'NISTRev4', parameters('builtInAssignment'))]",
                            "assignmentName": "[format('{0} {1}', variables('modifiedAssignment'), resourceGroup().name)]",
                            "agentVmssAssignmentName": "[format('Deploy VMSS Agents {0}', resourceGroup().name)]",
                            "agentVmAssignmentName": "[format('Deploy VM Agents {0}', resourceGroup().name)]",
                            "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                            "lawsReaderRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('assignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', union(json(replace(variables('$fxv#0'), 'NetworkWatcherRG', parameters('networkWatcherResourceGroupName'))), createObject('listOfMembersToIncludeInWindowsVMAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership')), 'logAnalyticsWorkspaceIdforVMReporting', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])), 'resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6', createObject('value', parameters('networkWatcherResourceGroupName'))))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', union(json(variables('$fxv#1')), createObject('resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6', createObject('value', parameters('networkWatcherResourceGroupName'))))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', union(json(variables('$fxv#2')), createObject('logAnalyticsWorkspaceIDForVMAgents', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])), 'membersToIncludeInLocalAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership')), 'NetworkWatcherResourceGroupName', createObject('value', parameters('networkWatcherResourceGroupName'))))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', union(json(variables('$fxv#3')), createObject('logAnalyticsWorkspaceId-f47b5582-33ec-4c5c-87c0-b010a6b2e917', createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId), 'resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6', createObject('value', parameters('networkWatcherResourceGroupName'))), if(equals('AzureCloud', environment().name), createObject('MembersToExclude-69bf4abd-ca1e-4cf6-8b5a-762d42e61d4f', createObject('value', 'admin'), 'MembersToInclude-30f71ea1-ac77-4f26-9fc5-2d926bbd4ba7', createObject('value', parameters('windowsAdministratorsGroupMembership'))), createObject()))))[variables('modifiedAssignment')].id]",
                                "parameters": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', union(json(replace(variables('$fxv#0'), 'NetworkWatcherRG', parameters('networkWatcherResourceGroupName'))), createObject('listOfMembersToIncludeInWindowsVMAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership')), 'logAnalyticsWorkspaceIdforVMReporting', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])), 'resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6', createObject('value', parameters('networkWatcherResourceGroupName'))))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', union(json(variables('$fxv#1')), createObject('resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6', createObject('value', parameters('networkWatcherResourceGroupName'))))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', union(json(variables('$fxv#2')), createObject('logAnalyticsWorkspaceIDForVMAgents', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])), 'membersToIncludeInLocalAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership')), 'NetworkWatcherResourceGroupName', createObject('value', parameters('networkWatcherResourceGroupName'))))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', union(json(variables('$fxv#3')), createObject('logAnalyticsWorkspaceId-f47b5582-33ec-4c5c-87c0-b010a6b2e917', createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId), 'resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6', createObject('value', parameters('networkWatcherResourceGroupName'))), if(equals('AzureCloud', environment().name), createObject('MembersToExclude-69bf4abd-ca1e-4cf6-8b5a-762d42e61d4f', createObject('value', 'admin'), 'MembersToInclude-30f71ea1-ac77-4f26-9fc5-2d926bbd4ba7', createObject('value', parameters('windowsAdministratorsGroupMembership'))), createObject()))))[variables('modifiedAssignment')].parameters]"
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmssAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '75714362-cae7-409e-9b99-a8e5075b7fad')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '55f3eceb-5573-4f18-9695-226972c6d74a')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('assignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[if(empty(variables('modifiedAssignment')), '', reference(resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName')), '2020-09-01', 'full').identity.principalId)]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmssAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('deployRemediation')]",
                              "type": "Microsoft.PolicyInsights/remediations",
                              "apiVersion": "2019-07-01",
                              "name": "VM-Agent-Policy-Remediation",
                              "properties": {
                                "policyAssignmentId": "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]",
                                "resourceDiscoveryMode": "ReEvaluateCompliance"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Assign-Laws-Role-Policy-{0}', resourceGroup().name)]",
                              "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "targetResourceId": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[variables('lawsReaderRoleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "18155836748375114276"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(parameters('deployDefender'), not(empty(parameters('virtualNetworkAddressPrefix'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('set-defender-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "emailSecurityContact": {
                    "value": "[parameters('emailSecurityContact')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "8363353318722879062"
                    }
                  },
                  "parameters": {
                    "defenderPlans": {
                      "type": "array",
                      "defaultValue": [
                        "VirtualMachines"
                      ],
                      "metadata": {
                        "description": "Defender Paid protection Plans. Even if a customer selects the free sku, at least 1 paid protection plan must be specified."
                      }
                    },
                    "emailSecurityContact": {
                      "type": "string",
                      "metadata": {
                        "description": "Email address of the contact, in the form of john@doe.com"
                      }
                    },
                    "policySetDescription": {
                      "type": "string",
                      "defaultValue": "The Microsoft Cloud Security Benchmark initiative represents the policies and controls implementing security recommendations defined in Microsoft Cloud Security Benchmark v2, see https://aka.ms/azsecbm. This also serves as the Microsoft Defender for Cloud default policy initiative. You can directly assign this initiative, or manage its policies and compliance results within Microsoft Defender.",
                      "metadata": {
                        "description": "Policy Initiative description field"
                      }
                    },
                    "defenderSkuTier": {
                      "type": "string",
                      "defaultValue": "Free",
                      "metadata": {
                        "description": "[Standard/Free] The SKU for Defender. It defaults to \"Free\"."
                      }
                    }
                  },
                  "variables": {
                    "defenderPaidPlanConfig": {
                      "AzureCloud": {
                        "Api": {
                          "subPlan": "P1"
                        },
                        "appServices": {},
                        "KeyVaults": {
                          "subPlan": "PerKeyVault"
                        },
                        "Arm": {
                          "subPlan": "PerSubscription"
                        },
                        "CloudPosture": {
                          "extensions": [
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            },
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessVmScanning",
                              "isEnabled": "True"
                            },
                            {
                              "name": "EntraPermissionsManagement",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "Containers": {
                          "extensions": [
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "CosmosDbs": {},
                        "StorageAccounts": {
                          "subPlan": "DefenderForStorageV2",
                          "extensions": [
                            {
                              "name": "OnUploadMalwareScanning",
                              "isEnabled": "True",
                              "additionalExtensionProperties": {
                                "CapGBPerMonthPerStorageAccount": "5000"
                              }
                            },
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "VirtualMachines": {
                          "subPlan": "P1"
                        },
                        "SqlServerVirtualMachines": {},
                        "SqlServers": {},
                        "OpenSourceRelationalDatabases": {}
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "defenderFreeAllClouds",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[equals(parameters('defenderSkuTier'), 'Free')]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardNoSubplanNoExtensions",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), not(equals(environment().name, 'AzureCloud')))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardSubplanExtensionsAzureCloud",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), equals(environment().name, 'AzureCloud'))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]",
                        "subPlan": "[coalesce(tryGet(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'subPlan'), null())]",
                        "extensions": "[coalesce(tryGet(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'extensions'), null())]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('emailSecurityContact')))]",
                      "type": "Microsoft.Security/securityContacts",
                      "apiVersion": "2020-01-01-preview",
                      "name": "default",
                      "properties": {
                        "notificationsByRole": {
                          "roles": [
                            "AccountAdmin",
                            "Contributor",
                            "Owner",
                            "ServiceAdmin"
                          ],
                          "state": "On"
                        },
                        "alertNotifications": {
                          "state": "On"
                        },
                        "emails": "[parameters('emailSecurityContact')]"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2022-06-01",
                      "name": "Microsoft Cloud Security Benchmark",
                      "properties": {
                        "displayName": "Defender Default",
                        "description": "[parameters('policySetDescription')]",
                        "enforcementMode": "DoNotEnforce",
                        "parameters": {},
                        "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '1f3afdf9-d0c9-4c3d-847f-89da613e70a8')]"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "diskEncryptionSetResourceId": {
              "type": "string",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value, '')]"
            },
            "dnsServers": {
              "type": "array",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), coalesce(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01'), 'dhcpOptions', 'dnsServers'), createArray()), createArray())]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value, '')]"
            },
            "locationProperties": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locationProperties.value]"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
            },
            "mlzTags": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
            },
            "namingConvention": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention]"
            },
            "networkSecurityGroupResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupResourceId.value]"
            },
            "privateDnsZones": {
              "type": "array",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value]"
            },
            "resourceAbbreviations": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceAbbreviations.value]"
            },
            "resourcePrefix": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01', 'full').tags.resourcePrefix]"
            },
            "storageAccountResourceId": {
              "type": "string",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountResourceId.value, '')]"
            },
            "storageEncryptionKeyName": {
              "type": "string",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value, '')]"
            },
            "subnets": {
              "type": "array",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value, createArray())]"
            },
            "tier": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
            },
            "tokens": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value, '')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-management-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "avdObjectId": {
            "value": "[parameters('avdObjectId')]"
          },
          "avdPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value, lambda('name', startsWith(lambdaVariables('name'), 'privatelink.wvd')))[0])]"
          },
          "customImageId": {
            "value": "[variables('customImageId')]"
          },
          "customRdpProperty": {
            "value": "[parameters('customRdpProperty')]"
          },
          "deployFslogix": {
            "value": "[variables('deployFslogix')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "desktopFriendlyName": "[if(empty(parameters('desktopFriendlyName')), createObject('value', string(parameters('stampIndex'))), createObject('value', parameters('desktopFriendlyName')))]",
          "diskEncryptionSetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
          },
          "diskSku": {
            "value": "[parameters('diskSku')]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "enableApplicationInsights": {
            "value": "[parameters('enableApplicationInsights')]"
          },
          "enableAvdInsights": {
            "value": "[parameters('enableAvdInsights')]"
          },
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "fslogixStorageService": {
            "value": "[parameters('fslogixStorageService')]"
          },
          "hostPoolPublicNetworkAccess": {
            "value": "[parameters('hostPoolPublicNetworkAccess')]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "imageOffer": {
            "value": "[parameters('imageOffer')]"
          },
          "imagePublisher": {
            "value": "[parameters('imagePublisher')]"
          },
          "imageSku": {
            "value": "[parameters('imageSku')]"
          },
          "imageVersionResourceId": {
            "value": "[parameters('imageVersionResourceId')]"
          },
          "locationControlPlane": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01', 'full').location]"
          },
          "locationVirtualMachines": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "logAnalyticsWorkspaceRetention": {
            "value": "[parameters('logAnalyticsWorkspaceRetention')]"
          },
          "logAnalyticsWorkspaceSku": {
            "value": "[parameters('logAnalyticsWorkspaceSku')]"
          },
          "maxSessionLimit": {
            "value": "[mul(parameters('usersPerCore'), parameters('virtualMachineVirtualCpuCount'))]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "namingConvention": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value]"
          },
          "organizationalUnitPath": {
            "value": "[parameters('organizationalUnitPath')]"
          },
          "privateDnsZoneResourceIdPrefix": {
            "value": "[variables('privateDnsZoneResourceIdPrefix')]"
          },
          "privateDnsZones": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value]"
          },
          "privateLinkScopeResourceId": {
            "value": "[parameters('privateLinkScopeResourceId')]"
          },
          "recoveryServices": {
            "value": "[parameters('recoveryServices')]"
          },
          "recoveryServicesGeo": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locationProperties.value.recoveryServicesGeo]"
          },
          "resourceAbbreviations": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceAbbreviations.value]"
          },
          "resourceGroupName": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'management')]"
          },
          "resourceGroupProfiles": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'profiles')]"
          },
          "securityPrincipalObjectIds": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
          },
          "serviceToken": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
          },
          "sessionHostNamePrefix": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.virtualMachine, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, '')]"
          },
          "storageService": {
            "value": "[variables('storageService')]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].id]"
          },
          "subnets": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeZone": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locationProperties.value.timeZone]"
          },
          "validationEnvironment": {
            "value": "[parameters('validationEnvironment')]"
          },
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "10158971770149949474"
            }
          },
          "parameters": {
            "activeDirectorySolution": {
              "type": "string"
            },
            "avdObjectId": {
              "type": "string"
            },
            "avdPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "customImageId": {
              "type": "string"
            },
            "customRdpProperty": {
              "type": "string"
            },
            "deployFslogix": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "desktopFriendlyName": {
              "type": "string"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "diskSku": {
              "type": "string"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "enableApplicationInsights": {
              "type": "bool"
            },
            "enableAvdInsights": {
              "type": "bool"
            },
            "environmentAbbreviation": {
              "type": "string"
            },
            "fslogixStorageService": {
              "type": "string"
            },
            "hostPoolPublicNetworkAccess": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "imageOffer": {
              "type": "string"
            },
            "imagePublisher": {
              "type": "string"
            },
            "imageSku": {
              "type": "string"
            },
            "imageVersionResourceId": {
              "type": "string"
            },
            "locationControlPlane": {
              "type": "string"
            },
            "locationVirtualMachines": {
              "type": "string"
            },
            "logAnalyticsWorkspaceRetention": {
              "type": "int"
            },
            "logAnalyticsWorkspaceSku": {
              "type": "string"
            },
            "maxSessionLimit": {
              "type": "int"
            },
            "mlzTags": {
              "type": "object"
            },
            "namingConvention": {
              "type": "object"
            },
            "organizationalUnitPath": {
              "type": "string"
            },
            "privateDnsZoneResourceIdPrefix": {
              "type": "string"
            },
            "privateDnsZones": {
              "type": "array"
            },
            "privateLinkScopeResourceId": {
              "type": "string"
            },
            "recoveryServices": {
              "type": "bool"
            },
            "recoveryServicesGeo": {
              "type": "string"
            },
            "resourceAbbreviations": {
              "type": "object"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "resourceGroupProfiles": {
              "type": "string"
            },
            "securityPrincipalObjectIds": {
              "type": "array"
            },
            "serviceToken": {
              "type": "string"
            },
            "sessionHostNamePrefix": {
              "type": "string"
            },
            "storageService": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "subnets": {
              "type": "array"
            },
            "tags": {
              "type": "object"
            },
            "timeZone": {
              "type": "string"
            },
            "validationEnvironment": {
              "type": "bool"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            }
          },
          "variables": {
            "galleryImageOffer": "[if(empty(parameters('imageVersionResourceId')), format('\"{0}\"', parameters('imageOffer')), 'null')]",
            "galleryImagePublisher": "[if(empty(parameters('imageVersionResourceId')), format('\"{0}\"', parameters('imagePublisher')), 'null')]",
            "galleryImageSku": "[if(empty(parameters('imageVersionResourceId')), format('\"{0}\"', parameters('imageSku')), 'null')]",
            "galleryItemId": "[if(empty(parameters('imageVersionResourceId')), format('\"{0}.{1}{2}\"', parameters('imagePublisher'), parameters('imageOffer'), parameters('imageSku')), 'null')]",
            "hostPoolName": "[parameters('namingConvention').hostPool]",
            "imageType": "[if(empty(parameters('imageVersionResourceId')), '\"Gallery\"', '\"CustomImage\"')]",
            "userAssignedIdentityNamePrefix": "[parameters('namingConvention').userAssignedIdentity]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2023-07-01",
              "name": "[parameters('resourceGroupName')]",
              "location": "[parameters('locationControlPlane')]",
              "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupName'), variables('hostPoolName'))), coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject()), parameters('mlzTags'))]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('avdObjectId'), '40c5ff49-9181-41f8-ae61-143b0e78555e', subscription().id)]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '40c5ff49-9181-41f8-ae61-143b0e78555e')]",
                "principalId": "[parameters('avdObjectId')]"
              }
            },
            {
              "condition": "[or(parameters('enableApplicationInsights'), parameters('enableAvdInsights'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "enableAvdInsights": {
                    "value": "[parameters('enableAvdInsights')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupName'), variables('hostPoolName'))]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceRetention": {
                    "value": "[parameters('logAnalyticsWorkspaceRetention')]"
                  },
                  "logAnalyticsWorkspaceSku": {
                    "value": "[parameters('logAnalyticsWorkspaceSku')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "namingConvention": {
                    "value": "[parameters('namingConvention')]"
                  },
                  "privateLinkScopeResourceId": {
                    "value": "[parameters('privateLinkScopeResourceId')]"
                  },
                  "serviceToken": {
                    "value": "[parameters('serviceToken')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "12710447460759872283"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "enableAvdInsights": {
                      "type": "bool"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceRetention": {
                      "type": "int"
                    },
                    "logAnalyticsWorkspaceSku": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "namingConvention": {
                      "type": "object"
                    },
                    "privateLinkScopeResourceId": {
                      "type": "string"
                    },
                    "service": {
                      "type": "string",
                      "defaultValue": "mgmt"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[replace(parameters('namingConvention').logAnalyticsWorkspace, parameters('serviceToken'), parameters('service'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.OperationalInsights/workspaces'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "sku": {
                          "name": "[parameters('logAnalyticsWorkspaceSku')]"
                        },
                        "retentionInDays": "[parameters('logAnalyticsWorkspaceRetention')]",
                        "workspaceCapping": {
                          "dailyQuotaGb": -1
                        },
                        "publicNetworkAccessForIngestion": "Disabled",
                        "publicNetworkAccessForQuery": "Enabled"
                      }
                    },
                    {
                      "condition": "[parameters('enableAvdInsights')]",
                      "type": "Microsoft.Insights/dataCollectionRules",
                      "apiVersion": "2022-06-01",
                      "name": "[format('microsoft-avdi-{0}', replace(parameters('namingConvention').dataCollectionRule, parameters('serviceToken'), parameters('service')))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Insights/dataCollectionRules'), createObject()), parameters('mlzTags'))]",
                      "kind": "Windows",
                      "properties": {
                        "dataSources": {
                          "performanceCounters": [
                            {
                              "streams": [
                                "Microsoft-Perf"
                              ],
                              "samplingFrequencyInSeconds": 30,
                              "counterSpecifiers": [
                                "\\LogicalDisk(C:)\\Avg. Disk Queue Length",
                                "\\LogicalDisk(C:)\\Current Disk Queue Length",
                                "\\Memory\\Available Mbytes",
                                "\\Memory\\Page Faults/sec",
                                "\\Memory\\Pages/sec",
                                "\\Memory\\% Committed Bytes In Use",
                                "\\PhysicalDisk(*)\\Avg. Disk Queue Length",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Read",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Transfer",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Write",
                                "\\Processor Information(_Total)\\% Processor Time",
                                "\\User Input Delay per Process(*)\\Max Input Delay",
                                "\\User Input Delay per Session(*)\\Max Input Delay"
                              ],
                              "name": "perfCounterDataSource30"
                            },
                            {
                              "streams": [
                                "Microsoft-Perf"
                              ],
                              "samplingFrequencyInSeconds": 60,
                              "counterSpecifiers": [
                                "\\LogicalDisk(C:)\\% Free Space",
                                "\\LogicalDisk(C:)\\Avg. Disk sec/Transfer"
                              ],
                              "name": "perfCounterDataSource60"
                            }
                          ],
                          "windowsEventLogs": [
                            {
                              "streams": [
                                "Microsoft-Event"
                              ],
                              "xPathQueries": [
                                "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Admin!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "System!*",
                                "Microsoft-FSLogix-Apps/Operational!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "Application!*[System[(Level=2 or Level=3)]]",
                                "Microsoft-FSLogix-Apps/Admin!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]"
                              ],
                              "name": "eventLogsDataSource"
                            }
                          ]
                        },
                        "destinations": {
                          "logAnalytics": [
                            {
                              "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', replace(parameters('namingConvention').logAnalyticsWorkspace, parameters('serviceToken'), parameters('service')))]",
                              "name": "la-workspace"
                            }
                          ]
                        },
                        "dataFlows": [
                          {
                            "streams": [
                              "Microsoft-Perf",
                              "Microsoft-Event"
                            ],
                            "destinations": [
                              "la-workspace"
                            ]
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', replace(parameters('namingConvention').logAnalyticsWorkspace, parameters('serviceToken'), parameters('service')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableAvdInsights')]",
                      "type": "Microsoft.Insights/dataCollectionEndpoints",
                      "apiVersion": "2021-04-01",
                      "name": "[replace(parameters('namingConvention').dataCollectionEndpoint, parameters('serviceToken'), parameters('service'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Insights/dataCollectionEndpoints'), createObject()), parameters('mlzTags'))]",
                      "kind": "Windows",
                      "properties": {
                        "networkAcls": {
                          "publicNetworkAccess": "Disabled"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-private-link-scope-law-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[split(parameters('privateLinkScopeResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('privateLinkScopeResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', replace(parameters('namingConvention').logAnalyticsWorkspace, parameters('serviceToken'), parameters('service')))]"
                          },
                          "privateLinkScopeResourceId": {
                            "value": "[parameters('privateLinkScopeResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "7813436942971555276"
                            }
                          },
                          "parameters": {
                            "applicationInsightsResourceId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "dataCollectionEndpointResourceId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "privateLinkScopeResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[not(empty(parameters('applicationInsightsResourceId')))]",
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', split(parameters('privateLinkScopeResourceId'), '/')[8], if(empty(parameters('applicationInsightsResourceId')), 'applicationInsights', split(parameters('applicationInsightsResourceId'), '/')[8]))]",
                              "properties": {
                                "linkedResourceId": "[parameters('applicationInsightsResourceId')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('dataCollectionEndpointResourceId')))]",
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', split(parameters('privateLinkScopeResourceId'), '/')[8], if(empty(parameters('dataCollectionEndpointResourceId')), 'dataCollectionEndpoint', split(parameters('dataCollectionEndpointResourceId'), '/')[8]))]",
                              "properties": {
                                "linkedResourceId": "[parameters('dataCollectionEndpointResourceId')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('logAnalyticsWorkspaceResourceId')))]",
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', split(parameters('privateLinkScopeResourceId'), '/')[8], if(empty(parameters('logAnalyticsWorkspaceResourceId')), 'logAnalyticsWorkspace', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]))]",
                              "properties": {
                                "linkedResourceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', replace(parameters('namingConvention').logAnalyticsWorkspace, parameters('serviceToken'), parameters('service')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableAvdInsights')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-private-link-scope-dce-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[split(parameters('privateLinkScopeResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('privateLinkScopeResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "dataCollectionEndpointResourceId": {
                            "value": "[resourceId('Microsoft.Insights/dataCollectionEndpoints', replace(parameters('namingConvention').dataCollectionEndpoint, parameters('serviceToken'), parameters('service')))]"
                          },
                          "privateLinkScopeResourceId": {
                            "value": "[parameters('privateLinkScopeResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "7813436942971555276"
                            }
                          },
                          "parameters": {
                            "applicationInsightsResourceId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "dataCollectionEndpointResourceId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "privateLinkScopeResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[not(empty(parameters('applicationInsightsResourceId')))]",
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', split(parameters('privateLinkScopeResourceId'), '/')[8], if(empty(parameters('applicationInsightsResourceId')), 'applicationInsights', split(parameters('applicationInsightsResourceId'), '/')[8]))]",
                              "properties": {
                                "linkedResourceId": "[parameters('applicationInsightsResourceId')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('dataCollectionEndpointResourceId')))]",
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', split(parameters('privateLinkScopeResourceId'), '/')[8], if(empty(parameters('dataCollectionEndpointResourceId')), 'dataCollectionEndpoint', split(parameters('dataCollectionEndpointResourceId'), '/')[8]))]",
                              "properties": {
                                "linkedResourceId": "[parameters('dataCollectionEndpointResourceId')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('logAnalyticsWorkspaceResourceId')))]",
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', split(parameters('privateLinkScopeResourceId'), '/')[8], if(empty(parameters('logAnalyticsWorkspaceResourceId')), 'logAnalyticsWorkspace', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]))]",
                              "properties": {
                                "linkedResourceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Insights/dataCollectionEndpoints', replace(parameters('namingConvention').dataCollectionEndpoint, parameters('serviceToken'), parameters('service')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "value": "[replace(parameters('namingConvention').logAnalyticsWorkspace, parameters('serviceToken'), parameters('service'))]"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', replace(parameters('namingConvention').logAnalyticsWorkspace, parameters('serviceToken'), parameters('service')))]"
                    },
                    "dataCollectionRuleResourceId": {
                      "type": "string",
                      "value": "[if(parameters('enableAvdInsights'), resourceId('Microsoft.Insights/dataCollectionRules', format('microsoft-avdi-{0}', replace(parameters('namingConvention').dataCollectionRule, parameters('serviceToken'), parameters('service')))), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "avdPrivateDnsZoneResourceId": {
                    "value": "[parameters('avdPrivateDnsZoneResourceId')]"
                  },
                  "customImageId": {
                    "value": "[parameters('customImageId')]"
                  },
                  "customRdpProperty": {
                    "value": "[parameters('customRdpProperty')]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "enableAvdInsights": {
                    "value": "[parameters('enableAvdInsights')]"
                  },
                  "galleryImageOffer": {
                    "value": "[variables('galleryImageOffer')]"
                  },
                  "galleryImagePublisher": {
                    "value": "[variables('galleryImagePublisher')]"
                  },
                  "galleryImageSku": {
                    "value": "[variables('galleryImageSku')]"
                  },
                  "galleryItemId": {
                    "value": "[variables('galleryItemId')]"
                  },
                  "hostPoolDiagnosticSettingName": {
                    "value": "[parameters('namingConvention').hostPoolDiagnosticSetting]"
                  },
                  "hostPoolName": {
                    "value": "[variables('hostPoolName')]"
                  },
                  "hostPoolNetworkInterfaceName": {
                    "value": "[parameters('namingConvention').hostPoolNetworkInterface]"
                  },
                  "hostPoolPrivateEndpointName": {
                    "value": "[parameters('namingConvention').hostPoolPrivateEndpoint]"
                  },
                  "hostPoolPublicNetworkAccess": {
                    "value": "[parameters('hostPoolPublicNetworkAccess')]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "imageType": {
                    "value": "[variables('imageType')]"
                  },
                  "location": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
                  },
                  "maxSessionLimit": {
                    "value": "[parameters('maxSessionLimit')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "sessionHostNamePrefix": {
                    "value": "[parameters('sessionHostNamePrefix')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "validationEnvironment": {
                    "value": "[parameters('validationEnvironment')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "7050610185049005098"
                    }
                  },
                  "parameters": {
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "avdPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "customImageId": {
                      "type": "string"
                    },
                    "customRdpProperty": {
                      "type": "string"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "enableAvdInsights": {
                      "type": "bool"
                    },
                    "galleryImageOffer": {
                      "type": "string"
                    },
                    "galleryImagePublisher": {
                      "type": "string"
                    },
                    "galleryImageSku": {
                      "type": "string"
                    },
                    "galleryItemId": {
                      "type": "string"
                    },
                    "hostPoolDiagnosticSettingName": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolNetworkInterfaceName": {
                      "type": "string"
                    },
                    "hostPoolPrivateEndpointName": {
                      "type": "string"
                    },
                    "hostPoolPublicNetworkAccess": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "imageType": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "maxSessionLimit": {
                      "type": "int"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "sessionHostNamePrefix": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]"
                    },
                    "validationEnvironment": {
                      "type": "bool"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "customRdpProperty_Complete": "[if(contains(parameters('activeDirectorySolution'), 'MicrosoftEntraId'), format('{0}enablerdsaadauth:i:1;', parameters('customRdpProperty')), parameters('customRdpProperty'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/hostPools",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('hostPoolName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), coalesce(tryGet(parameters('tags'), 'Microsoft.DesktopVirtualization/hostPools'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customRdpProperty": "[variables('customRdpProperty_Complete')]",
                        "hostPoolType": "[parameters('hostPoolType')]",
                        "loadBalancerType": "[if(equals(parameters('hostPoolType'), 'Pooled'), 'DepthFirst', 'Persistent')]",
                        "maxSessionLimit": "[parameters('maxSessionLimit')]",
                        "personalDesktopAssignmentType": "[if(equals(parameters('hostPoolType'), 'Personal'), 'Automatic', null())]",
                        "preferredAppGroupType": "Desktop",
                        "publicNetworkAccess": "[parameters('hostPoolPublicNetworkAccess')]",
                        "registrationInfo": {
                          "expirationTime": "[dateTimeAdd(parameters('time'), 'PT2H')]",
                          "registrationTokenOperation": "Update"
                        },
                        "startVMOnConnect": true,
                        "validationEnvironment": "[parameters('validationEnvironment')]",
                        "vmTemplate": "[format('{{\"domain\":\"{0}\",\"galleryImageOffer\":{1},\"galleryImagePublisher\":{2},\"galleryImageSKU\":{3},\"imageType\":{4},\"customImageId\":{5},\"namePrefix\":\"{6}\",\"osDiskType\":\"{7}\",\"vmSize\":{{\"id\":\"{8}\",\"cores\":null,\"ram\":null,\"rdmaEnabled\": false,\"supportsMemoryPreservingMaintenance\": true}},\"galleryItemId\":{9},\"hibernate\":false,\"diskSizeGB\":0,\"securityType\":\"TrustedLaunch\",\"secureBoot\":true,\"vTPM\":true,\"vmInfrastructureType\":\"Cloud\",\"virtualProcessorCount\":null,\"memoryGB\":null,\"maximumMemoryGB\":null,\"minimumMemoryGB\":null,\"dynamicMemoryConfig\":false}}', parameters('domainName'), parameters('galleryImageOffer'), parameters('galleryImagePublisher'), parameters('galleryImageSku'), parameters('imageType'), parameters('customImageId'), parameters('sessionHostNamePrefix'), parameters('diskSku'), parameters('virtualMachineSize'), parameters('galleryItemId'))]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('hostPoolPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('hostPoolNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('hostPoolPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]",
                              "groupIds": [
                                "connection"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('hostPoolPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(split(parameters('avdPrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('avdPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('hostPoolPrivateEndpointName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableAvdInsights')]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', parameters('hostPoolName'))]",
                      "name": "[parameters('hostPoolDiagnosticSettingName')]",
                      "properties": {
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('hostPoolName')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-disk-access-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureBlobsPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), 'blob')))[0])]"
                  },
                  "hostPoolResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "namingConvention": {
                    "value": "[parameters('namingConvention')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "17867993625735344234"
                    }
                  },
                  "parameters": {
                    "azureBlobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "namingConvention": {
                      "type": "object"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/diskAccesses",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('namingConvention').diskAccess]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/diskAccesses'), createObject()), parameters('mlzTags'))]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('namingConvention').diskAccessPrivateEndpoint]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('namingConvention').diskAccessNetworkInterface]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('namingConvention').diskAccessPrivateEndpoint]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Compute/diskAccesses', parameters('namingConvention').diskAccess)]",
                              "groupIds": [
                                "disks"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/diskAccesses', parameters('namingConvention').diskAccess)]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('namingConvention').diskAccessPrivateEndpoint, parameters('namingConvention').diskAccess)]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('azureBlobsPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('namingConvention').diskAccessPrivateEndpoint)]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/diskAccesses', parameters('namingConvention').diskAccess)]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-policy-disks-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diskAccessResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-disk-access-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "7484620313012958975"
                    }
                  },
                  "parameters": {
                    "diskAccessResourceId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "location": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "parameters": "[if(not(empty(parameters('diskAccessResourceId'))), createObject('diskAccessId', createObject('type', 'String', 'metadata', createObject('displayName', 'Disk Access Resource Id', 'description', 'The resource Id of the Disk Access to associate to the managed disks.'))), createObject())]",
                    "operations": "[if(not(empty(parameters('diskAccessResourceId'))), createArray(createObject('operation', 'addOrReplace', 'field', 'Microsoft.Compute/disks/networkAccessPolicy', 'value', 'AllowPrivate'), createObject('operation', 'addOrReplace', 'field', 'Microsoft.Compute/disks/publicNetworkAccess', 'value', 'Disabled'), createObject('operation', 'addOrReplace', 'field', 'Microsoft.Compute/disks/diskAccessId', 'value', '[parameters(''diskAccessId'')]')), createArray(createObject('operation', 'addOrReplace', 'field', 'Microsoft.Compute/disks/networkAccessPolicy', 'value', 'DenyAll'), createObject('operation', 'addOrReplace', 'field', 'Microsoft.Compute/disks/publicNetworkAccess', 'value', 'Disabled')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/policyDefinitions",
                      "apiVersion": "2021-06-01",
                      "name": "DiskNetworkAccess",
                      "properties": {
                        "description": "Disable network access to managed disks.",
                        "displayName": "Disable Disk Access",
                        "mode": "All",
                        "parameters": "[variables('parameters')]",
                        "policyRule": {
                          "if": {
                            "field": "type",
                            "equals": "Microsoft.Compute/disks"
                          },
                          "then": {
                            "effect": "modify",
                            "details": {
                              "roleDefinitionIds": [
                                "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840"
                              ],
                              "operations": "[variables('operations')]"
                            }
                          }
                        },
                        "policyType": "Custom"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "assign-policy-disk-network-access",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "diskAccessResourceId": {
                            "value": "[parameters('diskAccessResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "policyDefinitionId": {
                            "value": "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess')]"
                          },
                          "policyDisplayName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess'), '2021-06-01').displayName]"
                          },
                          "policyName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess'), '2021-06-01').displayName]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "14741736339179028566"
                            }
                          },
                          "parameters": {
                            "diskAccessResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "policyDefinitionId": {
                              "type": "string"
                            },
                            "policyDisplayName": {
                              "type": "string"
                            },
                            "policyName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2022-06-01",
                              "name": "[parameters('policyName')]",
                              "location": "[parameters('location')]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "displayName": "[parameters('policyDisplayName')]",
                                "policyDefinitionId": "[parameters('policyDefinitionId')]",
                                "parameters": "[if(not(empty(parameters('diskAccessResourceId'))), createObject('diskAccessId', createObject('value', parameters('diskAccessResourceId'))), createObject())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "policyDefinitionId": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess')]"
                    },
                    "policyDisplayName": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess'), '2021-06-01').displayName]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-disk-access-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "name": {
                    "value": "[replace(variables('userAssignedIdentityNamePrefix'), parameters('serviceToken'), 'deployment')]"
                  },
                  "tags": {
                    "value": "[union(createObject('cm-resource-parent', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value), coalesce(tryGet(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject()), parameters('mlzTags'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "8126359916294794111"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "clientId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    },
                    "principalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-role-mgmt-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "principalType": {
                    "value": "ServicePrincipal"
                  },
                  "roleDefinitionId": {
                    "value": "082f0a83-3be5-4ba1-904c-961cca79b387"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "2900202208157733378"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string"
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-mgmt-vm-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentUserAssignedIdentityPrincipalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "deploymentUserAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "diskName": {
                    "value": "[replace(parameters('namingConvention').virtualMachineDisk, parameters('serviceToken'), 'mgt')]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "networkInterfaceName": {
                    "value": "[replace(parameters('namingConvention').virtualMachineNetworkInterface, parameters('serviceToken'), 'mgt')]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineName": {
                    "value": "[replace(parameters('namingConvention').virtualMachine, parameters('serviceToken'), 'mgt')]"
                  },
                  "virtualMachineAdminPassword": {
                    "value": "[parameters('virtualMachineAdminPassword')]"
                  },
                  "virtualMachineAdminUsername": {
                    "value": "[parameters('virtualMachineAdminUsername')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "8499889079063990738"
                    }
                  },
                  "parameters": {
                    "deploymentUserAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "diskName": {
                      "type": "string"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineAdminPassword": {
                      "type": "securestring"
                    },
                    "virtualMachineAdminUsername": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "tagsVirtualMachines": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-05-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": false,
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-11-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[variables('tagsVirtualMachines')]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "Standard_B2s"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2019-datacenter-core-g2",
                            "version": "latest"
                          },
                          "osDisk": {
                            "deleteOption": "Delete",
                            "osType": "Windows",
                            "createOption": "FromImage",
                            "caching": "None",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "[parameters('diskSku')]"
                            },
                            "name": "[parameters('diskName')]"
                          },
                          "dataDisks": []
                        },
                        "osProfile": {
                          "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                          "adminUsername": "[parameters('virtualMachineAdminUsername')]",
                          "computerName": "[parameters('virtualMachineName')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "securityProfile": {
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch",
                          "encryptionAtHost": true
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "licenseType": "Windows_Server"
                      },
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('deploymentUserAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'IaaSAntimalware')]",
                      "location": "[parameters('location')]",
                      "tags": "[variables('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": false,
                        "settings": {
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "7",
                            "time": "120",
                            "scanType": "Quick"
                          },
                          "Exclusions": {}
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2019-07-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'JsonADDomainExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[variables('tagsVirtualMachines')]",
                      "properties": {
                        "forceUpdateTag": "[parameters('timestamp')]",
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('domainName')]",
                          "Options": "3",
                          "OUPath": "[parameters('organizationalUnitPath')]",
                          "Restart": "true",
                          "User": "[parameters('domainJoinUserPrincipalName')]"
                        },
                        "protectedSettings": {
                          "Password": "[parameters('domainJoinPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('virtualMachineName'))]",
                      "name": "[guid(parameters('deploymentUserAssignedIdentityPrincipalId'), 'a959dbd1-f747-45e3-8ba6-dd80f235f97c', resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                        "principalId": "[parameters('deploymentUserAssignedIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vdag-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
                  },
                  "desktopApplicationGroupName": {
                    "value": "[parameters('namingConvention').applicationGroup]"
                  },
                  "hostPoolResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "locationControlPlane": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "locationVirtualMachines": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "securityPrincipalObjectIds": {
                    "value": "[parameters('securityPrincipalObjectIds')]"
                  },
                  "desktopFriendlyName": {
                    "value": "[parameters('desktopFriendlyName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-mgmt-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "2978476722162927909"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "desktopApplicationGroupName": {
                      "type": "string"
                    },
                    "desktopFriendlyName": {
                      "type": "string"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "locationControlPlane": {
                      "type": "string"
                    },
                    "locationVirtualMachines": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "securityPrincipalObjectIds": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": "Param(\r\n    [string]$ApplicationGroupName,\r\n    [string]$FriendlyName,\r\n    [string]$ResourceGroupName,\r\n    [string]$ResourceManagerUri,\r\n    [string]$SubscriptionId,\r\n    [string]$UserAssignedIdentityClientId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\n# Wait for role assignment propagation\r\nStart-Sleep -Seconds 30\r\n\r\n# Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n$ResourceManagerUriFixed = if ($ResourceManagerUri[-1] -eq '/') {$ResourceManagerUri} else {$ResourceManagerUri + '/'}\r\n\r\n# Get an access token for Azure resources\r\n$AzureManagementAccessToken = (Invoke-RestMethod `\r\n    -Headers @{Metadata=\"true\"} `\r\n    -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n# Set header for Azure Management API\r\n$AzureManagementHeader = @{\r\n    'Content-Type'='application/json'\r\n    'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n}\r\n\r\n# Update the friendly name on the session desktop\r\nInvoke-RestMethod `\r\n    -Body (@{properties = @{friendlyName = $FriendlyName.Replace('\"', '')}} | ConvertTo-Json) `\r\n    -Headers $AzureManagementHeader `\r\n    -Method 'PATCH' `\r\n    -Uri $($ResourceManagerUriFixed + 'subscriptions/' + $SubscriptionId + '/resourceGroups/' + $ResourceGroupName + '/providers/Microsoft.DesktopVirtualization/applicationGroups/' + $ApplicationGroupName + '/desktops/SessionDesktop?api-version=2023-09-05') | Out-Null"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/applicationGroups",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('desktopApplicationGroupName')]",
                      "location": "[parameters('locationControlPlane')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.DesktopVirtualization/applicationGroups'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "hostPoolArmPath": "[parameters('hostPoolResourceId')]",
                        "applicationGroupType": "Desktop"
                      }
                    },
                    {
                      "copy": {
                        "name": "roleAssignment_ApplicationGroup",
                        "count": "[length(range(0, length(parameters('securityPrincipalObjectIds'))))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', parameters('desktopApplicationGroupName'))]",
                      "name": "[guid(parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]], '1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63', resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName')))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63')]",
                        "principalId": "[parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]]]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('desktopFriendlyName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vdapp-friendly-name-{0}', parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "name": {
                            "value": "Update-AvdDesktop"
                          },
                          "parameters": {
                            "value": [
                              {
                                "name": "ApplicationGroupName",
                                "value": "[parameters('desktopApplicationGroupName')]"
                              },
                              {
                                "name": "FriendlyName",
                                "value": "[parameters('desktopFriendlyName')]"
                              },
                              {
                                "name": "ResourceGroupName",
                                "value": "[resourceGroup().name]"
                              },
                              {
                                "name": "ResourceManagerUri",
                                "value": "[environment().resourceManager]"
                              },
                              {
                                "name": "SubscriptionId",
                                "value": "[subscription().subscriptionId]"
                              },
                              {
                                "name": "UserAssignedIdentityClientId",
                                "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                              }
                            ]
                          },
                          "script": {
                            "value": "[variables('$fxv#0')]"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('virtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "10620600674782878506"
                            }
                          },
                          "parameters": {
                            "asyncExecution": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "script": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "treatFailureAsDeploymentFailure": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-09-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "asyncExecution": "[parameters('asyncExecution')]",
                                "parameters": "[parameters('parameters')]",
                                "source": {
                                  "script": "[parameters('script')]"
                                },
                                "treatFailureAsDeploymentFailure": "[parameters('treatFailureAsDeploymentFailure')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-mgmt-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('recoveryServices')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-rsv-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureBlobsPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), 'blob')))[0])]"
                  },
                  "azureQueueStoragePrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), 'queue')))[0])]"
                  },
                  "deployFslogix": {
                    "value": "[parameters('deployFslogix')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "recoveryServicesPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', startsWith(lambdaVariables('name'), format('privatelink.{0}.backup.windowsazure', parameters('recoveryServicesGeo')))))[0])]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[parameters('namingConvention').recoveryServicesVault]"
                  },
                  "recoveryServicesVaultNetworkInterfaceName": {
                    "value": "[parameters('namingConvention').recoveryServicesVaultNetworkInterface]"
                  },
                  "recoveryServicesVaultPrivateEndpointName": {
                    "value": "[parameters('namingConvention').recoveryServicesVaultPrivateEndpoint]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "3376568613901296667"
                    }
                  },
                  "parameters": {
                    "azureBlobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "azureQueueStoragePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "deployFslogix": {
                      "type": "bool"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "recoveryServicesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "recoveryServicesVaultNetworkInterfaceName": {
                      "type": "string"
                    },
                    "recoveryServicesVaultPrivateEndpointName": {
                      "type": "string"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeZone": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.RecoveryServices/vaults",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('recoveryServicesVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), createObject()), parameters('mlzTags'))]",
                      "sku": {
                        "name": "RS0",
                        "tier": "Standard"
                      },
                      "properties": {}
                    },
                    {
                      "condition": "[and(parameters('deployFslogix'), equals(parameters('storageService'), 'AzureFiles'))]",
                      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('recoveryServicesVaultName'), 'AvdPolicyStorage')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "backupManagementType": "AzureStorage",
                        "schedulePolicy": {
                          "scheduleRunFrequency": "Daily",
                          "scheduleRunTimes": [
                            "23:00"
                          ],
                          "schedulePolicyType": "SimpleSchedulePolicy"
                        },
                        "retentionPolicy": {
                          "retentionPolicyType": "LongTermRetentionPolicy",
                          "dailySchedule": {
                            "retentionTimes": [
                              "23:00"
                            ],
                            "retentionDuration": {
                              "count": 30,
                              "durationType": "Days"
                            }
                          }
                        },
                        "timeZone": "[parameters('timeZone')]",
                        "workLoadType": "AzureFileShare"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('deployFslogix'))]",
                      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('recoveryServicesVaultName'), 'AvdPolicyVm')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "backupManagementType": "AzureIaasVM",
                        "instantRpRetentionRangeInDays": 2,
                        "policyType": "V2",
                        "retentionPolicy": {
                          "retentionPolicyType": "LongTermRetentionPolicy",
                          "dailySchedule": {
                            "retentionTimes": [
                              "23:00"
                            ],
                            "retentionDuration": {
                              "count": 30,
                              "durationType": "Days"
                            }
                          }
                        },
                        "schedulePolicy": {
                          "schedulePolicyType": "SimpleSchedulePolicyV2",
                          "scheduleRunFrequency": "Daily",
                          "dailySchedule": {
                            "scheduleRunTimes": [
                              "23:00"
                            ]
                          }
                        },
                        "timeZone": "[parameters('timeZone')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('recoveryServicesVaultPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('recoveryServicesVaultNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('recoveryServicesVaultPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]",
                              "groupIds": [
                                "AzureBackup"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('recoveryServicesVaultPrivateEndpointName'), parameters('recoveryServicesVaultName'))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(parameters('recoveryServicesPrivateDnsZoneResourceId'), '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('recoveryServicesPrivateDnsZoneResourceId')]"
                            }
                          },
                          {
                            "name": "[replace(parameters('azureQueueStoragePrivateDnsZoneResourceId'), '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('azureQueueStoragePrivateDnsZoneResourceId')]"
                            }
                          },
                          {
                            "name": "[replace(parameters('azureBlobsPrivateDnsZoneResourceId'), '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('azureBlobsPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('recoveryServicesVaultPrivateEndpointName'))]",
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('recoveryServicesVaultName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('fslogixStorageService'), 'AzureFiles Premium')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-function-app-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "delegatedSubnetResourceId": {
                    "value": "[filter(parameters('subnets'), lambda('subnet', contains(lambdaVariables('subnet').name, 'FunctionAppOutbound')))[0].id]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "enableApplicationInsights": {
                    "value": "[parameters('enableApplicationInsights')]"
                  },
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "namingConvention": {
                    "value": "[parameters('namingConvention')]"
                  },
                  "privateDnsZoneResourceIdPrefix": {
                    "value": "[parameters('privateDnsZoneResourceIdPrefix')]"
                  },
                  "privateDnsZones": {
                    "value": "[parameters('privateDnsZones')]"
                  },
                  "privateLinkScopeResourceId": {
                    "value": "[parameters('privateLinkScopeResourceId')]"
                  },
                  "resourceAbbreviations": {
                    "value": "[parameters('resourceAbbreviations')]"
                  },
                  "resourceGroupProfiles": {
                    "value": "[parameters('resourceGroupProfiles')]"
                  },
                  "serviceToken": {
                    "value": "[parameters('serviceToken')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "2911639692498568312"
                    }
                  },
                  "parameters": {
                    "delegatedSubnetResourceId": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "enableApplicationInsights": {
                      "type": "bool"
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "keyExpirationInDays": {
                      "type": "int",
                      "defaultValue": 30
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "namingConvention": {
                      "type": "object"
                    },
                    "privateDnsZoneResourceIdPrefix": {
                      "type": "string"
                    },
                    "privateDnsZones": {
                      "type": "array"
                    },
                    "privateLinkScopeResourceId": {
                      "type": "string"
                    },
                    "resourceAbbreviations": {
                      "type": "object"
                    },
                    "resourceGroupProfiles": {
                      "type": "string"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "$fxv#0": "# This file enables modules to be automatically managed by the Functions service.\r\n# See https://aka.ms/functionsmanageddependency for additional information.\r\n#\r\n@{\r\n    # For latest supported version, go to 'https://www.powershellgallery.com/packages/Az'. \r\n    # To use the Az module in your function app, please uncomment the line below.\r\n    # 'Az' = '7.*'\r\n}",
                    "$fxv#1": "param($Timer)\r\n\r\ntry\r\n{\r\n\t[string]$FileShareName = $env:FileShareName\r\n\t[string]$ResourceGroupName = $env:ResourceGroupName\r\n\t[string]$ResourceManagerUrl = $env:ResourceManagerUrl\r\n\t[string]$StorageSuffix = $env:StorageSuffix\r\n\t[string]$SubscriptionId = $env:SubscriptionId\r\n\r\n\t$ErrorActionPreference = 'Stop'\r\n\t$WarningPreference = 'SilentlyContinue'\r\n\r\n\t#region Functions\r\n\tfunction Write-Log \r\n    {\r\n\t\t[CmdletBinding()]\r\n\t\tparam (\r\n\t\t\t[Parameter(Mandatory = $false)]\r\n\t\t\t[switch]$Err,\r\n\r\n\t\t\t[Parameter(Mandatory = $true)]\r\n\t\t\t[string]$Message,\r\n\r\n\t\t\t[Parameter(Mandatory = $true)]\r\n\t\t\t[string]$ResourceName,\r\n\r\n\t\t\t[Parameter(Mandatory = $false)]\r\n\t\t\t[switch]$Warn\r\n\t\t)\r\n\r\n\t\t[string]$MessageTimeStamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'\r\n\t\t$Message = \"[$($MyInvocation.ScriptLineNumber)] [$($ResourceName)] $Message\"\r\n\t\t[string]$WriteMessage = \"[$($MessageTimeStamp)] $Message\"\r\n\r\n\t\tif ($Err)\r\n        {\r\n\t\t\tWrite-Error $WriteMessage\r\n\t\t\t$Message = \"ERROR: $Message\"\r\n\t\t}\r\n\t\telseif ($Warn)\r\n        {\r\n\t\t\tWrite-Warning $WriteMessage\r\n\t\t\t$Message = \"WARN: $Message\"\r\n\t\t}\r\n\t\telse \r\n        {\r\n\t\t\tWrite-Output $WriteMessage\r\n\t\t}\r\n\t}\r\n\t#endregion Functions\r\n\r\n\t# Note: https://stackoverflow.com/questions/41674518/powershell-setting-security-protocol-to-tls-1-2\r\n\t[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\r\n\r\n\r\n\t#region Azure Authentication\r\n    $AccessToken = $null\r\n    try\r\n    {\r\n\t\t$TokenAuthURI = $env:IDENTITY_ENDPOINT + '?resource=' + $ResourceManagerUrl + '&api-version=2019-08-01'\r\n\t\t$TokenResponse = Invoke-RestMethod -Method Get -Headers @{\"X-IDENTITY-HEADER\"=\"$env:IDENTITY_HEADER\"} -Uri $TokenAuthURI\r\n\t\t$AccessToken = $TokenResponse.access_token\r\n\t\t$Header = @{\r\n\t\t\t'Content-Type'='application/json'\r\n\t\t\t'Authorization'='Bearer ' + $AccessToken\r\n\t\t}\r\n    }\r\n    catch\r\n    {\r\n        throw [System.Exception]::new('Failed to authenticate Azure with application ID, tenant ID, subscription ID', $PSItem.Exception)\r\n    }\r\n    Write-Log -ResourceName \"$SubscriptionId\" -Message \"Successfully authenticated with Azure using a managed identity\"\r\n\t#endregion Azure Authentication\r\n\r\n\t# Get storage accounts\r\n\t$Uri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $ResourceGroupName + '/providers/Microsoft.Storage/storageAccounts?api-version=2023-05-01'\r\n\t$StorageAccountNames = (Invoke-RestMethod -Headers $Header -Method 'GET' -Uri $Uri).value.name\r\n\r\n\tforeach($StorageAccountName in $StorageAccountNames)\r\n\t{\r\n\t\t$ShareUpdateUri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $ResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/fileServices/default/shares/' + $FileShareName + '?api-version=2023-05-01'\r\n\r\n\t\t# Get file share info\r\n\t\t$ShareGetUri = $ResourceManagerUrl + 'subscriptions/' + $SubscriptionId  + '/resourceGroups/' + $ResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/fileServices/default/shares/' + $FileShareName + '?api-version=2023-05-01&$expand=stats'\r\n\t\t$PFS = (Invoke-RestMethod -Headers $Header -Method 'GET' -Uri $ShareGetUri).properties\r\n\r\n\t\t# Set variables for provisioned capacity and used capacity\r\n\t\t$ProvisionedCapacity = $PFS.shareQuota\r\n\t\t$UsedCapacity = $PFS.ShareUsageBytes\r\n\t\tWrite-Log -ResourceName \"$StorageAccountName/$FileShareName\" -Message \"Share Capacity: $($ProvisionedCapacity)GB\"\r\n\t\tWrite-Log -ResourceName \"$StorageAccountName/$FileShareName\" -Message \"Share Usage: $([math]::Round($UsedCapacity/1GB, 0))GB\"\r\n\r\n\t\t# GB Based Scaling\r\n\t\t# No scaling if no usage\r\n\t\tif($UsedCapacity -eq 0)\r\n\t\t{\r\n\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$FileShareName\" -Message \"Share Usage is 0GB. No Changes.\"\r\n\t\t}\r\n\t\t# Slow scaling up to 500GB\r\n\t\t# Increases share quota by 100GB if less than 50GB remains on the share\r\n\t\t# This allows time for an AVD Stamp to be rolled out \r\n\t\telseif ($ProvisionedCapacity -lt 500)\r\n\t\t{\r\n\t\t\tif (($ProvisionedCapacity - ($UsedCapacity / ([Math]::Pow(2,30)))) -lt 50) {\r\n\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$FileShareName\" -Message \"Share Usage has surpassed the Share Quota remaining threshold of 50GB. Increasing the file share quota by 100GB.\" \r\n\t\t\t\t$Quota = $ProvisionedCapacity + 100\r\n\t\t\t\tInvoke-RestMethod `\r\n\t\t\t\t\t-Body (@{properties = @{shareQuota = $Quota}} | ConvertTo-Json) `\r\n\t\t\t\t\t-Headers $Header `\r\n\t\t\t\t\t-Method 'PATCH' `\r\n\t\t\t\t\t-Uri $ShareUpdateUri | Out-Null\r\n\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$FileShareName\" -Message \"New Capacity: $($Quota)GB\"\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$FileShareName\" -Message \"Share Usage is below Share Quota remaining threshold of 50GB. No Changes.\"\r\n\t\t\t}\r\n\t\t}\r\n\t\t# Aggressive scaling\r\n\t\t# Increases share quota by 500GB if less than 500GB remains on the share\r\n\t\t# This ensures plenty of space is available during mass onboarding\r\n\t\telse \r\n\t\t{\r\n\t\t\tif (($ProvisionedCapacity - ($UsedCapacity / ([Math]::Pow(2,30)))) -lt 500) {\r\n\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$FileShareName\" -Message \"Share Usage has surpassed the Share Quota remaining threshold of 500GB. Increasing the file share quota by 500GB.\" \r\n\t\t\t\t$Quota = $ProvisionedCapacity + 500\r\n\t\t\t\tInvoke-RestMethod `\r\n\t\t\t\t\t-Body (@{properties = @{shareQuota = $Quota}} | ConvertTo-Json) `\r\n\t\t\t\t\t-Headers $Header `\r\n\t\t\t\t\t-Method 'PATCH' `\r\n\t\t\t\t\t-Uri $ShareUpdateUri | Out-Null\r\n\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$FileShareName\" -Message \"New Capacity: $($Quota)GB\"\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tWrite-Log -ResourceName \"$StorageAccountName/$FileShareName\" -Message \"Share Usage is below Share Quota remaining threshold of 500GB. No Changes.\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\ncatch \r\n{\r\n\t$ErrContainer = $PSItem\r\n\t# $ErrContainer = $_\r\n\r\n\t[string]$ErrMsg = $ErrContainer | Format-List -Force | Out-String\r\n\t$ErrMsg += \"Version: $Version`n\"\r\n\r\n\tif (Get-Command 'Write-Log' -ErrorAction:SilentlyContinue)\r\n    {\r\n\t\tWrite-Log -ResourceName \"$StorageAccountName/$FileShareName\" -Err -Message $ErrMsg -ErrorAction:Continue\r\n\t}\r\n\telse\r\n    {\r\n\t\tWrite-Error $ErrMsg -ErrorAction:Continue\r\n\t}\r\n\r\n\tthrow [System.Exception]::new($ErrMsg, $ErrContainer.Exception)\r\n}",
                    "$fxv#2": "# Authentication is provided in the script",
                    "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]",
                    "functionAppKeyword": "[if(or(equals(environment().name, 'AzureCloud'), equals(environment().name, 'AzureUSGovernment')), 'azurewebsites', 'appservice')]",
                    "functionAppScmPrivateDnsZoneResourceId": "[format('{0}scm.{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), variables('functionAppKeyword'))))[0])]",
                    "service": "aipfsq",
                    "storageSubResources": [
                      {
                        "name": "blob",
                        "id": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), 'blob')))[0])]",
                        "nic": "[parameters('namingConvention').storageAccountBlobNetworkInterface]",
                        "pe": "[parameters('namingConvention').storageAccountBlobPrivateEndpoint]"
                      },
                      {
                        "name": "file",
                        "id": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), 'file')))[0])]",
                        "nic": "[parameters('namingConvention').storageAccountFileNetworkInterface]",
                        "pe": "[parameters('namingConvention').storageAccountFilePrivateEndpoint]"
                      },
                      {
                        "name": "queue",
                        "id": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), 'queue')))[0])]",
                        "nic": "[parameters('namingConvention').storageAccountQueueNetworkInterface]",
                        "pe": "[parameters('namingConvention').storageAccountQueuePrivateEndpoint]"
                      },
                      {
                        "name": "table",
                        "id": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), 'table')))[0])]",
                        "nic": "[parameters('namingConvention').storageAccountTableNetworkInterface]",
                        "pe": "[parameters('namingConvention').storageAccountTablePrivateEndpoint]"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[replace(parameters('namingConvention').userAssignedIdentity, parameters('serviceToken'), variables('service'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject()), parameters('mlzTags'))]"
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.KeyVault/vaults'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "enabledForDeployment": false,
                        "enabledForDiskEncryption": false,
                        "enabledForTemplateDeployment": false,
                        "enablePurgeProtection": true,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": true,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "publicNetworkAccess": "Disabled",
                        "sku": {
                          "family": "A",
                          "name": "premium"
                        },
                        "softDeleteRetentionInDays": "[if(or(equals(parameters('environmentAbbreviation'), 'dev'), equals(parameters('environmentAbbreviation'), 'test')), 7, 90)]",
                        "tenantId": "[subscription().tenantId]"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)))]",
                      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', replace(parameters('namingConvention').userAssignedIdentity, parameters('serviceToken'), variables('service'))), 'e147488a-f6f5-4113-8e2d-b22465e65bf6', resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id))))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', replace(parameters('namingConvention').userAssignedIdentity, parameters('serviceToken'), variables('service'))), '2023-01-31').principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', replace(parameters('namingConvention').userAssignedIdentity, parameters('serviceToken'), variables('service')))]",
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[replace(parameters('namingConvention').keyVaultPrivateEndpoint, parameters('serviceToken'), variables('service'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[replace(parameters('namingConvention').keyVaultNetworkInterface, parameters('serviceToken'), variables('service'))]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[replace(parameters('namingConvention').keyVaultPrivateEndpoint, parameters('serviceToken'), variables('service'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)))]",
                              "groupIds": [
                                "vault"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', replace(parameters('namingConvention').keyVaultPrivateEndpoint, parameters('serviceToken'), variables('service')), format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), 'vaultcore')))[0])]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', replace(parameters('namingConvention').keyVaultPrivateEndpoint, parameters('serviceToken'), variables('service')))]",
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)), 'StorageEncryptionKey')]",
                      "properties": {
                        "attributes": {
                          "enabled": true
                        },
                        "keySize": 4096,
                        "kty": "RSA",
                        "rotationPolicy": {
                          "attributes": {
                            "expiryTime": "[format('P{0}D', string(parameters('keyExpirationInDays')))]"
                          },
                          "lifetimeActions": [
                            {
                              "action": {
                                "type": "Notify"
                              },
                              "trigger": {
                                "timeBeforeExpiry": "P10D"
                              }
                            },
                            {
                              "action": {
                                "type": "Rotate"
                              },
                              "trigger": {
                                "timeAfterCreate": "[format('P{0}D', string(sub(parameters('keyExpirationInDays'), 7)))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id)]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject()), parameters('mlzTags'))]",
                      "sku": {
                        "name": "Standard_LRS"
                      },
                      "kind": "StorageV2",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', replace(parameters('namingConvention').userAssignedIdentity, parameters('serviceToken'), variables('service'))))]": {}
                        }
                      },
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowCrossTenantReplication": false,
                        "allowedCopyScope": "PrivateLink",
                        "allowSharedKeyAccess": false,
                        "azureFilesIdentityBasedAuthentication": {
                          "directoryServiceOptions": "None"
                        },
                        "defaultToOAuthAuthentication": false,
                        "dnsEndpointType": "Standard",
                        "encryption": {
                          "identity": {
                            "userAssignedIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', replace(parameters('namingConvention').userAssignedIdentity, parameters('serviceToken'), variables('service')))]"
                          },
                          "requireInfrastructureEncryption": true,
                          "keyvaultproperties": {
                            "keyvaulturi": "[reference(resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id))), '2022-07-01').vaultUri]",
                            "keyname": "StorageEncryptionKey"
                          },
                          "services": {
                            "file": {
                              "keyType": "Account",
                              "enabled": true
                            },
                            "table": {
                              "keyType": "Account",
                              "enabled": true
                            },
                            "queue": {
                              "keyType": "Account",
                              "enabled": true
                            },
                            "blob": {
                              "keyType": "Account",
                              "enabled": true
                            }
                          },
                          "keySource": "Microsoft.KeyVault"
                        },
                        "largeFileSharesState": "Disabled",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "virtualNetworkRules": [],
                          "ipRules": [],
                          "defaultAction": "Deny"
                        },
                        "publicNetworkAccess": "Disabled",
                        "supportsHttpsTrafficOnly": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)), 'StorageEncryptionKey')]",
                        "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', replace(parameters('namingConvention').keyVaultPrivateEndpoint, parameters('serviceToken'), variables('service')), format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)))]",
                        "[resourceId('Microsoft.Network/privateEndpoints', replace(parameters('namingConvention').keyVaultPrivateEndpoint, parameters('serviceToken'), variables('service')))]",
                        "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id))), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', replace(parameters('namingConvention').userAssignedIdentity, parameters('serviceToken'), variables('service'))), 'e147488a-f6f5-4113-8e2d-b22465e65bf6', resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)))))]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', replace(parameters('namingConvention').userAssignedIdentity, parameters('serviceToken'), variables('service')))]",
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(replace(parameters('namingConvention').keyVault, parameters('serviceToken'), variables('service')), resourceGroup().id)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id), 'default')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateEndpoints_storage",
                        "count": "[length(variables('storageSubResources'))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[replace(variables('storageSubResources')[copyIndex()].pe, parameters('serviceToken'), variables('service'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[replace(variables('storageSubResources')[copyIndex()].nic, parameters('serviceToken'), variables('service'))]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[replace(variables('storageSubResources')[copyIndex()].pe, parameters('serviceToken'), variables('service'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id))]",
                              "groupIds": [
                                "[variables('storageSubResources')[copyIndex()].name]"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneGroups_storage",
                        "count": "[length(variables('storageSubResources'))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', replace(variables('storageSubResources')[copyIndex()].pe, parameters('serviceToken'), variables('service')), uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[variables('storageSubResources')[copyIndex()].id]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', replace(variables('storageSubResources')[copyIndex()].pe, parameters('serviceToken'), variables('service')))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableApplicationInsights')]",
                      "type": "microsoft.insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id), 'default')]",
                      "name": "[replace(parameters('namingConvention').storageAccountDiagnosticSetting, format('{0}-{1}', parameters('serviceToken'), parameters('resourceAbbreviations').storageAccounts), format('blob-{0}-scale', parameters('resourceAbbreviations').storageAccounts))]",
                      "properties": {
                        "logs": [
                          {
                            "category": "StorageWrite",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "category": "Transaction",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id), 'default')]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableApplicationInsights')]",
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[replace(parameters('namingConvention').applicationInsights, parameters('serviceToken'), variables('service'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Insights/components'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "Application_Type": "web",
                        "publicNetworkAccessForIngestion": "Disabled",
                        "publicNetworkAccessForQuery": "Disabled"
                      },
                      "kind": "web"
                    },
                    {
                      "type": "Microsoft.Web/serverfarms",
                      "apiVersion": "2023-01-01",
                      "name": "[replace(parameters('namingConvention').appServicePlan, parameters('serviceToken'), variables('service'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Web/serverfarms'), createObject()), parameters('mlzTags'))]",
                      "sku": {
                        "name": "P1v3",
                        "tier": "PremiumV3",
                        "size": "P1v3",
                        "family": "Pv3",
                        "capacity": 1
                      },
                      "kind": "functionapp"
                    },
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2023-01-01",
                      "name": "[uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id)]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Web/sites'), createObject()), parameters('mlzTags'))]",
                      "kind": "functionapp",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "clientAffinityEnabled": false,
                        "httpsOnly": true,
                        "publicNetworkAccess": "Disabled",
                        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', replace(parameters('namingConvention').appServicePlan, parameters('serviceToken'), variables('service')))]",
                        "siteConfig": {
                          "alwaysOn": true,
                          "appSettings": "[union(createArray(createObject('name', 'AzureWebJobsStorage__blobServiceUri', 'value', format('https://{0}.blob.{1}', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id), environment().suffixes.storage)), createObject('name', 'AzureWebJobsStorage__credential', 'value', 'managedidentity'), createObject('name', 'AzureWebJobsStorage__queueServiceUri', 'value', format('https://{0}.queue.{1}', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id), environment().suffixes.storage)), createObject('name', 'AzureWebJobsStorage__tableServiceUri', 'value', format('https://{0}.table.{1}', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id), environment().suffixes.storage)), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4'), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', 'powershell'), createObject('name', 'WEBSITE_LOAD_USER_PROFILE', 'value', '1'), createObject('name', 'FileShareName', 'value', 'profile-containers'), createObject('name', 'ResourceGroupName', 'value', parameters('resourceGroupProfiles')), createObject('name', 'ResourceManagerUrl', 'value', if(endsWith(environment().resourceManager, '/'), environment().resourceManager, format('{0}/', environment().resourceManager))), createObject('name', 'StorageSuffix', 'value', environment().suffixes.storage), createObject('name', 'SubscriptionId', 'value', subscription().subscriptionId)), if(parameters('enableApplicationInsights'), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference(resourceId('Microsoft.Insights/components', replace(parameters('namingConvention').applicationInsights, parameters('serviceToken'), variables('service'))), '2020-02-02').ConnectionString)), createArray()))]",
                          "cors": {
                            "allowedOrigins": [
                              "[format('{0}', environment().portal)]",
                              "[format('https://functions-next.{0}', variables('cloudSuffix'))]",
                              "[format('https://functions-staging.{0}', variables('cloudSuffix'))]",
                              "[format('https://functions.{0}', variables('cloudSuffix'))]"
                            ]
                          },
                          "ftpsState": "Disabled",
                          "netFrameworkVersion": "v6.0",
                          "powerShellVersion": "7.4",
                          "publicNetworkAccess": "Disabled",
                          "use32BitWorkerProcess": false
                        },
                        "virtualNetworkSubnetId": "[parameters('delegatedSubnetResourceId')]",
                        "vnetContentShareEnabled": false,
                        "vnetRouteAllEnabled": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Insights/components', replace(parameters('namingConvention').applicationInsights, parameters('serviceToken'), variables('service')))]",
                        "[resourceId('Microsoft.Web/serverfarms', replace(parameters('namingConvention').appServicePlan, parameters('serviceToken'), variables('service')))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[replace(parameters('namingConvention').functionAppPrivateEndpoint, parameters('serviceToken'), variables('service'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[replace(parameters('namingConvention').functionAppNetworkInterface, parameters('serviceToken'), variables('service'))]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[replace(parameters('namingConvention').functionAppPrivateEndpoint, parameters('serviceToken'), variables('service'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id))]",
                              "groupIds": [
                                "sites"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', replace(parameters('namingConvention').functionAppPrivateEndpoint, parameters('serviceToken'), variables('service')), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[format('{0}{1}', parameters('privateDnsZoneResourceIdPrefix'), filter(parameters('privateDnsZones'), lambda('name', contains(lambdaVariables('name'), variables('functionAppKeyword'))))[0])]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', replace(parameters('namingConvention').functionAppPrivateEndpoint, parameters('serviceToken'), variables('service')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Web/sites/functions",
                      "apiVersion": "2020-12-01",
                      "name": "[format('{0}/{1}', uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id), 'auto-increase-file-share-quota')]",
                      "properties": {
                        "config": {
                          "disabled": false,
                          "bindings": [
                            {
                              "name": "Timer",
                              "type": "timerTrigger",
                              "direction": "in",
                              "schedule": "0 */15 * * * *"
                            }
                          ]
                        },
                        "files": {
                          "requirements.psd1": "[variables('$fxv#0')]",
                          "run.ps1": "[variables('$fxv#1')]",
                          "../profile.ps1": "[variables('$fxv#2')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableApplicationInsights')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-private-link-scope-appi-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[split(parameters('privateLinkScopeResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('privateLinkScopeResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "applicationInsightsResourceId": {
                            "value": "[resourceId('Microsoft.Insights/components', replace(parameters('namingConvention').applicationInsights, parameters('serviceToken'), variables('service')))]"
                          },
                          "privateLinkScopeResourceId": {
                            "value": "[parameters('privateLinkScopeResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "7813436942971555276"
                            }
                          },
                          "parameters": {
                            "applicationInsightsResourceId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "dataCollectionEndpointResourceId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "privateLinkScopeResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[not(empty(parameters('applicationInsightsResourceId')))]",
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', split(parameters('privateLinkScopeResourceId'), '/')[8], if(empty(parameters('applicationInsightsResourceId')), 'applicationInsights', split(parameters('applicationInsightsResourceId'), '/')[8]))]",
                              "properties": {
                                "linkedResourceId": "[parameters('applicationInsightsResourceId')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('dataCollectionEndpointResourceId')))]",
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', split(parameters('privateLinkScopeResourceId'), '/')[8], if(empty(parameters('dataCollectionEndpointResourceId')), 'dataCollectionEndpoint', split(parameters('dataCollectionEndpointResourceId'), '/')[8]))]",
                              "properties": {
                                "linkedResourceId": "[parameters('dataCollectionEndpointResourceId')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('logAnalyticsWorkspaceResourceId')))]",
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', split(parameters('privateLinkScopeResourceId'), '/')[8], if(empty(parameters('logAnalyticsWorkspaceResourceId')), 'logAnalyticsWorkspace', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]))]",
                              "properties": {
                                "linkedResourceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Insights/components', replace(parameters('namingConvention').applicationInsights, parameters('serviceToken'), variables('service')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('set-role-assignment-storage-{0}', parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Web/sites', uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id)), '2023-01-01', 'full').identity.principalId]"
                          },
                          "principalType": {
                            "value": "ServicePrincipal"
                          },
                          "roleDefinitionId": {
                            "value": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
                          },
                          "storageAccountName": {
                            "value": "[uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id)]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "13247285179834781093"
                            }
                          },
                          "parameters": {
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string"
                            },
                            "roleDefinitionId": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                              "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                                "principalId": "[parameters('principalId')]",
                                "principalType": "[parameters('principalType')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), variables('service')), resourceGroup().id))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-scm-a-record-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[split(variables('functionAppScmPrivateDnsZoneResourceId'), '/')[2]]",
                      "resourceGroup": "[split(variables('functionAppScmPrivateDnsZoneResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "functionAppName": {
                            "value": "[uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id)]"
                          },
                          "ipv4Address": {
                            "value": "[filter(reference(resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', replace(parameters('namingConvention').functionAppPrivateEndpoint, parameters('serviceToken'), variables('service')), 'default'), '2021-08-01').privateDnsZoneConfigs[0].properties.recordSets, lambda('record', equals(lambdaVariables('record').recordSetName, uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id))))[0].ipAddresses[0]]"
                          },
                          "privateDnsZoneName": {
                            "value": "[split(variables('functionAppScmPrivateDnsZoneResourceId'), '/')[8]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "8891146554365459202"
                            }
                          },
                          "parameters": {
                            "functionAppName": {
                              "type": "string"
                            },
                            "ipv4Address": {
                              "type": "string"
                            },
                            "privateDnsZoneName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('functionAppName'))]",
                              "properties": {
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('ipv4Address')]"
                                  }
                                ],
                                "ttl": 3600
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id))]",
                        "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', replace(parameters('namingConvention').functionAppPrivateEndpoint, parameters('serviceToken'), variables('service')), 'default')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "functionAppName": {
                      "type": "string",
                      "value": "[uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id)]"
                    },
                    "functionAppPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/sites', uniqueString(replace(parameters('namingConvention').functionApp, parameters('serviceToken'), variables('service')), resourceGroup().id)), '2023-01-01', 'full').identity.principalId]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            }
          ],
          "outputs": {
            "applicationGroupResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdag-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            },
            "dataCollectionRuleResourceId": {
              "type": "string",
              "value": "[if(parameters('enableAvdInsights'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.dataCollectionRuleResourceId.value, '')]"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
            },
            "deploymentUserAssignedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
            },
            "deploymentUserAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            },
            "diskAccessPolicyDefinitionId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-policy-disks-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.policyDefinitionId.value]"
            },
            "diskAccessPolicyDisplayName": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-policy-disks-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.policyDisplayName.value]"
            },
            "diskAccessResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-disk-access-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            },
            "functionAppPrincipalId": {
              "type": "string",
              "value": "[if(equals(parameters('fslogixStorageService'), 'AzureFiles Premium'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-function-app-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.functionAppPrincipalId.value, '')]"
            },
            "hostPoolName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
            },
            "hostPoolResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vdpool-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[if(or(parameters('enableApplicationInsights'), parameters('enableAvdInsights')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceName.value, '')]"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[if(or(parameters('enableApplicationInsights'), parameters('enableAvdInsights')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value, '')]"
            },
            "recoveryServicesVaultName": {
              "type": "string",
              "value": "[if(parameters('recoveryServices'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-rsv-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value, '')]"
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[parameters('resourceGroupName')]"
            },
            "virtualMachineName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-mgmt-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
            },
            "virtualMachineResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-mgmt-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-workspaces-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[split(parameters('sharedServicesSubnetResourceId'), '/')[2]]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationGroupResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.applicationGroupResourceId.value]"
          },
          "avdPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value, lambda('name', startsWith(lambdaVariables('name'), 'privatelink.wvd')))[0])]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "deploymentUserAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "deploymentUserAssignedIdentityPrincipalId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.deploymentUserAssignedIdentityPrincipalId.value]"
          },
          "enableAvdInsights": {
            "value": "[parameters('enableAvdInsights')]"
          },
          "existingApplicationGroupReferences": "[if(empty(parameters('existingFeedWorkspaceResourceId')), createObject('value', createArray()), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('existingFeedWorkspaceResourceId'), '/')[2], split(parameters('existingFeedWorkspaceResourceId'), '/')[4]), 'Microsoft.DesktopVirtualization/workspaces', split(parameters('existingFeedWorkspaceResourceId'), '/')[8]), '2023-09-05').applicationGroupReferences))]",
          "existingFeedWorkspaceResourceId": {
            "value": "[parameters('existingFeedWorkspaceResourceId')]"
          },
          "existingWorkspace": {
            "value": "[not(empty(parameters('existingFeedWorkspaceResourceId')))]"
          },
          "hostPoolName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hostPoolName.value]"
          },
          "locationControlPlane": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01', 'full').location]"
          },
          "locationVirtualMachines": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
          },
          "managementVirtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualMachineName.value]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceGroupName.value]"
          },
          "sharedServicesSubnetResourceId": {
            "value": "[parameters('sharedServicesSubnetResourceId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "workspaceFeedDiagnoticSettingName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.workspaceFeedDiagnosticSetting]"
          },
          "workspaceFeedName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.workspaceFeed]"
          },
          "workspaceFeedNetworkInterfaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.workspaceFeedNetworkInterface]"
          },
          "workspaceFeedPrivateEndpointName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.workspaceFeedPrivateEndpoint]"
          },
          "workspaceFeedResourceGroupName": {
            "value": "[replace(replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'feedWorkspace'), format('-{0}', parameters('stampIndex')), '')]"
          },
          "workspaceFriendlyName": "[if(empty(parameters('workspaceFriendlyName')), createObject('value', replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.workspaceFeed, format('-{0}', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service), '')), createObject('value', format('{0} ({1})', parameters('workspaceFriendlyName'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01', 'full').location)))]",
          "workspaceGlobalName": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.workspaceGlobal, parameters('identifier'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01', 'full').tags.resourcePrefix)]"
          },
          "workspaceGlobalNetworkInterfaceName": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.workspaceGlobalNetworkInterface, parameters('identifier'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01', 'full').tags.resourcePrefix)]"
          },
          "workspaceGlobalPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value, lambda('name', startsWith(lambdaVariables('name'), 'privatelink-global.wvd')))[0])]"
          },
          "workspaceGlobalPrivateEndpointName": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.workspaceGlobalPrivateEndpoint, parameters('identifier'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01', 'full').tags.resourcePrefix)]"
          },
          "workspaceGlobalResourceGroupName": {
            "value": "[replace(replace(replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'globalWorkspace'), format('-{0}', parameters('stampIndex')), ''), parameters('identifier'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01', 'full').tags.resourcePrefix)]"
          },
          "workspacePublicNetworkAccess": {
            "value": "[parameters('workspacePublicNetworkAccess')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "7681947759882255916"
            }
          },
          "parameters": {
            "applicationGroupResourceId": {
              "type": "string"
            },
            "avdPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "enableAvdInsights": {
              "type": "bool"
            },
            "existingApplicationGroupReferences": {
              "type": "array"
            },
            "existingFeedWorkspaceResourceId": {
              "type": "string"
            },
            "existingWorkspace": {
              "type": "bool"
            },
            "hostPoolName": {
              "type": "string"
            },
            "locationControlPlane": {
              "type": "string"
            },
            "locationVirtualMachines": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "sharedServicesSubnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "workspaceFeedDiagnoticSettingName": {
              "type": "string"
            },
            "workspaceFeedName": {
              "type": "string"
            },
            "workspaceFeedNetworkInterfaceName": {
              "type": "string"
            },
            "workspaceFeedPrivateEndpointName": {
              "type": "string"
            },
            "workspaceFeedResourceGroupName": {
              "type": "string"
            },
            "workspaceFriendlyName": {
              "type": "string"
            },
            "workspaceGlobalName": {
              "type": "string"
            },
            "workspaceGlobalNetworkInterfaceName": {
              "type": "string"
            },
            "workspaceGlobalPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "workspaceGlobalPrivateEndpointName": {
              "type": "string"
            },
            "workspaceGlobalResourceGroupName": {
              "type": "string"
            },
            "workspacePublicNetworkAccess": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-rg-vdws-global-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[split(parameters('sharedServicesSubnetResourceId'), '/')[2]]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "name": {
                    "value": "[parameters('workspaceGlobalResourceGroupName')]"
                  },
                  "tags": {
                    "value": {}
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "10714136229010174835"
                    }
                  },
                  "parameters": {
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject()), parameters('mlzTags'))]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
                    },
                    "tags": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vdws-global-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('workspaceGlobalResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "globalWorkspacePrivateDnsZoneResourceId": {
                    "value": "[parameters('workspaceGlobalPrivateDnsZoneResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('sharedServicesSubnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "workspaceGlobalName": {
                    "value": "[parameters('workspaceGlobalName')]"
                  },
                  "workspaceGlobalNetworkInterfaceName": {
                    "value": "[parameters('workspaceGlobalNetworkInterfaceName')]"
                  },
                  "workspaceGlobalPrivateEndpointName": {
                    "value": "[parameters('workspaceGlobalPrivateEndpointName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "2081761906627209307"
                    }
                  },
                  "parameters": {
                    "globalWorkspacePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "workspaceGlobalName": {
                      "type": "string"
                    },
                    "workspaceGlobalNetworkInterfaceName": {
                      "type": "string"
                    },
                    "workspaceGlobalPrivateEndpointName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/workspaces",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('workspaceGlobalName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('workspaceGlobalPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('workspaceGlobalNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('workspaceGlobalPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceGlobalName'))]",
                              "groupIds": [
                                "global"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceGlobalName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('workspaceGlobalPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(split(parameters('globalWorkspacePrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('globalWorkspacePrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('workspaceGlobalPrivateEndpointName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(split(parameters('sharedServicesSubnetResourceId'), '/')[2], 'Microsoft.Resources/deployments', format('deploy-rg-vdws-global-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(parameters('existingWorkspace'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-rg-vdws-feed-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[split(parameters('sharedServicesSubnetResourceId'), '/')[2]]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "name": {
                    "value": "[parameters('workspaceFeedResourceGroupName')]"
                  },
                  "tags": {
                    "value": {}
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "10714136229010174835"
                    }
                  },
                  "parameters": {
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject()), parameters('mlzTags'))]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
                    },
                    "tags": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "roleAssignments_appGroupReferences",
                "count": "[length(parameters('existingApplicationGroupReferences'))]"
              },
              "condition": "[not(empty(parameters('existingFeedWorkspaceResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-role-vdws-feed-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[split(parameters('existingApplicationGroupReferences')[copyIndex()], '/')[2]]",
              "resourceGroup": "[split(parameters('existingApplicationGroupReferences')[copyIndex()], '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('deploymentUserAssignedIdentityPrincipalId')]"
                  },
                  "principalType": {
                    "value": "ServicePrincipal"
                  },
                  "roleDefinitionId": {
                    "value": "86240b0e-9422-4c43-887b-b61143f32ba8"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "2900202208157733378"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string"
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(split(parameters('sharedServicesSubnetResourceId'), '/')[2], 'Microsoft.Resources/deployments', format('deploy-rg-vdws-feed-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('existingFeedWorkspaceResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-role-vdws-feed-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('workspaceFeedResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('deploymentUserAssignedIdentityPrincipalId')]"
                  },
                  "principalType": {
                    "value": "ServicePrincipal"
                  },
                  "roleDefinitionId": {
                    "value": "21efdde3-836f-432b-bf3d-3e8e734d4b2b"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "2900202208157733378"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string"
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(split(parameters('sharedServicesSubnetResourceId'), '/')[2], 'Microsoft.Resources/deployments', format('deploy-rg-vdws-feed-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vdws-feed-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('workspaceFeedResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGroupResourceId": {
                    "value": "[parameters('applicationGroupResourceId')]"
                  },
                  "avdPrivateDnsZoneResourceId": {
                    "value": "[parameters('avdPrivateDnsZoneResourceId')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "enableAvdInsights": {
                    "value": "[parameters('enableAvdInsights')]"
                  },
                  "existingFeedWorkspaceResourceId": {
                    "value": "[parameters('existingFeedWorkspaceResourceId')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "locationControlPlane": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "locationVirtualMachines": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('sharedServicesSubnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "workspaceFeedDiagnoticSettingName": {
                    "value": "[parameters('workspaceFeedDiagnoticSettingName')]"
                  },
                  "workspaceFeedName": {
                    "value": "[parameters('workspaceFeedName')]"
                  },
                  "workspaceFeedNetworkInterfaceName": {
                    "value": "[parameters('workspaceFeedNetworkInterfaceName')]"
                  },
                  "workspaceFeedPrivateEndpointName": {
                    "value": "[parameters('workspaceFeedPrivateEndpointName')]"
                  },
                  "workspaceFriendlyName": {
                    "value": "[parameters('workspaceFriendlyName')]"
                  },
                  "workspacePublicNetworkAccess": {
                    "value": "[parameters('workspacePublicNetworkAccess')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "9348162853819827281"
                    }
                  },
                  "parameters": {
                    "applicationGroupResourceId": {
                      "type": "string"
                    },
                    "avdPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "enableAvdInsights": {
                      "type": "bool"
                    },
                    "existingFeedWorkspaceResourceId": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "locationControlPlane": {
                      "type": "string"
                    },
                    "locationVirtualMachines": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "workspaceFeedDiagnoticSettingName": {
                      "type": "string"
                    },
                    "workspaceFeedName": {
                      "type": "string"
                    },
                    "workspaceFeedNetworkInterfaceName": {
                      "type": "string"
                    },
                    "workspaceFeedPrivateEndpointName": {
                      "type": "string"
                    },
                    "workspaceFriendlyName": {
                      "type": "string"
                    },
                    "workspacePublicNetworkAccess": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": "param(\r\n    [string]$ApplicationGroupResourceId,\r\n    [string]$ResourceManagerUri,\r\n    [string]$UserAssignedIdentityClientId,\r\n    [string]$WorkspaceResourceId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\n# Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n$ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri.Substring(0,$ResourceManagerUri.Length - 1)} else {$ResourceManagerUri}\r\n\r\n# Get an access token for Azure resources\r\n$AzureManagementAccessToken = (Invoke-RestMethod `\r\n    -Headers @{Metadata=\"true\"} `\r\n    -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n# Set header for Azure Management API\r\n$AzureManagementHeader = @{\r\n    'Content-Type'='application/json'\r\n    'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n}\r\n\r\n# Use the access token to get the app group references on the workspace\r\n$ExistingApplicationGroupReferences = (Invoke-RestMethod `\r\n    -Headers $AzureManagementHeader `\r\n    -Method 'GET' `\r\n    -Uri $($ResourceManagerUriFixed + $WorkspaceResourceId + '?api-version=2023-09-05')).properties.applicationGroupReferences\r\n  \r\n[array]$ApplicationGroupReferences = $ExistingApplicationGroupReferences + $ApplicationGroupResourceId | ForEach-Object {$_.toLower()}  | Select-Object -Unique\r\n\r\n# Use the access token to update the app group references on the workspace\r\nInvoke-RestMethod `\r\n    -Body (@{properties = @{applicationGroupReferences = $ApplicationGroupReferences}} | ConvertTo-Json) `\r\n    -Headers $AzureManagementHeader `\r\n    -Method 'PATCH' `\r\n    -Uri $($ResourceManagerUriFixed + $WorkspaceResourceId + '?api-version=2023-09-05') | Out-Null"
                  },
                  "resources": [
                    {
                      "condition": "[empty(parameters('existingFeedWorkspaceResourceId'))]",
                      "type": "Microsoft.DesktopVirtualization/workspaces",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('workspaceFeedName')]",
                      "location": "[parameters('locationControlPlane')]",
                      "tags": "[parameters('mlzTags')]",
                      "properties": {
                        "applicationGroupReferences": [
                          "[parameters('applicationGroupResourceId')]"
                        ],
                        "friendlyName": "[parameters('workspaceFriendlyName')]",
                        "publicNetworkAccess": "[parameters('workspacePublicNetworkAccess')]"
                      }
                    },
                    {
                      "condition": "[empty(parameters('existingFeedWorkspaceResourceId'))]",
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('workspaceFeedPrivateEndpointName')]",
                      "location": "[parameters('locationControlPlane')]",
                      "tags": "[parameters('mlzTags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('workspaceFeedNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('workspaceFeedPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]",
                              "groupIds": [
                                "feed"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]"
                      ]
                    },
                    {
                      "condition": "[empty(parameters('existingFeedWorkspaceResourceId'))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('workspaceFeedPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(split(parameters('avdPrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('avdPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('workspaceFeedPrivateEndpointName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableAvdInsights')]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', parameters('workspaceFeedName'))]",
                      "name": "[parameters('workspaceFeedDiagnoticSettingName')]",
                      "properties": {
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('existingFeedWorkspaceResourceId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('add-vdag-references-{0}', parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "name": {
                            "value": "Update-AvdWorkspace"
                          },
                          "parameters": {
                            "value": [
                              {
                                "name": "ApplicationGroupResourceId",
                                "value": "[parameters('applicationGroupResourceId')]"
                              },
                              {
                                "name": "ResourceManagerUri",
                                "value": "[environment().resourceManager]"
                              },
                              {
                                "name": "UserAssignedIdentityClientId",
                                "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                              },
                              {
                                "name": "WorkspaceResourceId",
                                "value": "[parameters('existingFeedWorkspaceResourceId')]"
                              }
                            ]
                          },
                          "script": {
                            "value": "[variables('$fxv#0')]"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', format('{0}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('virtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "10620600674782878506"
                            }
                          },
                          "parameters": {
                            "asyncExecution": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "script": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "treatFailureAsDeploymentFailure": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-09-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "asyncExecution": "[parameters('asyncExecution')]",
                                "parameters": "[parameters('parameters')]",
                                "source": {
                                  "script": "[parameters('script')]"
                                },
                                "treatFailureAsDeploymentFailure": "[parameters('treatFailureAsDeploymentFailure')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceFeedResourceGroupName')), 'Microsoft.Resources/deployments', format('assign-role-vdws-feed-{0}', parameters('deploymentNameSuffix')))]",
                "roleAssignments_appGroupReferences"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-mgmt-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[variables('deployFslogix')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-fslogix-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "availability": {
            "value": "[parameters('availability')]"
          },
          "azureFilesPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value, lambda('name', contains(lambdaVariables('name'), 'file')))[0])]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "deploymentUserAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "deploymentUserAssignedIdentityPrincipalId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.deploymentUserAssignedIdentityPrincipalId.value]"
          },
          "dnsServers": {
            "value": "[string(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.dnsServers.value)]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "encryptionUserAssignedIdentityResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
          },
          "existingSharedActiveDirectoryConnection": {
            "value": "[parameters('existingSharedActiveDirectoryConnection')]"
          },
          "fileShares": {
            "value": "[variables('fileShares')]"
          },
          "fslogixContainerType": {
            "value": "[parameters('fslogixContainerType')]"
          },
          "fslogixShareSizeInGB": {
            "value": "[parameters('fslogixShareSizeInGB')]"
          },
          "fslogixStorageService": {
            "value": "[parameters('fslogixStorageService')]"
          },
          "functionAppPrincipalId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.functionAppPrincipalId.value]"
          },
          "hostPoolResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hostPoolResourceId.value]"
          },
          "keyVaultUri": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
          },
          "location": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "managementVirtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualMachineName.value]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "namingConvention": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value]"
          },
          "netbios": {
            "value": "[variables('netbios')]"
          },
          "organizationalUnitPath": {
            "value": "[parameters('organizationalUnitPath')]"
          },
          "recoveryServices": {
            "value": "[parameters('recoveryServices')]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceGroupName.value]"
          },
          "resourceGroupName": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'profiles')]"
          },
          "securityPrincipalNames": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').displayName))]"
          },
          "securityPrincipalObjectIds": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
          },
          "serviceToken": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
          },
          "smbServerLocation": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locationProperties.value.timeZone]"
          },
          "storageCount": {
            "value": "[parameters('storageCount')]"
          },
          "storageEncryptionKeyName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEncryptionKeyName.value]"
          },
          "storageIndex": {
            "value": "[parameters('storageIndex')]"
          },
          "storageService": {
            "value": "[variables('storageService')]"
          },
          "storageSku": {
            "value": "[variables('storageSku')]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].id]"
          },
          "subnets": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "8917910887622429017"
            }
          },
          "parameters": {
            "activeDirectorySolution": {
              "type": "string"
            },
            "availability": {
              "type": "string"
            },
            "azureFilesPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "subnets": {
              "type": "array"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "dnsServers": {
              "type": "string"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "securestring"
            },
            "domainName": {
              "type": "string"
            },
            "encryptionUserAssignedIdentityResourceId": {
              "type": "string"
            },
            "existingSharedActiveDirectoryConnection": {
              "type": "bool"
            },
            "fileShares": {
              "type": "array"
            },
            "fslogixContainerType": {
              "type": "string"
            },
            "fslogixShareSizeInGB": {
              "type": "int"
            },
            "fslogixStorageService": {
              "type": "string"
            },
            "functionAppPrincipalId": {
              "type": "string"
            },
            "hostPoolResourceId": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "namingConvention": {
              "type": "object"
            },
            "netbios": {
              "type": "string"
            },
            "organizationalUnitPath": {
              "type": "string"
            },
            "recoveryServices": {
              "type": "bool"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "securityPrincipalObjectIds": {
              "type": "array"
            },
            "securityPrincipalNames": {
              "type": "array"
            },
            "serviceToken": {
              "type": "string"
            },
            "smbServerLocation": {
              "type": "string"
            },
            "storageCount": {
              "type": "int"
            },
            "storageEncryptionKeyName": {
              "type": "string"
            },
            "storageIndex": {
              "type": "int"
            },
            "storageSku": {
              "type": "string"
            },
            "storageService": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "tagsNetAppAccount": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.NetApp/netAppAccounts'), createObject()), parameters('mlzTags'))]",
            "tagsVirtualMachines": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2023-07-01",
              "name": "[parameters('resourceGroupName')]",
              "location": "[parameters('location')]",
              "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject()), parameters('mlzTags'))]"
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-role-storage-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('deploymentUserAssignedIdentityPrincipalId')]"
                  },
                  "principalType": {
                    "value": "ServicePrincipal"
                  },
                  "roleDefinitionId": {
                    "value": "17d1049b-9a84-46fb-8f53-869881c3d3ab"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "2900202208157733378"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string"
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('fslogixStorageService'), 'AzureFiles Premium')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('set-role-assignment-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('functionAppPrincipalId')]"
                  },
                  "principalType": {
                    "value": "ServicePrincipal"
                  },
                  "roleDefinitionId": {
                    "value": "17d1049b-9a84-46fb-8f53-869881c3d3ab"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "2900202208157733378"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string"
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('storageService'), 'AzureNetAppFiles')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-anf-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "existingSharedActiveDirectoryConnection": {
                    "value": "[parameters('existingSharedActiveDirectoryConnection')]"
                  },
                  "delegatedSubnetResourceId": {
                    "value": "[filter(parameters('subnets'), lambda('subnet', contains(lambdaVariables('subnet').name, 'AzureNetAppFiles')))[0].id]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "dnsServers": {
                    "value": "[parameters('dnsServers')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "fileShares": {
                    "value": "[parameters('fileShares')]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "netAppAccountName": {
                    "value": "[parameters('namingConvention').netAppAccount]"
                  },
                  "netAppCapacityPoolName": {
                    "value": "[parameters('namingConvention').netAppAccountCapacityPool]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "securityPrincipalNames": {
                    "value": "[parameters('securityPrincipalNames')]"
                  },
                  "smbServerLocation": {
                    "value": "[parameters('smbServerLocation')]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "storageSku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "tagsNetAppAccount": {
                    "value": "[variables('tagsNetAppAccount')]"
                  },
                  "tagsVirtualMachines": {
                    "value": "[variables('tagsVirtualMachines')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "13791170348824927791"
                    }
                  },
                  "parameters": {
                    "delegatedSubnetResourceId": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "dnsServers": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "securestring"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "existingSharedActiveDirectoryConnection": {
                      "type": "bool"
                    },
                    "fileShares": {
                      "type": "array"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "netAppAccountName": {
                      "type": "string"
                    },
                    "netAppCapacityPoolName": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "securityPrincipalNames": {
                      "type": "array"
                    },
                    "smbServerLocation": {
                      "type": "string"
                    },
                    "storageSku": {
                      "type": "string"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "tagsNetAppAccount": {
                      "type": "object"
                    },
                    "tagsVirtualMachines": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "$fxv#0": "param \r\n(\r\n    [String]$ActiveDirectorySolution,\r\n    [String]$DomainJoinPassword,\r\n    [String]$DomainJoinUserPrincipalName,\r\n    [String]$FslogixContainerType,\r\n    [String]$Netbios,\r\n    [String]$OrganizationalUnitPath,\r\n    [string]$ResourceManagerUri,\r\n    [String]$SecurityPrincipalNames,\r\n    [String]$SmbServerLocation,\r\n    [String]$StorageAccountPrefix,\r\n    [String]$StorageAccountResourceGroupName,\r\n    [Int]$StorageCount,\r\n    [Int]$StorageIndex,\r\n    [String]$StorageService,\r\n    [String]$StorageSuffix,\r\n    [String]$SubscriptionId,\r\n    [String]$UserAssignedIdentityClientId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\n##############################################################\r\n#  Install Active Directory PowerShell module\r\n##############################################################\r\nif($StorageService -eq 'AzureNetAppFiles' -or ($StorageService -eq 'AzureFiles' -and $ActiveDirectorySolution -eq 'ActiveDirectoryDomainServices'))\r\n{\r\n    $RsatInstalled = (Get-WindowsFeature -Name 'RSAT-AD-PowerShell').Installed\r\n    if(!$RsatInstalled)\r\n    {\r\n        Install-WindowsFeature -Name 'RSAT-AD-PowerShell' | Out-Null\r\n    }\r\n}\r\n\r\n\r\n##############################################################\r\n#  Variables\r\n##############################################################\r\n# Convert Security Principal Names from a JSON array to a PowerShell array\r\n[array]$SecurityPrincipalNames = $SecurityPrincipalNames.Replace('\\','') | ConvertFrom-Json\r\n\r\n# Selects the appropraite share names based on the FslogixContainerType param from the deployment\r\n$Shares = switch($FslogixContainerType)\r\n{\r\n    'CloudCacheProfileContainer' {@('profile-containers')}\r\n    'CloudCacheProfileOfficeContainer' {@('office-containers','profile-containers')}\r\n    'ProfileContainer' {@('profile-containers')}\r\n    'ProfileOfficeContainer' {@('office-containers','profile-containers')}\r\n}\r\n\r\nif($StorageService -eq 'AzureNetAppFiles' -or ($StorageService -eq 'AzureFiles' -and $ActiveDirectorySolution -eq 'ActiveDirectoryDomainServices'))\r\n{\r\n    # Create Domain credential\r\n    $DomainUsername = $DomainJoinUserPrincipalName\r\n    $DomainPassword = ConvertTo-SecureString -String $DomainJoinPassword -AsPlainText -Force\r\n    [pscredential]$DomainCredential = New-Object System.Management.Automation.PSCredential ($DomainUsername, $DomainPassword)\r\n\r\n    # Get Domain information\r\n    $Domain = Get-ADDomain -Credential $DomainCredential -Current 'LocalComputer'\r\n}\r\n\r\nif($StorageService -eq 'AzureFiles')\r\n{\r\n    $FilesSuffix = '.file.' + $StorageSuffix\r\n\r\n    # Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n    $ResourceManagerUriFixed = if ($ResourceManagerUri[-1] -eq '/') { $ResourceManagerUri.Substring(0, $ResourceManagerUri.Length - 1) } else { $ResourceManagerUri }\r\n\r\n    # Get an access token for Azure resources\r\n    $AzureManagementAccessToken = (Invoke-RestMethod `\r\n        -Headers @{Metadata = \"true\" } `\r\n        -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n    # Set header for Azure Management API\r\n    $AzureManagementHeader = @{\r\n        'Content-Type'  = 'application/json'\r\n        'Authorization' = 'Bearer ' + $AzureManagementAccessToken\r\n    }\r\n}\r\n\r\n\r\n##############################################################\r\n#  Process Storage Resources\r\n##############################################################\r\nfor($i = 0; $i -lt $StorageCount; $i++)\r\n{\r\n    # Determine Principal for assignment\r\n    $SecurityPrincipalName = $SecurityPrincipalNames[$i]\r\n    $Group = $Netbios + '\\' + $SecurityPrincipalName\r\n\r\n    # Get storage resource details\r\n    switch($StorageService)\r\n    {\r\n        'AzureNetAppFiles' {\r\n            $Credential = $DomainCredential\r\n            $SmbServerName = (Get-ADComputer -Filter \"Name -like 'anf-$SmbServerLocation*'\" -Credential $DomainCredential).Name\r\n            $FileServer = '\\\\' + $SmbServerName + '.' + $Domain.DNSRoot\r\n        }\r\n        'AzureFiles' {\r\n            $StorageAccountName = $($StorageAccountPrefix + ($i + $StorageIndex).ToString().PadLeft(2,'0')).Substring(0,15)\r\n            $FileServer = '\\\\' + $StorageAccountName + $FilesSuffix\r\n\r\n            # Get the storage account key\r\n            $StorageKey = (Invoke-RestMethod `\r\n                -Headers $AzureManagementHeader `\r\n                -Method 'POST' `\r\n                -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01')).keys[0].value\r\n\r\n            # Create credential for accessing the storage account\r\n            $StorageUsername = 'Azure\\' + $StorageAccountName\r\n            $StoragePassword = ConvertTo-SecureString -String \"$($StorageKey)\" -AsPlainText -Force\r\n            [pscredential]$StorageKeyCredential = New-Object System.Management.Automation.PSCredential ($StorageUsername, $StoragePassword)\r\n            $Credential = $StorageKeyCredential\r\n\r\n            if($ActiveDirectorySolution -eq 'ActiveDirectoryDomainServices')\r\n            {\r\n                # Get / create kerberos key for Azure Storage Account\r\n                $KerberosKey = ((Invoke-RestMethod `\r\n                    -Headers $AzureManagementHeader `\r\n                    -Method 'POST' `\r\n                    -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n                \r\n                if (!$KerberosKey) \r\n                {\r\n                    Invoke-RestMethod `\r\n                        -Body (@{keyName = 'kerb1' } | ConvertTo-Json) `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/regenerateKey?api-version=2023-05-01')\r\n                    \r\n                    $Key = ((Invoke-RestMethod `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n                } \r\n                else \r\n                {\r\n                    $Key = $KerberosKey\r\n                }\r\n\r\n                # Creates a password for the Azure Storage Account in AD using the Kerberos key\r\n                $ComputerPassword = ConvertTo-SecureString -String $Key.Replace(\"'\",\"\") -AsPlainText -Force\r\n\r\n                # Create the SPN value for the Azure Storage Account; attribute for computer object in AD \r\n                $SPN = 'cifs/' + $StorageAccountName + $FilesSuffix\r\n\r\n                # Create the Description value for the Azure Storage Account; attribute for computer object in AD \r\n                $Description = \"Computer account object for Azure storage account $($StorageAccountName).\"\r\n\r\n                # Create the AD computer object for the Azure Storage Account\r\n                $Computer = Get-ADComputer -Credential $DomainCredential -Filter {Name -eq $StorageAccountName}\r\n                if($Computer)\r\n                {\r\n                    Remove-ADComputer -Credential $DomainCredential -Identity $StorageAccountName -Confirm:$false\r\n                }\r\n                $ComputerObject = New-ADComputer -Credential $DomainCredential -Name $StorageAccountName -Path $OrganizationalUnitPath -ServicePrincipalNames $SPN -AccountPassword $ComputerPassword -Description $Description -PassThru\r\n\r\n                $Body = (@{\r\n                    properties = @{\r\n                        azureFilesIdentityBasedAuthentication = @{\r\n                            activeDirectoryProperties = @{\r\n                                accountType = 'Computer'\r\n                                azureStorageSid = $ComputerObject.SID.Value\r\n                                domainGuid = $Domain.ObjectGUID.Guid\r\n                                domainName = $Domain.DNSRoot\r\n                                domainSid = $Domain.DomainSID.Value\r\n                                forestName = $Domain.Forest\r\n                                netBiosDomainName = $Domain.NetBIOSName\r\n                                samAccountName = $StorageAccountName\r\n                            }\r\n                            directoryServiceOptions = 'AD'\r\n                        }\r\n                    }\r\n                } | ConvertTo-Json -Depth 6 -Compress)\r\n\r\n                Invoke-RestMethod `\r\n                    -Body $Body `\r\n                    -Headers $AzureManagementHeader `\r\n                    -Method 'PATCH' `\r\n                    -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '?api-version=2023-05-01')\r\n        \r\n                # Set the Kerberos encryption on the computer object\r\n                $DistinguishedName = 'CN=' + $StorageAccountName + ',' + $OrganizationalUnitPath\r\n                Set-ADComputer -Credential $DomainCredential -Identity $DistinguishedName -KerberosEncryptionType 'AES256' | Out-Null\r\n                \r\n                # Reset the Kerberos key on the Storage Account\r\n                Invoke-RestMethod `\r\n                    -Body (@{keyName = 'kerb1' } | ConvertTo-Json) `\r\n                    -Headers $AzureManagementHeader `\r\n                    -Method 'POST' `\r\n                    -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/regenerateKey?api-version=2023-05-01')\r\n                \r\n                $Key = ((Invoke-RestMethod `\r\n                    -Headers $AzureManagementHeader `\r\n                    -Method 'POST' `\r\n                    -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n        \r\n                # Update the password on the computer object with the new Kerberos key on the Storage Account\r\n                $NewPassword = ConvertTo-SecureString -String $Key -AsPlainText -Force\r\n                Set-ADAccountPassword -Credential $DomainCredential -Identity $DistinguishedName -Reset -NewPassword $NewPassword | Out-Null\r\n            }\r\n        }\r\n    }\r\n    \r\n    foreach($Share in $Shares)\r\n    {\r\n        # Mount file share\r\n        $FileShare = $FileServer + '\\' + $Share\r\n        New-PSDrive -Name 'Z' -PSProvider 'FileSystem' -Root $FileShare -Credential $Credential | Out-Null\r\n\r\n        # Set recommended NTFS permissions on the file share\r\n        $ACL = Get-Acl -Path 'Z:'\r\n        $CreatorOwner = New-Object System.Security.Principal.Ntaccount (\"Creator Owner\")\r\n        $ACL.PurgeAccessRules($CreatorOwner)\r\n        $AuthenticatedUsers = New-Object System.Security.Principal.Ntaccount (\"Authenticated Users\")\r\n        $ACL.PurgeAccessRules($AuthenticatedUsers)\r\n        $Users = New-Object System.Security.Principal.Ntaccount (\"Users\")\r\n        $ACL.PurgeAccessRules($Users)\r\n        $DomainUsers = New-Object System.Security.AccessControl.FileSystemAccessRule(\"$Group\",\"Modify\",\"None\",\"None\",\"Allow\")\r\n        $ACL.SetAccessRule($DomainUsers)\r\n        $CreatorOwner = New-Object System.Security.AccessControl.FileSystemAccessRule(\"Creator Owner\",\"Modify\",\"ContainerInherit,ObjectInherit\",\"InheritOnly\",\"Allow\")\r\n        $ACL.AddAccessRule($CreatorOwner)\r\n        $ACL | Set-Acl -Path 'Z:' | Out-Null\r\n\r\n        # Unmount file share\r\n        Remove-PSDrive -Name 'Z' -PSProvider 'FileSystem' -Force | Out-Null\r\n        Start-Sleep -Seconds 5 | Out-Null\r\n    }\r\n}"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.NetApp/netAppAccounts",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('netAppAccountName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "activeDirectories": "[if(parameters('existingSharedActiveDirectoryConnection'), createArray(createObject('aesEncryption', true(), 'domain', parameters('domainName'), 'dns', parameters('dnsServers'), 'organizationalUnit', parameters('organizationalUnitPath'), 'password', parameters('domainJoinPassword'), 'smbServerName', format('anf-{0}', parameters('smbServerLocation')), 'username', split(parameters('domainJoinUserPrincipalName'), '@')[0])), null())]",
                        "encryption": {
                          "keySource": "Microsoft.NetApp"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "coolAccess": false,
                        "encryptionType": "Single",
                        "qosType": "Auto",
                        "serviceLevel": "[parameters('storageSku')]",
                        "size": 4398046511104
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.NetApp/netAppAccounts', parameters('netAppAccountName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "volumes",
                        "count": "[length(range(0, length(parameters('fileShares'))))]"
                      },
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]])]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "avsDataStore": "Disabled",
                        "coolAccess": false,
                        "creationToken": "[parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]]]",
                        "defaultGroupQuotaInKiBs": 0,
                        "defaultUserQuotaInKiBs": 0,
                        "encryptionKeySource": "Microsoft.NetApp",
                        "isDefaultQuotaEnabled": false,
                        "kerberosEnabled": false,
                        "ldapEnabled": false,
                        "networkFeatures": "Standard",
                        "protocolTypes": [
                          "CIFS"
                        ],
                        "securityStyle": "ntfs",
                        "serviceLevel": "[parameters('storageSku')]",
                        "smbContinuouslyAvailable": true,
                        "smbEncryption": true,
                        "snapshotDirectoryVisible": true,
                        "subnetId": "[parameters('delegatedSubnetResourceId')]",
                        "usageThreshold": 107374182400
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-fslogix-ntfs-permissions-{0}', parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "domainJoinPassword": {
                            "value": "[parameters('domainJoinPassword')]"
                          },
                          "domainJoinUserPrincipalName": {
                            "value": "[parameters('domainJoinUserPrincipalName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "Set-NtfsPermissions.ps1"
                          },
                          "parameters": {
                            "value": [
                              {
                                "name": "FslogixContainerType",
                                "value": "[parameters('fslogixContainerType')]"
                              },
                              {
                                "name": "ResourceManagerUri",
                                "value": "[environment().resourceManager]"
                              },
                              {
                                "name": "SecurityPrincipalNames",
                                "value": "[parameters('securityPrincipalNames')]"
                              },
                              {
                                "name": "SmbServerLocation",
                                "value": "[parameters('smbServerLocation')]"
                              },
                              {
                                "name": "StorageService",
                                "value": "[parameters('storageService')]"
                              }
                            ]
                          },
                          "script": {
                            "value": "[variables('$fxv#0')]"
                          },
                          "tags": {
                            "value": "[parameters('tagsVirtualMachines')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "9535551545759449917"
                            }
                          },
                          "parameters": {
                            "domainJoinPassword": {
                              "type": "securestring"
                            },
                            "domainJoinUserPrincipalName": {
                              "type": "securestring"
                            },
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "script": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-09-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "asyncExecution": false,
                                "parameters": "[parameters('parameters')]",
                                "protectedParameters": [
                                  {
                                    "name": "DomainJoinPassword",
                                    "value": "[parameters('domainJoinPassword')]"
                                  },
                                  {
                                    "name": "DomainJoinUserPrincipalName",
                                    "value": "[parameters('domainJoinUserPrincipalName')]"
                                  }
                                ],
                                "source": {
                                  "script": "[parameters('script')]"
                                },
                                "treatFailureAsDeploymentFailure": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "volumes"
                      ]
                    }
                  ],
                  "outputs": {
                    "fileShares": {
                      "type": "array",
                      "value": "[if(contains(parameters('fslogixContainerType'), 'Office'), createArray(reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[0]]), '2021-06-01').mountTargets[0].smbServerFqdn, reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[1]]), '2021-06-01').mountTargets[0].smbServerFqdn), createArray(reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[0]]), '2021-06-01').mountTargets[0].smbServerFqdn))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "condition": "[equals(parameters('storageService'), 'AzureFiles')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-azure-files-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "availability": {
                    "value": "[parameters('availability')]"
                  },
                  "azureFilesPrivateDnsZoneResourceId": {
                    "value": "[parameters('azureFilesPrivateDnsZoneResourceId')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "enableRecoveryServices": {
                    "value": "[parameters('recoveryServices')]"
                  },
                  "encryptionUserAssignedIdentityResourceId": {
                    "value": "[parameters('encryptionUserAssignedIdentityResourceId')]"
                  },
                  "fileShares": {
                    "value": "[parameters('fileShares')]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "fslogixShareSizeInGB": {
                    "value": "[parameters('fslogixShareSizeInGB')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[parameters('hostPoolResourceId')]"
                  },
                  "keyVaultUri": {
                    "value": "[parameters('keyVaultUri')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "namingConvention": {
                    "value": "[parameters('namingConvention')]"
                  },
                  "netbios": {
                    "value": "[parameters('netbios')]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[parameters('namingConvention').recoveryServicesVault]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "securityPrincipalNames": {
                    "value": "[parameters('securityPrincipalNames')]"
                  },
                  "securityPrincipalObjectIds": {
                    "value": "[parameters('securityPrincipalObjectIds')]"
                  },
                  "serviceToken": {
                    "value": "[parameters('serviceToken')]"
                  },
                  "storageCount": {
                    "value": "[parameters('storageCount')]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[parameters('storageEncryptionKeyName')]"
                  },
                  "storageIndex": {
                    "value": "[parameters('storageIndex')]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "storageSku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "13652723869547434261"
                    }
                  },
                  "parameters": {
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "availability": {
                      "type": "string"
                    },
                    "azureFilesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "securestring"
                    },
                    "enableRecoveryServices": {
                      "type": "bool"
                    },
                    "encryptionUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "fileShares": {
                      "type": "array"
                    },
                    "fslogixShareSizeInGB": {
                      "type": "int"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "namingConvention": {
                      "type": "object"
                    },
                    "netbios": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "securityPrincipalObjectIds": {
                      "type": "array"
                    },
                    "securityPrincipalNames": {
                      "type": "array"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "storageCount": {
                      "type": "int"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "storageIndex": {
                      "type": "int"
                    },
                    "storageSku": {
                      "type": "string"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "$fxv#0": "param \r\n(\r\n    [String]$ActiveDirectorySolution,\r\n    [String]$DomainJoinPassword,\r\n    [String]$DomainJoinUserPrincipalName,\r\n    [String]$FslogixContainerType,\r\n    [String]$Netbios,\r\n    [String]$OrganizationalUnitPath,\r\n    [string]$ResourceManagerUri,\r\n    [String]$SecurityPrincipalNames,\r\n    [String]$SmbServerLocation,\r\n    [String]$StorageAccountPrefix,\r\n    [String]$StorageAccountResourceGroupName,\r\n    [Int]$StorageCount,\r\n    [Int]$StorageIndex,\r\n    [String]$StorageService,\r\n    [String]$StorageSuffix,\r\n    [String]$SubscriptionId,\r\n    [String]$UserAssignedIdentityClientId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\n##############################################################\r\n#  Install Active Directory PowerShell module\r\n##############################################################\r\nif($StorageService -eq 'AzureNetAppFiles' -or ($StorageService -eq 'AzureFiles' -and $ActiveDirectorySolution -eq 'ActiveDirectoryDomainServices'))\r\n{\r\n    $RsatInstalled = (Get-WindowsFeature -Name 'RSAT-AD-PowerShell').Installed\r\n    if(!$RsatInstalled)\r\n    {\r\n        Install-WindowsFeature -Name 'RSAT-AD-PowerShell' | Out-Null\r\n    }\r\n}\r\n\r\n\r\n##############################################################\r\n#  Variables\r\n##############################################################\r\n# Convert Security Principal Names from a JSON array to a PowerShell array\r\n[array]$SecurityPrincipalNames = $SecurityPrincipalNames.Replace('\\','') | ConvertFrom-Json\r\n\r\n# Selects the appropraite share names based on the FslogixContainerType param from the deployment\r\n$Shares = switch($FslogixContainerType)\r\n{\r\n    'CloudCacheProfileContainer' {@('profile-containers')}\r\n    'CloudCacheProfileOfficeContainer' {@('office-containers','profile-containers')}\r\n    'ProfileContainer' {@('profile-containers')}\r\n    'ProfileOfficeContainer' {@('office-containers','profile-containers')}\r\n}\r\n\r\nif($StorageService -eq 'AzureNetAppFiles' -or ($StorageService -eq 'AzureFiles' -and $ActiveDirectorySolution -eq 'ActiveDirectoryDomainServices'))\r\n{\r\n    # Create Domain credential\r\n    $DomainUsername = $DomainJoinUserPrincipalName\r\n    $DomainPassword = ConvertTo-SecureString -String $DomainJoinPassword -AsPlainText -Force\r\n    [pscredential]$DomainCredential = New-Object System.Management.Automation.PSCredential ($DomainUsername, $DomainPassword)\r\n\r\n    # Get Domain information\r\n    $Domain = Get-ADDomain -Credential $DomainCredential -Current 'LocalComputer'\r\n}\r\n\r\nif($StorageService -eq 'AzureFiles')\r\n{\r\n    $FilesSuffix = '.file.' + $StorageSuffix\r\n\r\n    # Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n    $ResourceManagerUriFixed = if ($ResourceManagerUri[-1] -eq '/') { $ResourceManagerUri.Substring(0, $ResourceManagerUri.Length - 1) } else { $ResourceManagerUri }\r\n\r\n    # Get an access token for Azure resources\r\n    $AzureManagementAccessToken = (Invoke-RestMethod `\r\n        -Headers @{Metadata = \"true\" } `\r\n        -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n    # Set header for Azure Management API\r\n    $AzureManagementHeader = @{\r\n        'Content-Type'  = 'application/json'\r\n        'Authorization' = 'Bearer ' + $AzureManagementAccessToken\r\n    }\r\n}\r\n\r\n\r\n##############################################################\r\n#  Process Storage Resources\r\n##############################################################\r\nfor($i = 0; $i -lt $StorageCount; $i++)\r\n{\r\n    # Determine Principal for assignment\r\n    $SecurityPrincipalName = $SecurityPrincipalNames[$i]\r\n    $Group = $Netbios + '\\' + $SecurityPrincipalName\r\n\r\n    # Get storage resource details\r\n    switch($StorageService)\r\n    {\r\n        'AzureNetAppFiles' {\r\n            $Credential = $DomainCredential\r\n            $SmbServerName = (Get-ADComputer -Filter \"Name -like 'anf-$SmbServerLocation*'\" -Credential $DomainCredential).Name\r\n            $FileServer = '\\\\' + $SmbServerName + '.' + $Domain.DNSRoot\r\n        }\r\n        'AzureFiles' {\r\n            $StorageAccountName = $($StorageAccountPrefix + ($i + $StorageIndex).ToString().PadLeft(2,'0')).Substring(0,15)\r\n            $FileServer = '\\\\' + $StorageAccountName + $FilesSuffix\r\n\r\n            # Get the storage account key\r\n            $StorageKey = (Invoke-RestMethod `\r\n                -Headers $AzureManagementHeader `\r\n                -Method 'POST' `\r\n                -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01')).keys[0].value\r\n\r\n            # Create credential for accessing the storage account\r\n            $StorageUsername = 'Azure\\' + $StorageAccountName\r\n            $StoragePassword = ConvertTo-SecureString -String \"$($StorageKey)\" -AsPlainText -Force\r\n            [pscredential]$StorageKeyCredential = New-Object System.Management.Automation.PSCredential ($StorageUsername, $StoragePassword)\r\n            $Credential = $StorageKeyCredential\r\n\r\n            if($ActiveDirectorySolution -eq 'ActiveDirectoryDomainServices')\r\n            {\r\n                # Get / create kerberos key for Azure Storage Account\r\n                $KerberosKey = ((Invoke-RestMethod `\r\n                    -Headers $AzureManagementHeader `\r\n                    -Method 'POST' `\r\n                    -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n                \r\n                if (!$KerberosKey) \r\n                {\r\n                    Invoke-RestMethod `\r\n                        -Body (@{keyName = 'kerb1' } | ConvertTo-Json) `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/regenerateKey?api-version=2023-05-01')\r\n                    \r\n                    $Key = ((Invoke-RestMethod `\r\n                        -Headers $AzureManagementHeader `\r\n                        -Method 'POST' `\r\n                        -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n                } \r\n                else \r\n                {\r\n                    $Key = $KerberosKey\r\n                }\r\n\r\n                # Creates a password for the Azure Storage Account in AD using the Kerberos key\r\n                $ComputerPassword = ConvertTo-SecureString -String $Key.Replace(\"'\",\"\") -AsPlainText -Force\r\n\r\n                # Create the SPN value for the Azure Storage Account; attribute for computer object in AD \r\n                $SPN = 'cifs/' + $StorageAccountName + $FilesSuffix\r\n\r\n                # Create the Description value for the Azure Storage Account; attribute for computer object in AD \r\n                $Description = \"Computer account object for Azure storage account $($StorageAccountName).\"\r\n\r\n                # Create the AD computer object for the Azure Storage Account\r\n                $Computer = Get-ADComputer -Credential $DomainCredential -Filter {Name -eq $StorageAccountName}\r\n                if($Computer)\r\n                {\r\n                    Remove-ADComputer -Credential $DomainCredential -Identity $StorageAccountName -Confirm:$false\r\n                }\r\n                $ComputerObject = New-ADComputer -Credential $DomainCredential -Name $StorageAccountName -Path $OrganizationalUnitPath -ServicePrincipalNames $SPN -AccountPassword $ComputerPassword -Description $Description -PassThru\r\n\r\n                $Body = (@{\r\n                    properties = @{\r\n                        azureFilesIdentityBasedAuthentication = @{\r\n                            activeDirectoryProperties = @{\r\n                                accountType = 'Computer'\r\n                                azureStorageSid = $ComputerObject.SID.Value\r\n                                domainGuid = $Domain.ObjectGUID.Guid\r\n                                domainName = $Domain.DNSRoot\r\n                                domainSid = $Domain.DomainSID.Value\r\n                                forestName = $Domain.Forest\r\n                                netBiosDomainName = $Domain.NetBIOSName\r\n                                samAccountName = $StorageAccountName\r\n                            }\r\n                            directoryServiceOptions = 'AD'\r\n                        }\r\n                    }\r\n                } | ConvertTo-Json -Depth 6 -Compress)\r\n\r\n                Invoke-RestMethod `\r\n                    -Body $Body `\r\n                    -Headers $AzureManagementHeader `\r\n                    -Method 'PATCH' `\r\n                    -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '?api-version=2023-05-01')\r\n        \r\n                # Set the Kerberos encryption on the computer object\r\n                $DistinguishedName = 'CN=' + $StorageAccountName + ',' + $OrganizationalUnitPath\r\n                Set-ADComputer -Credential $DomainCredential -Identity $DistinguishedName -KerberosEncryptionType 'AES256' | Out-Null\r\n                \r\n                # Reset the Kerberos key on the Storage Account\r\n                Invoke-RestMethod `\r\n                    -Body (@{keyName = 'kerb1' } | ConvertTo-Json) `\r\n                    -Headers $AzureManagementHeader `\r\n                    -Method 'POST' `\r\n                    -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/regenerateKey?api-version=2023-05-01')\r\n                \r\n                $Key = ((Invoke-RestMethod `\r\n                    -Headers $AzureManagementHeader `\r\n                    -Method 'POST' `\r\n                    -Uri $($ResourceManagerUriFixed + '/subscriptions/' + $SubscriptionId + '/resourceGroups/' + $StorageAccountResourceGroupName + '/providers/Microsoft.Storage/storageAccounts/' + $StorageAccountName + '/listKeys?api-version=2023-05-01&$expand=kerb')).keys | Where-Object { $_.Keyname -contains 'kerb1' }).Value\r\n        \r\n                # Update the password on the computer object with the new Kerberos key on the Storage Account\r\n                $NewPassword = ConvertTo-SecureString -String $Key -AsPlainText -Force\r\n                Set-ADAccountPassword -Credential $DomainCredential -Identity $DistinguishedName -Reset -NewPassword $NewPassword | Out-Null\r\n            }\r\n        }\r\n    }\r\n    \r\n    foreach($Share in $Shares)\r\n    {\r\n        # Mount file share\r\n        $FileShare = $FileServer + '\\' + $Share\r\n        New-PSDrive -Name 'Z' -PSProvider 'FileSystem' -Root $FileShare -Credential $Credential | Out-Null\r\n\r\n        # Set recommended NTFS permissions on the file share\r\n        $ACL = Get-Acl -Path 'Z:'\r\n        $CreatorOwner = New-Object System.Security.Principal.Ntaccount (\"Creator Owner\")\r\n        $ACL.PurgeAccessRules($CreatorOwner)\r\n        $AuthenticatedUsers = New-Object System.Security.Principal.Ntaccount (\"Authenticated Users\")\r\n        $ACL.PurgeAccessRules($AuthenticatedUsers)\r\n        $Users = New-Object System.Security.Principal.Ntaccount (\"Users\")\r\n        $ACL.PurgeAccessRules($Users)\r\n        $DomainUsers = New-Object System.Security.AccessControl.FileSystemAccessRule(\"$Group\",\"Modify\",\"None\",\"None\",\"Allow\")\r\n        $ACL.SetAccessRule($DomainUsers)\r\n        $CreatorOwner = New-Object System.Security.AccessControl.FileSystemAccessRule(\"Creator Owner\",\"Modify\",\"ContainerInherit,ObjectInherit\",\"InheritOnly\",\"Allow\")\r\n        $ACL.AddAccessRule($CreatorOwner)\r\n        $ACL | Set-Acl -Path 'Z:' | Out-Null\r\n\r\n        # Unmount file share\r\n        Remove-PSDrive -Name 'Z' -PSProvider 'FileSystem' -Force | Out-Null\r\n        Start-Sleep -Seconds 5 | Out-Null\r\n    }\r\n}",
                    "roleDefinitionId": "0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                    "smbMultiChannel": {
                      "multichannel": {
                        "enabled": true
                      }
                    },
                    "smbSettings": {
                      "versions": "SMB3.1.1;",
                      "authenticationMethods": "NTLMv2;Kerberos;",
                      "kerberosTicketEncryption": "AES-256;",
                      "channelEncryption": "AES-128-GCM;AES-256-GCM;"
                    },
                    "storageAccountNamePrefix": "[uniqueString(replace(parameters('namingConvention').storageAccount, parameters('serviceToken'), 'file-fslogix'), resourceGroup().id)]",
                    "storageRedundancy": "[if(equals(parameters('availability'), 'availabilityZones'), '_ZRS', '_LRS')]",
                    "tagsPrivateEndpoints": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                    "tagsStorageAccounts": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject()), parameters('mlzTags'))]",
                    "tagsRecoveryServicesVault": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.recoveryServices/vaults'), createObject()), parameters('mlzTags'))]",
                    "tagsVirtualMachines": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "storageAccounts",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')), 15)]",
                      "location": "[parameters('location')]",
                      "tags": "[variables('tagsStorageAccounts')]",
                      "sku": {
                        "name": "[format('{0}{1}', parameters('storageSku'), variables('storageRedundancy'))]"
                      },
                      "kind": "[if(equals(parameters('storageSku'), 'Standard'), 'StorageV2', 'FileStorage')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('encryptionUserAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowCrossTenantReplication": false,
                        "allowedCopyScope": "PrivateLink",
                        "allowSharedKeyAccess": true,
                        "azureFilesIdentityBasedAuthentication": {
                          "directoryServiceOptions": "[if(equals(parameters('activeDirectorySolution'), 'MicrosoftEntraDomainServices'), 'AADDS', 'None')]"
                        },
                        "defaultToOAuthAuthentication": false,
                        "dnsEndpointType": "Standard",
                        "encryption": {
                          "identity": {
                            "userAssignedIdentity": "[parameters('encryptionUserAssignedIdentityResourceId')]"
                          },
                          "requireInfrastructureEncryption": true,
                          "keyvaultproperties": {
                            "keyvaulturi": "[parameters('keyVaultUri')]",
                            "keyname": "[parameters('storageEncryptionKeyName')]"
                          },
                          "services": "[if(equals(parameters('storageSku'), 'Standard'), createObject('file', createObject('keyType', 'Account', 'enabled', true()), 'table', createObject('keyType', 'Account', 'enabled', true()), 'queue', createObject('keyType', 'Account', 'enabled', true()), 'blob', createObject('keyType', 'Account', 'enabled', true())), createObject('file', createObject('keyType', 'Account', 'enabled', true())))]",
                          "keySource": "Microsoft.KeyVault"
                        },
                        "largeFileSharesState": "[if(equals(parameters('storageSku'), 'Standard'), 'Enabled', null())]",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "virtualNetworkRules": [],
                          "ipRules": [],
                          "defaultAction": "Deny"
                        },
                        "publicNetworkAccess": "Disabled",
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 15))]",
                      "name": "[guid(parameters('securityPrincipalObjectIds')[range(0, parameters('storageCount'))[copyIndex()]], variables('roleDefinitionId'), resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 15)))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('securityPrincipalObjectIds')[range(0, parameters('storageCount'))[copyIndex()]]]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 15))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 15))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "fileServices",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 15), 'default')]",
                      "properties": {
                        "protocolSettings": {
                          "smb": "[if(equals(parameters('storageSku'), 'Standard'), variables('smbSettings'), union(variables('smbSettings'), variables('smbMultiChannel')))]"
                        },
                        "shareDeleteRetentionPolicy": {
                          "enabled": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 15))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateEndpoints",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}-{1}', parameters('namingConvention').storageAccountFilePrivateEndpoint, padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[variables('tagsPrivateEndpoints')]",
                      "properties": {
                        "customNetworkInterfaceName": "[format('{0}-{1}', parameters('namingConvention').storageAccountFileNetworkInterface, padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-{1}', parameters('namingConvention').storageAccountFilePrivateEndpoint, padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 15))]",
                              "groupIds": [
                                "file"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 15))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneGroups",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}', parameters('namingConvention').storageAccountFilePrivateEndpoint, padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 15))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('azureFilesPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', parameters('namingConvention').storageAccountFilePrivateEndpoint, padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]",
                        "storageAccounts"
                      ]
                    },
                    {
                      "copy": {
                        "name": "shares",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-file-shares-{0}-{1}', range(0, parameters('storageCount'))[copyIndex()], parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileShares": {
                            "value": "[parameters('fileShares')]"
                          },
                          "fslogixShareSizeInGB": {
                            "value": "[parameters('fslogixShareSizeInGB')]"
                          },
                          "storageAccountName": {
                            "value": "[take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 15)]"
                          },
                          "storageSku": {
                            "value": "[parameters('storageSku')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "12479437179524875720"
                            }
                          },
                          "parameters": {
                            "fileShares": {
                              "type": "array"
                            },
                            "fslogixShareSizeInGB": {
                              "type": "int"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "storageSku": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "shares",
                                "count": "[length(range(0, length(parameters('fileShares'))))]"
                              },
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/default/{1}', parameters('storageAccountName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]])]",
                              "properties": {
                                "accessTier": "[if(equals(parameters('storageSku'), 'Premium'), 'Premium', 'TransactionOptimized')]",
                                "shareQuota": "[parameters('fslogixShareSizeInGB')]",
                                "enabledProtocols": "SMB"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "fileServices",
                        "roleAssignment",
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('{0}{1}', variables('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 15))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('set-ntfs-permissions-{0}', parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "domainJoinPassword": {
                            "value": "[parameters('domainJoinPassword')]"
                          },
                          "domainJoinUserPrincipalName": {
                            "value": "[parameters('domainJoinUserPrincipalName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "Set-NtfsPermissions.ps1"
                          },
                          "parameters": {
                            "value": [
                              {
                                "name": "ActiveDirectorySolution",
                                "value": "[parameters('activeDirectorySolution')]"
                              },
                              {
                                "name": "FslogixContainerType",
                                "value": "[parameters('fslogixContainerType')]"
                              },
                              {
                                "name": "Netbios",
                                "value": "[parameters('netbios')]"
                              },
                              {
                                "name": "OrganizationalUnitPath",
                                "value": "[parameters('organizationalUnitPath')]"
                              },
                              {
                                "name": "ResourceManagerUri",
                                "value": "[environment().resourceManager]"
                              },
                              {
                                "name": "SecurityPrincipalNames",
                                "value": "[string(parameters('securityPrincipalNames'))]"
                              },
                              {
                                "name": "StorageAccountPrefix",
                                "value": "[variables('storageAccountNamePrefix')]"
                              },
                              {
                                "name": "StorageAccountResourceGroupName",
                                "value": "[resourceGroup().name]"
                              },
                              {
                                "name": "StorageCount",
                                "value": "[parameters('storageCount')]"
                              },
                              {
                                "name": "StorageIndex",
                                "value": "[parameters('storageIndex')]"
                              },
                              {
                                "name": "StorageService",
                                "value": "[parameters('storageService')]"
                              },
                              {
                                "name": "StorageSuffix",
                                "value": "[environment().suffixes.storage]"
                              },
                              {
                                "name": "SubscriptionId",
                                "value": "[subscription().subscriptionId]"
                              },
                              {
                                "name": "UserAssignedIdentityClientId",
                                "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                              }
                            ]
                          },
                          "script": {
                            "value": "[variables('$fxv#0')]"
                          },
                          "tags": {
                            "value": "[variables('tagsVirtualMachines')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "9535551545759449917"
                            }
                          },
                          "parameters": {
                            "domainJoinPassword": {
                              "type": "securestring"
                            },
                            "domainJoinUserPrincipalName": {
                              "type": "securestring"
                            },
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "script": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-09-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "asyncExecution": false,
                                "parameters": "[parameters('parameters')]",
                                "protectedParameters": [
                                  {
                                    "name": "DomainJoinPassword",
                                    "value": "[parameters('domainJoinPassword')]"
                                  },
                                  {
                                    "name": "DomainJoinUserPrincipalName",
                                    "value": "[parameters('domainJoinUserPrincipalName')]"
                                  }
                                ],
                                "source": {
                                  "script": "[parameters('script')]"
                                },
                                "treatFailureAsDeploymentFailure": true
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "privateDnsZoneGroups",
                        "privateEndpoints",
                        "shares"
                      ]
                    },
                    {
                      "condition": "[parameters('enableRecoveryServices')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-backup-{0}', parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "fileShares": {
                            "value": "[parameters('fileShares')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "recoveryServicesVaultName": {
                            "value": "[parameters('recoveryServicesVaultName')]"
                          },
                          "resourceGroupStorage": {
                            "value": "[resourceGroup().name]"
                          },
                          "storageAccountNamePrefix": {
                            "value": "[variables('storageAccountNamePrefix')]"
                          },
                          "storageCount": {
                            "value": "[parameters('storageCount')]"
                          },
                          "storageIndex": {
                            "value": "[parameters('storageIndex')]"
                          },
                          "tagsRecoveryServicesVault": {
                            "value": "[variables('tagsRecoveryServicesVault')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "7346844901935062198"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "fileShares": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "recoveryServicesVaultName": {
                              "type": "string"
                            },
                            "resourceGroupStorage": {
                              "type": "string"
                            },
                            "storageAccountNamePrefix": {
                              "type": "string"
                            },
                            "storageCount": {
                              "type": "int"
                            },
                            "storageIndex": {
                              "type": "int"
                            },
                            "tagsRecoveryServicesVault": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "protectionContainers",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                              "properties": {
                                "backupManagementType": "AzureStorage",
                                "containerType": "StorageContainer",
                                "sourceResourceId": "[resourceId(parameters('resourceGroupStorage'), 'Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]"
                              }
                            },
                            {
                              "copy": {
                                "name": "protectedItems_fileShares",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('backup-file-shares-{0}-{1}', add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileShares": {
                                    "value": "[parameters('fileShares')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "protectionContainerName": {
                                    "value": "[format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))]"
                                  },
                                  "policyId": {
                                    "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('recoveryServicesVaultName'), 'AvdPolicyStorage')]"
                                  },
                                  "sourceResourceId": {
                                    "value": "[resourceId(parameters('resourceGroupStorage'), 'Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tagsRecoveryServicesVault')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "8829071114942236090"
                                    }
                                  },
                                  "parameters": {
                                    "fileShares": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "policyId": {
                                      "type": "string"
                                    },
                                    "protectionContainerName": {
                                      "type": "string"
                                    },
                                    "sourceResourceId": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "protectedItems_FileShare",
                                        "count": "[length(parameters('fileShares'))]"
                                      },
                                      "condition": "[contains(parameters('fileShares')[copyIndex()], 'profile')]",
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                      "apiVersion": "2022-03-01",
                                      "name": "[format('{0}/AzureFileShare;{1}', parameters('protectionContainerName'), parameters('fileShares')[copyIndex()])]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "protectedItemType": "AzureFileShareProtectedItem",
                                        "policyId": "[parameters('policyId')]",
                                        "sourceResourceId": "[parameters('sourceResourceId')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers', split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[0], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[1], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[2])]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('set-ntfs-permissions-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageAccountNamePrefix": {
                      "type": "string",
                      "value": "[variables('storageAccountNamePrefix')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            }
          ],
          "outputs": {
            "netAppShares": {
              "type": "array",
              "value": "[if(equals(parameters('storageService'), 'AzureNetAppFiles'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-anf-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.fileShares.value, createArray('None'))]"
            },
            "storageAccountNamePrefix": {
              "type": "string",
              "value": "[if(equals(parameters('storageService'), 'AzureFiles'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-azure-files-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountNamePrefix.value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-session-hosts-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "availability": {
            "value": "[parameters('availability')]"
          },
          "availabilitySetsCount": {
            "value": "[variables('availabilitySetsCount')]"
          },
          "availabilitySetsIndex": {
            "value": "[variables('beginAvSetRange')]"
          },
          "availabilityZones": {
            "value": "[parameters('availabilityZones')]"
          },
          "avdConfigurationZipFileName": {
            "value": "[parameters('avdConfigurationZipFileName')]"
          },
          "dataCollectionRuleResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.dataCollectionRuleResourceId.value]"
          },
          "deployFslogix": {
            "value": "[variables('deployFslogix')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "deploymentUserAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "deploymentUserAssignedIdentityPrincipalId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.deploymentUserAssignedIdentityPrincipalId.value]"
          },
          "diskAccessPolicyDefinitionId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskAccessPolicyDefinitionId.value]"
          },
          "diskAccessPolicyDisplayName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskAccessPolicyDisplayName.value]"
          },
          "diskAccessResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskAccessResourceId.value]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
          },
          "diskSku": {
            "value": "[parameters('diskSku')]"
          },
          "divisionRemainderValue": {
            "value": "[variables('divisionRemainderValue')]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "drainMode": {
            "value": "[parameters('drainMode')]"
          },
          "enableAcceleratedNetworking": {
            "value": "[parameters('enableAcceleratedNetworking')]"
          },
          "enableAvdInsights": {
            "value": "[parameters('enableAvdInsights')]"
          },
          "enableRecoveryServices": {
            "value": "[parameters('recoveryServices')]"
          },
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "fslogixContainerType": {
            "value": "[parameters('fslogixContainerType')]"
          },
          "hostPoolName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hostPoolName.value]"
          },
          "hostPoolResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hostPoolResourceId.value]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "imageOffer": {
            "value": "[parameters('imageOffer')]"
          },
          "imagePublisher": {
            "value": "[parameters('imagePublisher')]"
          },
          "imageSku": {
            "value": "[parameters('imageSku')]"
          },
          "imageVersionResourceId": {
            "value": "[parameters('imageVersionResourceId')]"
          },
          "location": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
          },
          "managementVirtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualMachineName.value]"
          },
          "maxResourcesPerTemplateDeployment": {
            "value": "[variables('maxResourcesPerTemplateDeployment')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "namingConvention": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value]"
          },
          "netAppFileShares": "[if(variables('deployFslogix'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-fslogix-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.netAppShares.value), createObject('value', createArray('None')))]",
          "networkSecurityGroupResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupResourceId.value]"
          },
          "organizationalUnitPath": {
            "value": "[parameters('organizationalUnitPath')]"
          },
          "profile": {
            "value": "[parameters('profile')]"
          },
          "recoveryServicesVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.recoveryServicesVaultName.value]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceGroupName.value]"
          },
          "resourceGroupName": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'hosts')]"
          },
          "scalingWeekdaysOffPeakStartTime": {
            "value": "[parameters('scalingWeekdaysOffPeakStartTime')]"
          },
          "scalingWeekdaysPeakStartTime": {
            "value": "[parameters('scalingWeekdaysPeakStartTime')]"
          },
          "scalingWeekendsOffPeakStartTime": {
            "value": "[parameters('scalingWeekendsOffPeakStartTime')]"
          },
          "scalingWeekendsPeakStartTime": {
            "value": "[parameters('scalingWeekendsPeakStartTime')]"
          },
          "securityPrincipalObjectIds": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
          },
          "serviceToken": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
          },
          "sessionHostBatchCount": {
            "value": "[variables('sessionHostBatchCount')]"
          },
          "sessionHostIndex": {
            "value": "[parameters('sessionHostIndex')]"
          },
          "storageAccountNamePrefix": "[if(variables('deployFslogix'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-fslogix-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountNamePrefix.value), createObject('value', ''))]",
          "storageCount": {
            "value": "[parameters('storageCount')]"
          },
          "storageIndex": {
            "value": "[parameters('storageIndex')]"
          },
          "storageService": {
            "value": "[variables('storageService')]"
          },
          "storageSuffix": {
            "value": "[variables('storageSuffix')]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].id]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeZone": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locationProperties.value.timeZone]"
          },
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "11453879737986848671"
            }
          },
          "parameters": {
            "activeDirectorySolution": {
              "type": "string"
            },
            "availability": {
              "type": "string"
            },
            "availabilitySetsCount": {
              "type": "int"
            },
            "availabilitySetsIndex": {
              "type": "int"
            },
            "availabilityZones": {
              "type": "array"
            },
            "avdConfigurationZipFileName": {
              "type": "string"
            },
            "dataCollectionRuleResourceId": {
              "type": "string"
            },
            "deployFslogix": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "diskAccessPolicyDefinitionId": {
              "type": "string"
            },
            "diskAccessPolicyDisplayName": {
              "type": "string"
            },
            "diskAccessResourceId": {
              "type": "string"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "diskSku": {
              "type": "string"
            },
            "divisionRemainderValue": {
              "type": "int"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "drainMode": {
              "type": "bool"
            },
            "enableAcceleratedNetworking": {
              "type": "bool"
            },
            "enableAvdInsights": {
              "type": "bool"
            },
            "enableRecoveryServices": {
              "type": "bool"
            },
            "environmentAbbreviation": {
              "type": "string"
            },
            "fslogixContainerType": {
              "type": "string"
            },
            "hostPoolName": {
              "type": "string"
            },
            "hostPoolResourceId": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "identifier": {
              "type": "string"
            },
            "imageOffer": {
              "type": "string"
            },
            "imagePublisher": {
              "type": "string"
            },
            "imageSku": {
              "type": "string"
            },
            "imageVersionResourceId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "maxResourcesPerTemplateDeployment": {
              "type": "int"
            },
            "mlzTags": {
              "type": "object"
            },
            "namingConvention": {
              "type": "object"
            },
            "netAppFileShares": {
              "type": "array"
            },
            "networkSecurityGroupResourceId": {
              "type": "string"
            },
            "organizationalUnitPath": {
              "type": "string"
            },
            "profile": {
              "type": "string"
            },
            "recoveryServicesVaultName": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "scalingWeekdaysOffPeakStartTime": {
              "type": "string"
            },
            "scalingWeekdaysPeakStartTime": {
              "type": "string"
            },
            "scalingWeekendsOffPeakStartTime": {
              "type": "string"
            },
            "scalingWeekendsPeakStartTime": {
              "type": "string"
            },
            "securityPrincipalObjectIds": {
              "type": "array"
            },
            "serviceToken": {
              "type": "string"
            },
            "sessionHostBatchCount": {
              "type": "int"
            },
            "sessionHostIndex": {
              "type": "int"
            },
            "storageAccountNamePrefix": {
              "type": "string"
            },
            "storageCount": {
              "type": "int"
            },
            "storageIndex": {
              "type": "int"
            },
            "storageService": {
              "type": "string"
            },
            "storageSuffix": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeZone": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "Param(\r\n    [string]$HostPoolResourceId,\r\n    [string]$ResourceGroupName,\r\n    [string]$ResourceManagerUri,\r\n    [string]$ScalingPlanName,\r\n    [string]$SubscriptionId,\r\n    [string]$UserAssignedIdentityClientId\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\n# Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n$ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri} else {$ResourceManagerUri + '/'}\r\n\r\n# Get an access token for Azure resources\r\n$AzureManagementAccessToken = (Invoke-RestMethod `\r\n    -Headers @{Metadata=\"true\"} `\r\n    -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n# Set header for Azure Management API\r\n$AzureManagementHeader = @{\r\n    'Content-Type'='application/json'\r\n    'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n}\r\n\r\n# Check if the scaling plan exists: https://learn.microsoft.com/rest/api/desktopvirtualization/scaling-plans/list-by-resource-group\r\n$ScalingPlanExists = (Invoke-RestMethod `\r\n    -Headers $AzureManagementHeader `\r\n    -Method 'GET' `\r\n    -Uri $($ResourceManagerUriFixed + 'subscriptions/' + $SubscriptionId + '/resourceGroups/' + $ResourceGroupName + '/providers/Microsoft.DesktopVirtualization/scalingPlans?api-version=2023-09-05')).value | Where-Object {$_.name -eq $ScalingPlanName}\r\n\r\n# Disable autoscale for the host pool: https://learn.microsoft.com/rest/api/desktopvirtualization/scaling-plans/update\r\nif ($ScalingPlanExists)\r\n{\r\n    Invoke-RestMethod `\r\n        -Body (@{properties = @{hostPoolReferences = @(@{hostPoolArmPath = $HostPoolResourceId; scalingPlanEnabled = $false})}} | ConvertTo-Json -Depth 3) `\r\n        -Headers $AzureManagementHeader `\r\n        -Method 'PATCH' `\r\n        -Uri $($ResourceManagerUriFixed + 'subscriptions/' + $SubscriptionId + '/resourceGroups/' + $ResourceGroupName + '/providers/Microsoft.DesktopVirtualization/scalingPlans/' + $ScalingPlanName + '?api-version=2023-09-05') | Out-Null\r\n}",
            "$fxv#1": "param (\r\n    [string]$ImageOffer,\r\n    [string]$ImagePublisher,\r\n    [string]$ImageSku,\r\n    [string]$ResourceManagerUri,\r\n    [string]$SubscriptionId,\r\n    [string]$UserAssignedIdentityClientId\r\n)\r\n\r\n# Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n$ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri} else {$ResourceManagerUri + '/'}\r\n\r\n# Get an access token for Azure resources\r\n$AzureManagementAccessToken = (Invoke-RestMethod `\r\n    -Headers @{Metadata=\"true\"} `\r\n    -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n# Set header for Azure Management API\r\n$AzureManagementHeader = @{\r\n    'Content-Type'='application/json'\r\n    'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n}\r\n\r\n# Use the access token to get the marketplace agreement\r\n$Terms = Invoke-RestMethod `\r\n    -Headers $AzureManagementHeader `\r\n    -Method 'GET' `\r\n    -Uri $($ResourceManagerUriFixed + 'subscriptions/' + $SubscriptionId + '/providers/Microsoft.MarketplaceOrdering/agreements/' + $ImagePublisher + '/offers/' + $ImageOffer + '/plans/' + $ImageSku + '?api-version=2021-01-01')\r\n\r\n# Use the access token to set the marketplace agreement\r\nif($Terms.error)\r\n{\r\n    Invoke-RestMethod `\r\n        -Headers $AzureManagementHeader `\r\n        -Method 'POST' `\r\n        -Uri $($ResourceManagerUriFixed + 'subscriptions/' + $SubscriptionId + '/providers/Microsoft.MarketplaceOrdering/agreements/' + $ImagePublisher + '/offers/' + $ImageOffer + '/plans/' + $ImageSku + '/sign?api-version=2021-01-01') | Out-Null\r\n}",
            "availabilitySetNamePrefix": "[parameters('namingConvention').availabilitySet]",
            "tagsVirtualMachines": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
            "uniqueToken": "[uniqueString(parameters('identifier'), parameters('environmentAbbreviation'), subscription().subscriptionId)]",
            "virtualMachineNamePrefix": "[replace(parameters('namingConvention').virtualMachine, parameters('serviceToken'), '')]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2023-07-01",
              "name": "[parameters('resourceGroupName')]",
              "location": "[parameters('location')]",
              "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject()), parameters('mlzTags'))]"
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-policy-diskAccess-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diskAccessResourceId": {
                    "value": "[parameters('diskAccessResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "policyDefinitionId": {
                    "value": "[parameters('diskAccessPolicyDefinitionId')]"
                  },
                  "policyDisplayName": {
                    "value": "[parameters('diskAccessPolicyDisplayName')]"
                  },
                  "policyName": {
                    "value": "[parameters('diskAccessPolicyDisplayName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "14741736339179028566"
                    }
                  },
                  "parameters": {
                    "diskAccessResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "policyDefinitionId": {
                      "type": "string"
                    },
                    "policyDisplayName": {
                      "type": "string"
                    },
                    "policyName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2022-06-01",
                      "name": "[parameters('policyName')]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "displayName": "[parameters('policyDisplayName')]",
                        "policyDefinitionId": "[parameters('policyDefinitionId')]",
                        "parameters": "[if(not(empty(parameters('diskAccessResourceId'))), createObject('diskAccessId', createObject('value', parameters('diskAccessResourceId'))), createObject())]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('hostPoolType'), 'Pooled'), equals(parameters('availability'), 'AvailabilitySets'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-avSets-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "availabilitySetNamePrefix": {
                    "value": "[variables('availabilitySetNamePrefix')]"
                  },
                  "availabilitySetsCount": {
                    "value": "[parameters('availabilitySetsCount')]"
                  },
                  "availabilitySetsIndex": {
                    "value": "[parameters('availabilitySetsIndex')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tagsAvailabilitySets": {
                    "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/availabilitySets'), createObject()), parameters('mlzTags'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "10787538740965753912"
                    }
                  },
                  "parameters": {
                    "availabilitySetNamePrefix": {
                      "type": "string"
                    },
                    "availabilitySetsCount": {
                      "type": "int"
                    },
                    "availabilitySetsIndex": {
                      "type": "int"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tagsAvailabilitySets": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "availabilitySets",
                        "count": "[length(range(0, parameters('availabilitySetsCount')))]"
                      },
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2019-07-01",
                      "name": "[format('{0}-{1}', parameters('availabilitySetNamePrefix'), padLeft(add(range(0, parameters('availabilitySetsCount'))[copyIndex()], parameters('availabilitySetsIndex')), 2, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsAvailabilitySets')]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 2
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "copy": {
                "name": "roleAssignments",
                "count": "[length(range(0, length(parameters('securityPrincipalObjectIds'))))]"
              },
              "condition": "[contains(parameters('activeDirectorySolution'), 'EntraId')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-role-{0}-{1}', range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()], parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]]]"
                  },
                  "principalType": {
                    "value": "Group"
                  },
                  "roleDefinitionId": {
                    "value": "fb879df8-f326-4884-b1cf-06f3ad86be52"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "2900202208157733378"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string"
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), parameters('roleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "[parameters('principalType')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-disableAutoscale-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "Disable-Autoscale"
                  },
                  "parameters": {
                    "value": [
                      {
                        "name": "HostPoolResourceId",
                        "value": "[parameters('hostPoolResourceId')]"
                      },
                      {
                        "name": "ResourceGroupName",
                        "value": "[parameters('resourceGroupManagement')]"
                      },
                      {
                        "name": "ResourceManagerUri",
                        "value": "[environment().resourceManager]"
                      },
                      {
                        "name": "ScalingPlanName",
                        "value": "[parameters('namingConvention').scalingPlan]"
                      },
                      {
                        "name": "SubscriptionId",
                        "value": "[subscription().subscriptionId]"
                      },
                      {
                        "name": "UserAssignedidentityClientId",
                        "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                      }
                    ]
                  },
                  "script": {
                    "value": "[variables('$fxv#0')]"
                  },
                  "tags": {
                    "value": "[variables('tagsVirtualMachines')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "10620600674782878506"
                    }
                  },
                  "parameters": {
                    "asyncExecution": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "parameters": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "script": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "treatFailureAsDeploymentFailure": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-09-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "asyncExecution": "[parameters('asyncExecution')]",
                        "parameters": "[parameters('parameters')]",
                        "source": {
                          "script": "[parameters('script')]"
                        },
                        "treatFailureAsDeploymentFailure": "[parameters('treatFailureAsDeploymentFailure')]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "condition": "[equals(parameters('profile'), 'ArcGISPro')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('set-marketplaceTerms-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "Set-AzureMarketplaceTerms"
                  },
                  "parameters": {
                    "value": [
                      {
                        "name": "ImageOffer",
                        "value": "[parameters('imageOffer')]"
                      },
                      {
                        "name": "ImagePublisher",
                        "value": "[parameters('imagePublisher')]"
                      },
                      {
                        "name": "ImageSku",
                        "value": "[parameters('imageSku')]"
                      },
                      {
                        "name": "ResourceManagerUri",
                        "value": "[environment().resourceManager]"
                      },
                      {
                        "name": "SubscriptionId",
                        "value": "[subscription().subscriptionId]"
                      },
                      {
                        "name": "UserAssignedidentityClientId",
                        "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                      }
                    ]
                  },
                  "script": {
                    "value": "[variables('$fxv#1')]"
                  },
                  "tags": {
                    "value": "[variables('tagsVirtualMachines')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "10620600674782878506"
                    }
                  },
                  "parameters": {
                    "asyncExecution": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "parameters": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "script": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "treatFailureAsDeploymentFailure": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-09-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "asyncExecution": "[parameters('asyncExecution')]",
                        "parameters": "[parameters('parameters')]",
                        "source": {
                          "script": "[parameters('script')]"
                        },
                        "treatFailureAsDeploymentFailure": "[parameters('treatFailureAsDeploymentFailure')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-disableAutoscale-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "virtualMachines",
                "count": "[length(range(1, parameters('sessionHostBatchCount')))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vms-{0}-{1}', sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "availability": {
                    "value": "[parameters('availability')]"
                  },
                  "availabilitySetNamePrefix": {
                    "value": "[variables('availabilitySetNamePrefix')]"
                  },
                  "availabilityZones": {
                    "value": "[parameters('availabilityZones')]"
                  },
                  "avdConfigurationZipFileName": {
                    "value": "[parameters('avdConfigurationZipFileName')]"
                  },
                  "batchCount": {
                    "value": "[range(1, parameters('sessionHostBatchCount'))[copyIndex()]]"
                  },
                  "dataCollectionRuleAssociationName": {
                    "value": "[parameters('namingConvention').dataCollectionRuleAssociation]"
                  },
                  "dataCollectionRuleResourceId": {
                    "value": "[parameters('dataCollectionRuleResourceId')]"
                  },
                  "deployFslogix": {
                    "value": "[parameters('deployFslogix')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deploymentUserAssignedidentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "diskNamePrefix": {
                    "value": "[parameters('namingConvention').virtualMachineDisk]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "enableAcceleratedNetworking": {
                    "value": "[parameters('enableAcceleratedNetworking')]"
                  },
                  "enableAvdInsights": {
                    "value": "[parameters('enableAvdInsights')]"
                  },
                  "enableDrainMode": {
                    "value": "[parameters('drainMode')]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "imageVersionResourceId": {
                    "value": "[parameters('imageVersionResourceId')]"
                  },
                  "imageOffer": "[if(empty(parameters('imageVersionResourceId')), createObject('value', parameters('imageOffer')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageVersionResourceId'), '/')[2], split(parameters('imageVersionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('imageVersionResourceId'), '/')[8], split(parameters('imageVersionResourceId'), '/')[10]), '2023-07-03').identifier.offer))]",
                  "imagePublisher": "[if(empty(parameters('imageVersionResourceId')), createObject('value', parameters('imagePublisher')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageVersionResourceId'), '/')[2], split(parameters('imageVersionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('imageVersionResourceId'), '/')[8], split(parameters('imageVersionResourceId'), '/')[10]), '2023-07-03').identifier.publisher))]",
                  "imageSku": "[if(empty(parameters('imageVersionResourceId')), createObject('value', parameters('imageSku')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('imageVersionResourceId'), '/')[2], split(parameters('imageVersionResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('imageVersionResourceId'), '/')[8], split(parameters('imageVersionResourceId'), '/')[10]), '2023-07-03').identifier.sku))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "netAppFileShares": {
                    "value": "[parameters('netAppFileShares')]"
                  },
                  "networkInterfaceNamePrefix": {
                    "value": "[parameters('namingConvention').virtualMachineNetworkInterface]"
                  },
                  "networkSecurityGroupResourceId": {
                    "value": "[parameters('networkSecurityGroupResourceId')]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "profile": {
                    "value": "[parameters('profile')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "serviceToken": {
                    "value": "[parameters('serviceToken')]"
                  },
                  "sessionHostCount": "[if(and(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], parameters('sessionHostBatchCount')), greater(parameters('divisionRemainderValue'), 0)), createObject('value', parameters('divisionRemainderValue')), createObject('value', parameters('maxResourcesPerTemplateDeployment')))]",
                  "sessionHostIndex": "[if(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), createObject('value', parameters('sessionHostIndex')), createObject('value', add(mul(sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('maxResourcesPerTemplateDeployment')), parameters('sessionHostIndex'))))]",
                  "storageAccountPrefix": {
                    "value": "[parameters('storageAccountNamePrefix')]"
                  },
                  "storageCount": {
                    "value": "[parameters('storageCount')]"
                  },
                  "storageIndex": {
                    "value": "[parameters('storageIndex')]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "storageSuffix": {
                    "value": "[parameters('storageSuffix')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tagsNetworkInterfaces": {
                    "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject()), parameters('mlzTags'))]"
                  },
                  "tagsVirtualMachines": {
                    "value": "[variables('tagsVirtualMachines')]"
                  },
                  "uniqueToken": {
                    "value": "[variables('uniqueToken')]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[variables('virtualMachineNamePrefix')]"
                  },
                  "virtualMachineAdminPassword": {
                    "value": "[parameters('virtualMachineAdminPassword')]"
                  },
                  "virtualMachineAdminUsername": {
                    "value": "[parameters('virtualMachineAdminUsername')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "2092488379835814829"
                    }
                  },
                  "parameters": {
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "availability": {
                      "type": "string"
                    },
                    "availabilitySetNamePrefix": {
                      "type": "string"
                    },
                    "availabilityZones": {
                      "type": "array"
                    },
                    "avdConfigurationZipFileName": {
                      "type": "string"
                    },
                    "batchCount": {
                      "type": "int"
                    },
                    "dataCollectionRuleAssociationName": {
                      "type": "string"
                    },
                    "dataCollectionRuleResourceId": {
                      "type": "string"
                    },
                    "deployFslogix": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deploymentUserAssignedidentityClientId": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "diskNamePrefix": {
                      "type": "string"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "enableAcceleratedNetworking": {
                      "type": "bool"
                    },
                    "enableAvdInsights": {
                      "type": "bool"
                    },
                    "enableDrainMode": {
                      "type": "bool"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "imageOffer": {
                      "type": "string"
                    },
                    "imagePublisher": {
                      "type": "string"
                    },
                    "imageSku": {
                      "type": "string"
                    },
                    "imageVersionResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "netAppFileShares": {
                      "type": "array"
                    },
                    "networkInterfaceNamePrefix": {
                      "type": "string"
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "profile": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "sessionHostCount": {
                      "type": "int"
                    },
                    "sessionHostIndex": {
                      "type": "int"
                    },
                    "storageAccountPrefix": {
                      "type": "string"
                    },
                    "storageCount": {
                      "type": "int"
                    },
                    "storageIndex": {
                      "type": "int"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "storageSuffix": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tagsNetworkInterfaces": {
                      "type": "object"
                    },
                    "tagsVirtualMachines": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                    },
                    "uniqueToken": {
                      "type": "string"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    },
                    "virtualMachineAdminPassword": {
                      "type": "securestring"
                    },
                    "virtualMachineAdminUsername": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": "Param(\r\n    [string]$ActiveDirectorySolution,\r\n    [string]$AmdVmSize,\r\n    [string]$Fslogix,\r\n    [string]$FslogixContainerType,\r\n    [string]$NetAppFileShares,\r\n    [string]$NvidiaVmSize,\r\n    [string]$StorageAccountPrefix,\r\n    [int]$StorageCount,\r\n    [int]$StorageIndex,\r\n    [string]$StorageService,\r\n    [string]$StorageSuffix,\r\n    [string]$UniqueToken\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\n\r\n# Convert NetAppFiles share names from a JSON array to a PowerShell array\r\n[array]$NetAppFileShares = $NetAppFileShares.Replace(\"'\",'\"') | ConvertFrom-Json\r\n$NetAppFileShares | Add-Content -Path 'C:\\cse.txt' -Force\r\n\r\n#  Add Recommended Security Settings\r\n$Settings = @(\r\n\r\n    # Set Kerberos Encryption for STIG compliance\r\n    [PSCustomObject]@{\r\n        Name = 'SupportedEncryptionTypes'\r\n        Path = 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Kerberos\\Parameters'\r\n        PropertyType = 'DWord'\r\n        Value = 2147483640\r\n    }\r\n)\r\n\r\n#  Add Recommended AVD Settings\r\n$Settings = @(\r\n\r\n    # Disable Automatic Updates: https://learn.microsoft.com/azure/virtual-desktop/set-up-customize-master-image#disable-automatic-updates\r\n    [PSCustomObject]@{\r\n        Name = 'NoAutoUpdate'\r\n        Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU'\r\n        PropertyType = 'DWord'\r\n        Value = 1\r\n    },\r\n\r\n    # Enable Time Zone Redirection: https://learn.microsoft.com/azure/virtual-desktop/set-up-customize-master-image#set-up-time-zone-redirection\r\n    [PSCustomObject]@{\r\n        Name = 'fEnableTimeZoneRedirection'\r\n        Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services'\r\n        PropertyType = 'DWord'\r\n        Value = 1\r\n    }\r\n)\r\n\r\n\r\n#  Add GPU Settings\r\n# These settings apply to any VM sizes with a GPU\r\nif ($AmdVmSize -eq 'true' -or $NvidiaVmSize -eq 'true') \r\n{\r\n    $Settings += @(\r\n\r\n        # Configure GPU-accelerated app rendering: https://learn.microsoft.com/azure/virtual-desktop/configure-vm-gpu#configure-gpu-accelerated-app-rendering\r\n        [PSCustomObject]@{\r\n            Name = 'bEnumerateHWBeforeSW'\r\n            Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services'\r\n            PropertyType = 'DWord'\r\n            Value = 1\r\n        },\r\n\r\n        # Configure fullscreen video encoding: https://learn.microsoft.com/azure/virtual-desktop/configure-vm-gpu#configure-fullscreen-video-encoding\r\n        [PSCustomObject]@{\r\n            Name = 'AVC444ModePreferred'\r\n            Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services'\r\n            PropertyType = 'DWord'\r\n            Value = 1\r\n        }\r\n    )\r\n}\r\n\r\n# This setting applies only to VM sizes with a NVIDIA GPU\r\nif($NvidiaVmSize -eq 'true')\r\n{\r\n    $Settings += @(\r\n\r\n        # Configure GPU-accelerated frame encoding: https://learn.microsoft.com/azure/virtual-desktop/configure-vm-gpu#configure-gpu-accelerated-frame-encoding\r\n        [PSCustomObject]@{\r\n            Name = 'AVChardwareEncodePreferred'\r\n            Path = 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services'\r\n            PropertyType = 'DWord'\r\n            Value = 1\r\n        }\r\n    )\r\n}\r\n\r\n#  Add Fslogix Settings\r\nif($Fslogix -eq 'true')\r\n{\r\n    $FilesSuffix = '.file.' + $StorageSuffix\r\n    $CloudCacheOfficeContainers = @()\r\n    $CloudCacheProfileContainers = @()\r\n    $OfficeContainers = @()\r\n    $ProfileContainers = @()\r\n    switch($StorageService)\r\n    {\r\n        'AzureFiles' {\r\n            for($i = $StorageIndex; $i -lt $($StorageIndex + $StorageCount); $i++)\r\n            {\r\n                $CloudCacheOfficeContainers += 'type=smb,connectionString=\\\\' + $($StorageAccountPrefix + $i.ToString().PadLeft(2,'0') + $UniqueToken).Substring(0,15) + $FilesSuffix + '\\office-containers;'\r\n                $CloudCacheProfileContainers += 'type=smb,connectionString=\\\\' + $($StorageAccountPrefix + $i.ToString().PadLeft(2,'0') + $UniqueToken).Substring(0,15) + $FilesSuffix + '\\profile-containers;'\r\n                $OfficeContainers += '\\\\' + $($StorageAccountPrefix + $i.ToString().PadLeft(2,'0') + $UniqueToken).Substring(0,15) + $FilesSuffix + '\\office-containers'\r\n                $ProfileContainers += '\\\\' + $($StorageAccountPrefix + $i.ToString().PadLeft(2,'0') + $UniqueToken).Substring(0,15) + $FilesSuffix + '\\profile-containers'\r\n            }\r\n        }\r\n        'AzureNetAppFiles' {\r\n            $CloudCacheOfficeContainers += 'type=smb,connectionString=\\\\' + $NetAppFileShares[0] + '\\office-containers;'\r\n            $CloudCacheProfileContainers += 'type=smb,connectionString=\\\\' + $(if($NetAppFileShares.Length -gt 1){$NetAppFileShares[1]}else{$NetAppFileShares[0]}) + '\\profile-containers;'\r\n            $OfficeContainers += '\\\\' + $NetAppFileShares[0] + '\\office-containers'\r\n            $ProfileContainers += '\\\\' + $(if($NetAppFileShares.Length -gt 1){$NetAppFileShares[1]}else{$NetAppFileShares[0]}) + '\\profile-containers'\r\n        }\r\n    }\r\n    \r\n    $Shares = @()\r\n    $Shares += $OfficeContainers\r\n    $Shares += $ProfileContainers\r\n\r\n    $Settings += @(\r\n\r\n        # Enables Fslogix profile containers: https://learn.microsoft.com/fslogix/profile-container-configuration-reference#enabled\r\n        [PSCustomObject]@{\r\n            Name = 'Enabled'\r\n            Path = 'HKLM:\\SOFTWARE\\Fslogix\\Profiles'\r\n            PropertyType = 'DWord'\r\n            Value = 1\r\n        },\r\n\r\n        # Deletes a local profile if it exists and matches the profile being loaded from VHD: https://learn.microsoft.com/fslogix/profile-container-configuration-reference#deletelocalprofilewhenvhdshouldapply\r\n        [PSCustomObject]@{\r\n            Name = 'DeleteLocalProfileWhenVHDShouldApply'\r\n            Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n            PropertyType = 'DWord'\r\n            Value = 1\r\n        },\r\n\r\n        # The folder created in the Fslogix fileshare will begin with the username instead of the SID: https://learn.microsoft.com/fslogix/profile-container-configuration-reference#flipflopprofiledirectoryname\r\n        [PSCustomObject]@{\r\n            Name = 'FlipFlopProfileDirectoryName'\r\n            Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n            PropertyType = 'DWord'\r\n            Value = 1\r\n        },\r\n\r\n        # Specifies the number of retries attempted when a VHD(x) file is locked: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=profiles#lockedretrycount\r\n        [PSCustomObject]@{\r\n            Name = 'LockedRetryCount'\r\n            Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n            PropertyType = 'DWord'\r\n            Value = 3\r\n        },\r\n\r\n        # Specifies the number of seconds to wait between retries: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=profiles#lockedretryinterval\r\n        [PSCustomObject]@{\r\n            Name = 'LockedRetryInterval'\r\n            Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n            PropertyType = 'DWord'\r\n            Value = 15\r\n        },\r\n\r\n        # Specifies if the profile container can be accessed concurrently: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=profiles#profiletype\r\n        [PSCustomObject]@{\r\n            Name = 'ProfileType'\r\n            Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n            PropertyType = 'DWord'\r\n            Value = 0\r\n        },\r\n\r\n        # Specifies the number of seconds to wait between retries when attempting to reattach the VHD(x) container if it's disconnected unexpectedly: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=profiles#reattachintervalseconds\r\n        [PSCustomObject]@{\r\n            Name = 'ReAttachIntervalSeconds'\r\n            Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n            PropertyType = 'DWord'\r\n            Value = 15\r\n        },\r\n\r\n        # Specifies the number of times the system should attempt to reattach the VHD(x) container if it's disconnected unexpectedly: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=profiles#reattachretrycount\r\n        [PSCustomObject]@{\r\n            Name = 'ReAttachRetryCount'\r\n            Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n            PropertyType = 'DWord'\r\n            Value = 3\r\n        },\r\n\r\n        # Specifies the maximum size of the user's container in megabytes. Newly created VHD(x) containers are of this size: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=profiles#sizeinmbs\r\n        [PSCustomObject]@{\r\n            Name = 'SizeInMBs'\r\n            Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n            PropertyType = 'DWord'\r\n            Value = 30000\r\n        },\r\n\r\n        # Specifies the file extension for the profile containers: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=profiles#volumetype\r\n        [PSCustomObject]@{\r\n            Name = 'VolumeType'\r\n            Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n            PropertyType = 'String'\r\n            Value = 'VHDX'\r\n        }\r\n    )\r\n\r\n    if($FslogixContainerType -like \"CloudCache*\")\r\n    {\r\n        $Settings += @(\r\n            # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/fslogix/profile-container-configuration-reference#vhdlocations\r\n            [PSCustomObject]@{\r\n                Name = 'CCDLocations'\r\n                Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n                PropertyType = 'MultiString'\r\n                Value = $CloudCacheProfileContainers\r\n            }\r\n        )           \r\n    }\r\n    else\r\n    {\r\n        $Settings += @(\r\n            # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/fslogix/profile-container-configuration-reference#vhdlocations\r\n            [PSCustomObject]@{\r\n                Name = 'VHDLocations'\r\n                Path = 'HKLM:\\SOFTWARE\\FSLogix\\Profiles'\r\n                PropertyType = 'MultiString'\r\n                Value = $ProfileContainers\r\n            }\r\n        )\r\n    }\r\n\r\n    if($FslogixContainerType -like \"*OfficeContainer\")\r\n    {\r\n        $Settings += @(\r\n\r\n            # Enables Fslogix office containers: https://learn.microsoft.com/fslogix/office-container-configuration-reference#enabled\r\n            [PSCustomObject]@{\r\n                Name = 'Enabled'\r\n                Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'\r\n                PropertyType = 'DWord'\r\n                Value = 1\r\n            },\r\n\r\n            # The folder created in the Fslogix fileshare will begin with the username instead of the SID: https://learn.microsoft.com/fslogix/office-container-configuration-reference#flipflopprofiledirectoryname\r\n            [PSCustomObject]@{\r\n                Name = 'FlipFlopProfileDirectoryName'\r\n                Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'\r\n                PropertyType = 'DWord'\r\n                Value = 1\r\n            },         \r\n            \r\n            # Teams data is redirected to the container: https://learn.microsoft.com/fslogix/office-container-configuration-reference#includeteams\r\n            [PSCustomObject]@{\r\n                Name = 'IncludeTeams'\r\n                Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'\r\n                PropertyType = 'DWord'\r\n                Value = 1\r\n            },                  \r\n\r\n            # Specifies the number of retries attempted when a VHD(x) file is locked: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#lockedretrycount\r\n            [PSCustomObject]@{\r\n                Name = 'LockedRetryCount'\r\n                Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'\r\n                PropertyType = 'DWord'\r\n                Value = 3\r\n            },\r\n\r\n            # Specifies the number of seconds to wait between retries: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#lockedretryinterval\r\n            [PSCustomObject]@{\r\n                Name = 'LockedRetryInterval'\r\n                Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'\r\n                PropertyType = 'DWord'\r\n                Value = 15\r\n            },\r\n\r\n            # Specifies the number of seconds to wait between retries when attempting to reattach the VHD(x) container if it's disconnected unexpectedly: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#reattachintervalseconds\r\n            [PSCustomObject]@{\r\n                Name = 'ReAttachIntervalSeconds'\r\n                Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'\r\n                PropertyType = 'DWord'\r\n                Value = 15\r\n            },\r\n\r\n            # Specifies the number of times the system should attempt to reattach the VHD(x) container if it's disconnected unexpectedly: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#reattachretrycount\r\n            [PSCustomObject]@{\r\n                Name = 'ReAttachRetryCount'\r\n                Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'\r\n                PropertyType = 'DWord'\r\n                Value = 3\r\n            },\r\n\r\n            # Specifies the maximum size of the user's container in megabytes: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#sizeinmbs\r\n            [PSCustomObject]@{\r\n                Name = 'SizeInMBs'\r\n                Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'\r\n                PropertyType = 'DWord'\r\n                Value = 30000\r\n            },\r\n\r\n            # Specifies the type of container: https://learn.microsoft.com/fslogix/reference-configuration-settings?tabs=odfc#volumetype\r\n            [PSCustomObject]@{\r\n                Name = 'VolumeType'\r\n                Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'\r\n                PropertyType = 'String'\r\n                Value = 'VHDX'\r\n            }\r\n        )\r\n\r\n        if($FslogixContainerType -like \"CloudCache*\")\r\n        {\r\n            $Settings += @(\r\n                # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/fslogix/profile-container-configuration-reference#vhdlocations\r\n                [PSCustomObject]@{\r\n                    Name = 'CCDLocations'\r\n                    Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'\r\n                    PropertyType = 'MultiString'\r\n                    Value = $CloudCacheOfficeContainers\r\n                }\r\n            )           \r\n        }\r\n        else\r\n        {\r\n            $Settings += @(\r\n                # List of file system locations to search for the user's profile VHD(X) file: https://learn.microsoft.com/fslogix/office-container-configuration-reference#vhdlocations\r\n                [PSCustomObject]@{\r\n                    Name = 'VHDLocations'\r\n                    Path = 'HKLM:\\SOFTWARE\\Policies\\FSLogix\\ODFC'\r\n                    PropertyType = 'MultiString'\r\n                    Value = $OfficeContainers\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n# Set registry settings\r\nforeach($Setting in $Settings)\r\n{\r\n    # Create registry key(s) if necessary\r\n    if(!(Test-Path -Path $Setting.Path))\r\n    {\r\n        New-Item -Path $Setting.Path -Force | Out-Null\r\n    }\r\n\r\n    # Checks for existing registry setting\r\n    $Value = Get-ItemProperty -Path $Setting.Path -Name $Setting.Name -ErrorAction 'SilentlyContinue'\r\n    \r\n    # Creates the registry setting when it does not exist\r\n    if(!$Value)\r\n    {\r\n        New-ItemProperty -Path $Setting.Path -Name $Setting.Name -PropertyType $Setting.PropertyType -Value $Setting.Value -Force | Out-Null\r\n    }\r\n    # Updates the registry setting when it already exists\r\n    elseif($Value.$($Setting.Name) -ne $Setting.Value)\r\n    {\r\n        Set-ItemProperty -Path $Setting.Path -Name $Setting.Name -Value $Setting.Value -Force | Out-Null\r\n    }\r\n    Start-Sleep -Seconds 1 | Out-Null\r\n}\r\n",
                    "$fxv#1": "Param(\r\n    [string]$Environment,\r\n    [string]$HostPoolName,\r\n    [string]$HostPoolResourceGroupName,\r\n    [string]$ResourceManagerUri,\r\n    [int]$SessionHostCount,\r\n    [int]$SessionHostIndex,\r\n    [string]$SubscriptionId,\r\n    [string]$TenantId,\r\n    [string]$UserAssignedIdentityClientId,\r\n    [string]$VirtualMachineNamePrefix\r\n)\r\n\r\n$ErrorActionPreference = 'Stop'\r\n$WarningPreference = 'SilentlyContinue'\r\n\r\n# Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n$ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri} else {$ResourceManagerUri + '/'}\r\n\r\n# Get an access token for Azure resources\r\n$AzureManagementAccessToken = (Invoke-RestMethod `\r\n    -Headers @{Metadata=\"true\"} `\r\n    -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n# Set header for Azure Management API\r\n$AzureManagementHeader = @{\r\n    'Content-Type'='application/json'\r\n    'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n}\r\n\r\n# Get the AVD session hosts\r\n$SessionHosts = (Invoke-RestMethod `\r\n    -Headers $AzureManagementHeader `\r\n    -Method 'GET' `\r\n    -Uri $($ResourceManagerUriFixed + 'subscriptions/' + $SubscriptionId + '/resourceGroups/' + $HostPoolResourceGroupName + '/providers/Microsoft.DesktopVirtualization/hostPools/' + $HostPoolName + '/sessionHosts?api-version=2023-09-05')).value.name\r\n\r\n# Enable drain mode for the AVD session hosts\r\nfor($i = $SessionHostIndex; $i -lt $($SessionHostIndex + $SessionHostCount); $i++)\r\n{\r\n    $VmNameFull = $VirtualMachineNamePrefix + $i.ToString().PadLeft(4,'0')\r\n    $SessionHostName = ($SessionHosts | Where-Object {$_ -like \"*$VmNameFull*\"}).Replace(\"$HostPoolName/\", '')\r\n    Invoke-RestMethod `\r\n        -Body (@{properties = @{allowNewSession = $false}} | ConvertTo-Json) `\r\n        -Headers $AzureManagementHeader `\r\n        -Method 'PATCH' `\r\n        -Uri $($ResourceManagerUriFixed + 'subscriptions/' + $SubscriptionId + '/resourceGroups/' + $HostPoolResourceGroupName + '/providers/Microsoft.DesktopVirtualization/hostPools/' + $HostPoolName + '/sessionHosts/' + $SessionHostName + '?api-version=2023-09-05') | Out-Null\r\n}\r\n",
                    "amdVmSize": "[contains(variables('amdVmSizes'), parameters('virtualMachineSize'))]",
                    "amdVmSizes": [
                      "Standard_NV4as_v4",
                      "Standard_NV8as_v4",
                      "Standard_NV16as_v4",
                      "Standard_NV32as_v4"
                    ],
                    "fslogixExclusions": "[format('\"%TEMP%\\*\\*.VHDX\";\"%Windir%\\TEMP\\*\\*.VHDX\"{0}{1}{2}', variables('fslogixExclusionsCloudCache'), variables('fslogixExclusionsProfileContainers'), variables('fslogixExclusionsOfficeContainers'))]",
                    "fslogixExclusionsCloudCache": "[if(contains(parameters('fslogixContainerType'), 'CloudCache'), ';\"%ProgramData%\\fslogix\\Cache\\*\";\"%ProgramData%\\fslogix\\Proxy\\*\"', '')]",
                    "fslogixExclusionsOfficeContainers": "[if(contains(parameters('fslogixContainerType'), 'Office'), format(';\"{0}\";\"{1}.lock\";\"{2}.meta\";\"{3}.metadata\"', variables('fslogixOfficeShare'), variables('fslogixOfficeShare'), variables('fslogixOfficeShare'), variables('fslogixOfficeShare')), '')]",
                    "fslogixExclusionsProfileContainers": "[format(';\"{0}\";\"{1}.lock\";\"{2}.meta\";\"{3}.metadata\"', variables('fslogixProfileShare'), variables('fslogixProfileShare'), variables('fslogixProfileShare'), variables('fslogixProfileShare'))]",
                    "fslogixOfficeShare": "[format('\\\\{0}.file.{1}\\office-containers\\*\\*.VHDX', variables('storageAccountToken'), parameters('storageSuffix'))]",
                    "fslogixProfileShare": "[format('\\\\{0}.file.{1}\\profile-containers\\*\\*.VHDX', variables('storageAccountToken'), parameters('storageSuffix'))]",
                    "imageReference": "[if(empty(parameters('imageVersionResourceId')), createObject('publisher', parameters('imagePublisher'), 'offer', parameters('imageOffer'), 'sku', parameters('imageSku'), 'version', 'latest'), createObject('id', parameters('imageVersionResourceId')))]",
                    "intune": "[contains(parameters('activeDirectorySolution'), 'IntuneEnrollment')]",
                    "nvidiaVmSize": "[contains(variables('nvidiaVmSizes'), parameters('virtualMachineSize'))]",
                    "nvidiaVmSizes": [
                      "Standard_NV6",
                      "Standard_NV12",
                      "Standard_NV24",
                      "Standard_NV12s_v3",
                      "Standard_NV24s_v3",
                      "Standard_NV48s_v3",
                      "Standard_NC4as_T4_v3",
                      "Standard_NC8as_T4_v3",
                      "Standard_NC16as_T4_v3",
                      "Standard_NC64as_T4_v3",
                      "Standard_NV6ads_A10_v5",
                      "Standard_NV12ads_A10_v5",
                      "Standard_NV18ads_A10_v5",
                      "Standard_NV36ads_A10_v5",
                      "Standard_NV36adms_A10_v5",
                      "Standard_NV72ads_A10_v5"
                    ],
                    "sessionHostNamePrefix": "[replace(parameters('virtualMachineNamePrefix'), parameters('serviceToken'), '')]",
                    "storageAccountToken": "[format('{0}??', parameters('storageAccountPrefix'))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "networkInterface",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-05-01",
                      "name": "[format('{0}-{1}', replace(parameters('networkInterfaceNamePrefix'), format('-{0}', parameters('serviceToken')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetworkInterfaces')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "networkSecurityGroup": {
                          "id": "[parameters('networkSecurityGroupResourceId')]"
                        },
                        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "copy": {
                        "name": "virtualMachine",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "plan": "[if(equals(parameters('profile'), 'ArcGISPro'), createObject('name', parameters('imageSku'), 'publisher', parameters('imagePublisher'), 'product', parameters('imageOffer')), null())]",
                      "zones": "[if(equals(parameters('availability'), 'AvailabilityZones'), createArray(parameters('availabilityZones')[mod(range(0, parameters('sessionHostCount'))[copyIndex()], length(parameters('availabilityZones')))]), null())]",
                      "properties": {
                        "availabilitySet": "[if(equals(parameters('availability'), 'AvailabilitySets'), createObject('id', resourceId('Microsoft.Compute/availabilitySets', format('{0}-{1}', parameters('availabilitySetNamePrefix'), padLeft(div(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 200), 2, '0')))), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('imageReference')]",
                          "osDisk": {
                            "name": "[format('{0}-{1}', replace(parameters('diskNamePrefix'), format('-{0}', parameters('serviceToken')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                            "osType": "Windows",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "[parameters('diskSku')]"
                            }
                          },
                          "dataDisks": []
                        },
                        "osProfile": {
                          "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                          "adminUsername": "[parameters('virtualMachineAdminUsername')]",
                          "computerName": "[format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}', replace(parameters('networkInterfaceNamePrefix'), format('-{0}', parameters('serviceToken')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "securityProfile": {
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "trustedLaunch",
                          "encryptionAtHost": true
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "licenseType": "[if(equals(parameters('imagePublisher'), 'MicrosoftWindowsDesktop'), 'Windows_Client', 'Windows_Server')]"
                      },
                      "dependsOn": [
                        "networkInterface"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_IaasAntimalware",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'IaaSAntimalware')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": false,
                        "settings": {
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "7",
                            "time": "120",
                            "scanType": "Quick"
                          },
                          "Exclusions": "[if(parameters('deployFslogix'), createObject('Paths', variables('fslogixExclusions')), createObject())]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_GuestAttestation",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AzureMonitorWindowsAgent",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[parameters('enableAvdInsights')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dataCollectionRuleAssociation",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[parameters('enableAvdInsights')]",
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2022-06-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]",
                      "name": "[parameters('dataCollectionRuleAssociationName')]",
                      "properties": {
                        "dataCollectionRuleId": "[parameters('dataCollectionRuleResourceId')]",
                        "description": "AVD Insights data collection rule association"
                      },
                      "dependsOn": [
                        "extension_AzureMonitorWindowsAgent",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "installAvdAgents",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'DesiredStateConfiguration')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.73",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "modulesUrl": "[format('https://wvdportalstorageblob.blob.{0}/galleryartifacts/{1}', environment().suffixes.storage, parameters('avdConfigurationZipFileName'))]",
                          "configurationFunction": "Configuration.ps1\\AddSessionHost",
                          "properties": {
                            "hostPoolName": "[parameters('hostPoolName')]",
                            "registrationInfoTokenCredential": {
                              "UserName": "PLACEHOLDER_DO_NOT_USE",
                              "Password": "PrivateSettingsRef:RegistrationInfoToken"
                            },
                            "aadJoin": "[contains(parameters('activeDirectorySolution'), 'EntraId')]",
                            "UseAgentDownloadEndpoint": false,
                            "mdmId": "[if(variables('intune'), '0000000a-0000-0000-c000-000000000000', '')]"
                          }
                        },
                        "protectedSettings": {
                          "Items": {
                            "RegistrationInfoToken": "[listRegistrationTokens(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName')), '2023-09-05').value[0].token]"
                          }
                        }
                      },
                      "dependsOn": [
                        "setSessionHostConfiguration",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_JsonADDomainExtension",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[contains(parameters('activeDirectorySolution'), 'DomainServices')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'JsonADDomainExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "forceUpdateTag": "[parameters('timestamp')]",
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('domainName')]",
                          "Options": "3",
                          "OUPath": "[parameters('organizationalUnitPath')]",
                          "Restart": "true",
                          "User": "[parameters('domainJoinUserPrincipalName')]"
                        },
                        "protectedSettings": {
                          "Password": "[parameters('domainJoinPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-drain-mode-{0}-{1}', parameters('batchCount'), parameters('deploymentNameSuffix')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AADLoginForWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[contains(parameters('activeDirectorySolution'), 'EntraId')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": "[if(variables('intune'), createObject('mdmId', '0000000a-0000-0000-c000-000000000000'), null())]"
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-drain-mode-{0}-{1}', parameters('batchCount'), parameters('deploymentNameSuffix')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AmdGpuDriverWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[variables('amdVmSize')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AmdGpuDriverWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.HpcCompute",
                        "type": "AmdGpuDriverWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_JsonADDomainExtension",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_NvidiaGpuDriverWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[variables('nvidiaVmSize')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'NvidiaGpuDriverWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.HpcCompute",
                        "type": "NvidiaGpuDriverWindows",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_JsonADDomainExtension",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "setSessionHostConfiguration",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('set-config-{0}-{1}-{2}', parameters('batchCount'), range(0, parameters('sessionHostCount'))[copyIndex()], parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "Set-SessionHostConfiguration"
                          },
                          "parameters": {
                            "value": [
                              {
                                "name": "ActiveDirectorySolution",
                                "value": "[parameters('activeDirectorySolution')]"
                              },
                              {
                                "name": "AmdVmSize",
                                "value": "[variables('amdVmSize')]"
                              },
                              {
                                "name": "Fslogix",
                                "value": "[parameters('deployFslogix')]"
                              },
                              {
                                "name": "FslogixContainerType",
                                "value": "[parameters('fslogixContainerType')]"
                              },
                              {
                                "name": "NetAppFileShares",
                                "value": "[string(parameters('netAppFileShares'))]"
                              },
                              {
                                "name": "NvidiaVmSize",
                                "value": "[variables('nvidiaVmSize')]"
                              },
                              {
                                "name": "StorageAccountPrefix",
                                "value": "[parameters('storageAccountPrefix')]"
                              },
                              {
                                "name": "StorageCount",
                                "value": "[parameters('storageCount')]"
                              },
                              {
                                "name": "StorageIndex",
                                "value": "[parameters('storageIndex')]"
                              },
                              {
                                "name": "StorageService",
                                "value": "[parameters('storageService')]"
                              },
                              {
                                "name": "StorageSuffix",
                                "value": "[parameters('storageSuffix')]"
                              },
                              {
                                "name": "UniqueToken",
                                "value": "[parameters('uniqueToken')]"
                              }
                            ]
                          },
                          "script": {
                            "value": "[variables('$fxv#0')]"
                          },
                          "tags": {
                            "value": "[parameters('tagsVirtualMachines')]"
                          },
                          "virtualMachineName": {
                            "value": "[format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "10620600674782878506"
                            }
                          },
                          "parameters": {
                            "asyncExecution": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "script": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "treatFailureAsDeploymentFailure": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-09-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "asyncExecution": "[parameters('asyncExecution')]",
                                "parameters": "[parameters('parameters')]",
                                "source": {
                                  "script": "[parameters('script')]"
                                },
                                "treatFailureAsDeploymentFailure": "[parameters('treatFailureAsDeploymentFailure')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "dataCollectionRuleAssociation",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableDrainMode')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-drain-mode-{0}-{1}', parameters('batchCount'), parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "Set-AvdDrainMode"
                          },
                          "parameters": {
                            "value": [
                              {
                                "name": "Environment",
                                "value": "[environment().name]"
                              },
                              {
                                "name": "hostPoolName",
                                "value": "[parameters('hostPoolName')]"
                              },
                              {
                                "name": "HostPoolResourceGroupName",
                                "value": "[parameters('resourceGroupManagement')]"
                              },
                              {
                                "name": "ResourceManagerUri",
                                "value": "[environment().resourceManager]"
                              },
                              {
                                "name": "sessionHostCount",
                                "value": "[parameters('sessionHostCount')]"
                              },
                              {
                                "name": "sessionHostIndex",
                                "value": "[parameters('sessionHostIndex')]"
                              },
                              {
                                "name": "SubscriptionId",
                                "value": "[subscription().subscriptionId]"
                              },
                              {
                                "name": "TenantId",
                                "value": "[tenant().tenantId]"
                              },
                              {
                                "name": "userAssignedidentityClientId",
                                "value": "[parameters('deploymentUserAssignedidentityClientId')]"
                              },
                              {
                                "name": "virtualMachineNamePrefix",
                                "value": "[variables('sessionHostNamePrefix')]"
                              }
                            ]
                          },
                          "script": {
                            "value": "[variables('$fxv#1')]"
                          },
                          "tags": {
                            "value": "[parameters('tagsVirtualMachines')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "10620600674782878506"
                            }
                          },
                          "parameters": {
                            "asyncExecution": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "script": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "treatFailureAsDeploymentFailure": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-09-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "asyncExecution": "[parameters('asyncExecution')]",
                                "parameters": "[parameters('parameters')]",
                                "source": {
                                  "script": "[parameters('script')]"
                                },
                                "treatFailureAsDeploymentFailure": "[parameters('treatFailureAsDeploymentFailure')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "installAvdAgents"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avSets-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-disableAutoscale-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('set-marketplaceTerms-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(parameters('enableRecoveryServices'), equals(parameters('hostPoolType'), 'Personal'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-recoveryServices-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deployFslogix": {
                    "value": "[parameters('deployFslogix')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "divisionRemainderValue": {
                    "value": "[parameters('divisionRemainderValue')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "maxResourcesPerTemplateDeployment": {
                    "value": "[parameters('maxResourcesPerTemplateDeployment')]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[parameters('recoveryServicesVaultName')]"
                  },
                  "resourceGroupHosts": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "sessionHostBatchCount": {
                    "value": "[parameters('sessionHostBatchCount')]"
                  },
                  "sessionHostIndex": {
                    "value": "[parameters('sessionHostIndex')]"
                  },
                  "tagsRecoveryServicesVault": {
                    "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.recoveryServices/vaults'), createObject()), parameters('mlzTags'))]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[variables('virtualMachineNamePrefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "3958901201559870406"
                    }
                  },
                  "parameters": {
                    "deployFslogix": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "divisionRemainderValue": {
                      "type": "int"
                    },
                    "location": {
                      "type": "string"
                    },
                    "maxResourcesPerTemplateDeployment": {
                      "type": "int"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "resourceGroupHosts": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "sessionHostBatchCount": {
                      "type": "int"
                    },
                    "sessionHostIndex": {
                      "type": "int"
                    },
                    "tagsRecoveryServicesVault": {
                      "type": "object"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "protectedItems_Vm",
                        "count": "[length(range(1, parameters('sessionHostBatchCount')))]"
                      },
                      "condition": "[not(parameters('deployFslogix'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-backup-protected-items-{0}-{1}', sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "policyId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.RecoveryServices/vaults/backupPolicies', parameters('recoveryServicesVaultName'), 'AvdPolicyVm')]"
                          },
                          "recoveryServicesVaultName": {
                            "value": "[parameters('recoveryServicesVaultName')]"
                          },
                          "sessionHostCount": "[if(and(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], parameters('sessionHostBatchCount')), greater(parameters('divisionRemainderValue'), 0)), createObject('value', parameters('divisionRemainderValue')), createObject('value', parameters('maxResourcesPerTemplateDeployment')))]",
                          "sessionHostIndex": "[if(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), createObject('value', parameters('sessionHostIndex')), createObject('value', add(mul(sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('maxResourcesPerTemplateDeployment')), parameters('sessionHostIndex'))))]",
                          "tags": {
                            "value": "[parameters('tagsRecoveryServicesVault')]"
                          },
                          "virtualMachineNamePrefix": {
                            "value": "[parameters('virtualMachineNamePrefix')]"
                          },
                          "virtualMachineResourceGroupName": {
                            "value": "[parameters('resourceGroupHosts')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "583281632053723898"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "policyId": {
                              "type": "string"
                            },
                            "recoveryServicesVaultName": {
                              "type": "string"
                            },
                            "sessionHostCount": {
                              "type": "int"
                            },
                            "sessionHostIndex": {
                              "type": "int"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineNamePrefix": {
                              "type": "string"
                            },
                            "virtualMachineResourceGroupName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "v2VmContainer": "iaasvmcontainer;iaasvmcontainerv2;",
                            "v2Vm": "vm;iaasvmcontainerv2;"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "protectedItems_Vm",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/Azure/{1}{2};{3}{4}/{5}{6};{7}{8}', parameters('recoveryServicesVaultName'), variables('v2VmContainer'), parameters('virtualMachineResourceGroupName'), parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'), variables('v2Vm'), parameters('virtualMachineResourceGroupName'), parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "protectedItemType": "Microsoft.Compute/virtualMachines",
                                "policyId": "[parameters('policyId')]",
                                "sourceResourceId": "[resourceId(parameters('virtualMachineResourceGroupName'), 'Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0')))]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]",
                "virtualMachines"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-scalingPlan-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentUserAssignedIdentityPrincipalId": {
                    "value": "[parameters('deploymentUserAssignedIdentityPrincipalId')]"
                  },
                  "enableAvdInsights": {
                    "value": "[parameters('enableAvdInsights')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[parameters('hostPoolResourceId')]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "scalingPlanDiagnosticSettingName": {
                    "value": "[parameters('namingConvention').scalingPlanDiagnosticSetting]"
                  },
                  "scalingPlanName": {
                    "value": "[parameters('namingConvention').scalingPlan]"
                  },
                  "tags": {
                    "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), coalesce(tryGet(parameters('tags'), 'Microsoft.DesktopVirtualization/scalingPlans'), createObject()), parameters('mlzTags'))]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  },
                  "weekdaysOffPeakStartTime": {
                    "value": "[parameters('scalingWeekdaysOffPeakStartTime')]"
                  },
                  "weekdaysPeakStartTime": {
                    "value": "[parameters('scalingWeekdaysPeakStartTime')]"
                  },
                  "weekendsOffPeakStartTime": {
                    "value": "[parameters('scalingWeekendsOffPeakStartTime')]"
                  },
                  "weekendsPeakStartTime": {
                    "value": "[parameters('scalingWeekendsPeakStartTime')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "6677095756701747012"
                    }
                  },
                  "parameters": {
                    "deploymentUserAssignedIdentityPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Principal ID of the user assigned identity."
                      }
                    },
                    "enableAvdInsights": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable AVD Insights."
                      }
                    },
                    "hostPoolResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Host pool resource ID for the Scaling Plan."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Location of the Scaling Plan. The location must match the location of the host pool."
                      }
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the Log Analytics workspace for the Scaling Plan."
                      }
                    },
                    "hostPoolType": {
                      "type": "string",
                      "allowedValues": [
                        "Personal",
                        "Pooled"
                      ],
                      "metadata": {
                        "description": "Required. Host pool type of the Scaling Plan."
                      }
                    },
                    "scalingPlanDiagnosticSettingName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the diagnostic setting for the Scaling Plan."
                      }
                    },
                    "scalingPlanName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Scaling Plan."
                      }
                    },
                    "supportedClouds": {
                      "type": "array",
                      "defaultValue": [
                        "AzureCloud",
                        "AzureUSGovernment"
                      ],
                      "metadata": {
                        "description": "Optional. Supported clouds."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "timeZone": {
                      "type": "string",
                      "defaultValue": "UTC",
                      "metadata": {
                        "description": "Optional. Time zone of the Scaling Plan. Defaults to UTC."
                      }
                    },
                    "weekdaysOffPeakStartTime": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Off peak start time for weekdays in HH:mm format."
                      }
                    },
                    "weekendsOffPeakStartTime": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Off peak start time for weekends in HH:mm format."
                      }
                    },
                    "weekdaysPeakStartTime": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Peak start time for weekdays in HH:mm format."
                      }
                    },
                    "weekendsPeakStartTime": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Peak start time for weekends in HH:mm format."
                      }
                    }
                  },
                  "variables": {
                    "schedules": "[if(equals(parameters('hostPoolType'), 'Pooled'), createArray(createObject('daysOfWeek', createArray('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'), 'offPeakLoadBalancingAlgorithm', 'DepthFirst', 'offPeakStartTime', createObject('hour', split(parameters('weekdaysOffPeakStartTime'), ':')[0], 'minute', split(parameters('weekdaysOffPeakStartTime'), ':')[1]), 'peakLoadBalancingAlgorithm', 'BreadthFirst', 'peakStartTime', createObject('hour', split(parameters('weekdaysPeakStartTime'), ':')[0], 'minute', split(parameters('weekdaysPeakStartTime'), ':')[1]), 'rampDownCapacityThresholdPct', 90, 'rampDownForceLogoffUsers', false(), 'rampDownLoadBalancingAlgorithm', 'DepthFirst', 'rampDownMinimumHostsPct', 0, 'rampDownNotificationMessage', 'Ramping down the AVD session hosts to support low demand.', 'rampDownStartTime', createObject('hour', sub(int(split(parameters('weekdaysOffPeakStartTime'), ':')[0]), 1), 'minute', split(parameters('weekdaysOffPeakStartTime'), ':')[1]), 'rampDownStopHostsWhen', 'ZeroSessions', 'rampDownWaitTimeMinutes', 0, 'rampUpCapacityThresholdPct', 70, 'rampUpLoadBalancingAlgorithm', 'BreadthFirst', 'rampUpMinimumHostsPct', 25, 'rampUpStartTime', createObject('hour', sub(int(split(parameters('weekdaysPeakStartTime'), ':')[0]), 1), 'minute', split(parameters('weekdaysPeakStartTime'), ':')[1])), createObject('daysOfWeek', createArray('Saturday', 'Sunday'), 'offPeakLoadBalancingAlgorithm', 'DepthFirst', 'offPeakStartTime', createObject('hour', split(parameters('weekendsOffPeakStartTime'), ':')[0], 'minute', split(parameters('weekendsOffPeakStartTime'), ':')[1]), 'peakLoadBalancingAlgorithm', 'BreadthFirst', 'peakStartTime', createObject('hour', split(parameters('weekendsPeakStartTime'), ':')[0], 'minute', split(parameters('weekendsPeakStartTime'), ':')[1]), 'rampDownCapacityThresholdPct', 90, 'rampDownForceLogoffUsers', false(), 'rampDownLoadBalancingAlgorithm', 'DepthFirst', 'rampDownMinimumHostsPct', 0, 'rampDownNotificationMessage', 'Ramping down the AVD session hosts to support low demand.', 'rampDownStartTime', createObject('hour', sub(int(split(parameters('weekendsOffPeakStartTime'), ':')[0]), 1), 'minute', split(parameters('weekendsOffPeakStartTime'), ':')[1]), 'rampDownStopHostsWhen', 'ZeroSessions', 'rampDownWaitTimeMinutes', 0, 'rampUpCapacityThresholdPct', 90, 'rampUpLoadBalancingAlgorithm', 'BreadthFirst', 'rampUpMinimumHostsPct', 25, 'rampUpStartTime', createObject('hour', sub(int(split(parameters('weekendsPeakStartTime'), ':')[0]), 1), 'minute', split(parameters('weekendsPeakStartTime'), ':')[1]))), createArray(createObject('daysOfWeek', createArray('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'), 'offPeakActionOnDisconnect', 'None', 'offPeakActionOnLogoff', 'Deallocate', 'offPeakMinutesToWaitOnDisconnect', 0, 'offPeakMinutesToWaitOnLogoff', 0, 'offPeakStartTime', createObject('hour', split(parameters('weekdaysOffPeakStartTime'), ':')[0], 'minute', split(parameters('weekdaysOffPeakStartTime'), ':')[1]), 'offPeakStartVMOnConnect', 'Enable', 'peakActionOnDisconnect', 'None', 'peakActionOnLogoff', 'Deallocate', 'peakMinutesToWaitOnDisconnect', 0, 'peakMinutesToWaitOnLogoff', 0, 'peakStartTime', createObject('hour', split(parameters('weekdaysPeakStartTime'), ':')[0], 'minute', split(parameters('weekdaysPeakStartTime'), ':')[1]), 'peakStartVMOnConnect', 'Enable', 'rampDownActionOnDisconnect', 'None', 'rampDownActionOnLogoff', 'Deallocate', 'rampDownMinutesToWaitOnDisconnect', 0, 'rampDownMinutesToWaitOnLogoff', 0, 'rampDownStartTime', createObject('hour', sub(int(split(parameters('weekdaysOffPeakStartTime'), ':')[0]), 1), 'minute', split(parameters('weekdaysOffPeakStartTime'), ':')[1]), 'rampDownStartVMOnConnect', 'Enable', 'rampUpActionOnDisconnect', 'None', 'rampUpActionOnLogoff', 'None', 'rampUpAutoStartHosts', 'WithAssignedUser', 'rampUpMinutesToWaitOnDisconnect', 0, 'rampUpMinutesToWaitOnLogoff', 0, 'rampUpStartTime', createObject('hour', sub(int(split(parameters('weekdaysPeakStartTime'), ':')[0]), 1), 'minute', split(parameters('weekdaysPeakStartTime'), ':')[1]), 'rampUpStartVMOnConnect', 'Enable'), createObject('daysOfWeek', createArray('Saturday', 'Sunday'), 'rampUpStartTime', createObject('hour', sub(int(split(parameters('weekendsPeakStartTime'), ':')[0]), 1), 'minute', split(parameters('weekendsPeakStartTime'), ':')[1]), 'peakStartTime', createObject('hour', split(parameters('weekendsPeakStartTime'), ':')[0], 'minute', split(parameters('weekendsPeakStartTime'), ':')[1]), 'peakMinutesToWaitOnDisconnect', 0, 'peakActionOnDisconnect', 'None', 'peakMinutesToWaitOnLogoff', 0, 'peakActionOnLogoff', 'Deallocate', 'peakStartVMOnConnect', 'Enable', 'rampDownStartTime', createObject('hour', sub(int(split(parameters('weekendsOffPeakStartTime'), ':')[0]), 1), 'minute', split(parameters('weekendsOffPeakStartTime'), ':')[1]), 'rampDownMinutesToWaitOnDisconnect', 0, 'rampDownActionOnDisconnect', 'None', 'rampDownMinutesToWaitOnLogoff', 0, 'rampDownActionOnLogoff', 'Deallocate', 'rampDownStartVMOnConnect', 'Enable', 'rampUpAutoStartHosts', 'WithAssignedUser', 'rampUpStartVMOnConnect', 'Enable', 'rampUpMinutesToWaitOnDisconnect', 0, 'rampUpActionOnDisconnect', 'None', 'rampUpMinutesToWaitOnLogoff', 0, 'rampUpActionOnLogoff', 'None', 'offPeakStartTime', createObject('hour', split(parameters('weekendsOffPeakStartTime'), ':')[0], 'minute', split(parameters('weekendsOffPeakStartTime'), ':')[1]), 'offPeakMinutesToWaitOnDisconnect', 0, 'offPeakActionOnDisconnect', 'None', 'offPeakMinutesToWaitOnLogoff', 0, 'offPeakActionOnLogoff', 'Deallocate', 'offPeakStartVMOnConnect', 'Enable')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/scalingPlans",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('scalingPlanName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "timeZone": "[parameters('timeZone')]",
                        "hostPoolType": "[parameters('hostPoolType')]",
                        "exclusionTag": "excludeFromAutoscale",
                        "schedules": [],
                        "hostPoolReferences": [
                          {
                            "hostPoolArmPath": "[parameters('hostPoolResourceId')]",
                            "scalingPlanEnabled": true
                          }
                        ]
                      }
                    },
                    {
                      "copy": {
                        "name": "schedules_Pooled",
                        "count": "[length(range(0, length(variables('schedules'))))]"
                      },
                      "condition": "[equals(parameters('hostPoolType'), 'Pooled')]",
                      "type": "Microsoft.DesktopVirtualization/scalingPlans/pooledSchedules",
                      "apiVersion": "2023-09-05",
                      "name": "[format('{0}/{1}', parameters('scalingPlanName'), if(equals(range(0, length(variables('schedules')))[copyIndex()], 0), 'Weekdays', 'Weekends'))]",
                      "properties": "[variables('schedules')[range(0, length(variables('schedules')))[copyIndex()]]]",
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('scalingPlanName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "schedule_Personal",
                        "count": "[length(range(0, length(variables('schedules'))))]"
                      },
                      "condition": "[equals(parameters('hostPoolType'), 'Personal')]",
                      "type": "Microsoft.DesktopVirtualization/scalingPlans/personalSchedules",
                      "apiVersion": "2023-09-05",
                      "name": "[format('{0}/{1}', parameters('scalingPlanName'), if(equals(range(0, length(variables('schedules')))[copyIndex()], 0), 'Weekdays', 'Weekends'))]",
                      "properties": "[variables('schedules')[range(0, length(variables('schedules')))[copyIndex()]]]",
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('scalingPlanName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DesktopVirtualization/scalingPlans/{0}', parameters('scalingPlanName'))]",
                      "name": "[guid(parameters('deploymentUserAssignedIdentityPrincipalId'), '082f0a83-3be5-4ba1-904c-961cca79b387', resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('scalingPlanName')))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '082f0a83-3be5-4ba1-904c-961cca79b387')]",
                        "principalId": "[parameters('deploymentUserAssignedIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('scalingPlanName'))]",
                        "schedule_Personal",
                        "schedules_Pooled"
                      ]
                    },
                    {
                      "condition": "[and(parameters('enableAvdInsights'), contains(parameters('supportedClouds'), environment().name))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/scalingPlans/{0}', parameters('scalingPlanName'))]",
                      "name": "[parameters('scalingPlanDiagnosticSettingName')]",
                      "properties": {
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[extensionResourceId(resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('scalingPlanName')), 'Microsoft.Authorization/roleAssignments', guid(parameters('deploymentUserAssignedIdentityPrincipalId'), '082f0a83-3be5-4ba1-904c-961cca79b387', resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('scalingPlanName'))))]",
                        "[resourceId('Microsoft.DesktopVirtualization/scalingPlans', parameters('scalingPlanName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('deploy-recoveryServices-{0}', parameters('deploymentNameSuffix')))]",
                "virtualMachines"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-fslogix-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-avd-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-clean-up-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "location": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceGroupName.value]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "virtualMachineResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualMachineResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "18256686723195400746"
            }
          },
          "parameters": {
            "deploymentNameSuffix": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "virtualMachineResourceId": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n    [string]$ResourceGroupName,\r\n    [string]$ResourceManagerUri,\r\n    [string]$UserAssignedIdentityClientId,\r\n    [string]$VirtualMachineResourceId\r\n)\r\n\r\n# Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n$ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri.Substring(0,$ResourceManagerUri.Length - 1)} else {$ResourceManagerUri}\r\n\r\n# Get an access token for Azure resources\r\n$AzureManagementAccessToken = (Invoke-RestMethod `\r\n    -Headers @{Metadata=\"true\"} `\r\n    -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n# Set header for Azure Management API\r\n$AzureManagementHeader = @{\r\n    'Content-Type'='application/json'\r\n    'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n}\r\n\r\nStart-Sleep -Seconds 30\r\n\r\n# Use the access token to delete the virtual machine\r\nInvoke-RestMethod `\r\n    -Headers $AzureManagementHeader `\r\n    -Method 'Delete' `\r\n    -Uri $($ResourceManagerUriFixed + $VirtualMachineResourceId + '?forceDeletion=true&api-version=2024-07-01') | Out-Null"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('clean-up-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "asyncExecution": {
                    "value": true
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "Remove-VirtualMachine"
                  },
                  "parameters": {
                    "value": [
                      {
                        "name": "ResourceGroupName",
                        "value": "[parameters('resourceGroupManagement')]"
                      },
                      {
                        "name": "ResourceManagerUri",
                        "value": "[environment().resourceManager]"
                      },
                      {
                        "name": "UserAssignedIdentityClientId",
                        "value": "[parameters('userAssignedIdentityClientId')]"
                      },
                      {
                        "name": "VirtualMachineResourceId",
                        "value": "[parameters('virtualMachineResourceId')]"
                      }
                    ]
                  },
                  "script": {
                    "value": "[variables('$fxv#0')]"
                  },
                  "tags": {
                    "value": {}
                  },
                  "treatFailureAsDeploymentFailure": {
                    "value": true
                  },
                  "virtualMachineName": {
                    "value": "[split(parameters('virtualMachineResourceId'), '/')[8]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "10620600674782878506"
                    }
                  },
                  "parameters": {
                    "asyncExecution": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "parameters": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "script": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "treatFailureAsDeploymentFailure": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-09-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "asyncExecution": "[parameters('asyncExecution')]",
                        "parameters": "[parameters('parameters')]",
                        "source": {
                          "script": "[parameters('script')]"
                        },
                        "treatFailureAsDeploymentFailure": "[parameters('treatFailureAsDeploymentFailure')]"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-fslogix-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-management-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-session-hosts-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ]
}