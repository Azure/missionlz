{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.26.54.24096",
      "templateHash": "13027653759208416348"
    }
  },
  "parameters": {
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Virtual Machine admin password"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Virtual Machine admin username"
      }
    },
    "applicationGatewayPrivateIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway Private IP Address"
      }
    },
    "applicationGatewaySubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway Subnet Address Prefix"
      }
    },
    "arcgisServiceAccountIsDomainAccount": {
      "type": "bool",
      "metadata": {
        "description": "ArcGIS Service Account Is Domain Account"
      }
    },
    "artifactsStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The storage account where deployment artifacts are stored."
      }
    },
    "artifactsContainerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the container where deployment artifacts are stored."
      }
    },
    "artifactsStorageAccountResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group where the artifacts storage account is located."
      }
    },
    "artifactsStorageAccountSubscriptionId": {
      "type": "string",
      "metadata": {
        "description": "The subscription id of the artifacts storage account."
      }
    },
    "arcgisServiceAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "ArcGIS Service Account Password"
      }
    },
    "arcgisServiceAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "ArcGIS Service Account User Name"
      }
    },
    "architecture": {
      "type": "string",
      "allowedValues": [
        "singletier",
        "multitier"
      ],
      "metadata": {
        "description": "Architecture for ESRI. Single Tier or Multi Tier."
      }
    },
    "azureFirewallName": {
      "type": "string",
      "metadata": {
        "description": "Azure Firewall Name"
      }
    },
    "certificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "The certificate password."
      }
    },
    "certificateFileName": {
      "type": "string",
      "metadata": {
        "description": "The certificate file name."
      }
    },
    "dataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "Data Store Virtual Machine OS Disk Size"
      }
    },
    "debugMode": {
      "type": "bool",
      "metadata": {
        "description": "Debug Mode for ESRI"
      }
    },
    "defaultSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Default Subnet Address Prefix"
      }
    },
    "deployDefender": {
      "type": "bool",
      "metadata": {
        "description": "Deploy Defender"
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow('yyMMddHHs')]",
      "metadata": {
        "description": "Deployment Name Suffix"
      }
    },
    "diskEncryptionSetResourceId": {
      "type": "string"
    },
    "emailSecurityContact": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Email Security Contact"
      }
    },
    "enableDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Data Store Virtual Machine Data Disk"
      }
    },
    "enableGraphDataStore": {
      "type": "bool",
      "metadata": {
        "description": "Enable Graph Data Store"
      }
    },
    "enableGraphDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Graph Data Store Virtual Machine Data Disk"
      }
    },
    "enableMonitoring": {
      "type": "bool",
      "metadata": {
        "description": "Enable Monitoring"
      }
    },
    "enableObjectDataStore": {
      "type": "bool",
      "metadata": {
        "description": "Enable Object Data Store"
      }
    },
    "enableObjectDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Object Data Store Virtual Machine Data Disk"
      }
    },
    "enableServerLogHarvesterPlugin": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Server Log Harvester Plugin"
      }
    },
    "enableSpatiotemporalBigDataStore": {
      "type": "bool",
      "metadata": {
        "description": "Enable Spatiotemporal Big Data Store"
      }
    },
    "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Spatiotemporal Big Data Store Virtual Machine Data Disk"
      }
    },
    "enableTileCacheDataStore": {
      "type": "bool",
      "metadata": {
        "description": "Enable Tile Cache Data Store"
      }
    },
    "enableTileCacheDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Tile Cache Data Store Virtual Machine Data Disk"
      }
    },
    "enableVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Virtual Machine Data Disk"
      }
    },
    "externalDnsHostname": {
      "type": "string",
      "metadata": {
        "description": "External DNS Hostname"
      }
    },
    "graphDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "Graph Data Store Virtual Machine OS Disk Size"
      }
    },
    "hubResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Hub Resource Group Name"
      }
    },
    "hubSubscriptionId": {
      "type": "string",
      "metadata": {
        "description": "Hub Subscription Id"
      }
    },
    "hubVirtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Hub Virtual Network Name"
      }
    },
    "isUpdatingCertificates": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Updating Certificates"
      }
    },
    "joinEntraDomain": {
      "type": "bool",
      "metadata": {
        "description": "Join Entra Domain"
      }
    },
    "joinWindowsDomain": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Join Windows Domain"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Location"
      }
    },
    "numberOfDataStoreVirtualMachines": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of data store virtual machines"
      }
    },
    "numberOfEsriServers": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of Esri servers"
      }
    },
    "numberOfEsrispatiotemporalBigDataStoreVirtualMachines": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of file share virtual machines"
      }
    },
    "numberOfFileShareVirtualMachineNames": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of file share virtual machines"
      }
    },
    "numberOfGraphDataStoreVirtualMachineNames": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of graph data store virtual machines"
      }
    },
    "numberOfObjectDataStoreVirtualMachines": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Number of object data store virtual machines"
      }
    },
    "numberOfPortalVirtualMachines": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of portal virtual machines"
      }
    },
    "numberOfTileCacheDataStoreVirtualMachineNames": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of tile cache data store virtual machines"
      }
    },
    "objectDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "Object Data Store Virtual Machine OS Disk Size"
      }
    },
    "ouPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "OU Path if using domain join for the virtual machines."
      }
    },
    "portalLicenseFile": {
      "type": "string",
      "metadata": {
        "description": "Portal License File"
      }
    },
    "portalLicenseUserTypeId": {
      "type": "string",
      "allowedValues": [
        "creatorUT",
        "editorUT",
        "fieldWorkerUT",
        "GISProfessionalAdvUT",
        "GISProfessionalBasicUT",
        "GISProfessionalStdUT",
        "IndoorsUserUT",
        "insightsAnalystUT",
        "viewerUT"
      ],
      "metadata": {
        "description": "Portal License User Type Id"
      }
    },
    "portalVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "Portal Virtual Machine OS Disk Size"
      }
    },
    "primarySiteAdministratorAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Primary Site Administrator Account Password"
      }
    },
    "primarySiteAdministratorAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "Primary Site Administrator Account User Name"
      }
    },
    "resourcePrefix": {
      "type": "string",
      "metadata": {
        "description": "Resource Prefix"
      }
    },
    "secondaryDnsHostName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Secondary Host Name"
      }
    },
    "selfSignedCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "Certificate Password"
      }
    },
    "serverLicenseFile": {
      "type": "string"
    },
    "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ]
    },
    "spokelogAnalyticsWorkspaceResourceId": {
      "type": "string"
    },
    "tags": {
      "type": "object",
      "defaultValue": {}
    },
    "tileCacheDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "tileCacheDataStoreVirtualMachineOSDiskSize value"
      }
    },
    "useAzureFiles": {
      "type": "bool",
      "metadata": {
        "description": "Use cloud storage value"
      }
    },
    "useCloudStorage": {
      "type": "bool",
      "metadata": {
        "description": "useCloudStorage value"
      }
    },
    "virtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "The size of the virtual machine OS disk"
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS4_v2",
      "metadata": {
        "description": "The size of the virtual machines"
      }
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The virtual network address prefix"
      }
    },
    "windowsDomainAdministratorPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the Windows domain administrator account."
      }
    },
    "windowsDomainAdministratorUserName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The username for the Windows domain administrator account."
      }
    },
    "windowsDomainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Windows domain."
      }
    },
    "workloadSubscriptionId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The GUID of the workload subscription."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "dataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfDataStoreVirtualMachines')))]",
        "input": "[format('vm-esri-ds-{0}', range(0, parameters('numberOfDataStoreVirtualMachines'))[copyIndex('dataStoreVirtualMachines')])]"
      },
      {
        "name": "fileShareVirtualMachines",
        "count": "[length(range(0, parameters('numberOfFileShareVirtualMachineNames')))]",
        "input": "[format('vm-esri-fl-{0}', range(0, parameters('numberOfFileShareVirtualMachineNames'))[copyIndex('fileShareVirtualMachines')])]"
      },
      {
        "name": "graphDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfGraphDataStoreVirtualMachineNames')))]",
        "input": "[format('vm-esri-gr-{0}', range(0, parameters('numberOfGraphDataStoreVirtualMachineNames'))[copyIndex('graphDataStoreVirtualMachines')])]"
      },
      {
        "name": "objectDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfObjectDataStoreVirtualMachines')))]",
        "input": "[format('vm-esri-od-{0}', range(0, parameters('numberOfObjectDataStoreVirtualMachines'))[copyIndex('objectDataStoreVirtualMachines')])]"
      },
      {
        "name": "portalVirtualMachines",
        "count": "[length(range(0, parameters('numberOfPortalVirtualMachines')))]",
        "input": "[format('vm-esri-pr-{0}', range(0, parameters('numberOfPortalVirtualMachines'))[copyIndex('portalVirtualMachines')])]"
      },
      {
        "name": "serverVirtualMachines",
        "count": "[length(range(0, parameters('numberOfEsriServers')))]",
        "input": "[format('vm-esri-sv-{0}', range(0, parameters('numberOfEsriServers'))[copyIndex('serverVirtualMachines')])]"
      },
      {
        "name": "spatiotemporalBigDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfEsrispatiotemporalBigDataStoreVirtualMachines')))]",
        "input": "[format('vm-esri-sp-{0}', range(0, parameters('numberOfEsrispatiotemporalBigDataStoreVirtualMachines'))[copyIndex('spatiotemporalBigDataStoreVirtualMachines')])]"
      },
      {
        "name": "tileCacheDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfTileCacheDataStoreVirtualMachineNames')))]",
        "input": "[format('vm-esri-tc-{0}', range(0, parameters('numberOfTileCacheDataStoreVirtualMachineNames'))[copyIndex('tileCacheDataStoreVirtualMachines')])]"
      }
    ],
    "resourceSuffix": "[parameters('resourcePrefix')]",
    "applicationGatewayName": "[format('{0}-appgw-esri', parameters('resourcePrefix'))]",
    "availabilitySetName": "[format('{0}-avset-esri', parameters('resourcePrefix'))]",
    "container": "artifacts",
    "keyVaultCertificatesOfficer": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
    "keyVaultCryptoOfficer": "[resourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
    "keyVaultName": "[format('{0}-kv-esri', parameters('resourcePrefix'))]",
    "keyVaultSecretsOfficer": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
    "networkInterfaceName": "[format('{0}-nic-esri', parameters('resourcePrefix'))]",
    "portalContext": "portal",
    "portalLicenseFileName": "portalLicense.json",
    "privatelink_blob_name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
    "privatelink_file_name": "[format('privatelink.file.{0}', environment().suffixes.storage)]",
    "privatelink_keyvaultDns_name": "[replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore')]",
    "publicIpAddressName": "[format('{0}-pip-esri', parameters('resourcePrefix'))]",
    "resourceGroupName": "[format('{0}-rg-esri-enterprise', parameters('resourcePrefix'))]",
    "serverContext": "server",
    "serverLicenseFileName": "serverLicense.prvc",
    "subscriptionId": "[subscription().subscriptionId]",
    "userAssignedManagedIdentityName": "[format('{0}-uami-esri-{1}', parameters('resourcePrefix'), variables('resourceSuffix'))]",
    "virtualMachineName": "[format('{0}-vm-esri', parameters('resourcePrefix'))]",
    "dataStoreVirtualMachineNames": "[join(variables('dataStoreVirtualMachines'), ',')]",
    "fileShareVirtualMachineName": "[join(variables('fileShareVirtualMachines'), ',')]",
    "graphDataStoreVirtualMachineNames": "[join(variables('graphDataStoreVirtualMachines'), ',')]",
    "objectDataStoreVirtualMachineNames": "[join(variables('objectDataStoreVirtualMachines'), ',')]",
    "portalVirtualMachineNames": "[join(variables('portalVirtualMachines'), ',')]",
    "serverVirtualMachineNames": "[join(variables('serverVirtualMachines'), ',')]",
    "spatiotemporalBigDataStoreVirtualMachineNames": "[join(variables('spatiotemporalBigDataStoreVirtualMachines'), ',')]",
    "tileCacheDataStoreVirtualMachineNames": "[join(variables('tileCacheDataStoreVirtualMachines'), ',')]",
    "dscDataStoreFunction": "DataStoreConfiguration",
    "dscGraphDataStoreFunction": "GraphDataStoreConfiguration",
    "dscObjectDataStoreFunction": "ObjectDataStoreConfiguration",
    "dscPortalFunction": "PortalConfiguration",
    "dscServerScriptFunction": "ServerConfiguration",
    "dscSingleTierConfiguration": "BaseDeploymentSingleTierConfiguration",
    "dscsSatiotemporalBigDataStoreFunction": "SpatiotemporalBigDataStoreConfiguration",
    "dscTileCacheDataStoreDscFunction": "TileCacheDataStoreConfiguration",
    "fileShareDscScriptFunction": "FileShareConfiguration",
    "isObjectDataStoreClustered": "[if(greaterOrEquals(parameters('numberOfObjectDataStoreVirtualMachines'), 3), true(), false())]",
    "isTileCacheDataStoreClustered": "[if(greaterOrEquals(parameters('numberOfTileCacheDataStoreVirtualMachineNames'), 1), true(), false())]",
    "isMultiMachineTileCacheDataStore": "[if(greaterOrEquals(parameters('numberOfTileCacheDataStoreVirtualMachineNames'), 1), true(), false())]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2019-05-01",
      "name": "[variables('resourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "condition": "[equals(parameters('architecture'), 'singletier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-single-tier-datastore-types-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "enableSpatiotemporalBigDataStore": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', parameters('enableSpatiotemporalBigDataStore')), createObject('value', false()))]",
          "enableTileCacheDataStore": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', parameters('enableTileCacheDataStore')), createObject('value', false()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "13758339223885887518"
            }
          },
          "parameters": {
            "enableTileCacheDataStore": {
              "type": "bool",
              "defaultValue": true
            },
            "enableSpatiotemporalBigDataStore": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "dataStoreTypesForSingleTier",
                "count": "[length(variables('singleTierDataStoreTypes'))]",
                "input": "[if(or(or(equals(variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'Relational'), equals(variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'TileCache')), equals(variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'SpatioTemporal')), variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'Relational')]"
              }
            ],
            "singleTierDataStoreTypes": [
              "Relational",
              "[if(parameters('enableTileCacheDataStore'), 'TileCache', 'Relational')]",
              "[if(parameters('enableSpatiotemporalBigDataStore'), 'SpatioTemporal', 'Relational')]"
            ],
            "dataStoreTypesForBaseDeployment": "[union(variables('singleTierDataStoreTypes'), variables('dataStoreTypesForSingleTier'))]"
          },
          "resources": [],
          "outputs": {
            "dataStoreTypesForBaseDeploymentServers": {
              "type": "string",
              "value": "[join(variables('dataStoreTypesForBaseDeployment'), ',')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationGatewayName": {
            "value": "[variables('applicationGatewayName')]"
          },
          "applicationGatewayPrivateIpAddress": {
            "value": "[parameters('applicationGatewayPrivateIpAddress')]"
          },
          "applicationGatewaySubnetAddressPrefix": {
            "value": "[parameters('applicationGatewaySubnetAddressPrefix')]"
          },
          "defaultSubnetAddressPrefix": {
            "value": "[parameters('defaultSubnetAddressPrefix')]"
          },
          "deployDefender": {
            "value": "[parameters('deployDefender')]"
          },
          "emailSecurityContact": {
            "value": "[parameters('emailSecurityContact')]"
          },
          "externalDnsHostname": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "firewallPrivateIPAddress": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/azureFirewalls', parameters('azureFirewallName')), '2023-05-01').ipConfigurations[0].properties.privateIPAddress]"
          },
          "hubResourceGroupName": {
            "value": "[parameters('hubResourceGroupName')]"
          },
          "hubSubscriptionId": {
            "value": "[parameters('hubSubscriptionId')]"
          },
          "hubVirtualNetworkId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('hubVirtualNetworkName'))]"
          },
          "hubVirtualNetworkName": {
            "value": "[parameters('hubVirtualNetworkName')]"
          },
          "hubVirtualNetworkResourceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('hubVirtualNetworkName'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[parameters('spokelogAnalyticsWorkspaceResourceId')]"
          },
          "privatelink_keyvaultDns_name": {
            "value": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/privateDnsZones', variables('privatelink_keyvaultDns_name')), '/')[8]]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          },
          "resourcePrefix": {
            "value": "[parameters('resourcePrefix')]"
          },
          "virtualNetworkAddressPrefix": {
            "value": "[parameters('virtualNetworkAddressPrefix')]"
          },
          "workloadSubscriptionId": {
            "value": "[parameters('workloadSubscriptionId')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "8925009427874413550"
            }
          },
          "parameters": {
            "resourcePrefix": {
              "type": "string",
              "defaultValue": "esri",
              "minLength": 3,
              "maxLength": 10,
              "metadata": {
                "description": "A prefix, 3 to 10 characters in length, to append to resource names (e.g. \"dev\", \"test\", \"prod\", \"mlz\"). It defaults to \"mlz\"."
              }
            },
            "resourceSuffix": {
              "type": "string",
              "defaultValue": "mlz",
              "minLength": 3,
              "maxLength": 6,
              "metadata": {
                "description": "A suffix, 3 to 6 characters in length, to append to resource names (e.g. \"dev\", \"test\", \"prod\", \"mlz\"). It defaults to \"mlz\"."
              }
            },
            "deployDefender": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]"
            },
            "emailSecurityContact": {
              "type": "string"
            },
            "firewallPrivateIPAddress": {
              "type": "string"
            },
            "hubResourceGroupName": {
              "type": "string"
            },
            "hubSubscriptionId": {
              "type": "string"
            },
            "hubVirtualNetworkName": {
              "type": "string"
            },
            "hubVirtualNetworkResourceId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "virtualNetworkAddressPrefix": {
              "type": "string"
            },
            "vNetDnsServers": {
              "type": "array",
              "defaultValue": [
                "[parameters('firewallPrivateIPAddress')]"
              ]
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "esri"
            },
            "workloadSubscriptionId": {
              "type": "string"
            },
            "applicationGatewayName": {
              "type": "string"
            },
            "applicationGatewaySubnetAddressPrefix": {
              "type": "string"
            },
            "defaultSubnetAddressPrefix": {
              "type": "string"
            },
            "privatelink_keyvaultDns_name": {
              "type": "string"
            },
            "hubVirtualNetworkId": {
              "type": "string"
            },
            "externalDnsHostname": {
              "type": "string"
            },
            "applicationGatewayPrivateIpAddress": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            }
          },
          "variables": {
            "resourceToken": "resource_token",
            "nameToken": "name_token",
            "namingConvention": "[format('{0}-{1}-{2}-{3}', toLower(parameters('resourcePrefix')), variables('resourceToken'), variables('nameToken'), toLower(parameters('resourceSuffix')))]",
            "virtualNetworkNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), 'vnet')]",
            "routeTableNamingConvention": "[replace(replace(variables('namingConvention'), variables('nameToken'), 'esri'), variables('resourceToken'), 'rt')]",
            "workloadVirtualNetworkName": "[replace(variables('virtualNetworkNamingConvention'), variables('nameToken'), parameters('workloadName'))]",
            "defaultTags": {
              "DeploymentType": "MissionLandingZoneARM"
            },
            "calculatedTags": "[union(parameters('tags'), variables('defaultTags'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('workloadSubscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGatewayName": {
                    "value": "[parameters('applicationGatewayName')]"
                  },
                  "applicationGatewaySubnetAddressPrefix": {
                    "value": "[parameters('applicationGatewaySubnetAddressPrefix')]"
                  },
                  "defaultSubnetAddressPrefix": {
                    "value": "[parameters('defaultSubnetAddressPrefix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "resourceGroup": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "routeTableName": {
                    "value": "[variables('routeTableNamingConvention')]"
                  },
                  "routeTableRouteNextHopIpAddress": {
                    "value": "[parameters('firewallPrivateIPAddress')]"
                  },
                  "tags": {
                    "value": "[variables('calculatedTags')]"
                  },
                  "virtualNetworkAddressPrefix": {
                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                  },
                  "virtualNetworkName": {
                    "value": "[variables('workloadVirtualNetworkName')]"
                  },
                  "vNetDnsServers": {
                    "value": "[parameters('vNetDnsServers')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "3556296216752459961"
                    }
                  },
                  "parameters": {
                    "applicationGatewayName": {
                      "type": "string"
                    },
                    "applicationGatewaySubnetAddressPrefix": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "resourceGroup": {
                      "type": "string"
                    },
                    "routeTableName": {
                      "type": "string"
                    },
                    "routeTableRouteNextHopIpAddress": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "defaultSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "vNetDnsServers": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('virtualNetworkName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/virtualNetworks'), parameters('tags')['Microsoft.Network/virtualNetworks'], createObject())]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": [
                            "[parameters('virtualNetworkAddressPrefix')]"
                          ]
                        },
                        "dhcpOptions": "[if(not(equals(parameters('vNetDnsServers'), null())), createObject('dnsServers', parameters('vNetDnsServers')), null())]",
                        "subnets": [
                          {
                            "name": "default",
                            "properties": {
                              "addressPrefix": "[parameters('defaultSubnetAddressPrefix')]",
                              "delegations": [],
                              "privateEndpointNetworkPolicies": "Disabled",
                              "privateLinkServiceNetworkPolicies": "Enabled",
                              "routeTable": {
                                "id": "[reference(resourceId('Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value]"
                              }
                            },
                            "type": "Microsoft.Network/virtualNetworks/subnets"
                          },
                          {
                            "name": "appGatewaySubnet",
                            "properties": {
                              "addressPrefix": "[parameters('applicationGatewaySubnetAddressPrefix')]",
                              "applicationGatewayIPConfigurations": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/gatewayIPConfigurations', parameters('applicationGatewayName'), 'appGatewayIpConfig')]"
                                }
                              ],
                              "delegations": [],
                              "privateEndpointNetworkPolicies": "Disabled",
                              "privateLinkServiceNetworkPolicies": "Disabled"
                            },
                            "type": "Microsoft.Network/virtualNetworks/subnets"
                          }
                        ],
                        "virtualNetworkPeerings": [],
                        "enableDdosProtection": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'routeTable')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), 'appGatewaySubnet')]",
                      "properties": {
                        "addressPrefix": "[parameters('applicationGatewaySubnetAddressPrefix')]",
                        "applicationGatewayIPConfigurations": [
                          {
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/gatewayIPConfigurations', parameters('applicationGatewayName'), 'appGatewayIpConfig')]"
                          }
                        ],
                        "delegations": [],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Enabled"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), 'default')]",
                      "properties": {
                        "addressPrefix": "[parameters('defaultSubnetAddressPrefix')]",
                        "delegations": [],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Enabled",
                        "routeTable": {
                          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]",
                        "[resourceId('Microsoft.Resources/deployments', 'routeTable')]",
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "routeTable",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('routeTableName')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "routeTableNextHopIpAddress": {
                            "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "3208799972746950006"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "routeTableRouteName": {
                              "type": "string",
                              "defaultValue": "default_route"
                            },
                            "routeTableRouteAddressPrefix": {
                              "type": "string",
                              "defaultValue": "0.0.0.0/0"
                            },
                            "routeTableNextHopIpAddress": {
                              "type": "string"
                            },
                            "routeTableRouteNextHopType": {
                              "type": "string",
                              "defaultValue": "VirtualAppliance"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/routeTables",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "routes": [
                                  {
                                    "name": "[parameters('routeTableRouteName')]",
                                    "properties": {
                                      "addressPrefix": "[parameters('routeTableRouteAddressPrefix')]",
                                      "nextHopIpAddress": "[parameters('routeTableNextHopIpAddress')]",
                                      "nextHopType": "[parameters('routeTableRouteNextHopType')]"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "appGatewaySubnetAddressPrefix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet'), '2023-04-01').addressPrefix]"
                    },
                    "appGatewaySubnetId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                    },
                    "appGatewaySubnetName": {
                      "type": "string",
                      "value": "appGatewaySubnet"
                    },
                    "subnetAddressPrefix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'default'), '2023-04-01').addressPrefix]"
                    },
                    "subnetName": {
                      "type": "string",
                      "value": "default"
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'default')]"
                    },
                    "vNetAddressPrefix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-04-01').addressSpace.addressPrefixes[0]]"
                    },
                    "vNetid": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                    },
                    "vNetName": {
                      "type": "string",
                      "value": "[parameters('virtualNetworkName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-virtualNetworkLink--{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('hubSubscriptionId')]",
              "resourceGroup": "[parameters('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privatelink_keyvaultDns_name": {
                    "value": "[parameters('privatelink_keyvaultDns_name')]"
                  },
                  "workloadVirtualNetworkName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetName.value]"
                  },
                  "virtualNetworkId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetid.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "15109711853711429239"
                    }
                  },
                  "parameters": {
                    "privatelink_keyvaultDns_name": {
                      "type": "string"
                    },
                    "workloadVirtualNetworkName": {
                      "type": "string"
                    },
                    "virtualNetworkId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privatelink_keyvaultDns_name'), parameters('workloadVirtualNetworkName'))]",
                      "location": "global",
                      "properties": {
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkId')]"
                        },
                        "registrationEnabled": false
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-to-hub-vnet-peering', parameters('workloadName')), 64)]",
              "subscriptionId": "[parameters('workloadSubscriptionId')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "spokeName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "spokeResourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "spokeVirtualNetworkName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetName.value]"
                  },
                  "hubVirtualNetworkName": {
                    "value": "[parameters('hubVirtualNetworkName')]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "13987612441032900755"
                    }
                  },
                  "parameters": {
                    "spokeName": {
                      "type": "string"
                    },
                    "spokeResourceGroupName": {
                      "type": "string"
                    },
                    "spokeVirtualNetworkName": {
                      "type": "string"
                    },
                    "hubVirtualNetworkName": {
                      "type": "string"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-to-hub-vnet-peering', parameters('spokeName'))]",
                      "resourceGroup": "[parameters('spokeResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}/to-{1}', parameters('spokeVirtualNetworkName'), parameters('hubVirtualNetworkName'))]"
                          },
                          "remoteVirtualNetworkResourceId": {
                            "value": "[parameters('hubVirtualNetworkResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "10509951780144584720"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "remoteVirtualNetworkResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "allowForwardedTraffic": true,
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-virtualNetworkLink--{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('hub-to-{0}-vnet-peering', parameters('workloadName')), 64)]",
              "subscriptionId": "[parameters('workloadSubscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hubVirtualNetworkName": {
                    "value": "[parameters('hubVirtualNetworkName')]"
                  },
                  "hubResourceGroupName": {
                    "value": "[parameters('hubResourceGroupName')]"
                  },
                  "spokeVirtualNetworkName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetName.value]"
                  },
                  "spokeVirtualNetworkResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetid.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "5664108101366069473"
                    }
                  },
                  "parameters": {
                    "hubResourceGroupName": {
                      "type": "string"
                    },
                    "hubVirtualNetworkName": {
                      "type": "string"
                    },
                    "spokeVirtualNetworkName": {
                      "type": "string"
                    },
                    "spokeVirtualNetworkResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "hubToSpokeVirtualNetworkPeering",
                      "resourceGroup": "[parameters('hubResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}/to-{1}', parameters('hubVirtualNetworkName'), parameters('spokeVirtualNetworkName'))]"
                          },
                          "remoteVirtualNetworkResourceId": {
                            "value": "[parameters('spokeVirtualNetworkResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "10509951780144584720"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "remoteVirtualNetworkResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "allowForwardedTraffic": true,
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-virtualNetworkLink--{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId(parameters('workloadSubscriptionId'), 'Microsoft.Resources/deployments', take(format('{0}-to-hub-vnet-peering', parameters('workloadName')), 64))]"
              ]
            },
            {
              "condition": "[parameters('deployDefender')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('set-{0}-sub-defender', parameters('workloadName'))]",
              "subscriptionId": "[parameters('workloadSubscriptionId')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "emailSecurityContact": {
                    "value": "[parameters('emailSecurityContact')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "15033542879751971590"
                    }
                  },
                  "parameters": {
                    "defenderPlans": {
                      "type": "array",
                      "defaultValue": [
                        "VirtualMachines"
                      ],
                      "metadata": {
                        "description": "Defender Paid protection Plans. Even if a customer selects the free sku, at least 1 paid protection plan must be specified."
                      }
                    },
                    "enableAutoProvisioning": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Turn automatic deployment by Defender of the MMA (OMS VM extension) on or off"
                      }
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Specify the ID of your custom Log Analytics workspace to collect Defender data."
                      }
                    },
                    "emailSecurityContact": {
                      "type": "string",
                      "metadata": {
                        "description": "Email address of the contact, in the form of john@doe.com"
                      }
                    },
                    "policySetDescription": {
                      "type": "string",
                      "defaultValue": "The Microsoft Cloud Security Benchmark initiative represents the policies and controls implementing security recommendations defined in Microsoft Cloud Security Benchmark v2, see https://aka.ms/azsecbm. This also serves as the Microsoft Defender for Cloud default policy initiative. You can directly assign this initiative, or manage its policies and compliance results within Microsoft Defender.",
                      "metadata": {
                        "description": "Policy Initiative description field"
                      }
                    },
                    "defenderSkuTier": {
                      "type": "string",
                      "defaultValue": "Free",
                      "metadata": {
                        "description": "[Standard/Free] The SKU for Defender. It defaults to \"Free\"."
                      }
                    }
                  },
                  "variables": {
                    "autoProvisioning": "[if(parameters('enableAutoProvisioning'), 'On', 'Off')]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "defenderPricing",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[not(empty(parameters('defenderPlans')))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/autoProvisioningSettings",
                      "apiVersion": "2019-01-01",
                      "name": "default",
                      "properties": {
                        "autoProvision": "[variables('autoProvisioning')]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/workspaceSettings",
                      "apiVersion": "2019-01-01",
                      "name": "default",
                      "properties": {
                        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "scope": "[subscription().id]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('emailSecurityContact')))]",
                      "type": "Microsoft.Security/securityContacts",
                      "apiVersion": "2020-01-01-preview",
                      "name": "default",
                      "properties": {
                        "notificationsByRole": {
                          "roles": [
                            "AccountAdmin",
                            "Contributor",
                            "Owner",
                            "ServiceAdmin"
                          ],
                          "state": "On"
                        },
                        "alertNotifications": {
                          "state": "On"
                        },
                        "emails": "[parameters('emailSecurityContact')]"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2022-06-01",
                      "name": "Microsoft Cloud Security Benchmark",
                      "properties": {
                        "displayName": "Defender Default",
                        "description": "[parameters('policySetDescription')]",
                        "enforcementMode": "DoNotEnforce",
                        "parameters": {},
                        "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '1f3afdf9-d0c9-4c3d-847f-89da613e70a8')]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "condition": "[equals(parameters('joinWindowsDomain'), false())]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-privatednszone-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('workloadSubscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "externalDnsHostname": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "applicationGatewayPrivateIPAddress": {
                    "value": "[parameters('applicationGatewayPrivateIpAddress')]"
                  },
                  "virtualNetworkId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetid.value]"
                  },
                  "hubVirtualNetworkId": {
                    "value": "[parameters('hubVirtualNetworkId')]"
                  },
                  "resourcePrefix": {
                    "value": "[parameters('resourcePrefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "9906905578732634543"
                    }
                  },
                  "parameters": {
                    "applicationGatewayPrivateIPAddress": {
                      "type": "string"
                    },
                    "externalDnsHostname": {
                      "type": "string"
                    },
                    "hubVirtualNetworkId": {
                      "type": "string"
                    },
                    "resourcePrefix": {
                      "type": "string"
                    },
                    "virtualNetworkId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "privateDNSZoneName": "[format('{0}.{1}', split(parameters('externalDnsHostname'), '.')[1], split(parameters('externalDnsHostname'), '.')[2])]",
                    "aRecordName": "[split(parameters('externalDnsHostname'), '.')[0]]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('privateDNSZoneName')]",
                      "location": "global",
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', variables('privateDNSZoneName'), format('{0}-esri-link', parameters('resourcePrefix')))]",
                      "location": "global",
                      "properties": {
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkId')]"
                        },
                        "registrationEnabled": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', variables('privateDNSZoneName'), format('{0}-hub-link', parameters('resourcePrefix')))]",
                      "location": "global",
                      "properties": {
                        "virtualNetwork": {
                          "id": "[parameters('hubVirtualNetworkId')]"
                        },
                        "registrationEnabled": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', variables('privateDNSZoneName'), variables('aRecordName'))]",
                      "properties": {
                        "ttl": 3600,
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('applicationGatewayPrivateIPAddress')]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDNSZoneName": {
                      "type": "string",
                      "value": "[variables('privateDNSZoneName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', take(format('hub-to-{0}-vnet-peering', parameters('workloadName')), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId(parameters('workloadSubscriptionId'), 'Microsoft.Resources/deployments', take(format('{0}-to-hub-vnet-peering', parameters('workloadName')), 64))]"
              ]
            }
          ],
          "outputs": {
            "rg": {
              "type": "string",
              "value": "[parameters('resourceGroupName')]"
            },
            "location": {
              "type": "string",
              "value": "[parameters('location')]"
            },
            "virtualNetworkName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetName.value]"
            },
            "virtualNetworkAddressPrefix": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetAddressPrefix.value]"
            },
            "virtualNetworkResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetid.value]"
            },
            "subnetName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetName.value]"
            },
            "subnetAddressPrefix": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetAddressPrefix.value]"
            },
            "subnetResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-uami-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('userAssignedManagedIdentityName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "9749879718794757824"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject())]"
            }
          ],
          "outputs": {
            "clientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-storage-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerName": {
            "value": "[variables('container')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "useCloudStorage": {
            "value": "[parameters('useCloudStorage')]"
          },
          "blobsPrivateDnsZoneResourceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/privateDnsZones', variables('privatelink_blob_name'))]"
          },
          "filePrivateDnsZoneResourceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/privateDnsZones', variables('privatelink_file_name'))]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "keyVaultUri": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
          },
          "storageEncryptionKeyName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "resourcePrefix": {
            "value": "[parameters('resourcePrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "5576770691490877000"
            }
          },
          "parameters": {
            "containerName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "storageSKU": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ]
            },
            "tags": {
              "type": "object"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "blobsPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "filePrivateDnsZoneResourceId": {
              "type": "string"
            },
            "fileShareName": {
              "type": "string",
              "defaultValue": "fileshare"
            },
            "useCloudStorage": {
              "type": "bool"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "storageEncryptionKeyName": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            }
          },
          "variables": {
            "uniqueStorageName": "[take(format('{0}', uniqueString(resourceGroup().id)), 10)]",
            "zones": [
              "[parameters('blobsPrivateDnsZoneResourceId')]",
              "[parameters('filePrivateDnsZoneResourceId')]"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Storage/storageAccounts'), parameters('tags')['Microsoft.Storage/storageAccounts'], createObject())]",
              "sku": {
                "name": "[parameters('storageSKU')]"
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                }
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "allowBlobPublicAccess": false,
                "allowCrossTenantReplication": false,
                "allowedCopyScope": "PrivateLink",
                "allowSharedKeyAccess": true,
                "defaultToOAuthAuthentication": false,
                "dnsEndpointType": "Standard",
                "encryption": {
                  "identity": {
                    "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId')]"
                  },
                  "keySource": "Microsoft.KeyVault",
                  "keyvaultproperties": {
                    "keyvaulturi": "[parameters('keyVaultUri')]",
                    "keyname": "[parameters('storageEncryptionKeyName')]"
                  },
                  "requireInfrastructureEncryption": true,
                  "services": {
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "queue": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "table": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  }
                },
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Deny"
                },
                "publicNetworkAccess": "Disabled",
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
              "properties": {
                "protocolSettings": {
                  "smb": {}
                },
                "cors": {
                  "corsRules": []
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/queueServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/tableServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default', parameters('fileShareName'))]",
              "properties": {
                "accessTier": "TransactionOptimized",
                "shareQuota": 5120,
                "enabledProtocols": "SMB"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/{1}/{2}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default', parameters('containerName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]"
              ]
            },
            {
              "copy": {
                "name": "privateEndpoints",
                "count": "[length(variables('zones'))]"
              },
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-esri-pe-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex())]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('{0}-esri-nic-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex())]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-esri-pl-{1}', parameters('resourcePrefix'), copyIndex())]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]",
                      "groupIds": [
                        "[split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]]"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            },
            {
              "copy": {
                "name": "privateDnsZoneGroups",
                "count": "[length(variables('zones'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', format('{0}-esri-pe-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex()), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateDnsZoneId": "[variables('zones')[copyIndex()]]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-esri-pe-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex()))]",
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            }
          ],
          "outputs": {
            "storageEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))), '2023-01-01').primaryEndpoints.blob]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))]"
            },
            "cloudStorageAccountCredentialsUserName": {
              "type": "string",
              "value": "[format('{0}{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), replace(split(reference(resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))), '2023-01-01').primaryEndpoints.blob, format('https://{0}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))))[1], '/', ''))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-pip-address-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hostname": {
            "value": "[format('esri-{0}{1}', parameters('resourcePrefix'), uniqueString(variables('resourceGroupName')))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publicIpAddressName": {
            "value": "[variables('publicIpAddressName')]"
          },
          "publicIpAllocationMethod": {
            "value": "Static"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "6156014875832287100"
            }
          },
          "parameters": {
            "hostname": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "publicIpAddressName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "publicIpAllocationMethod": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2023-04-01",
              "name": "[parameters('publicIpAddressName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/publicIPAddresses'), parameters('tags')['Microsoft.Network/publicIPAddresses'], createObject())]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]",
                "idleTimeoutInMinutes": 11,
                "dnsSettings": {
                  "domainNameLabel": "[parameters('hostname')]",
                  "fqdn": "[parameters('hostname')]"
                },
                "ipTags": []
              }
            }
          ],
          "outputs": {
            "pipFqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName')), '2023-04-01').dnsSettings.fqdn]"
            },
            "pipIp": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName')), '2023-04-01').ipAddress]"
            },
            "pipId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
            },
            "pipName": {
              "type": "string",
              "value": "[parameters('publicIpAddressName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-server-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-server', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "17093710300497942843"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-portal-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-portal', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "17093710300497942843"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-datastore-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-datastore', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "17093710300497942843"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-spatiotemporal-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-spatiotemporal', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "17093710300497942843"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-tilecache-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-tilecache', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "17093710300497942843"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-graph-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-graph', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "17093710300497942843"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-odata-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-odata', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "17093710300497942843"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'singletier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-virtual-machine-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": "[variables('availabilitySetName')]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[variables('networkInterfaceName')]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "singletier"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value), createObject('value', 'none'))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value), createObject('value', 'none'))]",
          "virtualMachineName": {
            "value": "[variables('virtualMachineName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "7579044595906678679"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierServerVirtualMachines",
        "count": "[length(variables('serverVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-server-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(equals(parameters('architecture'), 'multitier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-server-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('serverVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "server"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('serverVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "7579044595906678679"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-server-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierPortalVirtualMachines",
        "count": "[length(variables('portalVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-portal-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(equals(parameters('architecture'), 'multitier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-portal-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('portalVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "portal"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('portalVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "7579044595906678679"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-portal-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierDatastoreServerVirtualMachines",
        "count": "[length(variables('dataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-datastore-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(equals(parameters('architecture'), 'multitier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-datastore-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('dataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "datastore"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('dataStoreVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "7579044595906678679"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-datastore-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierFileServerVirtualMachines",
        "count": "[length(variables('fileShareVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-fileserver-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": ""
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('fileShareVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "fileshare"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('fileShareVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "7579044595906678679"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierSpatiotemporalBigDataStoreVirtualMachines",
        "count": "[length(variables('spatiotemporalBigDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-spatiotemporal-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-spatiotemporal-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "spatiotemporal"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "7579044595906678679"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-spatiotemporal-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierTileCacheVirtualMachines",
        "count": "[length(variables('tileCacheDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-tilecache-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-tilecache-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('tileCacheDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "tilecache"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('tileCacheDataStoreVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "7579044595906678679"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-tilecache-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierGraphVirtualMachines",
        "count": "[length(variables('graphDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-graph-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-graph-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('graphDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "graph"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('graphDataStoreVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "7579044595906678679"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-graph-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierObjectDataStoreVirtualMachines",
        "count": "[length(variables('objectDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-odata-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-odata-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('objectDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "objectDataStore"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('objectDataStoreVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "7579044595906678679"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "adminPassword": "[parameters('adminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-odata-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "domainJoinPassword": "[if(parameters('joinWindowsDomain'), createObject('value', parameters('windowsDomainAdministratorPassword')), createObject('value', 'None'))]",
          "domainJoinUserPrincipalName": "[if(parameters('joinWindowsDomain'), createObject('value', parameters('windowsDomainAdministratorUserName')), createObject('value', 'None'))]",
          "keyVaultCertificatesOfficerRoleDefinitionResourceId": {
            "value": "[variables('keyVaultCertificatesOfficer')]"
          },
          "keyVaultCryptoOfficerRoleDefinitionResourceId": {
            "value": "[variables('keyVaultCryptoOfficer')]"
          },
          "keyVaultName": {
            "value": "[take(format('{0}-{1}', variables('keyVaultName'), uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName')), variables('keyVaultName'))), 24)]"
          },
          "keyVaultPrivateDnsZoneResourceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/privateDnsZones', variables('privatelink_keyvaultDns_name'))]"
          },
          "keyVaultSecretsOfficerRoleDefinitionResourceId": {
            "value": "[variables('keyVaultSecretsOfficer')]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "primarySiteAdministratorAccountPassword": {
            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
          },
          "primarySiteAdministratorAccountUserName": {
            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
          },
          "resourcePrefix": {
            "value": "[parameters('resourcePrefix')]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "8376415160635004409"
            }
          },
          "parameters": {
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "securestring"
            },
            "keyVaultCertificatesOfficerRoleDefinitionResourceId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultSecretsOfficerRoleDefinitionResourceId": {
              "type": "string"
            },
            "keyVaultCryptoOfficerRoleDefinitionResourceId": {
              "type": "string"
            },
            "localAdministratorPassword": {
              "type": "securestring"
            },
            "localAdministratorUsername": {
              "type": "securestring"
            },
            "location": {
              "type": "string"
            },
            "primarySiteAdministratorAccountPassword": {
              "type": "securestring"
            },
            "primarySiteAdministratorAccountUserName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "keyVaultPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "diskEncryptionKeyExpirationInDays": {
              "type": "int",
              "defaultValue": 30
            },
            "resourcePrefix": {
              "type": "string"
            }
          },
          "variables": {
            "Secrets": [
              {
                "name": "DomainJoinPassword",
                "value": "[parameters('domainJoinPassword')]"
              },
              {
                "name": "DomainJoinUserPrincipalName",
                "value": "[parameters('domainJoinUserPrincipalName')]"
              },
              {
                "name": "LocalAdministratorPassword",
                "value": "[parameters('localAdministratorPassword')]"
              },
              {
                "name": "LocalAdministratorUsername",
                "value": "[parameters('localAdministratorUsername')]"
              },
              {
                "name": "PrimarySiteAdministratorAccountUserName",
                "value": "[parameters('primarySiteAdministratorAccountUserName')]"
              },
              {
                "name": "PrimarySiteAdministratorAccountPassword",
                "value": "[parameters('primarySiteAdministratorAccountPassword')]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-10-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
              "properties": {
                "enabledForDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "enablePurgeProtection": true,
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "ipRules": [],
                  "virtualNetworkRules": []
                },
                "publicNetworkAccess": "Disabled",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'DiskEncryptionKey')]",
              "properties": {
                "attributes": {
                  "enabled": true
                },
                "keySize": 4096,
                "kty": "RSA",
                "rotationPolicy": {
                  "attributes": {
                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                  },
                  "lifetimeActions": [
                    {
                      "action": {
                        "type": "Notify"
                      },
                      "trigger": {
                        "timeBeforeExpiry": "P10D"
                      }
                    },
                    {
                      "action": {
                        "type": "Rotate"
                      },
                      "trigger": {
                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageEncryptionKey')]",
              "properties": {
                "attributes": {
                  "enabled": true
                },
                "keySize": 4096,
                "kty": "RSA",
                "rotationPolicy": {
                  "attributes": {
                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                  },
                  "lifetimeActions": [
                    {
                      "action": {
                        "type": "Notify"
                      },
                      "trigger": {
                        "timeBeforeExpiry": "P10D"
                      }
                    },
                    {
                      "action": {
                        "type": "Rotate"
                      },
                      "trigger": {
                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "copy": {
                "name": "secrets",
                "count": "[length(variables('Secrets'))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('Secrets')[copyIndex()].name)]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
              "properties": {
                "value": "[variables('Secrets')[copyIndex()].value]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('keyVaultSecretsOfficerRoleDefinitionResourceId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('keyVaultSecretsOfficerRoleDefinitionResourceId')]",
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('keyVaultCertificatesOfficerRoleDefinitionResourceId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('keyVaultCertificatesOfficerRoleDefinitionResourceId')]",
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('keyVaultCryptoOfficerRoleDefinitionResourceId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('keyVaultCryptoOfficerRoleDefinitionResourceId')]",
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('keyVaultName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                      "groupIds": [
                        "vault"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName')), parameters('keyVaultName'))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName')))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyUriWithVersion": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
            },
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2021-10-01').vaultUri]"
            },
            "storageKeyName": {
              "type": "string",
              "value": "StorageEncryptionKey"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-role-sa-01-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "8411349545033436594"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-role-sa-02-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('artifactsStorageAccountSubscriptionId')]",
      "resourceGroup": "[parameters('artifactsStorageAccountResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "storageAccountName": {
            "value": "[parameters('artifactsStorageAccountName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "8411349545033436594"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-role-vm-01-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "8843829551900952560"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('resourceGroupName'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-role-sub-01-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userAssignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "3020662803375983209"
            }
          },
          "parameters": {
            "userAssignedIdentityId": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow('yyyyMMddHHmmss')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-role-vm-02-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('userAssignedIdentityId')]"
                  },
                  "subscriptionid": {
                    "value": "[parameters('subscriptionId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "8968981336685248524"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "subscriptionid": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('subscriptionid'))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-management-vm-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "artifactsContainerName": {
            "value": "[parameters('artifactsContainerName')]"
          },
          "artifactsStorageAccountName": {
            "value": "[parameters('artifactsStorageAccountName')]"
          },
          "certificateFileName": {
            "value": "[parameters('certificateFileName')]"
          },
          "certificatePassword": {
            "value": "[parameters('certificatePassword')]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[parameters('diskEncryptionSetResourceId')]"
          },
          "esriStorageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "externalDnsHostname": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "hybridUseBenefit": {
            "value": false
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "portalLicenseFile": {
            "value": "[parameters('portalLicenseFile')]"
          },
          "portalLicenseFileName": {
            "value": "[variables('portalLicenseFileName')]"
          },
          "resourcePrefix": {
            "value": "[parameters('resourcePrefix')]"
          },
          "serverLicenseFile": {
            "value": "[parameters('serverLicenseFile')]"
          },
          "serverLicenseFileName": {
            "value": "[variables('serverLicenseFileName')]"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[take(format('{0}-vmesrimgmt', parameters('resourcePrefix')), 15)]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "4677294163377019848"
            }
          },
          "parameters": {
            "artifactsContainerName": {
              "type": "string"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "hybridUseBenefit": {
              "type": "bool"
            },
            "localAdministratorPassword": {
              "type": "securestring"
            },
            "localAdministratorUsername": {
              "type": "securestring"
            },
            "location": {
              "type": "string"
            },
            "artifactsStorageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "portalLicenseFile": {
              "type": "string"
            },
            "portalLicenseFileName": {
              "type": "string"
            },
            "serverLicenseFile": {
              "type": "string"
            },
            "serverLicenseFileName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "certificatePassword": {
              "type": "securestring"
            },
            "certificateFileName": {
              "type": "string"
            },
            "externalDnsHostname": {
              "type": "string"
            },
            "esriStorageAccountName": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('virtualMachineName'))]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                }
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "Standard_D2s_v3"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('localAdministratorUsername')]",
                  "adminPassword": "[parameters('localAdministratorPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": true,
                    "patchSettings": {
                      "patchMode": "AutomaticByOS",
                      "assessmentMode": "ImageDefault"
                    }
                  }
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "2022-datacenter-core-g2",
                    "version": "latest"
                  },
                  "osDisk": {
                    "caching": "ReadWrite",
                    "createOption": "FromImage",
                    "deleteOption": "Delete",
                    "managedDisk": {
                      "diskEncryptionSet": {
                        "id": "[parameters('diskEncryptionSetResourceId')]"
                      },
                      "storageAccountType": "Premium_LRS"
                    },
                    "name": "[format('{0}-disk-{1}', parameters('resourcePrefix'), parameters('virtualMachineName'))]",
                    "osType": "Windows"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('virtualMachineName')))]",
                      "properties": {
                        "deleteOption": "Delete"
                      }
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": false
                  }
                },
                "securityProfile": {
                  "encryptionAtHost": true,
                  "uefiSettings": {
                    "secureBootEnabled": true,
                    "vTpmEnabled": true
                  },
                  "securityType": "TrustedLaunch"
                },
                "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('virtualMachineName')))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-azModules')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "ContainerName",
                    "value": "[parameters('artifactsContainerName')]"
                  },
                  {
                    "name": "StorageAccountName",
                    "value": "[parameters('artifactsStorageAccountName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[environment().suffixes.storage]"
                  },
                  {
                    "name": "UserAssignedIdentityObjectId",
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.13.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg','az.keyvault.4.12.0.nupkg', 'az.storage.5.1.0.nupkg', 'az.marketplaceordering.2.0.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriScriptArtifacts')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "ContainerName",
                    "value": "[parameters('artifactsContainerName')]"
                  },
                  {
                    "name": "Environment",
                    "value": "[environment().name]"
                  },
                  {
                    "name": "StorageAccountName",
                    "value": "[parameters('esriStorageAccountName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[environment().suffixes.storage]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "UserAssignedIdentityObjectId",
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  {
                    "name": "location",
                    "value": "[parameters('location')]"
                  },
                  {
                    "name": "subscription",
                    "value": "[subscription().subscriptionId]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$ContainerName,\r\n        [string]$certificatePassword,\r\n        [string]$environment,\r\n        [string]$StorageAccountName,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$UserAssignedIdentityClientId,\r\n        [string]$location,\r\n        [string]$fqdn,\r\n        [string]$subscription\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      Connect-AzAccount -Environment $Environment -Subscription $subscription -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n      Invoke-WebRequest https://github.com/Esri/arcgis-azure-templates/raw/main/Releases/11.1/DSC.zip -OutFile ./DSC.zip\r\n      Invoke-WebRequest https://github.com/Esri/arcgis-azure-templates/raw/main/Releases/11.1/GenerateSSLCerts.ps1 -OutFile ./GenerateSSLCerts.ps1\r\n      $ctx = New-AzStorageContext -StorageAccountName $storageAccountName -UseConnectedAccount\r\n      Set-AzStorageBlobContent -File ./DSC.zip -Container $containerName -Blob DSC.zip -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File ./GenerateSSLCerts.ps1 -Container $containerName -Blob GenerateSSLCerts.ps1 -Context $ctx -Force\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'rc-azModules')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-licenseAndCertificateArtifacts')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "ContainerName",
                    "value": "[parameters('artifactsContainerName')]"
                  },
                  {
                    "name": "StorageAccountName",
                    "value": "[parameters('artifactsStorageAccountName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[environment().suffixes.storage]"
                  },
                  {
                    "name": "Environment",
                    "value": "[environment().name]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "UserAssignedIdentityObjectId",
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  {
                    "name": "PortalLicensefile",
                    "value": "[parameters('portalLicenseFile')]"
                  },
                  {
                    "name": "PortalLicenseFileName",
                    "value": "[parameters('portalLicenseFileName')]"
                  },
                  {
                    "name": "ServerLicensefile",
                    "value": "[parameters('serverLicenseFile')]"
                  },
                  {
                    "name": "ServerLicenseFileName",
                    "value": "[parameters('serverLicenseFileName')]"
                  },
                  {
                    "name": "location",
                    "value": "[parameters('location')]"
                  },
                  {
                    "name": "fqdn",
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  {
                    "name": "keyVault",
                    "value": "[parameters('keyVaultName')]"
                  },
                  {
                    "name": "certificateFileName",
                    "value": "[parameters('certificateFileName')]"
                  },
                  {
                    "name": "certificatePassword",
                    "value": "[parameters('certificatePassword')]"
                  },
                  {
                    "name": "subscription",
                    "value": "[subscription().subscriptionId]"
                  },
                  {
                    "name": "EsriStorageAccount",
                    "value": "[parameters('esriStorageAccountName')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$ContainerName,\r\n        [string]$CertificateFileName,\r\n        [string]$CertificatePassword,\r\n        [string]$StorageAccountName,\r\n        [string]$StorageEndpoint,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$UserAssignedIdentityClientId,\r\n        [string]$PortalLicenseFileName,\r\n        [string]$PortalLicenseFile,\r\n        [string]$ServerLicensefile,\r\n        [string]$ServerLicenseFileName,\r\n        [string]$TenantId,\r\n        [string]$Location,\r\n        [string]$Fqdn,\r\n        [string]$Subscription,\r\n        [string]$KeyVaultName,\r\n        [string]$EsriStorageAccount,\r\n        [string]$Environment\r\n      )\r\n      New-Item -ItemType File \"$env:windir\\temp\\$portalLicenseFileName\"\r\n      New-Item -ItemType File \"$env:windir\\temp\\$serverLicenseFileName\"\r\n\r\n      $plf = \"$env:windir\\temp\\$portalLicenseFileName\"\r\n      $slf = \"$env:windir\\temp\\$serverLicenseFileName\"\r\n\r\n\r\n      $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False\r\n\r\n      $portalLicense = [System.Text.UTF8Encoding]::UTF8.GetString([System.Convert]::FromBase64String($portalLicensefile))\r\n      [System.IO.File]::WriteAllLines($plf, $portalLicense, $Utf8NoBomEncoding)\r\n\r\n      $serverLicense = [System.Text.UTF8Encoding]::UTF8.GetString([System.Convert]::FromBase64String($serverLicensefile))\r\n      [System.IO.File]::WriteAllLines($slf, $serverLicense, $Utf8NoBomEncoding)\r\n\r\n      Import-Module az.keyvault\r\n      Connect-AzAccount -Environment $Environment -Subscription $Subscription -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n      $ctx = New-AzStorageContext -StorageAccountName $esriStorageAccount -UseConnectedAccount\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $BlobNames = @($certificateFileName)\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl/$ContainerName/$BlobNames\" -OutFile $env:windir\\temp\\$certificateFileName -Verbose\r\n      $pfx = \"$env:windir\\temp\\$CertificateFileName\"\r\n      Set-AzStorageBlobContent -File $pfx -Container $containerName -Blob $CertificateFileName -Context $ctx -Force\r\n      $base64 = [System.Convert]::ToBase64String([System.IO.File]::ReadAllBytes($pfx))\r\n      $Password = ConvertTo-SecureString -String $CertificatePassword -AsPlainText -Force\r\n      $cert = Import-AzKeyVaultCertificate -VaultName $keyVaultName -Name \"pfx$location\" -FilePath $pfx -Password $Password\r\n      $azKeyVaultCert = Get-AzKeyVaultCertificate -VaultName  $keyVaultName -Name \"pfx$location\"\r\n      $azKeyVaultCertBytes = $azKeyVaultCert.Certificate.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert)\r\n      $publicCertificateName = \"wildcard$fqdn-PublicKey.cer\"\r\n      $cerCertFile = \"$env:windir\\temp\\$publicCertificateName\"\r\n      Write-Output $cerCertFile\r\n      [System.IO.File]::WriteAllBytes($cerCertFile, $azKeyVaultCertBytes)\r\n      #$ctx = New-AzStorageContext -StorageAccountName $esriStorageAccount -UseConnectedAccount\r\n      Set-AzStorageBlobContent -File $cerCertFile -Container $containerName -Blob $publicCertificateName -Context $ctx -Force\r\n      #Set-AzStorageBlobContent -File $pfx -Container $containerName -Blob $CertificateFileName -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File $plf -Container $containerName -Properties @{\"ContentEncoding\" = \"UTF-8\"} -Blob $portalLicenseFileName -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File $slf -Container $containerName -Properties @{\"ContentEncoding\" = \"UTF-8\"} -Blob $serverLicenseFileName -Context $ctx -Force\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'rc-esriScriptArtifacts')]",
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'rc-azModules')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriMarketplaceImageTerms')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "ContainerName",
                    "value": "[parameters('artifactsContainerName')]"
                  },
                  {
                    "name": "Environment",
                    "value": "[environment().name]"
                  },
                  {
                    "name": "StorageAccountName",
                    "value": "[parameters('esriStorageAccountName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[environment().suffixes.storage]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "UserAssignedIdentityObjectId",
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  {
                    "name": "location",
                    "value": "[parameters('location')]"
                  },
                  {
                    "name": "subscription",
                    "value": "[subscription().subscriptionId]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$Environment,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$UserAssignedIdentityClientId,\r\n        [string]$subscription\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      Connect-AzAccount -Environment $Environment -Subscription $subscription -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n      $name = 'byol-111'\r\n      $product = 'arcgis-enterprise'\r\n      $publisher = 'esri'\r\n      Get-AzMarketplaceTerms -Publisher $publisher -Name $name -Product $product -OfferType 'virtualmachine' | Set-AzMarketplaceTerms -Accept\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'rc-azModules')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "multiTierFileServerVirtualMachines",
        "multiTierPortalVirtualMachines",
        "multiTierServerVirtualMachines",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('artifactsStorageAccountSubscriptionId'), parameters('artifactsStorageAccountResourceGroupName')), 'Microsoft.Resources/deployments', format('assign-role-sa-02-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(variables('subscriptionId'), 'Microsoft.Resources/deployments', format('assign-role-sub-01-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('assign-role-sa-01-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('assign-role-vm-01-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('create-certificates-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "fileUri": {
            "value": "[format('{0}{1}/GenerateSSLCerts.ps1', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "portalInternalCertificateFileName": {
            "value": ""
          },
          "portalVirtualMachineNames": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('portalVirtualMachineNames')))]",
          "selfSignedSSLCertificatePassword": {
            "value": "[parameters('selfSignedCertificatePassword')]"
          },
          "serverInternalCertificateFileName": {
            "value": ""
          },
          "serverVirtualMachineNames": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('serverVirtualMachineNames')))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualMachineName": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('fileShareVirtualMachineName')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "16303095877301641490"
            }
          },
          "parameters": {
            "fileShareName": {
              "type": "string",
              "defaultValue": "fileshare"
            },
            "fileUri": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object"
            },
            "timestamp": {
              "type": "string",
              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
            },
            "useSelfSignedInternalSSLCertificate": {
              "type": "bool",
              "defaultValue": true
            },
            "virtualMachineName": {
              "type": "string"
            },
            "serverVirtualMachineNames": {
              "type": "string"
            },
            "portalVirtualMachineNames": {
              "type": "string"
            },
            "serverInternalCertificateFileName": {
              "type": "string"
            },
            "portalInternalCertificateFileName": {
              "type": "string"
            },
            "selfSignedSSLCertificatePassword": {
              "type": "securestring"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.10",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "timestamp": "[parameters('timestamp')]"
                },
                "protectedSettings": {
                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File .\\GenerateSSLCerts.ps1 -ServerMachineNames \"{0}\" -PortalMachineNames \"{1}\" -FileShareName \"{2}\" {3}', parameters('serverVirtualMachineNames'), parameters('portalVirtualMachineNames'), parameters('fileShareName'), if(parameters('useSelfSignedInternalSSLCertificate'), format('-UseInternalSelfSignedCertificate -CertificatePassword {0}', parameters('selfSignedSSLCertificatePassword')), format('-ServerInternalCertificateFileName \"{0}\" -PortalInternalCertificateFileName \"{1}\"', if(empty(parameters('serverInternalCertificateFileName')), '', parameters('serverInternalCertificateFileName')), if(empty(parameters('portalInternalCertificateFileName')), '', parameters('portalInternalCertificateFileName')))))]",
                  "fileUris": [
                    "[parameters('fileUri')]"
                  ],
                  "managedIdentity": {}
                }
              }
            }
          ],
          "outputs": {
            "vmId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
            },
            "serverBackendSSLCert": {
              "type": "string",
              "value": "[split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2023-03-01').instanceView.substatuses[0].message, '###DATA###')[0]]"
            },
            "portalBackendSSLCert": {
              "type": "string",
              "value": "[split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2023-03-01').instanceView.substatuses[0].message, '###DATA###')[1]]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-management-vm-{0}', parameters('deploymentNameSuffix')))]",
        "multiTierFileServerVirtualMachines",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-virtual-machine-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-multitier-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "applicationGatewayName": {
            "value": "[variables('applicationGatewayName')]"
          },
          "applicationGatewayPrivateIPAddress": {
            "value": "[parameters('applicationGatewayPrivateIpAddress')]"
          },
          "arcgisServiceAccountIsDomainAccount": {
            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
          },
          "arcgisServiceAccountPassword": {
            "value": "[parameters('arcgisServiceAccountPassword')]"
          },
          "arcgisServiceAccountUserName": {
            "value": "[parameters('arcgisServiceAccountUserName')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "cloudStorageAccountCredentialsUserName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.cloudStorageAccountCredentialsUserName.value]"
          },
          "dataStoreVirtualMachineNames": {
            "value": "[variables('dataStoreVirtualMachineNames')]"
          },
          "dataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('dataStoreVirtualMachineOSDiskSize')]"
          },
          "dataStoreVirtualMachines": {
            "value": "[variables('dataStoreVirtualMachines')]"
          },
          "debugMode": {
            "value": "[parameters('debugMode')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "dscDataStoreFunction": {
            "value": "[variables('dscDataStoreFunction')]"
          },
          "dscGraphDataStoreFunction": {
            "value": "[variables('dscGraphDataStoreFunction')]"
          },
          "dscObjectDataStoreFunction": {
            "value": "[variables('dscObjectDataStoreFunction')]"
          },
          "dscPortalFunction": {
            "value": "[variables('dscPortalFunction')]"
          },
          "dscServerScriptFunction": {
            "value": "[variables('dscServerScriptFunction')]"
          },
          "dscSpatioTemporalFunction": {
            "value": "[variables('dscsSatiotemporalBigDataStoreFunction')]"
          },
          "dscTileCacheFunction": {
            "value": "[variables('dscTileCacheDataStoreDscFunction')]"
          },
          "enableDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableDataStoreVirtualMachineDataDisk')]"
          },
          "enableGraphDataStore": {
            "value": "[parameters('enableGraphDataStore')]"
          },
          "enableGraphDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableGraphDataStoreVirtualMachineDataDisk')]"
          },
          "enableObjectDataStore": {
            "value": "[parameters('enableObjectDataStore')]"
          },
          "enableObjectDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableObjectDataStoreVirtualMachineDataDisk')]"
          },
          "enableServerLogHarvesterPlugin": {
            "value": "[parameters('enableServerLogHarvesterPlugin')]"
          },
          "enableSpatiotemporalBigDataStore": {
            "value": "[parameters('enableSpatiotemporalBigDataStore')]"
          },
          "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk')]"
          },
          "enableTileCacheDataStore": {
            "value": "[parameters('enableTileCacheDataStore')]"
          },
          "enableTileCacheDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableTileCacheDataStoreVirtualMachineDataDisk')]"
          },
          "enableVirtualMachineDataDisk": {
            "value": "[parameters('enableVirtualMachineDataDisk')]"
          },
          "externalDnsHostname": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "fileShareDscScriptFunction": {
            "value": "[variables('fileShareDscScriptFunction')]"
          },
          "fileShareVirtualMachineName": {
            "value": "[variables('fileShareVirtualMachineName')]"
          },
          "graphDataStoreVirtualMachineNames": {
            "value": "[variables('graphDataStoreVirtualMachineNames')]"
          },
          "graphDataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('graphDataStoreVirtualMachineOSDiskSize')]"
          },
          "graphDataStoreVirtualMachines": {
            "value": "[variables('graphDataStoreVirtualMachines')]"
          },
          "isMultiMachineTileCacheDataStore": {
            "value": "[variables('isMultiMachineTileCacheDataStore')]"
          },
          "isObjectDataStoreClustered": {
            "value": "[variables('isObjectDataStoreClustered')]"
          },
          "isTileCacheDataStoreClustered": {
            "value": "[variables('isTileCacheDataStoreClustered')]"
          },
          "isUpdatingCertificates": {
            "value": "[parameters('isUpdatingCertificates')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "keyVaultUri": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "objectDataStoreVirtualMachineNames": {
            "value": "[variables('objectDataStoreVirtualMachineNames')]"
          },
          "objectDataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('objectDataStoreVirtualMachineOSDiskSize')]"
          },
          "objectDataStoreVirtualMachines": {
            "value": "[variables('objectDataStoreVirtualMachines')]"
          },
          "portalBackendSslCert": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.portalBackendSSLCert.value]"
          },
          "portalContext": {
            "value": "[variables('portalContext')]"
          },
          "portalLicenseFileName": {
            "value": "[variables('portalLicenseFileName')]"
          },
          "portalLicenseUserTypeId": {
            "value": "[parameters('portalLicenseUserTypeId')]"
          },
          "portalVirtualMachineNames": {
            "value": "[variables('portalVirtualMachineNames')]"
          },
          "portalVirtualMachineOSDiskSize": {
            "value": "[parameters('portalVirtualMachineOSDiskSize')]"
          },
          "portalVirtualMachines": {
            "value": "[variables('portalVirtualMachines')]"
          },
          "primarySiteAdministratorAccountPassword": {
            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
          },
          "primarySiteAdministratorAccountUserName": {
            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
          },
          "publicIpId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.pipId.value]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          },
          "resourceSuffix": {
            "value": "[variables('resourceSuffix')]"
          },
          "secondaryDnsHostName": {
            "value": "[parameters('secondaryDnsHostName')]"
          },
          "selfSignedSSLCertificatePassword": {
            "value": "[parameters('selfSignedCertificatePassword')]"
          },
          "serverBackendSSLCert": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.serverBackendSSLCert.value]"
          },
          "serverContext": {
            "value": "[variables('serverContext')]"
          },
          "serverLicenseFileName": {
            "value": "[variables('serverLicenseFileName')]"
          },
          "serverVirtualMachineNames": {
            "value": "[variables('serverVirtualMachineNames')]"
          },
          "serverVirtualMachines": {
            "value": "[variables('serverVirtualMachines')]"
          },
          "spatiotemporalBigDataStoreVirtualMachineNames": {
            "value": "[variables('spatiotemporalBigDataStoreVirtualMachineNames')]"
          },
          "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]"
          },
          "spatiotemporalBigDataStoreVirtualMachines": {
            "value": "[variables('spatiotemporalBigDataStoreVirtualMachines')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "storageUriPrefix": {
            "value": "[format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "tileCacheDataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]"
          },
          "tileCacheVirtualMachineNames": {
            "value": "[variables('tileCacheDataStoreVirtualMachineNames')]"
          },
          "tileCacheVirtualMachines": {
            "value": "[variables('tileCacheDataStoreVirtualMachines')]"
          },
          "useAzureFiles": {
            "value": "[parameters('useAzureFiles')]"
          },
          "useCloudStorage": {
            "value": "[parameters('useCloudStorage')]"
          },
          "userAssignedIdenityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineOSDiskSize": {
            "value": "[parameters('virtualMachineOSDiskSize')]"
          },
          "virtualNetworkName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
          },
          "windowsDomainName": "[if(parameters('joinWindowsDomain'), createObject('value', parameters('windowsDomainName')), createObject('value', 'none'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "13179115516730625918"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "applicationGatewayName": {
              "type": "string"
            },
            "arcgisServiceAccountIsDomainAccount": {
              "type": "bool"
            },
            "arcgisServiceAccountPassword": {
              "type": "securestring"
            },
            "arcgisServiceAccountUserName": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "cloudStorageAccountCredentialsUserName": {
              "type": "string"
            },
            "dataStoreVirtualMachineNames": {
              "type": "string"
            },
            "dataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "dataStoreVirtualMachines": {
              "type": "array"
            },
            "debugMode": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "dscDataStoreFunction": {
              "type": "string"
            },
            "dscPortalFunction": {
              "type": "string"
            },
            "dscServerScriptFunction": {
              "type": "string"
            },
            "dscSpatioTemporalFunction": {
              "type": "string"
            },
            "dscTileCacheFunction": {
              "type": "string"
            },
            "dscGraphDataStoreFunction": {
              "type": "string"
            },
            "dscObjectDataStoreFunction": {
              "type": "string"
            },
            "enableDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "enableServerLogHarvesterPlugin": {
              "type": "bool"
            },
            "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "enableVirtualMachineDataDisk": {
              "type": "bool"
            },
            "externalDnsHostname": {
              "type": "string"
            },
            "fileShareDscScriptFunction": {
              "type": "string"
            },
            "fileShareVirtualMachineName": {
              "type": "string"
            },
            "isUpdatingCertificates": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "portalBackendSslCert": {
              "type": "string"
            },
            "portalContext": {
              "type": "string"
            },
            "portalLicenseFileName": {
              "type": "string"
            },
            "portalLicenseUserTypeId": {
              "type": "string"
            },
            "portalVirtualMachineNames": {
              "type": "string"
            },
            "portalVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "portalVirtualMachines": {
              "type": "array"
            },
            "primarySiteAdministratorAccountPassword": {
              "type": "securestring"
            },
            "primarySiteAdministratorAccountUserName": {
              "type": "string"
            },
            "publicIpId": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "resourceSuffix": {
              "type": "string"
            },
            "secondaryDnsHostName": {
              "type": "string"
            },
            "serverBackendSSLCert": {
              "type": "string"
            },
            "serverContext": {
              "type": "string"
            },
            "serverLicenseFileName": {
              "type": "string"
            },
            "serverVirtualMachineNames": {
              "type": "string"
            },
            "serverVirtualMachines": {
              "type": "array"
            },
            "spatiotemporalBigDataStoreVirtualMachineNames": {
              "type": "string"
            },
            "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "spatiotemporalBigDataStoreVirtualMachines": {
              "type": "array"
            },
            "tileCacheVirtualMachines": {
              "type": "array"
            },
            "tileCacheVirtualMachineNames": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageUriPrefix": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]"
            },
            "tags": {
              "type": "object"
            },
            "useAzureFiles": {
              "type": "bool"
            },
            "useCloudStorage": {
              "type": "bool"
            },
            "userAssignedIdenityResourceId": {
              "type": "string"
            },
            "virtualMachineOSDiskSize": {
              "type": "int"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "selfSignedSSLCertificatePassword": {
              "type": "securestring"
            },
            "tileCacheDataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "isTileCacheDataStoreClustered": {
              "type": "bool"
            },
            "isMultiMachineTileCacheDataStore": {
              "type": "bool"
            },
            "enableTileCacheDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "graphDataStoreVirtualMachineNames": {
              "type": "string"
            },
            "graphDataStoreVirtualMachines": {
              "type": "array"
            },
            "graphDataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "enableGraphDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "objectDataStoreVirtualMachineNames": {
              "type": "string"
            },
            "objectDataStoreVirtualMachines": {
              "type": "array"
            },
            "objectDataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "isObjectDataStoreClustered": {
              "type": "bool"
            },
            "enableObjectDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "enableSpatiotemporalBigDataStore": {
              "type": "bool"
            },
            "enableTileCacheDataStore": {
              "type": "bool"
            },
            "enableGraphDataStore": {
              "type": "bool"
            },
            "enableObjectDataStore": {
              "type": "bool"
            },
            "applicationGatewayPrivateIPAddress": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('fileShareDscScriptFunction')]"
                  },
                  "dscScript": {
                    "value": "FileShareConfiguration.ps1"
                  },
                  "enableVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "externalDNSHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalContext": {
                    "value": "[parameters('portalContext')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineOSDiskSize": {
                    "value": "[parameters('virtualMachineOSDiskSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "4811268326227267852"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enableVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "externalDNSHostName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "portalContext": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineOSDiskSize": {
                      "type": "int"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('fileShareVirtualMachineName'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "DebugMode": "[parameters('debugMode')]",
                            "EnableDataDisk": "[parameters('enableVirtualMachineDataDisk')]",
                            "ExternalDNSHostName": "[parameters('externalDNSHostName')]",
                            "IsBaseDeployment": "True",
                            "FileShareName": "[parameters('fileShareName')]",
                            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                            "PortalContext": "[parameters('portalContext')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('fileShareVirtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('fileShareVirtualMachineName')), '2023-03-01', 'full').identity.tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "MachineAdministratorCredential": {
                              "userName": "[parameters('adminUsername')]",
                              "password": "[parameters('adminPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('fileShareVirtualMachineName'), 'DSCConfiguration'), '2018-06-01').provisioningState]"
                    },
                    "fileShareName": {
                      "type": "string",
                      "value": "[parameters('fileShareName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGatewayName": {
                    "value": "[parameters('applicationGatewayName')]"
                  },
                  "applicationGatewayPrivateIpAddress": {
                    "value": "[parameters('applicationGatewayPrivateIPAddress')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "keyVaultUri": {
                    "value": "[parameters('keyVaultUri')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalBackendSslCert": {
                    "value": "[parameters('portalBackendSslCert')]"
                  },
                  "portalVirtualMachineNames": {
                    "value": "[parameters('portalVirtualMachineNames')]"
                  },
                  "publicIpId": {
                    "value": "[parameters('publicIpId')]"
                  },
                  "resourceGroup": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "resourceSuffix": {
                    "value": "[parameters('resourceSuffix')]"
                  },
                  "serverBackendSSLCert": {
                    "value": "[parameters('serverBackendSSLCert')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "userAssignedIdenityResourceId": {
                    "value": "[parameters('userAssignedIdenityResourceId')]"
                  },
                  "virtualNetworkName": {
                    "value": "[parameters('virtualNetworkName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "13366513209151885602"
                    }
                  },
                  "parameters": {
                    "applicationGatewayName": {
                      "type": "string"
                    },
                    "applicationGatewayPrivateIpAddress": {
                      "type": "string"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "portalBackendSslCert": {
                      "type": "string"
                    },
                    "portalVirtualMachineNames": {
                      "type": "string"
                    },
                    "publicIpId": {
                      "type": "string"
                    },
                    "resourceGroup": {
                      "type": "string"
                    },
                    "resourceSuffix": {
                      "type": "string"
                    },
                    "serverBackendSSLCert": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "userAssignedIdenityResourceId": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "serverBackEndVirtualMachines": "[split(parameters('serverVirtualMachineNames'), ',')]",
                    "portalBackEndVirtualMachines": "[split(parameters('portalVirtualMachineNames'), ',')]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('applicationGatewayName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdenityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "sku": {
                          "name": "Standard_v2",
                          "tier": "Standard_v2",
                          "capacity": 2
                        },
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                              }
                            }
                          }
                        ],
                        "sslCertificates": [
                          {
                            "name": "frontendCert",
                            "properties": {
                              "keyVaultSecretId": "[format('{0}secrets/pfx{1}', parameters('keyVaultUri'), parameters('location'))]"
                            }
                          }
                        ],
                        "trustedRootCertificates": [
                          {
                            "name": "serverBackendSSLCert",
                            "properties": {
                              "data": "[parameters('serverBackendSSLCert')]"
                            }
                          },
                          {
                            "name": "portalBackendSSLCert",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]",
                            "properties": {
                              "data": "[parameters('portalBackendSslCert')]"
                            }
                          }
                        ],
                        "trustedClientCertificates": [],
                        "sslProfiles": [],
                        "frontendIPConfigurations": [
                          {
                            "name": "pipIpConfig",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "publicIPAddress": {
                                "id": "[parameters('publicIpId')]"
                              }
                            }
                          },
                          {
                            "name": "[format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "privateIPAddress": "[parameters('applicationGatewayPrivateIpAddress')]",
                              "privateIPAllocationMethod": "Static",
                              "subnet": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                              }
                            }
                          }
                        ],
                        "frontendPorts": [
                          {
                            "name": "[format('EnterprisePort443{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "port": 443
                            }
                          },
                          {
                            "name": "[format('EnterprisePort80{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "[format('ServerBackendPool{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "copy": [
                                {
                                  "name": "backendAddresses",
                                  "count": "[length(variables('serverBackEndVirtualMachines'))]",
                                  "input": {
                                    "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('{0}PortalBackendPool', parameters('resourceSuffix'))]",
                            "properties": {
                              "copy": [
                                {
                                  "name": "backendAddresses",
                                  "count": "[length(variables('portalBackEndVirtualMachines'))]",
                                  "input": {
                                    "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "loadDistributionPolicies": [],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[format('PortalHttpsSetting{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "port": 7443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "connectionDraining": {
                                "enabled": true,
                                "drainTimeoutInSec": 60
                              },
                              "pickHostNameFromBackendAddress": true,
                              "path": "/arcgis/",
                              "requestTimeout": 180,
                              "probe": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}PortalProbeName', parameters('resourceSuffix')))]"
                              },
                              "trustedRootCertificates": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]"
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('ServerHttpsSetting{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "port": 6443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "connectionDraining": {
                                "enabled": true,
                                "drainTimeoutInSec": 60
                              },
                              "pickHostNameFromBackendAddress": true,
                              "path": "/arcgis/",
                              "requestTimeout": 180,
                              "probe": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}ServerProbeName', parameters('resourceSuffix')))]"
                              },
                              "trustedRootCertificates": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'serverBackendSSLCert')]"
                                }
                              ]
                            }
                          }
                        ],
                        "backendSettingsCollection": [],
                        "httpListeners": [
                          {
                            "name": "[format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                              },
                              "frontendPort": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]"
                              },
                              "protocol": "Http",
                              "hostNames": [
                                "[parameters('externalDnsHostName')]"
                              ],
                              "requireServerNameIndication": false
                            }
                          },
                          {
                            "name": "[format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                              },
                              "frontendPort": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]"
                              },
                              "protocol": "Https",
                              "sslCertificate": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/sslCertificates', parameters('applicationGatewayName'), 'frontendCert')]"
                              },
                              "hostNames": [
                                "[parameters('externalDnsHostName')]"
                              ],
                              "requireServerNameIndication": false
                            }
                          }
                        ],
                        "listeners": [],
                        "urlPathMaps": [
                          {
                            "name": "[format('{0}EnterprisePathMap', parameters('resourceSuffix'))]",
                            "properties": {
                              "defaultBackendAddressPool": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                              },
                              "defaultBackendHttpSettings": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                              },
                              "pathRules": [
                                {
                                  "name": "serverPathRule",
                                  "properties": {
                                    "paths": [
                                      "/server/*",
                                      "/server"
                                    ],
                                    "backendAddressPool": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                                    },
                                    "backendHttpSettings": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                                    },
                                    "rewriteRuleSet": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}ServerRewriteRuleSet', parameters('resourceSuffix')))]"
                                    }
                                  }
                                },
                                {
                                  "name": "portalPathRule",
                                  "properties": {
                                    "paths": [
                                      "/portal/*",
                                      "/portal"
                                    ],
                                    "backendAddressPool": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('{0}PortalBackendPool', parameters('resourceSuffix')))]"
                                    },
                                    "backendHttpSettings": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('PortalHttpsSetting{0}', parameters('resourceSuffix')))]"
                                    },
                                    "rewriteRuleSet": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}PortalRewriteRuleSet', parameters('resourceSuffix')))]"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "[format('{0}EnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                            "properties": {
                              "ruleType": "PathBasedRouting",
                              "priority": 10,
                              "httpListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "urlPathMap": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/urlPathMaps', parameters('applicationGatewayName'), format('{0}EnterprisePathMap', parameters('resourceSuffix')))]"
                              }
                            }
                          },
                          {
                            "name": "[format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                            "properties": {
                              "ruleType": "Basic",
                              "priority": 20,
                              "httpListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "redirectConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/redirectConfigurations', parameters('applicationGatewayName'), format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix')))]"
                              }
                            }
                          }
                        ],
                        "routingRules": [],
                        "probes": [
                          {
                            "name": "[format('{0}ServerProbeName', parameters('resourceSuffix'))]",
                            "properties": {
                              "protocol": "Https",
                              "path": "/arcgis/rest/info/healthcheck",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "pickHostNameFromBackendHttpSettings": true,
                              "minServers": 0,
                              "match": {
                                "statusCodes": [
                                  "200"
                                ]
                              }
                            }
                          },
                          {
                            "name": "[format('{0}PortalProbeName', parameters('resourceSuffix'))]",
                            "properties": {
                              "protocol": "Https",
                              "path": "/arcgis/portaladmin/healthCheck",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "pickHostNameFromBackendHttpSettings": true,
                              "minServers": 0,
                              "match": {
                                "statusCodes": [
                                  "200"
                                ]
                              }
                            }
                          }
                        ],
                        "rewriteRuleSets": [
                          {
                            "name": "[format('{0}PortalRewriteRuleSet', parameters('resourceSuffix'))]",
                            "properties": {
                              "rewriteRules": [
                                {
                                  "ruleSequence": 50,
                                  "conditions": [],
                                  "name": "XForwardedHostRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [
                                      {
                                        "headerName": "X-Forwarded-Host",
                                        "headerValue": "{http_req_host}"
                                      }
                                    ],
                                    "responseHeaderConfigurations": []
                                  }
                                },
                                {
                                  "ruleSequence": 100,
                                  "conditions": [
                                    {
                                      "variable": "http_resp_Location",
                                      "pattern": "(https?):\\/\\/[^\\/]+:7443\\/(?:arcgis|portal)(.*)$",
                                      "ignoreCase": true,
                                      "negate": false
                                    }
                                  ],
                                  "name": "PortalRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [],
                                    "responseHeaderConfigurations": [
                                      {
                                        "headerName": "RewriteLocationValue",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                      },
                                      {
                                        "headerName": "Location",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('{0}ServerRewriteRuleSet', parameters('resourceSuffix'))]",
                            "properties": {
                              "rewriteRules": [
                                {
                                  "ruleSequence": 50,
                                  "conditions": [],
                                  "name": "XForwardedHostRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [
                                      {
                                        "headerName": "X-Forwarded-Host",
                                        "headerValue": "{http_req_host}"
                                      }
                                    ],
                                    "responseHeaderConfigurations": []
                                  }
                                },
                                {
                                  "ruleSequence": 100,
                                  "conditions": [
                                    {
                                      "variable": "http_resp_Location",
                                      "pattern": "(https?):\\/\\/[^\\/]+:6443\\/(?:arcgis|server)(.*)$",
                                      "ignoreCase": true,
                                      "negate": false
                                    }
                                  ],
                                  "name": "ServerRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [],
                                    "responseHeaderConfigurations": [
                                      {
                                        "headerName": "RewriteLocationValue",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                      },
                                      {
                                        "headerName": "Location",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "redirectConfigurations": [
                          {
                            "name": "[format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix'))]",
                            "properties": {
                              "redirectType": "Permanent",
                              "targetListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "includePath": true,
                              "includeQueryString": true,
                              "requestRoutingRules": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/requestRoutingRules', parameters('applicationGatewayName'), format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix')))]"
                                }
                              ]
                            }
                          }
                        ],
                        "privateLinkConfigurations": []
                      }
                    }
                  ],
                  "outputs": {
                    "applicationGatewayPrivateIpAddress": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '2023-06-01').frontendIPConfigurations[1].properties.privateIPAddress]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriServers",
                "count": "[length(parameters('serverVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('serverVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscServerScriptFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscServerScriptFunction'))]"
                  },
                  "enableServerLogHarvesterPlugin": {
                    "value": "[parameters('enableServerLogHarvesterPlugin')]"
                  },
                  "enableVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "isUpdatingCertificates": {
                    "value": "[parameters('isUpdatingCertificates')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "publicKeySSLCertificateFileName": {
                    "value": "[format('wildcard{0}-PublicKey.cer', parameters('externalDnsHostname'))]"
                  },
                  "serverContext": {
                    "value": "[parameters('serverContext')]"
                  },
                  "serverLicenseFileName": {
                    "value": "[parameters('serverLicenseFileName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('serverVirtualMachines')[copyIndex()]]"
                  },
                  "virtualMachineOSDiskSize": {
                    "value": "[parameters('virtualMachineOSDiskSize')]"
                  },
                  "selfSignedSSLCertificatePassword": {
                    "value": "[parameters('selfSignedSSLCertificatePassword')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "11214753598227343118"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enableServerLogHarvesterPlugin": {
                      "type": "bool"
                    },
                    "enableVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "isUpdatingCertificates": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "publicKeySSLCertificateFileName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "serverContext": {
                      "type": "string"
                    },
                    "serverLicenseFileName": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "virtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "selfSignedSSLCertificatePassword": {
                      "type": "securestring"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "DebugMode": "[string(parameters('debugMode'))]",
                            "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
                            "EnableLogHarvesterPlugin": "[string(parameters('enableServerLogHarvesterPlugin'))]",
                            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
                            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                            "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "ServerContext": "[parameters('serverContext')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "ServerLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('serverLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "ServerInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[parameters('selfSignedSSLCertificatePassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscsStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriDataStoreServers",
                "count": "[length(parameters('dataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('dataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "dataStoreVirtualMachineNames": {
                    "value": "[parameters('dataStoreVirtualMachineNames')]"
                  },
                  "dataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('dataStoreVirtualMachineOSDiskSize')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscDataStoreFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscDataStoreFunction'))]"
                  },
                  "enableDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableDataStoreVirtualMachineDataDisk')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('dataStoreVirtualMachines')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "12201042815010593544"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "dataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "dataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "enableDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "DataStoreMachineNames": "[parameters('dataStoreVirtualMachineNames')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('dataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableDataStoreVirtualMachineDataDisk'))]",
                            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscsStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriSpatioTemporalServers",
                "count": "[length(parameters('spatiotemporalBigDataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscSpatioTemporalFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscSpatioTemporalFunction'))]"
                  },
                  "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "spatiotemporalBigDataStoreVirtualMachineNames": {
                    "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineNames')]"
                  },
                  "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "3516818735457343143"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "spatiotemporalBigDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "SpatiotemporalBigDataStoreMachineNames": "[parameters('spatiotemporalBigDataStoreVirtualMachineNames')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk'))]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriDataStoreServers",
                "dscEsriObjectDataStoreServers",
                "dscEsriServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriTileCacheServers",
                "count": "[length(parameters('tileCacheVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('tileCacheVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscTileCacheFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscTileCacheFunction'))]"
                  },
                  "enableTileCacheDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableTileCacheDataStoreVirtualMachineDataDisk')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "isMultiMachineTileCacheDataStore": {
                    "value": "[parameters('isMultiMachineTileCacheDataStore')]"
                  },
                  "isTileCacheDataStoreClustered": {
                    "value": "[parameters('isTileCacheDataStoreClustered')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tileCacheDataStoreVirtualMachineNames": {
                    "value": "[parameters('tileCacheVirtualMachineNames')]"
                  },
                  "tileCacheDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('tileCacheVirtualMachines')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "16093052119851457375"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "isTileCacheDataStoreClustered": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "tileCacheDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "isMultiMachineTileCacheDataStore": {
                      "type": "bool"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "tileCacheDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "enableTileCacheDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "IsTileCacheDataStoreClustered": "[parameters('isTileCacheDataStoreClustered')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "TileCacheDataStoreMachineNames": "[parameters('tileCacheDataStoreVirtualMachineNames')]",
                            "IsMultiMachineTileCache": "[parameters('isMultiMachineTileCacheDataStore')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableTileCacheDataStoreVirtualMachineDataDisk'))]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriDataStoreServers",
                "dscEsriGraphDataStoreServers",
                "dscEsriServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriGraphDataStoreServers",
                "count": "[length(parameters('graphDataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('graphDataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscGraphDataStoreFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscGraphDataStoreFunction'))]"
                  },
                  "enableGraphDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableGraphDataStoreVirtualMachineDataDisk')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.fileShareName.value]"
                  },
                  "graphDataStoreVirtualMachineNames": {
                    "value": "[parameters('graphDataStoreVirtualMachineNames')]"
                  },
                  "graphDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('graphDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('graphDataStoreVirtualMachines')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "15926008132751897196"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "graphDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "graphDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "enableGraphDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "GraphDataStoreMachineNames": "[parameters('graphDataStoreVirtualMachineNames')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('graphDataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[parameters('enableGraphDataStoreVirtualMachineDataDisk')]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscsStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriDataStoreServers",
                "dscEsriObjectDataStoreServers",
                "dscEsriServers",
                "dscEsriSpatioTemporalServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriObjectDataStoreServers",
                "count": "[length(parameters('objectDataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('objectDataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscObjectDataStoreFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscObjectDataStoreFunction'))]"
                  },
                  "enableObjectDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableObjectDataStoreVirtualMachineDataDisk')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.fileShareName.value]"
                  },
                  "isObjectDataStoreClustered": {
                    "value": "[parameters('isObjectDataStoreClustered')]"
                  },
                  "objectDataStoreVirtualMachineNames": {
                    "value": "[parameters('objectDataStoreVirtualMachineNames')]"
                  },
                  "objectDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('objectDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('objectDataStoreVirtualMachines')[copyIndex()]]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "11051323292383584718"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "isObjectDataStoreClustered": {
                      "type": "bool"
                    },
                    "objectDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "objectDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "enableObjectDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    }
                  },
                  "variables": {
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    },
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "IsObjectDataStoreClustered": "[parameters('isObjectDataStoreClustered')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "ObjectDataStoreMachineNames": "[parameters('objectDataStoreVirtualMachineNames')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('objectDataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableObjectDataStoreVirtualMachineDataDisk'))]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriDataStoreServers",
                "dscEsriServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriPortalServers",
                "count": "[length(parameters('portalVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('portalVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscPortalFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscPortalFunction'))]"
                  },
                  "enablePortalVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "isUpdatingCertificates": {
                    "value": "[parameters('isUpdatingCertificates')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalContext": {
                    "value": "[parameters('portalContext')]"
                  },
                  "portalLicenseFileName": {
                    "value": "[parameters('portalLicenseFileName')]"
                  },
                  "portalLicenseUserTypeId": {
                    "value": "[parameters('portalLicenseUserTypeId')]"
                  },
                  "portalVirtualMachineNames": {
                    "value": "[parameters('portalVirtualMachineNames')]"
                  },
                  "portalVirtualMachineOSDiskSize": {
                    "value": "[parameters('portalVirtualMachineOSDiskSize')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "publicKeySSLCertificateFileName": {
                    "value": "[format('wildcard{0}-PublicKey.cer', parameters('externalDnsHostname'))]"
                  },
                  "secondaryDnsHostName": {
                    "value": "[parameters('secondaryDnsHostName')]"
                  },
                  "serverContext": {
                    "value": "[parameters('serverContext')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('portalVirtualMachines')[copyIndex()]]"
                  },
                  "selfSignedSSLCertificatePassword": {
                    "value": "[parameters('selfSignedSSLCertificatePassword')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "1666894846892138554"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enablePortalVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "isUpdatingCertificates": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "portalContext": {
                      "type": "string"
                    },
                    "portalLicenseFileName": {
                      "type": "string"
                    },
                    "portalLicenseUserTypeId": {
                      "type": "string"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "publicKeySSLCertificateFileName": {
                      "type": "string"
                    },
                    "secondaryDnsHostName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "portalVirtualMachineNames": {
                      "type": "string"
                    },
                    "portalVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "serverContext": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "useSelfSignedInternalSSLCertificate": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "selfSignedSSLCertificatePassword": {
                      "type": "securestring"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "DebugMode": "[string(parameters('debugMode'))]",
                            "EnableDataDisk": "[string(parameters('enablePortalVirtualMachineDataDisk'))]",
                            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
                            "OSDiskSize": "[parameters('portalVirtualMachineOSDiskSize')]",
                            "PortalContext": "[parameters('portalContext')]",
                            "PortalLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('portalLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "PortalMachineNames": "[parameters('portalVirtualMachineNames')]",
                            "PrivateDNSHostName": "[parameters('secondaryDnsHostName')]",
                            "ServerContext": "[parameters('serverContext')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "PortalLicenseUserTypeId": "[parameters('portalLicenseUserTypeId')]",
                            "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "PortalInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), '')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscsStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriDataStoreServers",
                "dscEsriGraphDataStoreServers",
                "dscEsriObjectDataStoreServers",
                "dscEsriServers",
                "dscEsriSpatioTemporalServers",
                "dscEsriTileCacheServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-management-vm-{0}', parameters('deploymentNameSuffix')))]",
        "multiTierDatastoreServerVirtualMachines",
        "multiTierFileServerVirtualMachines",
        "multiTierGraphVirtualMachines",
        "multiTierObjectDataStoreVirtualMachines",
        "multiTierPortalVirtualMachines",
        "multiTierServerVirtualMachines",
        "multiTierSpatiotemporalBigDataStoreVirtualMachines",
        "multiTierTileCacheVirtualMachines",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'singletier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-singletier-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "applicationGatewayName": {
            "value": "[variables('applicationGatewayName')]"
          },
          "applicationGatewayPrivateIpAddress": {
            "value": "[parameters('applicationGatewayPrivateIpAddress')]"
          },
          "arcgisServiceAccountIsDomainAccount": {
            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
          },
          "arcgisServiceAccountPassword": {
            "value": "[parameters('arcgisServiceAccountPassword')]"
          },
          "arcgisServiceAccountUserName": {
            "value": "[parameters('arcgisServiceAccountUserName')]"
          },
          "cloudStorageAccountCredentialsUserName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.cloudStorageAccountCredentialsUserName.value]"
          },
          "dataStoreTypesForBaseDeploymentServers": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-single-tier-datastore-types-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.dataStoreTypesForBaseDeploymentServers.value), createObject('value', 'none'))]",
          "debugMode": {
            "value": "[parameters('debugMode')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "dscConfiguration": {
            "value": "[variables('dscSingleTierConfiguration')]"
          },
          "dscScript": {
            "value": "[format('{0}.ps1', variables('dscSingleTierConfiguration'))]"
          },
          "enableServerLogHarvesterPlugin": {
            "value": "[parameters('enableServerLogHarvesterPlugin')]"
          },
          "enableVirtualMachineDataDisk": {
            "value": "[parameters('enableVirtualMachineDataDisk')]"
          },
          "externalDnsHostname": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "hostname": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "isTileCacheDataStoreClustered": {
            "value": "[variables('isTileCacheDataStoreClustered')]"
          },
          "isUpdatingCertificates": {
            "value": "[parameters('isUpdatingCertificates')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "keyVaultUri": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "portalBackendSslCert": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.portalBackendSSLCert.value]"
          },
          "portalContext": {
            "value": "[variables('portalContext')]"
          },
          "portalLicenseFileName": {
            "value": "[variables('portalLicenseFileName')]"
          },
          "portalLicenseUserTypeId": {
            "value": "[parameters('portalLicenseUserTypeId')]"
          },
          "primarySiteAdministratorAccountPassword": {
            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
          },
          "primarySiteAdministratorAccountUserName": {
            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
          },
          "publicIpId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.pipId.value]"
          },
          "publicKeySSLCertificateFileName": {
            "value": "[format('wildcard{0}-PublicKey.cer', parameters('externalDnsHostname'))]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          },
          "resourceSuffix": {
            "value": "[variables('resourceSuffix')]"
          },
          "selfSignedSSLCertificatePassword": {
            "value": "[parameters('selfSignedCertificatePassword')]"
          },
          "serverBackendSSLCert": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.serverBackendSSLCert.value]"
          },
          "serverContext": {
            "value": "[variables('serverContext')]"
          },
          "serverLicenseFileName": {
            "value": "[variables('serverLicenseFileName')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "storageUriPrefix": {
            "value": "[format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "useAzureFiles": {
            "value": "[parameters('useAzureFiles')]"
          },
          "useCloudStorage": {
            "value": "[parameters('useCloudStorage')]"
          },
          "userAssignedIdenityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('virtualMachineName')]"
          },
          "virtualMachineOSDiskSize": {
            "value": "[parameters('virtualMachineOSDiskSize')]"
          },
          "virtualNetworkName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "14779582043224308008"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring"
            },
            "adminUsername": {
              "type": "string"
            },
            "arcgisServiceAccountIsDomainAccount": {
              "type": "bool"
            },
            "arcgisServiceAccountPassword": {
              "type": "securestring"
            },
            "arcgisServiceAccountUserName": {
              "type": "string"
            },
            "applicationGatewayPrivateIpAddress": {
              "type": "string"
            },
            "cloudStorageAccountCredentialsUserName": {
              "type": "string"
            },
            "dataStoreTypesForBaseDeploymentServers": {
              "type": "string"
            },
            "debugMode": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "dscConfiguration": {
              "type": "string"
            },
            "dscScript": {
              "type": "string"
            },
            "enableServerLogHarvesterPlugin": {
              "type": "bool"
            },
            "enableVirtualMachineDataDisk": {
              "type": "bool"
            },
            "hostname": {
              "type": "string"
            },
            "isTileCacheDataStoreClustered": {
              "type": "bool"
            },
            "isUpdatingCertificates": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "portalContext": {
              "type": "string"
            },
            "portalLicenseFileName": {
              "type": "string"
            },
            "portalLicenseUserTypeId": {
              "type": "string"
            },
            "primarySiteAdministratorAccountPassword": {
              "type": "securestring"
            },
            "primarySiteAdministratorAccountUserName": {
              "type": "string"
            },
            "publicKeySSLCertificateFileName": {
              "type": "string"
            },
            "serverContext": {
              "type": "string"
            },
            "serverLicenseFileName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageUriPrefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "useAzureFiles": {
              "type": "bool"
            },
            "useCloudStorage": {
              "type": "bool"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineOSDiskSize": {
              "type": "int"
            },
            "selfSignedSSLCertificatePassword": {
              "type": "securestring"
            },
            "applicationGatewayName": {
              "type": "string"
            },
            "externalDnsHostname": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "portalBackendSslCert": {
              "type": "string"
            },
            "publicIpId": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "resourceSuffix": {
              "type": "string"
            },
            "serverBackendSSLCert": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]"
            },
            "userAssignedIdenityResourceId": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGatewayName": {
                    "value": "[parameters('applicationGatewayName')]"
                  },
                  "applicationGatewayPrivateIpAddress": {
                    "value": "[parameters('applicationGatewayPrivateIpAddress')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "keyVaultUri": {
                    "value": "[parameters('keyVaultUri')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalBackendSslCert": {
                    "value": "[parameters('portalBackendSslCert')]"
                  },
                  "portalVirtualMachineNames": {
                    "value": "[parameters('virtualMachineName')]"
                  },
                  "publicIpId": {
                    "value": "[parameters('publicIpId')]"
                  },
                  "resourceGroup": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "resourceSuffix": {
                    "value": "[parameters('resourceSuffix')]"
                  },
                  "serverBackendSSLCert": {
                    "value": "[parameters('serverBackendSSLCert')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('virtualMachineName')]"
                  },
                  "userAssignedIdenityResourceId": {
                    "value": "[parameters('userAssignedIdenityResourceId')]"
                  },
                  "virtualNetworkName": {
                    "value": "[parameters('virtualNetworkName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "13366513209151885602"
                    }
                  },
                  "parameters": {
                    "applicationGatewayName": {
                      "type": "string"
                    },
                    "applicationGatewayPrivateIpAddress": {
                      "type": "string"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "portalBackendSslCert": {
                      "type": "string"
                    },
                    "portalVirtualMachineNames": {
                      "type": "string"
                    },
                    "publicIpId": {
                      "type": "string"
                    },
                    "resourceGroup": {
                      "type": "string"
                    },
                    "resourceSuffix": {
                      "type": "string"
                    },
                    "serverBackendSSLCert": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "userAssignedIdenityResourceId": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "serverBackEndVirtualMachines": "[split(parameters('serverVirtualMachineNames'), ',')]",
                    "portalBackEndVirtualMachines": "[split(parameters('portalVirtualMachineNames'), ',')]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('applicationGatewayName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdenityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "sku": {
                          "name": "Standard_v2",
                          "tier": "Standard_v2",
                          "capacity": 2
                        },
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                              }
                            }
                          }
                        ],
                        "sslCertificates": [
                          {
                            "name": "frontendCert",
                            "properties": {
                              "keyVaultSecretId": "[format('{0}secrets/pfx{1}', parameters('keyVaultUri'), parameters('location'))]"
                            }
                          }
                        ],
                        "trustedRootCertificates": [
                          {
                            "name": "serverBackendSSLCert",
                            "properties": {
                              "data": "[parameters('serverBackendSSLCert')]"
                            }
                          },
                          {
                            "name": "portalBackendSSLCert",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]",
                            "properties": {
                              "data": "[parameters('portalBackendSslCert')]"
                            }
                          }
                        ],
                        "trustedClientCertificates": [],
                        "sslProfiles": [],
                        "frontendIPConfigurations": [
                          {
                            "name": "pipIpConfig",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "publicIPAddress": {
                                "id": "[parameters('publicIpId')]"
                              }
                            }
                          },
                          {
                            "name": "[format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "privateIPAddress": "[parameters('applicationGatewayPrivateIpAddress')]",
                              "privateIPAllocationMethod": "Static",
                              "subnet": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                              }
                            }
                          }
                        ],
                        "frontendPorts": [
                          {
                            "name": "[format('EnterprisePort443{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "port": 443
                            }
                          },
                          {
                            "name": "[format('EnterprisePort80{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "[format('ServerBackendPool{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "copy": [
                                {
                                  "name": "backendAddresses",
                                  "count": "[length(variables('serverBackEndVirtualMachines'))]",
                                  "input": {
                                    "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('{0}PortalBackendPool', parameters('resourceSuffix'))]",
                            "properties": {
                              "copy": [
                                {
                                  "name": "backendAddresses",
                                  "count": "[length(variables('portalBackEndVirtualMachines'))]",
                                  "input": {
                                    "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "loadDistributionPolicies": [],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[format('PortalHttpsSetting{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "port": 7443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "connectionDraining": {
                                "enabled": true,
                                "drainTimeoutInSec": 60
                              },
                              "pickHostNameFromBackendAddress": true,
                              "path": "/arcgis/",
                              "requestTimeout": 180,
                              "probe": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}PortalProbeName', parameters('resourceSuffix')))]"
                              },
                              "trustedRootCertificates": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]"
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('ServerHttpsSetting{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "port": 6443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "connectionDraining": {
                                "enabled": true,
                                "drainTimeoutInSec": 60
                              },
                              "pickHostNameFromBackendAddress": true,
                              "path": "/arcgis/",
                              "requestTimeout": 180,
                              "probe": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}ServerProbeName', parameters('resourceSuffix')))]"
                              },
                              "trustedRootCertificates": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'serverBackendSSLCert')]"
                                }
                              ]
                            }
                          }
                        ],
                        "backendSettingsCollection": [],
                        "httpListeners": [
                          {
                            "name": "[format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                              },
                              "frontendPort": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]"
                              },
                              "protocol": "Http",
                              "hostNames": [
                                "[parameters('externalDnsHostName')]"
                              ],
                              "requireServerNameIndication": false
                            }
                          },
                          {
                            "name": "[format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                              },
                              "frontendPort": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]"
                              },
                              "protocol": "Https",
                              "sslCertificate": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/sslCertificates', parameters('applicationGatewayName'), 'frontendCert')]"
                              },
                              "hostNames": [
                                "[parameters('externalDnsHostName')]"
                              ],
                              "requireServerNameIndication": false
                            }
                          }
                        ],
                        "listeners": [],
                        "urlPathMaps": [
                          {
                            "name": "[format('{0}EnterprisePathMap', parameters('resourceSuffix'))]",
                            "properties": {
                              "defaultBackendAddressPool": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                              },
                              "defaultBackendHttpSettings": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                              },
                              "pathRules": [
                                {
                                  "name": "serverPathRule",
                                  "properties": {
                                    "paths": [
                                      "/server/*",
                                      "/server"
                                    ],
                                    "backendAddressPool": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                                    },
                                    "backendHttpSettings": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                                    },
                                    "rewriteRuleSet": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}ServerRewriteRuleSet', parameters('resourceSuffix')))]"
                                    }
                                  }
                                },
                                {
                                  "name": "portalPathRule",
                                  "properties": {
                                    "paths": [
                                      "/portal/*",
                                      "/portal"
                                    ],
                                    "backendAddressPool": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('{0}PortalBackendPool', parameters('resourceSuffix')))]"
                                    },
                                    "backendHttpSettings": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('PortalHttpsSetting{0}', parameters('resourceSuffix')))]"
                                    },
                                    "rewriteRuleSet": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}PortalRewriteRuleSet', parameters('resourceSuffix')))]"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "[format('{0}EnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                            "properties": {
                              "ruleType": "PathBasedRouting",
                              "priority": 10,
                              "httpListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "urlPathMap": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/urlPathMaps', parameters('applicationGatewayName'), format('{0}EnterprisePathMap', parameters('resourceSuffix')))]"
                              }
                            }
                          },
                          {
                            "name": "[format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                            "properties": {
                              "ruleType": "Basic",
                              "priority": 20,
                              "httpListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "redirectConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/redirectConfigurations', parameters('applicationGatewayName'), format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix')))]"
                              }
                            }
                          }
                        ],
                        "routingRules": [],
                        "probes": [
                          {
                            "name": "[format('{0}ServerProbeName', parameters('resourceSuffix'))]",
                            "properties": {
                              "protocol": "Https",
                              "path": "/arcgis/rest/info/healthcheck",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "pickHostNameFromBackendHttpSettings": true,
                              "minServers": 0,
                              "match": {
                                "statusCodes": [
                                  "200"
                                ]
                              }
                            }
                          },
                          {
                            "name": "[format('{0}PortalProbeName', parameters('resourceSuffix'))]",
                            "properties": {
                              "protocol": "Https",
                              "path": "/arcgis/portaladmin/healthCheck",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "pickHostNameFromBackendHttpSettings": true,
                              "minServers": 0,
                              "match": {
                                "statusCodes": [
                                  "200"
                                ]
                              }
                            }
                          }
                        ],
                        "rewriteRuleSets": [
                          {
                            "name": "[format('{0}PortalRewriteRuleSet', parameters('resourceSuffix'))]",
                            "properties": {
                              "rewriteRules": [
                                {
                                  "ruleSequence": 50,
                                  "conditions": [],
                                  "name": "XForwardedHostRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [
                                      {
                                        "headerName": "X-Forwarded-Host",
                                        "headerValue": "{http_req_host}"
                                      }
                                    ],
                                    "responseHeaderConfigurations": []
                                  }
                                },
                                {
                                  "ruleSequence": 100,
                                  "conditions": [
                                    {
                                      "variable": "http_resp_Location",
                                      "pattern": "(https?):\\/\\/[^\\/]+:7443\\/(?:arcgis|portal)(.*)$",
                                      "ignoreCase": true,
                                      "negate": false
                                    }
                                  ],
                                  "name": "PortalRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [],
                                    "responseHeaderConfigurations": [
                                      {
                                        "headerName": "RewriteLocationValue",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                      },
                                      {
                                        "headerName": "Location",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('{0}ServerRewriteRuleSet', parameters('resourceSuffix'))]",
                            "properties": {
                              "rewriteRules": [
                                {
                                  "ruleSequence": 50,
                                  "conditions": [],
                                  "name": "XForwardedHostRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [
                                      {
                                        "headerName": "X-Forwarded-Host",
                                        "headerValue": "{http_req_host}"
                                      }
                                    ],
                                    "responseHeaderConfigurations": []
                                  }
                                },
                                {
                                  "ruleSequence": 100,
                                  "conditions": [
                                    {
                                      "variable": "http_resp_Location",
                                      "pattern": "(https?):\\/\\/[^\\/]+:6443\\/(?:arcgis|server)(.*)$",
                                      "ignoreCase": true,
                                      "negate": false
                                    }
                                  ],
                                  "name": "ServerRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [],
                                    "responseHeaderConfigurations": [
                                      {
                                        "headerName": "RewriteLocationValue",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                      },
                                      {
                                        "headerName": "Location",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "redirectConfigurations": [
                          {
                            "name": "[format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix'))]",
                            "properties": {
                              "redirectType": "Permanent",
                              "targetListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "includePath": true,
                              "includeQueryString": true,
                              "requestRoutingRules": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/requestRoutingRules', parameters('applicationGatewayName'), format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix')))]"
                                }
                              ]
                            }
                          }
                        ],
                        "privateLinkConfigurations": []
                      }
                    }
                  ],
                  "outputs": {
                    "applicationGatewayPrivateIpAddress": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '2023-06-01').frontendIPConfigurations[1].properties.privateIPAddress]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('desired-state-configuration-{0}', parameters('deploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "dataStoreTypesForBaseDeploymentServers": {
                    "value": "[parameters('dataStoreTypesForBaseDeploymentServers')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscConfiguration')]"
                  },
                  "dscScript": {
                    "value": "[parameters('dscScript')]"
                  },
                  "enableServerLogHarvesterPlugin": {
                    "value": "[parameters('enableServerLogHarvesterPlugin')]"
                  },
                  "enableVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "hostname": {
                    "value": "[parameters('hostname')]"
                  },
                  "isTileCacheDataStoreClustered": {
                    "value": "[parameters('isTileCacheDataStoreClustered')]"
                  },
                  "isUpdatingCertificates": {
                    "value": "[parameters('isUpdatingCertificates')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalContext": {
                    "value": "[parameters('portalContext')]"
                  },
                  "portalLicenseFileName": {
                    "value": "[parameters('portalLicenseFileName')]"
                  },
                  "portalLicenseUserTypeId": {
                    "value": "[parameters('portalLicenseUserTypeId')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "publicKeySSLCertificateFileName": {
                    "value": "[parameters('publicKeySSLCertificateFileName')]"
                  },
                  "serverContext": {
                    "value": "[parameters('serverContext')]"
                  },
                  "serverLicenseFileName": {
                    "value": "[parameters('serverLicenseFileName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('virtualMachineName')]"
                  },
                  "virtualMachineOSDiskSize": {
                    "value": "[parameters('virtualMachineOSDiskSize')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "selfSignedSSLCertificatePassword": {
                    "value": "[parameters('selfSignedSSLCertificatePassword')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "2650438546048809750"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "dataStoreTypesForBaseDeploymentServers": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enableServerLogHarvesterPlugin": {
                      "type": "bool"
                    },
                    "enableVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "hostname": {
                      "type": "string"
                    },
                    "isTileCacheDataStoreClustered": {
                      "type": "bool"
                    },
                    "isUpdatingCertificates": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "portalContext": {
                      "type": "string"
                    },
                    "portalLicenseFileName": {
                      "type": "string"
                    },
                    "portalLicenseUserTypeId": {
                      "type": "string"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "publicKeySSLCertificateFileName": {
                      "type": "string"
                    },
                    "serverContext": {
                      "type": "string"
                    },
                    "serverLicenseFileName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "useSelfSignedInternalSSLCertificate": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "virtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "selfSignedSSLCertificatePassword": {
                      "type": "securestring"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "PortalLicenseUserTypeId": "[parameters('portalLicenseUserTypeId')]",
                            "MachineName": "[parameters('virtualMachineNames')]",
                            "PeerMachineName": "[parameters('virtualMachineNames')]",
                            "ExternalDNSHostName": "[parameters('hostname')]",
                            "PrivateDNSHostName": "",
                            "DataStoreTypes": "[parameters('dataStoreTypesForBaseDeploymentServers')]",
                            "IsTileCacheDataStoreClustered": "[parameters('isTileCacheDataStoreClustered')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
                            "EnableLogHarvesterPlugin": "[string(parameters('enableServerLogHarvesterPlugin'))]",
                            "DebugMode": "[string(parameters('debugMode'))]",
                            "ServerContext": "[parameters('serverContext')]",
                            "PortalContext": "[parameters('portalContext')]",
                            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "configurationArguments": {
                            "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "ServerLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('serverLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "PortalLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('portalLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUserName')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "MachineAdministratorCredential": {
                              "userName": "[parameters('adminUsername')]",
                              "password": "[parameters('adminPassword')]"
                            },
                            "ServerInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), '')]"
                            },
                            "PortalInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), '')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-management-vm-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-single-tier-datastore-types-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-virtual-machine-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ]
}