{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.35.1.17967",
      "templateHash": "310002407825398763"
    }
  },
  "parameters": {
    "applicationGatewaySubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.136.0/24",
      "metadata": {
        "description": "The address prefix for the subnet of the application gateway."
      }
    },
    "arcgisServiceAccountIsDomainAccount": {
      "type": "bool",
      "metadata": {
        "description": "Determine whether the ArcGIS Service Account is a domain account."
      }
    },
    "arcgisServiceAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the ArcGIS service account."
      }
    },
    "arcgisServiceAccountUsername": {
      "type": "string",
      "metadata": {
        "description": "The username for the ArcGIS service account."
      }
    },
    "artifactsStorageAccountResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the storage account for the deployment artifacts."
      }
    },
    "artifactsContainerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Blobs container for the deployment artifacts."
      }
    },
    "architecture": {
      "type": "string",
      "allowedValues": [
        "singletier",
        "multitier"
      ],
      "metadata": {
        "description": "The architecture for ESRI, either Single Tier or Multi Tier."
      }
    },
    "certificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the certificate."
      }
    },
    "certificateFileName": {
      "type": "string",
      "metadata": {
        "description": "The file name for the certificate."
      }
    },
    "dataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "The OS disk size for virtual machines hosting the data store."
      }
    },
    "debugMode": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether debug mode is enabled for ESRI Enterprise."
      }
    },
    "deployActivityLogDiagnosticSetting": {
      "type": "bool",
      "metadata": {
        "description": "Choose whether to deploy a diagnostic setting for the Activity Log."
      }
    },
    "deployDefender": {
      "type": "bool",
      "metadata": {
        "description": "Determine whether to deploy Defender for Cloud. This is only necessary if the target description does not have Defender for Cloud already enabled."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
      }
    },
    "deployNetworkWatcherTrafficAnalytics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "When set to true, deploys Network Watcher Traffic Analytics. It defaults to \"false\"."
      }
    },
    "deployPolicy": {
      "type": "bool",
      "metadata": {
        "description": "Choose whether to deploy a policy assignment."
      }
    },
    "emailSecurityContact": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The email address or distribution list to receive security alerts."
      }
    },
    "enableDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether to enable the Data Store on the virtual machine data disk"
      }
    },
    "enableGraphDataStore": {
      "type": "bool",
      "metadata": {
        "description": "Determine whether to enable the Graph Data Store."
      }
    },
    "enableGraphDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether to enable the Graph Data Store on the virtual machine data disk."
      }
    },
    "enableMonitoring": {
      "type": "bool",
      "metadata": {
        "description": "Determine whether to enable monitoring for the virtual machines."
      }
    },
    "enableObjectDataStore": {
      "type": "bool",
      "metadata": {
        "description": "Determine whether to enable Object Data Store."
      }
    },
    "enableObjectDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether to enable the Object Data Store on the virtual machine data disk."
      }
    },
    "enableServerLogHarvesterPlugin": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether to enable the Server Log Harvester Plugin."
      }
    },
    "enableSpatiotemporalBigDataStore": {
      "type": "bool",
      "metadata": {
        "description": "Determine whether to enable the Spatiotemporal Big Data Store."
      }
    },
    "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether to enable the Spatiotemporal Big Data Store on the virtual machine data disk."
      }
    },
    "enableTileCacheDataStore": {
      "type": "bool",
      "metadata": {
        "description": "Determine whether to enable the Tile Cache Data Store."
      }
    },
    "enableTileCacheDataStoreVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether to enable the Tile Cache Data Store on the virtual machine data disk."
      }
    },
    "enableVirtualMachineDataDisk": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determine whether to enable the virtual machine data disk."
      }
    },
    "environmentAbbreviation": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "prod",
        "test"
      ],
      "metadata": {
        "description": "The abbreviation for the target environment."
      }
    },
    "externalDnsHostname": {
      "type": "string",
      "metadata": {
        "description": "External DNS Hostname"
      }
    },
    "graphDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "Graph Data Store Virtual Machine OS Disk Size"
      }
    },
    "hubAzureFirewallResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the Azure Firewall in the HUB subscription"
      }
    },
    "hubVirtualNetworkResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the Azure Virtual Network in the HUB subscription."
      }
    },
    "identifier": {
      "type": "string",
      "maxLength": 3,
      "metadata": {
        "description": "The unique identifier between each business unit or project in your tenant. The identifier is used in the naming convention for your resource groups and resources."
      }
    },
    "isUpdatingCertificates": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Updating Certificates"
      }
    },
    "joinEntraDomain": {
      "type": "bool",
      "metadata": {
        "description": "Join Entra Domain"
      }
    },
    "joinWindowsDomain": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Join Windows Domain"
      }
    },
    "keyVaultDiagnosticLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AuditEvent",
          "enabled": true
        },
        {
          "category": "AzurePolicyEvaluationDetails",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Key Vault Diagnostic Logs categories to collect. See \"https://learn.microsoft.com/en-us/azure/key-vault/general/logging?tabs=Vault\" for valid values."
      }
    },
    "keyVaultDiagnosticMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "The Key Vault Diagnostic Metrics to collect. See the following URL for valid settings: \"https://learn.microsoft.com/azure/key-vault/general/logging?tabs=Vault\"."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The target location for the Azure resources."
      }
    },
    "logStorageSkuName": {
      "type": "string",
      "defaultValue": "Standard_GRS",
      "metadata": {
        "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
      }
    },
    "networkInterfaceDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of metrics to enable on the diagnostic setting for network interfaces."
      }
    },
    "networkSecurityGroupDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "NetworkSecurityGroupEvent",
          "enabled": true
        },
        {
          "category": "NetworkSecurityGroupRuleCounter",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Security Group diagnostic logs to apply to the workload Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/virtual-network/virtual-network-nsg-manage-log#log-categories."
      }
    },
    "networkSecurityGroupDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The metrics to monitor for the Network Security Group."
      }
    },
    "networkSecurityGroupRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The rules to apply to the Network Security Group."
      }
    },
    "networkWatcherFlowLogsRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "The number of days to retain Network Watcher Flow Logs. It defaults to \"30\"."
      }
    },
    "networkWatcherFlowLogsType": {
      "type": "string",
      "defaultValue": "VirtualNetwork",
      "allowedValues": [
        "NetworkSecurityGroup",
        "VirtualNetwork"
      ],
      "metadata": {
        "description": "When set to \"true\", enables Virtual Network Flow Logs. It defaults to \"true\" as its required by MCSB."
      }
    },
    "numberOfDataStoreVirtualMachines": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of data store virtual machines."
      }
    },
    "numberOfEsriServers": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of ESRI servers."
      }
    },
    "numberOfEsrispatiotemporalBigDataStoreVirtualMachines": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "The number of ESRI Spatiotemporal Big Data Store virtual machines."
      }
    },
    "numberOfFileShareVirtualMachineNames": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of file share virtual machines."
      }
    },
    "numberOfGraphDataStoreVirtualMachineNames": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of graph data store virtual machines."
      }
    },
    "numberOfObjectDataStoreVirtualMachines": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "The number of object data store virtual machines."
      }
    },
    "numberOfPortalVirtualMachines": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The number of portal virtual machines."
      }
    },
    "numberOfTileCacheDataStoreVirtualMachineNames": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of tile cache data store virtual machines."
      }
    },
    "objectDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "The OS disk size for the Object Data Store Virtual Machine."
      }
    },
    "operationsLogAnalyticsWorkspaceResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Log Analytics Workspace to use for log storage."
      }
    },
    "ouPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The distinguished name for the OU path when domain joining the virtual machines."
      }
    },
    "policy": {
      "type": "string",
      "defaultValue": "NISTRev4",
      "metadata": {
        "description": "The policy to assign to the workload."
      }
    },
    "portalLicenseFile": {
      "type": "string",
      "metadata": {
        "description": "The base 64 encoded string containing the license file for the ESRI portal."
      }
    },
    "portalLicenseUserTypeId": {
      "type": "string",
      "allowedValues": [
        "creatorUT",
        "editorUT",
        "fieldWorkerUT",
        "GISProfessionalAdvUT",
        "GISProfessionalBasicUT",
        "GISProfessionalStdUT",
        "IndoorsUserUT",
        "insightsAnalystUT",
        "viewerUT"
      ],
      "metadata": {
        "description": "The license user type ID for the ESRI portal."
      }
    },
    "portalVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "The OS disk size for the virtual machines hosting the ESRI portal."
      }
    },
    "primarySiteAdministratorAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the ESRI Primary Site Administrator Account."
      }
    },
    "primarySiteAdministratorAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "The username for the ESRI Primary Site Administrator Account."
      }
    },
    "resourcePrefix": {
      "type": "string",
      "metadata": {
        "description": "The prefix for naming the Azure resources."
      }
    },
    "secondaryDnsHostName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The secondary host name"
      }
    },
    "selfSignedCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the self-signed certificate."
      }
    },
    "serverLicenseFile": {
      "type": "string",
      "metadata": {
        "description": "The base 64 encoded string containing the license file for ESRI Enterprise server."
      }
    },
    "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ]
    },
    "subnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.137.0/24",
      "metadata": {
        "description": "The address prefix for the new subnet that will be created in the spoke virtual network for the ESRI servers."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The key / value pairs of metadata for the Azure resource groups and resources."
      }
    },
    "tileCacheDataStoreVirtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "The OS disk size on the virutal machine for the tile cache data store."
      }
    },
    "useAzureFiles": {
      "type": "bool",
      "metadata": {
        "description": "Determine whether to use Azure Files for storage."
      }
    },
    "useCloudStorage": {
      "type": "bool",
      "metadata": {
        "description": "Determine whether to use cloud storage."
      }
    },
    "virtualMachineAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the local administrator account on the virtual machines."
      }
    },
    "virtualMachineAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "The username for the local adminsitrator account on the virtual machines."
      }
    },
    "virtualMachineOSDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32767
      ],
      "metadata": {
        "description": "The size of the virtual machine OS disk"
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_DS4_v2",
      "metadata": {
        "description": "The size of the virtual machines"
      }
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.136.0/23",
      "metadata": {
        "description": "The virtual network address prefix"
      }
    },
    "windowsDomainAdministratorPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the Windows domain administrator account."
      }
    },
    "windowsDomainAdministratorUserName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The username for the Windows domain administrator account."
      }
    },
    "windowsDomainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Windows domain."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "applicationGatewayUsableIpAddresses",
        "count": "[length(range(0, 4))]",
        "input": "[cidrHost(parameters('applicationGatewaySubnetAddressPrefix'), range(0, 4)[copyIndex('applicationGatewayUsableIpAddresses')])]"
      },
      {
        "name": "dataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfDataStoreVirtualMachines')))]",
        "input": "[format('vm-esri-ds-{0}', range(0, parameters('numberOfDataStoreVirtualMachines'))[copyIndex('dataStoreVirtualMachines')])]"
      },
      {
        "name": "fileShareVirtualMachines",
        "count": "[length(range(0, parameters('numberOfFileShareVirtualMachineNames')))]",
        "input": "[format('vm-esri-fl-{0}', range(0, parameters('numberOfFileShareVirtualMachineNames'))[copyIndex('fileShareVirtualMachines')])]"
      },
      {
        "name": "graphDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfGraphDataStoreVirtualMachineNames')))]",
        "input": "[format('vm-esri-gr-{0}', range(0, parameters('numberOfGraphDataStoreVirtualMachineNames'))[copyIndex('graphDataStoreVirtualMachines')])]"
      },
      {
        "name": "objectDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfObjectDataStoreVirtualMachines')))]",
        "input": "[format('vm-esri-od-{0}', range(0, parameters('numberOfObjectDataStoreVirtualMachines'))[copyIndex('objectDataStoreVirtualMachines')])]"
      },
      {
        "name": "portalVirtualMachines",
        "count": "[length(range(0, parameters('numberOfPortalVirtualMachines')))]",
        "input": "[format('vm-esri-pr-{0}', range(0, parameters('numberOfPortalVirtualMachines'))[copyIndex('portalVirtualMachines')])]"
      },
      {
        "name": "serverVirtualMachines",
        "count": "[length(range(0, parameters('numberOfEsriServers')))]",
        "input": "[format('vm-esri-sv-{0}', range(0, parameters('numberOfEsriServers'))[copyIndex('serverVirtualMachines')])]"
      },
      {
        "name": "spatiotemporalBigDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfEsrispatiotemporalBigDataStoreVirtualMachines')))]",
        "input": "[format('vm-esri-sp-{0}', range(0, parameters('numberOfEsrispatiotemporalBigDataStoreVirtualMachines'))[copyIndex('spatiotemporalBigDataStoreVirtualMachines')])]"
      },
      {
        "name": "tileCacheDataStoreVirtualMachines",
        "count": "[length(range(0, parameters('numberOfTileCacheDataStoreVirtualMachineNames')))]",
        "input": "[format('vm-esri-tc-{0}', range(0, parameters('numberOfTileCacheDataStoreVirtualMachineNames'))[copyIndex('tileCacheDataStoreVirtualMachines')])]"
      }
    ],
    "privateDnsZoneResourceIdPrefix": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4])]",
    "resourceSuffix": "[parameters('resourcePrefix')]",
    "applicationGatewayName": "[format('{0}-appgw-esri', parameters('resourcePrefix'))]",
    "applicationGatewayPrivateIpAddress": "[variables('applicationGatewayUsableIpAddresses')[3]]",
    "availabilitySetName": "[format('{0}-avset-esri', parameters('resourcePrefix'))]",
    "container": "artifacts",
    "keyVaultCertificatesOfficer": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
    "keyVaultCryptoOfficer": "[resourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
    "keyVaultName": "[format('{0}-kv-esri', parameters('resourcePrefix'))]",
    "keyVaultSecretsOfficer": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
    "networkInterfaceName": "[format('{0}-nic-esri', parameters('resourcePrefix'))]",
    "portalContext": "portal",
    "portalLicenseFileName": "portalLicense.json",
    "publicIpAddressName": "[format('{0}-pip-esri', parameters('resourcePrefix'))]",
    "resourceGroupName": "[format('{0}-rg-esri-enterprise', parameters('resourcePrefix'))]",
    "serverContext": "server",
    "serverLicenseFileName": "serverLicense.prvc",
    "subscriptionId": "[subscription().subscriptionId]",
    "userAssignedManagedIdentityName": "[format('{0}-uami-esri-{1}', parameters('resourcePrefix'), variables('resourceSuffix'))]",
    "virtualMachineName": "[format('{0}-vm-esri', parameters('resourcePrefix'))]",
    "dataStoreVirtualMachineNames": "[join(variables('dataStoreVirtualMachines'), ',')]",
    "fileShareVirtualMachineName": "[join(variables('fileShareVirtualMachines'), ',')]",
    "graphDataStoreVirtualMachineNames": "[join(variables('graphDataStoreVirtualMachines'), ',')]",
    "objectDataStoreVirtualMachineNames": "[join(variables('objectDataStoreVirtualMachines'), ',')]",
    "portalVirtualMachineNames": "[join(variables('portalVirtualMachines'), ',')]",
    "serverVirtualMachineNames": "[join(variables('serverVirtualMachines'), ',')]",
    "spatiotemporalBigDataStoreVirtualMachineNames": "[join(variables('spatiotemporalBigDataStoreVirtualMachines'), ',')]",
    "tileCacheDataStoreVirtualMachineNames": "[join(variables('tileCacheDataStoreVirtualMachines'), ',')]",
    "dscDataStoreFunction": "DataStoreConfiguration",
    "dscGraphDataStoreFunction": "GraphDataStoreConfiguration",
    "dscObjectDataStoreFunction": "ObjectDataStoreConfiguration",
    "dscPortalFunction": "PortalConfiguration",
    "dscServerScriptFunction": "ServerConfiguration",
    "dscSingleTierConfiguration": "BaseDeploymentSingleTierConfiguration",
    "dscsSatiotemporalBigDataStoreFunction": "SpatiotemporalBigDataStoreConfiguration",
    "dscTileCacheDataStoreDscFunction": "TileCacheDataStoreConfiguration",
    "fileShareDscScriptFunction": "FileShareConfiguration",
    "isObjectDataStoreClustered": "[if(greaterOrEquals(parameters('numberOfObjectDataStoreVirtualMachines'), 3), true(), false())]",
    "isTileCacheDataStoreClustered": "[if(greaterOrEquals(parameters('numberOfTileCacheDataStoreVirtualMachineNames'), 1), true(), false())]",
    "isMultiMachineTileCacheDataStore": "[if(greaterOrEquals(parameters('numberOfTileCacheDataStoreVirtualMachineNames'), 1), true(), false())]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2019-05-01",
      "name": "[variables('resourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "condition": "[equals(parameters('architecture'), 'singletier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-single-tier-datastore-types-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "enableSpatiotemporalBigDataStore": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', parameters('enableSpatiotemporalBigDataStore')), createObject('value', false()))]",
          "enableTileCacheDataStore": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', parameters('enableTileCacheDataStore')), createObject('value', false()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "14487105546913886047"
            }
          },
          "parameters": {
            "enableTileCacheDataStore": {
              "type": "bool",
              "defaultValue": true
            },
            "enableSpatiotemporalBigDataStore": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "copy": [
              {
                "name": "dataStoreTypesForSingleTier",
                "count": "[length(variables('singleTierDataStoreTypes'))]",
                "input": "[if(or(or(equals(variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'Relational'), equals(variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'TileCache')), equals(variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'SpatioTemporal')), variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'Relational')]"
              }
            ],
            "singleTierDataStoreTypes": [
              "Relational",
              "[if(parameters('enableTileCacheDataStore'), 'TileCache', 'Relational')]",
              "[if(parameters('enableSpatiotemporalBigDataStore'), 'SpatioTemporal', 'Relational')]"
            ],
            "dataStoreTypesForBaseDeployment": "[union(variables('singleTierDataStoreTypes'), variables('dataStoreTypesForSingleTier'))]"
          },
          "resources": [],
          "outputs": {
            "dataStoreTypesForBaseDeploymentServers": {
              "type": "string",
              "value": "[join(variables('dataStoreTypesForBaseDeployment'), ',')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deployActivityLogDiagnosticSetting": {
            "value": "[parameters('deployActivityLogDiagnosticSetting')]"
          },
          "deployDefender": {
            "value": "[parameters('deployDefender')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "deployNetworkWatcherTrafficAnalytics": {
            "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
          },
          "deployPolicy": {
            "value": "[parameters('deployPolicy')]"
          },
          "emailSecurityContact": {
            "value": "[parameters('emailSecurityContact')]"
          },
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "firewallResourceId": {
            "value": "[parameters('hubAzureFirewallResourceId')]"
          },
          "hubVirtualNetworkResourceId": {
            "value": "[parameters('hubVirtualNetworkResourceId')]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "keyVaultDiagnosticLogs": {
            "value": "[parameters('keyVaultDiagnosticLogs')]"
          },
          "keyVaultDiagnosticMetrics": {
            "value": "[parameters('keyVaultDiagnosticMetrics')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[parameters('operationsLogAnalyticsWorkspaceResourceId')]"
          },
          "logStorageSkuName": {
            "value": "[parameters('logStorageSkuName')]"
          },
          "networkInterfaceDiagnosticsMetrics": {
            "value": "[parameters('networkInterfaceDiagnosticsMetrics')]"
          },
          "networkSecurityGroupDiagnosticsLogs": {
            "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
          },
          "networkSecurityGroupRules": {
            "value": "[parameters('networkSecurityGroupRules')]"
          },
          "networkWatcherFlowLogsRetentionDays": {
            "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
          },
          "networkWatcherFlowLogsType": {
            "value": "[parameters('networkWatcherFlowLogsType')]"
          },
          "policy": {
            "value": "[parameters('policy')]"
          },
          "subnetAddressPrefix": {
            "value": "[parameters('subnetAddressPrefix')]"
          },
          "subnetName": {
            "value": "EsriEnterpise"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualNetworkAddressPrefix": {
            "value": "[parameters('virtualNetworkAddressPrefix')]"
          },
          "virtualNetworkDiagnosticsLogs": {
            "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
          },
          "virtualNetworkDiagnosticsMetrics": {
            "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
          },
          "windowsAdministratorsGroupMembership": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "workloadName": {
            "value": "esriEnt"
          },
          "workloadShortName": {
            "value": "ent"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "17363786235025240008"
            }
          },
          "parameters": {
            "additionalSubnets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of additional subnets to support the tier3 workload."
              }
            },
            "customFirewallRuleCollectionGroups": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The custom firewall rule collection groups that override the default firewall rule collection groups."
              }
            },
            "deployActivityLogDiagnosticSetting": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy a diagnostic setting for the Activity Log."
              }
            },
            "deployDefender": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy Defender for Cloud."
              }
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "The suffix to append to the deployment name. It defaults to the current UTC date and time."
              }
            },
            "deployNetworkWatcherTrafficAnalytics": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "When set to true, deploys Network Watcher Traffic Analytics. It defaults to \"false\"."
              }
            },
            "deployPolicy": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy a policy assignment."
              }
            },
            "emailSecurityContact": {
              "type": "string",
              "metadata": {
                "description": "The email address to use for Defender for Cloud notifications."
              }
            },
            "environmentAbbreviation": {
              "type": "string",
              "defaultValue": "dev",
              "allowedValues": [
                "dev",
                "prod",
                "test"
              ],
              "metadata": {
                "description": "The abbreviation for the environment."
              }
            },
            "firewallResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Firewall in the HUB."
              }
            },
            "hubVirtualNetworkResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the HUB Virtual Network."
              }
            },
            "identifier": {
              "type": "string",
              "maxLength": 3,
              "metadata": {
                "description": "The identifier for the resource names. This value should represent the workload, project, or business unit."
              }
            },
            "keyVaultDiagnosticLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AuditEvent",
                  "enabled": true
                },
                {
                  "category": "AzurePolicyEvaluationDetails",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Key Vault Diagnostic Logs categories to collect. See \"https://learn.microsoft.com/en-us/azure/key-vault/general/logging?tabs=Vault\" for valid values."
              }
            },
            "keyVaultDiagnosticMetrics": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AllMetrics",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "The Key Vault Diagnostic Metrics to collect. See the following URL for valid settings: \"https://learn.microsoft.com/azure/key-vault/general/logging?tabs=Vault\"."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location for the deployment. It defaults to the location of the deployment."
              }
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics Workspace to use for log storage."
              }
            },
            "logStorageSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
              }
            },
            "networkInterfaceDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AllMetrics",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of metrics to enable on the diagnostic setting for network interfaces."
              }
            },
            "networkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Network Security Group diagnostic logs to apply to the workload Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
              }
            },
            "networkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The rules to apply to the Network Security Group."
              }
            },
            "networkWatcherFlowLogsRetentionDays": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "The number of days to retain Network Watcher Flow Logs. It defaults to \"30\"."
              }
            },
            "networkWatcherFlowLogsType": {
              "type": "string",
              "defaultValue": "VirtualNetwork",
              "allowedValues": [
                "NetworkSecurityGroup",
                "VirtualNetwork"
              ],
              "metadata": {
                "description": "When set to \"true\", enables Virtual Network Flow Logs. It defaults to \"true\" as its required by MCSB."
              }
            },
            "policy": {
              "type": "string",
              "defaultValue": "NISTRev4",
              "metadata": {
                "description": "The policy to assign to the workload."
              }
            },
            "stampIndex": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The stamp index allows for multiple deployments of a similar workload without naming conflicts."
              }
            },
            "subnetAddressPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The address prefix for the workload subnet."
              }
            },
            "subnetName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The custom name for the workload subnet if the naming convention is not desired. Subnets are child resources and do not require a unique name between virtual networks, only within the same virtual network."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The tags to apply to the resources."
              }
            },
            "virtualNetworkAddressPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The address prefix for the workload Virtual Network."
              }
            },
            "virtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "VMProtectionAlerts",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "The diagnostic logs to apply to the workload Virtual Network."
              }
            },
            "virtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AllMetrics",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "The metrics to monitor for the workload Virtual Network."
              }
            },
            "windowsAdministratorsGroupMembership": {
              "type": "string",
              "defaultValue": "xadmin",
              "metadata": {
                "description": "The local administrator username for Windows virtual machines. This value is needed if you plan to deploy the following Azure Policy initiatives: CMMC Level 3, DoD Impact Level 5, or NIST SP 800-53 Rev. 4 It defaults to \"xadmin\"."
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "tier3",
              "minLength": 1,
              "maxLength": 10,
              "metadata": {
                "description": "The name for the workload."
              }
            },
            "workloadShortName": {
              "type": "string",
              "defaultValue": "t3",
              "minLength": 1,
              "maxLength": 3,
              "metadata": {
                "description": "The short name for the workload."
              }
            }
          },
          "variables": {
            "hubResourceGroupName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
            "hubSubscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
            "deploymentIndex": "[if(empty(parameters('stampIndex')), '', format('{0}-', parameters('stampIndex')))]",
            "subscriptionId": "[subscription().subscriptionId]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-ops-vnet-{0}{1}', variables('deploymentIndex'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "networkName": {
                    "value": "operations"
                  },
                  "peerings": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01').virtualNetworkPeerings]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "12497882887058511943"
                    }
                  },
                  "parameters": {
                    "networkName": {
                      "type": "string"
                    },
                    "peerings": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "virtualNetworkResourceId": "[filter(parameters('peerings'), lambda('peer', contains(lambdaVariables('peer').name, format('-{0}-', parameters('networkName')))))[0].properties.remoteVirtualNetwork.id]"
                  },
                  "resources": [],
                  "outputs": {
                    "addressPrefix": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(variables('virtualNetworkResourceId'), '/')[2], split(variables('virtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(variables('virtualNetworkResourceId'), '/')[8]), '2023-11-01').addressSpace.addressPrefixes[0]]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-firewall-rules-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('hubSubscriptionId')]",
              "resourceGroup": "[variables('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "firewallPolicyName": {
                    "value": "[split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').firewallPolicy.id, '/')[8]]"
                  },
                  "firewallRuleCollectionGroups": "[if(empty(parameters('customFirewallRuleCollectionGroups')), createObject('value', createArray(createObject('name', 'Tier3-NetworkCollectionGroup', 'properties', createObject('priority', 200, 'ruleCollections', createArray(createObject('name', 'AllowMonitorToLAW', 'priority', 150, 'ruleCollectionType', 'FirewallPolicyFilterRuleCollection', 'action', createObject('type', 'Allow'), 'rules', createArray(createObject('name', 'AllowMonitorToLAW', 'ruleType', 'NetworkRule', 'ipProtocols', createArray('Tcp'), 'sourceAddresses', createArray(parameters('virtualNetworkAddressPrefix')), 'destinationAddresses', createArray(cidrHost(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-ops-vnet-{0}{1}', variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.addressPrefix.value, 3)), 'destinationPorts', createArray('443'), 'sourceIpGroups', createArray(), 'destinationIpGroups', createArray(), 'destinationFqdns', createArray())))))))), createObject('value', parameters('customFirewallRuleCollectionGroups')))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "8037704770039885052"
                    }
                  },
                  "parameters": {
                    "firewallPolicyName": {
                      "type": "string"
                    },
                    "firewallRuleCollectionGroups": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "ruleCreate",
                        "count": "[length(parameters('firewallRuleCollectionGroups'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}', parameters('firewallPolicyName'), parameters('firewallRuleCollectionGroups')[copyIndex()].name)]",
                      "properties": "[parameters('firewallRuleCollectionGroups')[copyIndex()].properties]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-ops-vnet-{0}{1}', variables('deploymentIndex'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-vnet-peerings-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualNetworkPeerings": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01').virtualNetworkPeerings]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "9603756402176965481"
                    }
                  },
                  "parameters": {
                    "virtualNetworkPeerings": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "resourceIds",
                        "count": "[length(parameters('virtualNetworkPeerings'))]",
                        "input": "[parameters('virtualNetworkPeerings')[copyIndex('resourceIds')].properties.remoteVirtualNetwork.id]"
                      },
                      {
                        "name": "subscriptionIds",
                        "count": "[length(variables('resourceIds'))]",
                        "input": "[split(variables('resourceIds')[copyIndex('subscriptionIds')], '/')[2]]"
                      }
                    ]
                  },
                  "resources": [],
                  "outputs": {
                    "subscriptionIds": {
                      "type": "array",
                      "value": "[variables('subscriptionIds')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "identifier": {
                    "value": "[parameters('identifier')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networks": {
                    "value": [
                      {
                        "name": "[parameters('workloadName')]",
                        "shortName": "[parameters('workloadShortName')]",
                        "subscriptionId": "[variables('subscriptionId')]",
                        "nsgDiagLogs": "[parameters('networkSecurityGroupDiagnosticsLogs')]",
                        "nsgRules": "[parameters('networkSecurityGroupRules')]",
                        "vnetAddressPrefix": "[parameters('virtualNetworkAddressPrefix')]",
                        "vnetDiagLogs": "[parameters('virtualNetworkDiagnosticsLogs')]",
                        "vnetDiagMetrics": "[parameters('virtualNetworkDiagnosticsMetrics')]",
                        "subnetAddressPrefix": "[parameters('subnetAddressPrefix')]"
                      }
                    ]
                  },
                  "stampIndex": {
                    "value": "[parameters('stampIndex')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "382273146619927959"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "identifier": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networks": {
                      "type": "array"
                    },
                    "stampIndex": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "$fxv#0": "1.0.0",
                    "environmentName": {
                      "dev": "Development",
                      "prod": "Production",
                      "test": "Test"
                    },
                    "mlzTags": {
                      "environment": "[variables('environmentName')[parameters('environmentAbbreviation')]]",
                      "identifier": "[parameters('identifier')]",
                      "landingZoneName": "MissionLandingZone",
                      "landingZoneVersion": "[variables('$fxv#0')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "namingConventions",
                        "count": "[length(parameters('networks'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('naming-convention-{0}-{1}', parameters('networks')[copyIndex()].shortName, parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "environmentAbbreviation": {
                            "value": "[parameters('environmentAbbreviation')]"
                          },
                          "identifier": {
                            "value": "[parameters('identifier')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "networkName": {
                            "value": "[parameters('networks')[copyIndex()].name]"
                          },
                          "stampIndex": {
                            "value": "[parameters('stampIndex')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "8940763995032978193"
                            }
                          },
                          "parameters": {
                            "delimiter": {
                              "type": "string",
                              "defaultValue": "-",
                              "allowedValues": [
                                "",
                                "-"
                              ]
                            },
                            "environmentAbbreviation": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "networkName": {
                              "type": "string"
                            },
                            "identifier": {
                              "type": "string"
                            },
                            "stampIndex": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "variables": {
                            "$fxv#0": {
                              "AzureChina": {
                                "chinaeast": {
                                  "abbreviation": "cne",
                                  "recoveryServicesGeo": "sha",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinaeast2": {
                                  "abbreviation": "cne2",
                                  "recoveryServicesGeo": "sha2",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinanorth": {
                                  "abbreviation": "cnn",
                                  "recoveryServicesGeo": "bjb",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinanorth2": {
                                  "abbreviation": "cnn2",
                                  "recoveryServicesGeo": "bjb2",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                }
                              },
                              "AzureCloud": {
                                "australiacentral": {
                                  "abbreviation": "auc",
                                  "recoveryServicesGeo": "acl",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiacentral2": {
                                  "abbreviation": "auc2",
                                  "recoveryServicesGeo": "acl2",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiaeast": {
                                  "abbreviation": "aue",
                                  "recoveryServicesGeo": "ae",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiasoutheast": {
                                  "abbreviation": "ause",
                                  "recoveryServicesGeo": "ase",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "brazilsouth": {
                                  "abbreviation": "brs",
                                  "recoveryServicesGeo": "brs",
                                  "timeDifference": "-3:00",
                                  "timeZone": "E. South America Standard Time"
                                },
                                "brazilsoutheast": {
                                  "abbreviation": "brse",
                                  "recoveryServicesGeo": "bse",
                                  "timeDifference": "-3:00",
                                  "timeZone": "E. South America Standard Time"
                                },
                                "canadacentral": {
                                  "abbreviation": "cac",
                                  "recoveryServicesGeo": "cnc",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "canadaeast": {
                                  "abbreviation": "cae",
                                  "recoveryServicesGeo": "cne",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "centralindia": {
                                  "abbreviation": "inc",
                                  "recoveryServicesGeo": "inc",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "centralus": {
                                  "abbreviation": "usc",
                                  "recoveryServicesGeo": "cus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "eastasia": {
                                  "abbreviation": "ase",
                                  "recoveryServicesGeo": "ea",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "eastus": {
                                  "abbreviation": "use",
                                  "recoveryServicesGeo": "eus",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "eastus2": {
                                  "abbreviation": "use2",
                                  "recoveryServicesGeo": "eus2",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "francecentral": {
                                  "abbreviation": "frc",
                                  "recoveryServicesGeo": "frc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "francesouth": {
                                  "abbreviation": "frs",
                                  "recoveryServicesGeo": "frs",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "germanynorth": {
                                  "abbreviation": "den",
                                  "recoveryServicesGeo": "gn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "germanywestcentral": {
                                  "abbreviation": "dewc",
                                  "recoveryServicesGeo": "gwc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "israelcentral": {
                                  "abbreviation": "ilc",
                                  "recoveryServicesGeo": "ilc",
                                  "timeDifference": "+2:00",
                                  "timeZone": "Israel Standard Time"
                                },
                                "italynorth": {
                                  "abbreviation": "itn",
                                  "recoveryServicesGeo": "itn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "japaneast": {
                                  "abbreviation": "jpe",
                                  "recoveryServicesGeo": "jpe",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Tokyo Standard Time"
                                },
                                "japanwest": {
                                  "abbreviation": "jpw",
                                  "recoveryServicesGeo": "jpw",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Tokyo Standard Time"
                                },
                                "jioindiacentral": {
                                  "abbreviation": "injc",
                                  "recoveryServicesGeo": "jic",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "jioindiawest": {
                                  "abbreviation": "injw",
                                  "recoveryServicesGeo": "jiw",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "koreacentral": {
                                  "abbreviation": "krc",
                                  "recoveryServicesGeo": "krc",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Korea Standard Time"
                                },
                                "koreasouth": {
                                  "abbreviation": "krs",
                                  "recoveryServicesGeo": "krs",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Korea Standard Time"
                                },
                                "northcentralus": {
                                  "abbreviation": "usnc",
                                  "recoveryServicesGeo": "ncus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "northeurope": {
                                  "abbreviation": "eun",
                                  "recoveryServicesGeo": "ne",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "norwayeast": {
                                  "abbreviation": "noe",
                                  "recoveryServicesGeo": "nwe",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "norwaywest": {
                                  "abbreviation": "now",
                                  "recoveryServicesGeo": "nww",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "polandcentral": {
                                  "abbreviation": "plc",
                                  "recoveryServicesGeo": "plc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "qatarcentral": {
                                  "abbreviation": "qac",
                                  "recoveryServicesGeo": "qac",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "southafricanorth": {
                                  "abbreviation": "zan",
                                  "recoveryServicesGeo": "san",
                                  "timeDifference": "+2:00",
                                  "timeZone": "South Africa Standard Time"
                                },
                                "southafricawest": {
                                  "abbreviation": "zaw",
                                  "recoveryServicesGeo": "saw",
                                  "timeDifference": "+2:00",
                                  "timeZone": "South Africa Standard Time"
                                },
                                "southcentralus": {
                                  "abbreviation": "ussc",
                                  "recoveryServicesGeo": "scus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "southeastasia": {
                                  "abbreviation": "asse",
                                  "recoveryServicesGeo": "sea",
                                  "timeDifference": "+8:00",
                                  "timeZone": "Singapore Standard Time"
                                },
                                "southindia": {
                                  "abbreviation": "ins",
                                  "recoveryServicesGeo": "ins",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "swedencentral": {
                                  "abbreviation": "sec",
                                  "recoveryServicesGeo": "sdc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "switzerlandnorth": {
                                  "abbreviation": "chn",
                                  "recoveryServicesGeo": "szn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "switzerlandwest": {
                                  "abbreviation": "chw",
                                  "recoveryServicesGeo": "szw",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "uaecentral": {
                                  "abbreviation": "aec",
                                  "recoveryServicesGeo": "uac",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "uaenorth": {
                                  "abbreviation": "aen",
                                  "recoveryServicesGeo": "uan",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "uksouth": {
                                  "abbreviation": "uks",
                                  "recoveryServicesGeo": "uks",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "ukwest": {
                                  "abbreviation": "ukw",
                                  "recoveryServicesGeo": "ukw",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "westcentralus": {
                                  "abbreviation": "uswc",
                                  "recoveryServicesGeo": "wcus",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                },
                                "westeurope": {
                                  "abbreviation": "euw",
                                  "recoveryServicesGeo": "we",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "westindia": {
                                  "abbreviation": "inw",
                                  "recoveryServicesGeo": "inw",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "westus": {
                                  "abbreviation": "usw",
                                  "recoveryServicesGeo": "wus",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                },
                                "westus2": {
                                  "abbreviation": "usw2",
                                  "recoveryServicesGeo": "wus2",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                },
                                "westus3": {
                                  "abbreviation": "usw3",
                                  "recoveryServicesGeo": "wus3",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                }
                              },
                              "AzureUSGovernment": {
                                "usdodcentral": {
                                  "abbreviation": "dodc",
                                  "recoveryServicesGeo": "udc",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "usdodeast": {
                                  "abbreviation": "dode",
                                  "recoveryServicesGeo": "ude",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "usgovarizona": {
                                  "abbreviation": "az",
                                  "recoveryServicesGeo": "uga",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                },
                                "usgovtexas": {
                                  "abbreviation": "tx",
                                  "recoveryServicesGeo": "ugt",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "usgovvirginia": {
                                  "abbreviation": "va",
                                  "recoveryServicesGeo": "ugv",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                }
                              }
                            },
                            "$fxv#1": {
                              "actionGroups": "ag",
                              "applicationGroups": "vdag",
                              "applicationInsights": "appi",
                              "appServicePlans": "asp",
                              "automationAccounts": "aa",
                              "availabilitySets": "avail",
                              "azureFirewalls": "afw",
                              "bastionHosts": "bas",
                              "computeGallieries": "cg",
                              "dataCollectionEndpoints": "dce",
                              "dataCollectionRuleAssociations": "dcra",
                              "dataCollectionRules": "dcr",
                              "diagnosticSettings": "diag",
                              "diskAccesses": "da",
                              "diskEncryptionSets": "des",
                              "disks": "disk",
                              "firewallPolicies": "afwp",
                              "functionApps": "func",
                              "hostPools": "vdpool",
                              "ipConfigurations": "ipconf",
                              "keyVaults": "kv",
                              "localNetworkGateways": "lgw",
                              "logAnalyticsWorkspaces": "log",
                              "netAppAccounts": "naa",
                              "netAppAccountsCapacityPools": "cp",
                              "networkInterfaces": "nic",
                              "networkSecurityGroups": "nsg",
                              "networkWatchers": "nw",
                              "networkWatchersFlowLogs": "fl",
                              "privateEndpoints": "pe",
                              "privateLinkScopes": "pls",
                              "publicIPAddresses": "pip",
                              "recoveryServicesVaults": "rsv",
                              "remoteApplicationGroups": "vdag",
                              "resourceGroups": "rg",
                              "routeTables": "rt",
                              "scalingPlans": "vdscaling",
                              "storageAccounts": "st",
                              "subnets": "snet",
                              "userAssignedIdentities": "id",
                              "virtualMachines": "vm",
                              "virtualNetworkGateways": "vgw",
                              "virtualNetworks": "vnet",
                              "workspaces": "vdws"
                            },
                            "directionShortNames": {
                              "east": "e",
                              "eastcentral": "ec",
                              "north": "n",
                              "northcentral": "nc",
                              "south": "s",
                              "southcentral": "sc",
                              "west": "w",
                              "westcentral": "wc"
                            },
                            "locations": "[coalesce(tryGet(variables('$fxv#0'), environment().name), createObject(format('{0}', parameters('location')), createObject('abbreviation', variables('directionShortNames')[skip(parameters('location'), sub(length(parameters('location')), 5))], 'timeDifference', if(contains(parameters('location'), 'east'), '-5:00', if(contains(parameters('location'), 'west'), '-8:00', '0:00')), 'timeZone', if(contains(parameters('location'), 'east'), 'Eastern Standard Time', if(contains(parameters('location'), 'west'), 'Pacific Standard Time', 'GMT Standard Time')))))]",
                            "locationAbbreviation": "[variables('locations')[parameters('location')].abbreviation]",
                            "resourceAbbreviations": "[variables('$fxv#1')]",
                            "tokens": {
                              "resource": "resource_token",
                              "service": "service_token"
                            },
                            "namingConvention": "[format('{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}', toLower(parameters('identifier')), parameters('delimiter'), parameters('environmentAbbreviation'), parameters('delimiter'), variables('locationAbbreviation'), parameters('delimiter'), parameters('networkName'), parameters('delimiter'), variables('tokens').resource, if(empty(parameters('stampIndex')), '', format('{0}{1}', parameters('delimiter'), parameters('stampIndex'))))]",
                            "namingConvention_Service": "[format('{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}', toLower(parameters('identifier')), parameters('delimiter'), parameters('environmentAbbreviation'), parameters('delimiter'), variables('locationAbbreviation'), parameters('delimiter'), parameters('networkName'), parameters('delimiter'), variables('tokens').service, parameters('delimiter'), variables('tokens').resource, if(empty(parameters('stampIndex')), '', format('{0}{1}', parameters('delimiter'), parameters('stampIndex'))))]",
                            "names": {
                              "actionGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').actionGroups)]",
                              "applicationGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').applicationGroups)]",
                              "applicationInsights": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').applicationInsights)]",
                              "appServicePlan": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').appServicePlans)]",
                              "automationAccount": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').automationAccounts)]",
                              "automationAccountDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                              "automationAccountNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                              "automationAccountPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                              "availabilitySet": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').availabilitySets)]",
                              "azureFirewall": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').azureFirewalls)]",
                              "azureFirewallPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), variables('tokens').service, variables('resourceAbbreviations').azureFirewalls)]",
                              "azureFirewallPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').publicIPAddresses, parameters('delimiter'), variables('resourceAbbreviations').azureFirewalls))]",
                              "azureFirewallDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').azureFirewalls)]",
                              "azureFirewallPolicy": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').firewallPolicies)]",
                              "bastionHost": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').bastionHosts)]",
                              "bastionHostDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                              "bastionHostNetworkSecurityGroup": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkSecurityGroups), variables('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                              "bastionHostNetworkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').networkSecurityGroups, parameters('delimiter'), variables('resourceAbbreviations').bastionHosts))]",
                              "bastionHostPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), variables('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                              "bastionHostPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').publicIPAddresses, parameters('delimiter'), variables('resourceAbbreviations').bastionHosts))]",
                              "computeGallery": "[replace(replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').computeGallieries), parameters('delimiter'), if(empty(parameters('delimiter')), '', '_'))]",
                              "dataCollectionEndpoint": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').dataCollectionEndpoints)]",
                              "dataCollectionRuleAssociation": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').dataCollectionRuleAssociations)]",
                              "dataCollectionRule": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').dataCollectionRules)]",
                              "diskAccess": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').diskAccesses)]",
                              "diskAccessNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').diskAccesses)]",
                              "diskAccessPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').diskAccesses)]",
                              "diskEncryptionSet": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').diskEncryptionSets)]",
                              "functionApp": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').functionApps)]",
                              "functionAppNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').functionApps)]",
                              "functionAppPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').functionApps)]",
                              "hostPool": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').hostPools)]",
                              "hostPoolDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').hostPools)]",
                              "hostPoolNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').hostPools)]",
                              "hostPoolPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').hostPools)]",
                              "keyVault": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').keyVaults)]",
                              "keyVaultDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').keyVaults)]",
                              "keyVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').keyVaults)]",
                              "keyVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').keyVaults)]",
                              "localNetworkGateway": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').localNetworkGateways)]",
                              "logAnalyticsWorkspace": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
                              "logAnalyticsWorkspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
                              "netAppAccount": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').netAppAccounts)]",
                              "netAppAccountCapacityPool": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').netAppAccountsCapacityPools), variables('tokens').service, variables('resourceAbbreviations').netAppAccounts)]",
                              "netAppAccountSmbServer": "[replace(replace(replace(replace(variables('namingConvention'), variables('tokens').resource, ''), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), parameters('delimiter'), '')]",
                              "networkSecurityGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').networkSecurityGroups)]",
                              "networkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').networkSecurityGroups)]",
                              "networkWatcherFlowLogsNetworkSecurityGroup": "[replace(variables('namingConvention'), variables('tokens').resource, format('{0}{1}{2}{3}{4}', variables('resourceAbbreviations').networkWatchers, parameters('delimiter'), variables('resourceAbbreviations').networkWatchersFlowLogs, parameters('delimiter'), variables('resourceAbbreviations').networkSecurityGroups))]",
                              "networkWatcherFlowLogsVirtualNetwork": "[replace(variables('namingConvention'), variables('tokens').resource, format('{0}{1}{2}{3}{4}', variables('resourceAbbreviations').networkWatchers, parameters('delimiter'), variables('resourceAbbreviations').networkWatchersFlowLogs, parameters('delimiter'), variables('resourceAbbreviations').virtualNetworks))]",
                              "privateLinkScope": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').privateLinkScopes)]",
                              "privateLinkScopeNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').privateLinkScopes)]",
                              "privateLinkScopePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').privateLinkScopes)]",
                              "recoveryServicesVault": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').recoveryServicesVaults)]",
                              "recoveryServicesVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').recoveryServicesVaults)]",
                              "recoveryServicesVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').recoveryServicesVaults)]",
                              "resourceGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').resourceGroups)]",
                              "routeTable": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').routeTables)]",
                              "scalingPlan": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').scalingPlans)]",
                              "scalingPlanDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').scalingPlans)]",
                              "storageAccount": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').storageAccounts)]",
                              "storageAccountBlobDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}blob', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "storageAccountBlobNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}blob', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "storageAccountBlobPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}blob', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "storageAccountFileDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}file', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "storageAccountFileNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}file', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "storageAccountFilePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}file', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "storageAccountQueueDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}queue', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "storageAccountQueueNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}queue', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "storageAccountQueuePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}queue', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "storageAccountTableDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}table', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "storageAccountTableNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}table', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "storageAccountTablePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}table', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                              "subnet": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').subnets)]",
                              "userAssignedIdentity": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').userAssignedIdentities)]",
                              "virtualMachine": "[replace(replace(replace(replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').virtualMachines), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), parameters('delimiter'), '')]",
                              "virtualMachineDisk": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').disks), variables('tokens').service, format('{0}', variables('resourceAbbreviations').virtualMachines))]",
                              "virtualMachineNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').virtualMachines)]",
                              "virtualMachineNetworkInterfaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').networkInterfaces, parameters('delimiter'), variables('resourceAbbreviations').virtualMachines))]",
                              "virtualNetwork": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').virtualNetworks)]",
                              "virtualNetworkDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').virtualNetworks)]",
                              "virtualNetworkGateway": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').virtualNetworkGateways)]",
                              "workspace": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').workspaces)]",
                              "workspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').workspaces)]",
                              "workspaceNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').workspaces)]",
                              "workspacePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').workspaces)]"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "delimiter": {
                              "type": "string",
                              "value": "[parameters('delimiter')]"
                            },
                            "locations": {
                              "type": "object",
                              "value": "[variables('locations')]"
                            },
                            "names": {
                              "type": "object",
                              "value": "[variables('names')]"
                            },
                            "resourceAbbreviations": {
                              "type": "object",
                              "value": "[variables('resourceAbbreviations')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('private-dns-zones-{0}', parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "12115812372137973423"
                            }
                          },
                          "variables": {
                            "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]",
                            "privateDnsZoneNames": "[union(createArray(format('privatelink.agentsvc.azure-automation.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureAutomation'), environment().name), variables('cloudSuffix'))), format('privatelink.azure-automation.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureAutomation'), environment().name), variables('cloudSuffix'))), format('privatelink.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureWebSites'), environment().name), format('appservice.{0}', variables('cloudSuffix')))), format('scm.privatelink.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureWebSites'), environment().name), format('appservice.{0}', variables('cloudSuffix')))), format('privatelink.wvd.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureVirtualDesktop'), environment().name), variables('cloudSuffix'))), format('privatelink-global.wvd.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureVirtualDesktop'), environment().name), variables('cloudSuffix'))), format('privatelink.file.{0}', environment().suffixes.storage), format('privatelink.queue.{0}', environment().suffixes.storage), format('privatelink.table.{0}', environment().suffixes.storage), format('privatelink.blob.{0}', environment().suffixes.storage), format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore')), format('privatelink.monitor.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_Monitor'), environment().name), variables('cloudSuffix'))), format('privatelink.ods.opinsights.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_Monitor'), environment().name), variables('cloudSuffix'))), format('privatelink.oms.opinsights.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_Monitor'), environment().name), variables('cloudSuffix'))), format('privatelink{0}', environment().suffixes.sqlServerHostname)), createArray())]",
                            "privateDnsZoneSuffixes_AzureAutomation": {
                              "AzureCloud": "net",
                              "AzureUSGovernment": "us"
                            },
                            "privateDnsZoneSuffixes_AzureVirtualDesktop": {
                              "AzureCloud": "microsoft.com",
                              "AzureUSGovernment": "azure.us"
                            },
                            "privateDnsZoneSuffixes_AzureWebSites": {
                              "AzureCloud": "azurewebsites.net",
                              "AzureUSGovernment": "azurewebsites.us"
                            },
                            "privateDnsZoneSuffixes_Monitor": {
                              "AzureCloud": "azure.com",
                              "AzureUSGovernment": "azure.us"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "names": {
                              "type": "array",
                              "value": "[variables('privateDnsZoneNames')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "delimiter": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[0].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.delimiter.value]"
                    },
                    "locationProperties": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[0].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locations.value[parameters('location')]]"
                    },
                    "mlzTags": {
                      "type": "object",
                      "value": "[variables('mlzTags')]"
                    },
                    "privateDnsZones": {
                      "type": "array",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
                    },
                    "resourceAbbreviations": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[0].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceAbbreviations.value]"
                    },
                    "tiers": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('networks'))]",
                        "input": {
                          "name": "[parameters('networks')[copyIndex()].name]",
                          "shortName": "[parameters('networks')[copyIndex()].shortName]",
                          "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                          "nsgDiagLogs": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'nsgDiagLogs'), createArray())]",
                          "nsgRules": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'nsgRules'), createArray())]",
                          "vnetAddressPrefix": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'vnetAddressPrefix'), '')]",
                          "vnetDiagLogs": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'vnetDiagLogs'), createArray())]",
                          "vnetDiagMetrics": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'vnetDiagMetrics'), createArray())]",
                          "subnetAddressPrefix": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'subnetAddressPrefix'), '')]",
                          "namingConvention": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[copyIndex()].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[not(empty(parameters('virtualNetworkAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-rg-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "name": {
                    "value": "[format('{0}{1}network', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.resourceGroup, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.delimiter.value)]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "17739099961151144722"
                    }
                  },
                  "parameters": {
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject()), parameters('mlzTags'))]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
                    },
                    "tags": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('virtualNetworkAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-network-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "additionalSubnets": {
                    "value": "[parameters('additionalSubnets')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.networkSecurityGroup]"
                  },
                  "networkSecurityGroupRules": {
                    "value": "[parameters('networkSecurityGroupRules')]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "routeTableName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.routeTable]"
                  },
                  "routeTableRouteNextHopIpAddress": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').ipConfigurations[0].properties.privateIPAddress]"
                  },
                  "subnetAddressPrefix": {
                    "value": "[parameters('subnetAddressPrefix')]"
                  },
                  "subnetName": "[if(empty(parameters('subnetName')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.subnet), createObject('value', parameters('subnetName')))]",
                  "subscriptionId": {
                    "value": "[variables('subscriptionId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualNetworkAddressPrefix": {
                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention.virtualNetwork]"
                  },
                  "vNetDnsServers": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01').dhcpOptions.dnsServers]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "8603652955642984705"
                    }
                  },
                  "parameters": {
                    "additionalSubnets": {
                      "type": "array"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "networkSecurityGroupRules": {
                      "type": "array"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "routeTableName": {
                      "type": "string"
                    },
                    "routeTableRouteNextHopIpAddress": {
                      "type": "string"
                    },
                    "subnetAddressPrefix": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "vNetDnsServers": {
                      "type": "array"
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "additionalSubnets": {
                            "value": "[parameters('additionalSubnets')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          },
                          "networkSecurityGroupRules": {
                            "value": "[parameters('networkSecurityGroupRules')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "routeTableName": {
                            "value": "[parameters('routeTableName')]"
                          },
                          "routeTableRouteNextHopIpAddress": {
                            "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                          },
                          "subnetAddressPrefix": {
                            "value": "[parameters('subnetAddressPrefix')]"
                          },
                          "subnetName": {
                            "value": "[parameters('subnetName')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualNetworkAddressPrefix": {
                            "value": "[parameters('virtualNetworkAddressPrefix')]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "vNetDnsServers": {
                            "value": "[parameters('vNetDnsServers')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "10595135574443822289"
                            }
                          },
                          "parameters": {
                            "additionalSubnets": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            },
                            "networkSecurityGroupRules": {
                              "type": "array"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "routeTableName": {
                              "type": "string"
                            },
                            "routeTableRouteNextHopIpAddress": {
                              "type": "string"
                            },
                            "subnetAddressPrefix": {
                              "type": "string"
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "vNetDnsServers": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "delegations": {
                              "AzureNetAppFiles": [
                                {
                                  "name": "Microsoft.Netapp.volumes",
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/delegations', parameters('virtualNetworkName'), 'AzureNetAppFiles', 'delegation')]",
                                  "properties": {
                                    "serviceName": "Microsoft.Netapp/volumes"
                                  },
                                  "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                                }
                              ],
                              "FunctionAppOutbound": [
                                {
                                  "name": "Microsoft.Web/sites",
                                  "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/delegations', parameters('virtualNetworkName'), 'FunctionAppOutbound', 'delegation')]",
                                  "properties": {
                                    "serviceName": "Microsoft.Web/serverfarms"
                                  },
                                  "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                                }
                              ]
                            },
                            "subnets": "[union(createArray(createObject('name', parameters('subnetName'), 'properties', createObject('addressPrefix', parameters('subnetAddressPrefix')))), parameters('additionalSubnets'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkSecurityGroup",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkSecurityGroupName')]"
                                  },
                                  "securityRules": {
                                    "value": "[parameters('networkSecurityGroupRules')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "789887257637580479"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "securityRules": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkSecurityGroups",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkSecurityGroups'), createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "securityRules": "[parameters('securityRules')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "routeTable",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "disableBgpRoutePropagation": {
                                    "value": true
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('routeTableName')]"
                                  },
                                  "routeNextHopIpAddress": {
                                    "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "4179260279635804537"
                                    }
                                  },
                                  "parameters": {
                                    "disableBgpRoutePropagation": {
                                      "type": "bool"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "routeAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "0.0.0.0/0"
                                    },
                                    "routeName": {
                                      "type": "string",
                                      "defaultValue": "default_route"
                                    },
                                    "routeNextHopIpAddress": {
                                      "type": "string"
                                    },
                                    "routeNextHopType": {
                                      "type": "string",
                                      "defaultValue": "VirtualAppliance"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/routeTables",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/routeTables'), createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                        "routes": [
                                          {
                                            "name": "[parameters('routeName')]",
                                            "properties": {
                                              "addressPrefix": "[parameters('routeAddressPrefix')]",
                                              "nextHopIpAddress": "[parameters('routeNextHopIpAddress')]",
                                              "nextHopType": "[parameters('routeNextHopType')]"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "virtualNetwork",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "addressPrefix": {
                                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('virtualNetworkName')]"
                                  },
                                  "subnets": {
                                    "copy": [
                                      {
                                        "name": "value",
                                        "count": "[length(variables('subnets'))]",
                                        "input": "[createObject('name', variables('subnets')[copyIndex('value')].name, 'properties', createObject('addressPrefix', variables('subnets')[copyIndex('value')].properties.addressPrefix, 'delegations', coalesce(tryGet(variables('delegations'), variables('subnets')[copyIndex('value')].name), createArray()), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value), 'routeTable', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value), 'privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled'))]"
                                      }
                                    ]
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "vNetDnsServers": {
                                    "value": "[parameters('vNetDnsServers')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "8506935914125613538"
                                    }
                                  },
                                  "parameters": {
                                    "addressPrefix": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "subnets": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "vNetDnsServers": {
                                      "type": "array"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/virtualNetworks'), createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "addressSpace": {
                                          "addressPrefixes": [
                                            "[parameters('addressPrefix')]"
                                          ]
                                        },
                                        "subnets": "[parameters('subnets')]",
                                        "dhcpOptions": "[if(empty(parameters('vNetDnsServers')), null(), createObject('dnsServers', parameters('vNetDnsServers')))]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "addressPrefix": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').addressSpace.addressPrefixes[0]]"
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "value": "[parameters('vNetDnsServers')]"
                                    },
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    },
                                    "subnets": {
                                      "type": "array",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').subnets]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup')]",
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'routeTable')]"
                              ]
                            }
                          ],
                          "outputs": {
                            "networkSecurityGroupName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.name.value]"
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                            },
                            "subnets": {
                              "type": "array",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value]"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.addressPrefix.value]"
                            },
                            "virtualNetworkName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.name.value]"
                            },
                            "virtualNetworkResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-spoke-peering-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "hubVirtualNetworkResourceId": {
                            "value": "[parameters('hubVirtualNetworkResourceId')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "spokeShortName": {
                            "value": "[parameters('workloadShortName')]"
                          },
                          "spokeVirtualNetworkName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "16138494685201369814"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "hubVirtualNetworkResourceId": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "spokeShortName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkName": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('peer-{0}-to-hub-{1}', parameters('spokeShortName'), parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                                  },
                                  "virtualNetworkName": {
                                    "value": "[parameters('spokeVirtualNetworkName')]"
                                  },
                                  "virtualNetworkPeerName": {
                                    "value": "[format('to-{0}', split(parameters('hubVirtualNetworkResourceId'), '/')[8])]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "15104073959466834076"
                                    }
                                  },
                                  "parameters": {
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    },
                                    "virtualNetworkName": {
                                      "type": "string"
                                    },
                                    "virtualNetworkPeerName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('virtualNetworkPeerName'))]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-hub-peering-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "hubVirtualNetworkName": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]"
                          },
                          "resourceGroupName": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]"
                          },
                          "spokeShortName": {
                            "value": "[parameters('workloadShortName')]"
                          },
                          "spokeVirtualNetworkResourceId": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value]"
                          },
                          "subscriptionId": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "3063202529503134782"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "hubVirtualNetworkName": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "spokeShortName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkResourceId": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('peer-hub-to-{0}-{1}', parameters('spokeShortName'), parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('spokeVirtualNetworkResourceId')]"
                                  },
                                  "virtualNetworkName": {
                                    "value": "[parameters('hubVirtualNetworkName')]"
                                  },
                                  "virtualNetworkPeerName": {
                                    "value": "[format('to-{0}', split(parameters('spokeVirtualNetworkResourceId'), '/')[8])]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "15104073959466834076"
                                    }
                                  },
                                  "parameters": {
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    },
                                    "virtualNetworkName": {
                                      "type": "string"
                                    },
                                    "virtualNetworkPeerName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('virtualNetworkPeerName'))]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "networkSecurityGroupName": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupName.value]"
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupResourceId.value]"
                    },
                    "subnets": {
                      "type": "array",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value]"
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-spoke-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('virtualNetworkAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "resourceAbbreviations": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceAbbreviations.value]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].id]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tier": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "12418522013927932955"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "resourceAbbreviations": {
                      "type": "object"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "tier": {
                      "type": "object"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "environmentAbbreviation": {
                            "value": "[parameters('environmentAbbreviation')]"
                          },
                          "keyVaultPrivateDnsZoneResourceId": {
                            "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "resourceAbbreviations": {
                            "value": "[parameters('resourceAbbreviations')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "tier": {
                            "value": "[parameters('tier')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "1244555501661890727"
                            }
                          },
                          "parameters": {
                            "diskEncryptionKeyExpirationInDays": {
                              "type": "int",
                              "defaultValue": 30
                            },
                            "environmentAbbreviation": {
                              "type": "string"
                            },
                            "keyVaultPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "resourceAbbreviations": {
                              "type": "object"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "tier": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "keyVaultPrivateEndpointName": "[parameters('tier').namingConvention.keyVaultPrivateEndpoint]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id))]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.KeyVault/vaults'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "enabledForDeployment": false,
                                "enabledForDiskEncryption": false,
                                "enabledForTemplateDeployment": false,
                                "enablePurgeProtection": true,
                                "enableRbacAuthorization": true,
                                "enableSoftDelete": true,
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "defaultAction": "Deny",
                                  "ipRules": [],
                                  "virtualNetworkRules": []
                                },
                                "publicNetworkAccess": "Disabled",
                                "sku": {
                                  "family": "A",
                                  "name": "premium"
                                },
                                "softDeleteRetentionInDays": "[if(or(equals(parameters('environmentAbbreviation'), 'dev'), equals(parameters('environmentAbbreviation'), 'test')), 7, 90)]",
                                "tenantId": "[subscription().tenantId]"
                              }
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'DiskEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA-HSM",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'StorageEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA-HSM",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[variables('keyVaultPrivateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('tier').namingConvention.keyVaultNetworkInterface]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('keyVaultPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]",
                                      "groupIds": [
                                        "vault"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'DiskEncryptionKey')]",
                                "[resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'StorageEncryptionKey')]",
                                "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', variables('keyVaultPrivateEndpointName'), format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'DiskEncryptionKey')]",
                                "[resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'StorageEncryptionKey')]",
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName'))]",
                                "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "keyUriWithVersion": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
                            },
                            "keyVaultResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]"
                            },
                            "keyVaultName": {
                              "type": "string",
                              "value": "[format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id))]"
                            },
                            "keyVaultUri": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id))), '2022-07-01').vaultUri]"
                            },
                            "networkInterfaceResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName')), '2023-04-01').networkInterfaces[0].id]"
                            },
                            "storageKeyName": {
                              "type": "string",
                              "value": "StorageEncryptionKey"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "diskEncryptionSetName": {
                            "value": "[parameters('tier').namingConvention.diskEncryptionSet]"
                          },
                          "keyUrl": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyUriWithVersion.value]"
                          },
                          "keyVaultResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "workloadShortName": {
                            "value": "[parameters('workloadShortName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "12106267472290920648"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "diskEncryptionSetName": {
                              "type": "string"
                            },
                            "keyUrl": {
                              "type": "string"
                            },
                            "keyVaultResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "workloadShortName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/diskEncryptionSets",
                              "apiVersion": "2023-04-02",
                              "name": "[parameters('diskEncryptionSetName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), createObject()), parameters('mlzTags'))]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "activeKey": {
                                  "sourceVault": {
                                    "id": "[parameters('keyVaultResourceId')]"
                                  },
                                  "keyUrl": "[parameters('keyUrl')]"
                                },
                                "encryptionType": "EncryptionAtRestWithPlatformAndCustomerKeys",
                                "rotationToLatestKeyVersionEnabled": true
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('assign-role-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')), '2023-04-02', 'full').identity.principalId]"
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceGroup().id]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "7891675450851212838"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-id-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityName": {
                            "value": "[parameters('tier').namingConvention.userAssignedIdentity]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "7737700727160303532"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('userAssignedIdentityName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject()), parameters('mlzTags'))]"
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                              "name": "[guid(parameters('userAssignedIdentityName'), 'e147488a-f6f5-4113-8e2d-b22465e65bf6', parameters('keyVaultName'))]",
                              "properties": {
                                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2018-11-30').principalId]",
                                "principalType": "ServicePrincipal",
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "diskEncryptionSetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                    },
                    "keyVaultUri": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                    },
                    "keyVaultResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "value": [
                        "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceId.value]"
                      ]
                    },
                    "storageKeyName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('virtualNetworkAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-storage-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "blobsPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                  },
                  "filesPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.file.{0}', environment().suffixes.storage))]"
                  },
                  "keyVaultUri": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logStorageSkuName": {
                    "value": "[parameters('logStorageSkuName')]"
                  },
                  "mlzTags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
                  },
                  "queuesPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.queue.{0}', environment().suffixes.storage))]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].id]"
                  },
                  "tablesPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.table.{0}', environment().suffixes.storage))]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tier": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "15266859505449194876"
                    }
                  },
                  "parameters": {
                    "blobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "filesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "logStorageSkuName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "queuesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tablesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "tier": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "storage",
                      "subscriptionId": "[parameters('tier').subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "blobsPrivateDnsZoneResourceId": {
                            "value": "[parameters('blobsPrivateDnsZoneResourceId')]"
                          },
                          "filesPrivateDnsZoneResourceId": {
                            "value": "[parameters('filesPrivateDnsZoneResourceId')]"
                          },
                          "keyVaultUri": {
                            "value": "[parameters('keyVaultUri')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "queuesPrivateDnsZoneResourceId": {
                            "value": "[parameters('queuesPrivateDnsZoneResourceId')]"
                          },
                          "skuName": {
                            "value": "[parameters('logStorageSkuName')]"
                          },
                          "storageEncryptionKeyName": {
                            "value": "[parameters('storageEncryptionKeyName')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tablesPrivateDnsZoneResourceId": {
                            "value": "[parameters('tablesPrivateDnsZoneResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "tier": {
                            "value": "[parameters('tier')]"
                          },
                          "userAssignedIdentityResourceId": {
                            "value": "[parameters('userAssignedIdentityResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "1051848627278772577"
                            }
                          },
                          "parameters": {
                            "blobsPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "filesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "keyVaultUri": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "queuesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "skuName": {
                              "type": "string"
                            },
                            "storageEncryptionKeyName": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tablesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "tier": {
                              "type": "object"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "subResources": [
                              {
                                "id": "[parameters('blobsPrivateDnsZoneResourceId')]",
                                "nic": "[format('{0}', parameters('tier').namingConvention.storageAccountBlobNetworkInterface)]",
                                "pe": "[format('{0}', parameters('tier').namingConvention.storageAccountBlobPrivateEndpoint)]"
                              },
                              {
                                "id": "[parameters('filesPrivateDnsZoneResourceId')]",
                                "nic": "[format('{0}', parameters('tier').namingConvention.storageAccountFileNetworkInterface)]",
                                "pe": "[format('{0}', parameters('tier').namingConvention.storageAccountFilePrivateEndpoint)]"
                              },
                              {
                                "id": "[parameters('queuesPrivateDnsZoneResourceId')]",
                                "nic": "[format('{0}', parameters('tier').namingConvention.storageAccountQueueNetworkInterface)]",
                                "pe": "[format('{0}', parameters('tier').namingConvention.storageAccountQueuePrivateEndpoint)]"
                              },
                              {
                                "id": "[parameters('tablesPrivateDnsZoneResourceId')]",
                                "nic": "[format('{0}', parameters('tier').namingConvention.storageAccountTableNetworkInterface)]",
                                "pe": "[format('{0}', parameters('tier').namingConvention.storageAccountTablePrivateEndpoint)]"
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-01-01",
                              "name": "[uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id)]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject()), parameters('mlzTags'))]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "kind": "StorageV2",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "properties": {
                                "accessTier": "Hot",
                                "allowBlobPublicAccess": false,
                                "allowCrossTenantReplication": false,
                                "allowedCopyScope": "PrivateLink",
                                "allowSharedKeyAccess": false,
                                "defaultToOAuthAuthentication": false,
                                "dnsEndpointType": "Standard",
                                "encryption": {
                                  "identity": {
                                    "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId')]"
                                  },
                                  "keySource": "Microsoft.KeyVault",
                                  "keyvaultproperties": {
                                    "keyvaulturi": "[parameters('keyVaultUri')]",
                                    "keyname": "[parameters('storageEncryptionKeyName')]"
                                  },
                                  "requireInfrastructureEncryption": true,
                                  "services": {
                                    "blob": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "file": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "queue": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "table": {
                                      "keyType": "Account",
                                      "enabled": true
                                    }
                                  }
                                },
                                "minimumTlsVersion": "TLS1_2",
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "virtualNetworkRules": [],
                                  "ipRules": [],
                                  "defaultAction": "Deny"
                                },
                                "publicNetworkAccess": "Disabled",
                                "supportsHttpsTrafficOnly": true
                              }
                            },
                            {
                              "copy": {
                                "name": "privateEndpoints",
                                "count": "[length(variables('subResources'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[variables('subResources')[copyIndex()].pe]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "customNetworkInterfaceName": "[variables('subResources')[copyIndex()].nic]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('subResources')[copyIndex()].pe]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id))]",
                                      "groupIds": [
                                        "[split(split(variables('subResources')[copyIndex()].id, '/')[8], '.')[1]]"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneGroups",
                                "count": "[length(variables('subResources'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', variables('subResources')[copyIndex()].pe, uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[variables('subResources')[copyIndex()].id]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('subResources')[copyIndex()].pe)]",
                                "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id))]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "copy": {
                                "count": "[length(variables('subResources'))]",
                                "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', variables('subResources')[copyIndex()].pe), '2023-04-01').networkInterfaces[0].id]"
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.networkInterfaceResourceIds.value]"
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('virtualNetworkAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-diag-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deployActivityLogDiagnosticSetting": {
                    "value": "[parameters('deployActivityLogDiagnosticSetting')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deployNetworkWatcherTrafficAnalytics": {
                    "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                  },
                  "keyVaultDiagnosticLogs": {
                    "value": "[parameters('keyVaultDiagnosticLogs')]"
                  },
                  "keyVaultDiagnosticMetrics": {
                    "value": "[parameters('keyVaultDiagnosticMetrics')]"
                  },
                  "keyVaultName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "networkInterfaceDiagnosticsMetrics": {
                    "value": "[parameters('networkInterfaceDiagnosticsMetrics')]"
                  },
                  "networkInterfaceResourceIds": {
                    "value": "[union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceIds.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceIds.value)]"
                  },
                  "networkSecurityGroupDiagnosticsLogs": {
                    "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupName.value]"
                  },
                  "networkWatcherFlowLogsRetentionDays": {
                    "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                  },
                  "networkWatcherFlowLogsType": {
                    "value": "[parameters('networkWatcherFlowLogsType')]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "storageAccountResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountResourceId.value]"
                  },
                  "tiers": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
                  },
                  "virtualNetworkDiagnosticsLogs": {
                    "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                  },
                  "virtualNetworkDiagnosticsMetrics": {
                    "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "6712478118279754531"
                    }
                  },
                  "parameters": {
                    "deployActivityLogDiagnosticSetting": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deployNetworkWatcherTrafficAnalytics": {
                      "type": "bool"
                    },
                    "keyVaultDiagnosticLogs": {
                      "type": "array"
                    },
                    "keyVaultDiagnosticMetrics": {
                      "type": "array"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "networkInterfaceDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array"
                    },
                    "networkSecurityGroupDiagnosticsLogs": {
                      "type": "array"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "networkWatcherFlowLogsRetentionDays": {
                      "type": "int"
                    },
                    "networkWatcherFlowLogsType": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    },
                    "tiers": {
                      "type": "array"
                    },
                    "virtualNetworkDiagnosticsLogs": {
                      "type": "array"
                    },
                    "virtualNetworkDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('deployActivityLogDiagnosticSetting')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-activity-diags-{0}-{1}', parameters('tiers')[0].shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[0].subscriptionId]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "11844538401200280556"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "name": "[format('diag-activity-log-{0}', subscription().subscriptionId)]",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "logs": [
                                  {
                                    "category": "Administrative",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Security",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ServiceHealth",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Alert",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Recommendation",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Policy",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Autoscale",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ResourceHealth",
                                    "enabled": true
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-kv-diags-{0}-{1}', parameters('tiers')[0].shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[0].subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultDiagnosticSettingName": {
                            "value": "[parameters('tiers')[0].namingConvention.keyVaultDiagnosticSetting]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "keyVaultStorageAccountId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('keyVaultDiagnosticLogs')]"
                          },
                          "metrics": {
                            "value": "[parameters('keyVaultDiagnosticMetrics')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "16014737458307577601"
                            }
                          },
                          "parameters": {
                            "keyVaultDiagnosticSettingName": {
                              "type": "string"
                            },
                            "keyVaultName": {
                              "type": "string"
                            },
                            "keyVaultStorageAccountId": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "metrics": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                              "name": "[parameters('keyVaultDiagnosticSettingName')]",
                              "properties": {
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]",
                                "storageAccountId": "[parameters('keyVaultStorageAccountId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-nsg-diags-{0}-{1}', parameters('tiers')[0].shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[0].subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "deployNetworkWatcherTrafficAnalytics": {
                            "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                          },
                          "flowLogsName": {
                            "value": "[parameters('tiers')[0].namingConvention.networkWatcherFlowLogsNetworkSecurityGroup]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                          },
                          "networkSecurityGroupDiagnosticSettingName": {
                            "value": "[parameters('tiers')[0].namingConvention.networkSecurityGroupDiagnosticSetting]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          },
                          "networkWatcherFlowLogsRetentionDays": {
                            "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                          },
                          "networkWatcherFlowLogsType": {
                            "value": "[parameters('networkWatcherFlowLogsType')]"
                          },
                          "storageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "tiername": {
                            "value": "[parameters('tiers')[0].name]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "7553252170820965977"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "deployNetworkWatcherTrafficAnalytics": {
                              "type": "bool"
                            },
                            "flowLogsName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "networkSecurityGroupDiagnosticSettingName": {
                              "type": "string"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            },
                            "networkWatcherFlowLogsRetentionDays": {
                              "type": "int"
                            },
                            "networkWatcherFlowLogsType": {
                              "type": "string"
                            },
                            "storageAccountResourceId": {
                              "type": "string"
                            },
                            "tiername": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('networkSecurityGroupName'))]",
                              "name": "[parameters('networkSecurityGroupDiagnosticSettingName')]",
                              "properties": {
                                "logs": "[parameters('logs')]",
                                "metrics": [],
                                "storageAccountId": "[parameters('storageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              }
                            },
                            {
                              "condition": "[equals(parameters('networkWatcherFlowLogsType'), 'NetworkSecurityGroup')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-{0}-flowLogs-{1}', parameters('tiername'), parameters('deploymentNameSuffix'))]",
                              "resourceGroup": "NetworkWatcherRG",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "deployNetworkWatcherTrafficAnalytics": {
                                    "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                                  },
                                  "flowLogsName": {
                                    "value": "[parameters('flowLogsName')]"
                                  },
                                  "flowLogsRetentionDays": {
                                    "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "logAnalyticsWorkspaceResourceId": {
                                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                  },
                                  "networkWatcherName": {
                                    "value": "[format('NetworkWatcher_{0}', parameters('location'))]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[parameters('storageAccountResourceId')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "7167447529034829344"
                                    }
                                  },
                                  "parameters": {
                                    "deployNetworkWatcherTrafficAnalytics": {
                                      "type": "bool"
                                    },
                                    "flowLogsName": {
                                      "type": "string"
                                    },
                                    "flowLogsRetentionDays": {
                                      "type": "int"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "logAnalyticsWorkspaceResourceId": {
                                      "type": "string"
                                    },
                                    "networkWatcherName": {
                                      "type": "string"
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string"
                                    },
                                    "targetResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkWatchers/flowLogs",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('networkWatcherName'), parameters('flowLogsName'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "targetResourceId": "[parameters('targetResourceId')]",
                                        "enabled": true,
                                        "storageId": "[parameters('storageAccountResourceId')]",
                                        "flowAnalyticsConfiguration": {
                                          "networkWatcherFlowAnalyticsConfiguration": {
                                            "enabled": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('deployNetworkWatcherTrafficAnalytics'), null())]",
                                            "workspaceResourceId": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('logAnalyticsWorkspaceResourceId'), null())]"
                                          }
                                        },
                                        "format": {
                                          "type": "JSON",
                                          "version": 2
                                        },
                                        "retentionPolicy": {
                                          "days": "[parameters('flowLogsRetentionDays')]",
                                          "enabled": true
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-diags-{0}-{1}', parameters('tiers')[0].shortName, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[0].subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "deployNetworkWatcherTrafficAnalytics": {
                            "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                          },
                          "flowLogsName": {
                            "value": "[parameters('tiers')[0].namingConvention.networkWatcherFlowLogsVirtualNetwork]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                          },
                          "logStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "metrics": {
                            "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                          },
                          "networkWatcherFlowLogsRetentionDays": {
                            "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                          },
                          "networkWatcherFlowLogsType": {
                            "value": "[parameters('networkWatcherFlowLogsType')]"
                          },
                          "tiername": {
                            "value": "[parameters('tiers')[0].name]"
                          },
                          "virtualNetworkDiagnosticSettingName": {
                            "value": "[parameters('tiers')[0].namingConvention.virtualNetworkDiagnosticSetting]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "7600876738920372569"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "deployNetworkWatcherTrafficAnalytics": {
                              "type": "bool"
                            },
                            "flowLogsName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "logStorageAccountResourceId": {
                              "type": "string"
                            },
                            "metrics": {
                              "type": "array"
                            },
                            "networkWatcherFlowLogsRetentionDays": {
                              "type": "int"
                            },
                            "networkWatcherFlowLogsType": {
                              "type": "string"
                            },
                            "supportedClouds": {
                              "type": "array",
                              "defaultValue": [
                                "AzureCloud"
                              ]
                            },
                            "tiername": {
                              "type": "string"
                            },
                            "virtualNetworkDiagnosticSettingName": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('virtualNetworkName'))]",
                              "name": "[parameters('virtualNetworkDiagnosticSettingName')]",
                              "properties": {
                                "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[if(contains(parameters('supportedClouds'), environment().name), parameters('logs'), createArray())]",
                                "metrics": "[parameters('metrics')]"
                              }
                            },
                            {
                              "condition": "[equals(parameters('networkWatcherFlowLogsType'), 'VirtualNetwork')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-{0}-flowLogs-{1}', parameters('tiername'), parameters('deploymentNameSuffix'))]",
                              "resourceGroup": "NetworkWatcherRG",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "deployNetworkWatcherTrafficAnalytics": {
                                    "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                                  },
                                  "flowLogsName": {
                                    "value": "[parameters('flowLogsName')]"
                                  },
                                  "flowLogsRetentionDays": {
                                    "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "logAnalyticsWorkspaceResourceId": {
                                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                  },
                                  "networkWatcherName": {
                                    "value": "[format('NetworkWatcher_{0}', parameters('location'))]"
                                  },
                                  "storageAccountResourceId": {
                                    "value": "[parameters('logStorageAccountResourceId')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "7167447529034829344"
                                    }
                                  },
                                  "parameters": {
                                    "deployNetworkWatcherTrafficAnalytics": {
                                      "type": "bool"
                                    },
                                    "flowLogsName": {
                                      "type": "string"
                                    },
                                    "flowLogsRetentionDays": {
                                      "type": "int"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "logAnalyticsWorkspaceResourceId": {
                                      "type": "string"
                                    },
                                    "networkWatcherName": {
                                      "type": "string"
                                    },
                                    "storageAccountResourceId": {
                                      "type": "string"
                                    },
                                    "targetResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkWatchers/flowLogs",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('networkWatcherName'), parameters('flowLogsName'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "targetResourceId": "[parameters('targetResourceId')]",
                                        "enabled": true,
                                        "storageId": "[parameters('storageAccountResourceId')]",
                                        "flowAnalyticsConfiguration": {
                                          "networkWatcherFlowAnalyticsConfiguration": {
                                            "enabled": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('deployNetworkWatcherTrafficAnalytics'), null())]",
                                            "workspaceResourceId": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('logAnalyticsWorkspaceResourceId'), null())]"
                                          }
                                        },
                                        "format": {
                                          "type": "JSON",
                                          "version": 2
                                        },
                                        "retentionPolicy": {
                                          "days": "[parameters('flowLogsRetentionDays')]",
                                          "enabled": true
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "networkInterfaceDiagnostics",
                        "count": "[length(parameters('networkInterfaceResourceIds'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-nic-diags-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[split(parameters('networkInterfaceResourceIds')[copyIndex()], '/')[2]]",
                      "resourceGroup": "[split(parameters('networkInterfaceResourceIds')[copyIndex()], '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": []
                          },
                          "metrics": {
                            "value": "[parameters('networkInterfaceDiagnosticsMetrics')]"
                          },
                          "networkInterfaceResourceId": {
                            "value": "[parameters('networkInterfaceResourceIds')[copyIndex()]]"
                          },
                          "storageAccountResourceIds": {
                            "value": [
                              "[parameters('storageAccountResourceId')]"
                            ]
                          },
                          "tiers": {
                            "value": "[parameters('tiers')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "11731517069842306"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "metrics": {
                              "type": "array"
                            },
                            "networkInterfaceResourceId": {
                              "type": "string"
                            },
                            "storageAccountResourceIds": {
                              "type": "array"
                            },
                            "tiers": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "networkInterfaceDiagnosticSettingName": "[parameters('tiers')[variables('tierIndex')].namingConvention.virtualMachineNetworkInterfaceDiagnosticSetting]",
                            "storageAccountResourceId": "[parameters('storageAccountResourceIds')[variables('tierIndex')]]",
                            "tierIndex": "[if(contains(parameters('networkInterfaceResourceId'), '-ops-'), 1, if(contains(parameters('networkInterfaceResourceId'), '-svcs-'), 2, if(contains(parameters('networkInterfaceResourceId'), '-id-'), 3, 0)))]"
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', split(parameters('networkInterfaceResourceId'), '/')[8])]",
                              "name": "[variables('networkInterfaceDiagnosticSettingName')]",
                              "properties": {
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]",
                                "storageAccountId": "[variables('storageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(parameters('deployPolicy'), not(empty(parameters('virtualNetworkAddressPrefix'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-policy-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "policy": {
                    "value": "[parameters('policy')]"
                  },
                  "resourceGroupNames": {
                    "value": [
                      "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                    ]
                  },
                  "tiers": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
                  },
                  "windowsAdministratorsGroupMembership": {
                    "value": "[parameters('windowsAdministratorsGroupMembership')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "17222589697757635986"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "policy": {
                      "type": "string"
                    },
                    "resourceGroupNames": {
                      "type": "array"
                    },
                    "tiers": {
                      "type": "array"
                    },
                    "windowsAdministratorsGroupMembership": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "policyAssignment",
                        "count": "[length(parameters('tiers'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('assign-policy-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('tiers')[copyIndex()].subscriptionId]",
                      "resourceGroup": "[parameters('resourceGroupNames')[copyIndex()]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "builtInAssignment": {
                            "value": "[parameters('policy')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "deployRemediation": {
                            "value": false
                          },
                          "windowsAdministratorsGroupMembership": {
                            "value": "[parameters('windowsAdministratorsGroupMembership')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "13616175734793485086"
                            }
                          },
                          "parameters": {
                            "builtInAssignment": {
                              "type": "string"
                            },
                            "deployRemediation": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "windowsAdministratorsGroupMembership": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "$fxv#0": "{\r\n  \"listOfMembersToExcludeFromWindowsVMAdministratorsGroup\": {\r\n    \"value\": \"admin\"\r\n  },\r\n  \"IncludeArcMachines\": {\r\n    \"value\": \"true\"\r\n  },\r\n  \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": {\r\n    \"value\": \"1.2\"\r\n  },\r\n  \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": {\r\n    \"value\": \"Compliant\"\r\n  },\r\n  \"requiredRetentionDays\": {\r\n    \"value\": \"365\"\r\n  },\r\n  \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": {\r\n    \"value\": \"NetworkWatcherRG\"\r\n  }\r\n}",
                            "$fxv#1": "{\r\n  \"IncludeArcMachines\": {\r\n    \"value\": \"true\"\r\n  },\r\n  \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": {\r\n    \"value\": \"1.2\"\r\n  },\r\n  \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": {\r\n    \"value\": \"Compliant\"\r\n  },\r\n  \"requiredRetentionDays\": {\r\n    \"value\": \"365\"\r\n  },\r\n  \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": {\r\n    \"value\": \"NetworkWatcherRG\"\r\n  }\r\n}",
                            "$fxv#2": "{\r\n  \"IncludeArcMachines\": {\r\n    \"value\": \"false\"\r\n  },\r\n  \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": {\r\n    \"value\": \"Compliant\"\r\n  },\r\n  \"MinimumTLSVersionForWindowsServers\": {\r\n    \"value\": \"1.2\"\r\n  },\r\n  \"requiredRetentionDays\": {\r\n    \"value\": \"365\"\r\n  },\r\n  \"effect-febd0533-8e55-448f-b837-bd0e06f16469\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"allowedContainerImagesRegex-febd0533-8e55-448f-b837-bd0e06f16469\": {\r\n    \"value\": \"^(.+){0}$\"\r\n  },\r\n  \"effect-95edb821-ddaf-4404-9732-666045e056b4\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-440b515e-a580-421e-abeb-b159a61ddcbc\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-233a2a17-77ca-4fb1-9b6b-69223d272a44\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-e345eecc-fa47-480f-9e88-67dcc122b164\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"cpuLimit-e345eecc-fa47-480f-9e88-67dcc122b164\": {\r\n    \"value\": \"0\"\r\n  },\r\n  \"memoryLimit-e345eecc-fa47-480f-9e88-67dcc122b164\": {\r\n    \"value\": \"0\"\r\n  },\r\n  \"effect-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"runAsUserRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\r\n    \"value\": \"MustRunAsNonRoot\"\r\n  },\r\n  \"runAsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\r\n    \"value\": \"RunAsAny\"\r\n  },\r\n  \"supplementalGroupsRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\r\n    \"value\": \"RunAsAny\"\r\n  },\r\n  \"fsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\r\n    \"value\": \"RunAsAny\"\r\n  },\r\n  \"effect-1c6e92c9-99f0-4e55-9cf2-0c234dc48f99\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-47a1ee2f-2a2a-4576-bf2a-e0e36709c2b8\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-df49d893-a74c-421d-bc95-c663042e5b80\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-c26596ff-4d70-4e6a-9a30-c2506bd2f80c\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-511f5417-5d12-434d-ab2e-816901e72a5e\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-82985f06-dc18-4a48-bc1c-b9f4f0098cfe\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-098fc59e-46c7-4d99-9b16-64990e543d75\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\": {\r\n    \"value\": \"enabled\"\r\n  },\r\n  \"aadAuthenticationInServiceFabricMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-71ef260a-8f18-47b7-abcb-62d0673d94dc\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-862e97cf-49fc-4a5c-9de4-40d4e2e7c8eb\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-d9da03a1-f3c3-412a-9709-947156872263\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-b4ac1030-89c5-4697-8e00-28b5ba6a8811\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-ea0dfaed-95fb-448c-934e-d6e713ce393d\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-41425d9f-d1a5-499a-9932-f8ed8453932c\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-fc4d8e41-e223-45ea-9bf5-eada37891d87\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-86efb160-8de7-451d-bc08-5d475b0aadae\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-4ec52d6d-beb7-40c4-9a9e-fe753254690e\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-64d314f6-6062-4780-a861-c23e8951bee5\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1fd32ebd-e4c3-4e13-a54a-d7422d4d95f6\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-fa298e57-9444-42ba-bf04-86e8470e32c7\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1f905d99-2ab7-462c-a6b0-f709acca6c8f\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-ba769a63-b8cc-4b2d-abf6-ac33c7204be8\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-0aa61e00-0a01-4a3c-9945-e93cffedf0e6\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-47031206-ce96-41f8-861b-6a915f3de284\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-51522a96-0869-4791-82f3-981000c2c67f\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-b5ec538c-daa0-4006-8596-35468b9148e8\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-56a5ee18-2ae6-4810-86f7-18e39ce5629b\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-2e94d99a-8a36-4563-bc77-810d8893b671\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1fafeaf6-7927-4059-a50a-8eb2a7a6f2b5\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-99e9ccd8-3db9-4592-b0d1-14b1715a4d8a\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1f68a601-6e6d-4e42-babf-3f643a047ea2\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-ca91455f-eace-4f96-be59-e6e2c35b4816\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-702dd420-7fcc-42c5-afe8-4026edd20fe0\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"diagnosticsLogsInRedisCacheMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"secureTransferToStorageAccountMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-7d092e0a-7acd-40d2-a975-dca21cae48c4\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-2a1a9cdf-e04d-429a-8416-3bfb72a1b26f\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"disableUnrestrictedNetworkToStorageAccountMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-55615ac9-af46-4a59-874e-391cc3dfb490\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1b8ca024-1d5c-4dec-8995-b1a932b41780\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-53503636-bcc9-4748-9663-5348217f160f\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-40cec1dd-a100-4920-b15b-3024fe8901ab\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-a049bf77-880b-470f-ba6d-9f21c530cf83\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-ee980b6d-0eca-4501-8d54-f6290fd512c3\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1d84d5fb-01f6-4d12-ba4f-4a26081d403d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-37e0d2fe-28a5-43d6-a273-67d37d1f5606\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"identityDesignateMoreThanOneOwnerMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"diskEncryptionMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"emailNotificationToSubscriptionOwnerHighSeverityAlertsEnabledEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"functionAppDisableRemoteDebuggingMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"sqlDbEncryptionMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"vulnerabilityAssessmentOnManagedInstanceMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensurePHPVersionLatestForAPIAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"aadAuthenticationInSqlServerMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"vmssEndpointProtectionMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"vmssOsVulnerabilitiesMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"adaptiveApplicationControlsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForPostgreSQLEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"ensureJavaVersionLatestForWebAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityDesignateLessThanOwnersMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"securityContactEmailAddressForSubscriptionEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"webAppRestrictCORSAccessMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityRemoveExternalAccountWithWritePermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityRemoveExternalAccountWithReadPermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityRemoveDeprecatedAccountMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"functionAppEnforceHttpsMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"ensurePythonVersionLatestForWebAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensurePythonVersionLatestForFunctionAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensurePHPVersionLatestForWebAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensurePythonVersionLatestForAPIAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForMySQLEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"systemUpdatesMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensureJavaVersionLatestForAPIAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensureHTTPVersionLatestForWebAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"apiAppRequireLatestTlsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityEnableMFAForWritePermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensureHTTPVersionLatestForAPIAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensureJavaVersionLatestForFunctionAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"nextGenerationFirewallMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"useRbacRulesMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"webAppEnforceHttpsMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"sqlServerAuditingMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"vnetEnableDDoSProtectionMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityEnableMFAForOwnerPermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"sqlServerAdvancedDataSecurityMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"sqlManagedInstanceAdvancedDataSecurityMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"endpointProtectionMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"jitNetworkAccessMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"apiAppEnforceHttpsMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"geoRedundantStorageShouldBeEnabledForStorageAccountsEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"vmssSystemUpdatesMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"webAppDisableRemoteDebuggingMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"longtermGeoRedundantBackupEnabledAzureSQLDatabasesEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"systemConfigurationsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"ensureHTTPVersionLatestForFunctionAppEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityEnableMFAForReadPermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"containerBenchmarkMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"apiAppDisableRemoteDebuggingMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityRemoveDeprecatedAccountWithOwnerPermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"vulnerabilityAssessmentOnServerMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"webAppRequireLatestTlsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"identityRemoveExternalAccountWithOwnerPermissionsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"functionAppRequireLatestTlsMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"kubernetesServiceVersionUpToDateMonitoringEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"sqlDbVulnerabilityAssesmentMonitoringEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"membersToExcludeInLocalAdministratorsGroup\": {\r\n    \"value\": \"admin\"\r\n  },\r\n  \"PHPLatestVersionForAppServices\": {\r\n    \"value\": \"7.4\"\r\n  },\r\n  \"JavaLatestVersionForAppServices\": {\r\n    \"value\": \"11\"\r\n  },\r\n  \"WindowsPythonLatestVersionForAppServices\": {\r\n    \"value\": \"3.6\"\r\n  },\r\n  \"LinuxPythonLatestVersionForAppServices\": {\r\n    \"value\": \"3.9\"\r\n  },\r\n  \"ensureDotNetFrameworkLatestForFunctionAppEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"sqlManagedInstanceAdvancedDataSecurityEmailsMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"vulnerabilityAssessmentMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"ensureDotNetFrameworkLatestForWebAppEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"sqlServerAdvancedDataSecurityEmailsMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"microsoftIaaSAntimalwareExtensionShouldBeDeployedOnWindowsServersEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"securityCenterStandardPricingTierShouldBeSelectedEffect\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachinesEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"ensurePHPVersionLatestForFunctionAppEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"sqlManagedInstanceAdvancedDataSecurityEmailAdminsMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"securityContactPhoneNumberShouldBeProvidedForSubscriptionEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"threatDetectionTypesOnManagedInstanceMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"ensureDotNetFrameworkLatestForAPIAppEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"sqlServerAdvancedDataSecurityEmailAdminsMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"threatDetectionTypesOnServerMonitoringEffect\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachineScaleSetsEffect\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"NetworkWatcherResourceGroupName\": {\r\n    \"value\": \"NetworkWatcherRG\"\r\n  }\r\n}",
                            "$fxv#3": "{\r\n  \"effect-09024ccc-0c5f-475e-9457-b7c0d9ed487b\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0961003e-5a0a-4549-abde-af6a37f2724d\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0b15565f-aa9e-48ba-8619-45960f2c314d\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0e60b895-3786-45da-8377-9c6b4b6ac5f9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-17k78e20-9358-41c9-923c-fb736d382a12\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-1bc1795e-d44a-4d48-9b3b-6fff0fd5f9ba\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"PHPLatestVersion\": {\r\n    \"value\": \"7.3\"\r\n  },\r\n  \"effect-22bee202-a82f-4305-9a2a-6d7f44d4dedb\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-26a828e1-e88f-464e-bbb3-c134a282b9de\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-34c877ad-507e-4c82-993e-3452a6e0ad3c\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-3c735d8a-a4ba-4a3a-b7cf-db7754cf57f4\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-404c3081-a854-4457-ae30-26a93ef643f9\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-47a6b606-51aa-4496-8bb7-64b11cf66adc\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-496223c3-ad65-4ecd-878a-bae78737e9ed\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"JavaLatestVersion\": {\r\n    \"value\": \"11\"\r\n  },\r\n  \"effect-4f11b553-d42e-4e3a-89be-32ca364cad4c\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-4f4f78b8-e367-4b10-a341-d9a4ad5cf1c7\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-5c607a2e-c700-4744-8254-d77e7c9eb5e4\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-5f76cf89-fbf2-47fd-a3f4-b891fa780b60\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-6b1cbf55-e8b6-442f-ba4c-7246b6381474\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-6d555dd1-86f2-4f1c-8ed7-5abae7c6cbab\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-7008174a-fd10-4ef0-817e-fc820a951d73\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"LinuxPythonLatestVersion\": {\r\n    \"value\": \"3.8\"\r\n  },\r\n  \"effect-7238174a-fd10-4ef0-817e-fc820a951d73\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-7261b898-8a84-4db8-9e04-18527132abb3\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-74c3584d-afae-46f7-a20a-6f8adba71a16\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-86b3d65f-7626-441e-b690-81a8b71cff60\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-88999f4c-376a-45c8-bcb3-4058f713cf39\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-8c122334-9d20-4eb8-89ea-ac9a705b74ae\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-8cb6aa8b-9e41-4f4e-aa25-089a7ac2581e\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-9297c21d-2ed6-4474-b48f-163f75654ce3\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-991310cd-e9f3-47bc-b7b6-f57b557d07db\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-9b597639-28e4-48eb-b506-56b05d366257\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-9d0b6ea4-93e2-4578-bf2f-6bb17d22b4bc\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-9daedab3-fb2d-461e-b861-71790eead4f6\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-a4af4a39-4135-47fb-b175-47fbdf85311d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\": {\r\n    \"value\": \"enabled\"\r\n  },\r\n  \"effect-a70ca396-0a34-413a-88e1-b956c1e683be\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-aa633080-8b72-40c4-a2d7-d00c03e80bed\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-abfb4388-5bf4-4ad7-ba82-2cd2f41ceae9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-abfb7388-5bf4-4ad7-ba99-2cd2f41cebb9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-af6cd1bd-1635-48cb-bde7-5b15693900b9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b7ddfbdc-1260-477d-91fd-98bd9be789a6\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-c3f317a7-a95c-4547-b7e7-11017ebdf2fe\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-cb510bfd-1cba-4d9f-a230-cb0976f4bb71\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e1e5fd5d-3e4c-4ce1-8661-7d1873ae6b15\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e2c1c086-2d84-4019-bff3-c44ccd95113c\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e3576e28-8b17-4677-84c3-db2990658d64\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e8cbc669-f12d-49eb-93e7-9273119e9933\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e9c8d085-d9cc-4b17-9cdc-059f1f01f19e\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-ebb62a0c-3560-49e1-89ed-27e074e9f8ad\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-efbde977-ba53-4479-b8e9-10b957924fbf\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-f0e6e85b-9b9f-4a4b-b67b-f730d42f1b0b\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-f6de0be7-9a8a-4b8a-b349-43cf02d22f7c\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-f8456c1c-aa66-4dfb-861a-25d127b775c9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-f9d614c5-c173-4d56-95a7-b4437057d193\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-fb893a29-21bb-418c-a157-e99480ec364c\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-feedbf84-6b99-488c-acc2-71c829aa5ffc\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-3b980d31-7904-4bb7-8575-5665739a8052\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-6e2593d9-add6-4083-9c9b-4b7d2188c899\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b607c5de-e7d9-4eee-9e5c-83f1bcee4fa0\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-12430be1-6cc8-4527-a9a8-e3d38f250096\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"modeRequirement-12430be1-6cc8-4527-a9a8-e3d38f250096\": {\r\n    \"value\": \"Detection\"\r\n  },\r\n  \"effect-425bea59-a659-4cbb-8d31-34499bd030b8\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"modeRequirement-425bea59-a659-4cbb-8d31-34499bd030b8\": {\r\n    \"value\": \"Detection\"\r\n  },\r\n  \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-013e242c-8828-4970-87b3-ab247555486d\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-d38fc420-0735-4ef3-ac11-c806f651a570\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-a1181c5f-672a-477a-979a-7d58aa086233\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-308fbb08-4ab8-4e67-9b29-592e93fb94fa\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-4da35fc9-c9e7-4960-aec9-797fe7d9051d\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-523b5cd1-3e23-492f-a539-13118b6d1e3a\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-7fe3b40f-802b-4cdd-8bd4-fd799c948cc2\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-c25d9a16-bc35-4e15-a7e5-9db606bf9ed4\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b0f33259-77d7-4c9e-aac6-3aabcfae693c\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-0820b7b9-23aa-4725-a1ce-ae4558f718e5\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fab\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-358c20a6-3f9e-4f0e-97ff-c6ce485e2aac\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-5744710e-cc2f-4ee8-8809-3b11e89f4bc9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-ac4a19c2-fa67-49b4-8ae5-0b2e78c49457\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-c9d007d0-c057-4772-b18c-01e546713bcd\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-e372f825-a257-4fb8-9175-797a8a8627d6\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-d158790f-bfb0-486c-8631-2dc6b4e8e6af\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-e802a67a-daf5-4436-9ea6-f6d821dd0c5d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-a451c1ef-c6ca-483d-87ed-f49761e3ffb5\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftSql-servers-firewallRules-delete\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-delete\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-delete\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-securityRules-delete\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-securityRules-delete\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-ae89ebca-1c92-4898-ac2c-9f63decb045c\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-d26f7642-7545-4e18-9b75-8c9bbdee3a9a\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-1a4e592a-6a6e-44a5-9814-e36264ca96e7\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-7796937f-307b-4598-941c-67d3a05ebfe7\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-c5447c04-a4d7-4ba8-a263-c9ee321a6858\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-41388f1c-2db0-4c25-95b2-35d7f5ccbfa9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-b02aacc0-b073-424e-8298-42b22829ee0a\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-057d6cfe-9c4f-4a6d-bc60-14420ea1f1a9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0ec47710-77ff-4a3d-9181-6aa50af424d0\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-48af4db5-9b8b-401c-8e74-076be876a430\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-82339799-d096-41ae-8538-b108becf0970\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1b7aa243-30e4-4c9e-bca8-d0d3022b634a\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-ef2a8f2a-b3d9-49cd-a8a8-9a3aaaf647d9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-bb91dfba-c30d-4263-9add-9c2384e659a6\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-e71308d3-144b-4262-b144-efdc3cc90517\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-2bdd0062-9d75-436e-89df-487dd8e4b3c7\": {\r\n    \"value\": \"Disabled\"\r\n  },\r\n  \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-6fac406b-40ca-413b-bf8e-0bf964659c25\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-048248b0-55cd-46da-b1ff-39efd52db260\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0d134df8-db83-46fb-ad72-fe0c9428c8dd\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fb2\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\": {\r\n    \"value\": \"audit\"\r\n  },\r\n  \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-c43e4a30-77cb-48ab-a4dd-93f175c63b57\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\": {\r\n    \"value\": \"Audit\"\r\n  },\r\n  \"effect-1f314764-cb73-4fc9-b863-8eca98ac36e9\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"effect-123a3936-f020-408a-ba0c-47873faf1534\": {\r\n    \"value\": \"AuditIfNotExists\"\r\n  },\r\n  \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": {\r\n    \"value\": \"NetworkWatcherRG\"\r\n  }\r\n}",
                            "modifiedAssignment": "[if(and(equals(toLower(environment().name), toLower('AzureCloud')), equals(toLower(parameters('builtInAssignment')), toLower('IL5'))), 'NISTRev4', parameters('builtInAssignment'))]",
                            "assignmentName": "[format('{0} {1}', variables('modifiedAssignment'), resourceGroup().name)]",
                            "agentVmssAssignmentName": "[format('Deploy VMSS Agents {0}', resourceGroup().name)]",
                            "agentVmAssignmentName": "[format('Deploy VM Agents {0}', resourceGroup().name)]",
                            "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                            "lawsReaderRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('assignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', union(json(variables('$fxv#0')), createObject('listOfMembersToIncludeInWindowsVMAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership')), 'logAnalyticsWorkspaceIdforVMReporting', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]))))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', union(json(variables('$fxv#2')), createObject('logAnalyticsWorkspaceIDForVMAgents', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])), 'membersToIncludeInLocalAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership'))))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', union(json(variables('$fxv#3')), createObject('logAnalyticsWorkspaceId-f47b5582-33ec-4c5c-87c0-b010a6b2e917', createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId)), if(equals('AzureCloud', environment().name), createObject('MembersToExclude-69bf4abd-ca1e-4cf6-8b5a-762d42e61d4f', createObject('value', 'admin'), 'MembersToInclude-30f71ea1-ac77-4f26-9fc5-2d926bbd4ba7', createObject('value', parameters('windowsAdministratorsGroupMembership'))), createObject()))))[variables('modifiedAssignment')].id]",
                                "parameters": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', union(json(variables('$fxv#0')), createObject('listOfMembersToIncludeInWindowsVMAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership')), 'logAnalyticsWorkspaceIdforVMReporting', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]))))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', union(json(variables('$fxv#2')), createObject('logAnalyticsWorkspaceIDForVMAgents', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])), 'membersToIncludeInLocalAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership'))))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', union(json(variables('$fxv#3')), createObject('logAnalyticsWorkspaceId-f47b5582-33ec-4c5c-87c0-b010a6b2e917', createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId)), if(equals('AzureCloud', environment().name), createObject('MembersToExclude-69bf4abd-ca1e-4cf6-8b5a-762d42e61d4f', createObject('value', 'admin'), 'MembersToInclude-30f71ea1-ac77-4f26-9fc5-2d926bbd4ba7', createObject('value', parameters('windowsAdministratorsGroupMembership'))), createObject()))))[variables('modifiedAssignment')].parameters]"
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmssAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '75714362-cae7-409e-9b99-a8e5075b7fad')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '55f3eceb-5573-4f18-9695-226972c6d74a')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('assignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[if(empty(variables('modifiedAssignment')), '', reference(resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName')), '2020-09-01', 'full').identity.principalId)]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmssAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('deployRemediation')]",
                              "type": "Microsoft.PolicyInsights/remediations",
                              "apiVersion": "2019-07-01",
                              "name": "VM-Agent-Policy-Remediation",
                              "properties": {
                                "policyAssignmentId": "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]",
                                "resourceDiscoveryMode": "ReEvaluateCompliance"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Assign-Laws-Role-Policy-{0}', resourceGroup().name)]",
                              "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "targetResourceId": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[variables('lawsReaderRoleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "7891675450851212838"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(parameters('deployDefender'), not(empty(parameters('virtualNetworkAddressPrefix'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('set-defender-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "emailSecurityContact": {
                    "value": "[parameters('emailSecurityContact')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "12136007385622394002"
                    }
                  },
                  "parameters": {
                    "defenderPlans": {
                      "type": "array",
                      "defaultValue": [
                        "VirtualMachines"
                      ],
                      "metadata": {
                        "description": "Defender Paid protection Plans. Even if a customer selects the free sku, at least 1 paid protection plan must be specified."
                      }
                    },
                    "emailSecurityContact": {
                      "type": "string",
                      "metadata": {
                        "description": "Email address of the contact, in the form of john@doe.com"
                      }
                    },
                    "policySetDescription": {
                      "type": "string",
                      "defaultValue": "The Microsoft Cloud Security Benchmark initiative represents the policies and controls implementing security recommendations defined in Microsoft Cloud Security Benchmark v2, see https://aka.ms/azsecbm. This also serves as the Microsoft Defender for Cloud default policy initiative. You can directly assign this initiative, or manage its policies and compliance results within Microsoft Defender.",
                      "metadata": {
                        "description": "Policy Initiative description field"
                      }
                    },
                    "defenderSkuTier": {
                      "type": "string",
                      "defaultValue": "Free",
                      "metadata": {
                        "description": "[Standard/Free] The SKU for Defender. It defaults to \"Free\"."
                      }
                    }
                  },
                  "variables": {
                    "defenderPaidPlanConfig": {
                      "AzureCloud": {
                        "Api": {
                          "subPlan": "P1"
                        },
                        "appServices": {},
                        "KeyVaults": {
                          "subPlan": "PerKeyVault"
                        },
                        "Arm": {
                          "subPlan": "PerSubscription"
                        },
                        "CloudPosture": {
                          "extensions": [
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            },
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessVmScanning",
                              "isEnabled": "True"
                            },
                            {
                              "name": "EntraPermissionsManagement",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "Containers": {
                          "extensions": [
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "CosmosDbs": {},
                        "StorageAccounts": {
                          "subPlan": "DefenderForStorageV2",
                          "extensions": [
                            {
                              "name": "OnUploadMalwareScanning",
                              "isEnabled": "True",
                              "additionalExtensionProperties": {
                                "CapGBPerMonthPerStorageAccount": "5000"
                              }
                            },
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "VirtualMachines": {
                          "subPlan": "P1"
                        },
                        "SqlServerVirtualMachines": {},
                        "SqlServers": {},
                        "OpenSourceRelationalDatabases": {}
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "defenderFreeAllClouds",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[equals(parameters('defenderSkuTier'), 'Free')]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardNoSubplanNoExtensions",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), not(equals(environment().name, 'AzureCloud')))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardSubplanExtensionsAzureCloud",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), equals(environment().name, 'AzureCloud'))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]",
                        "subPlan": "[coalesce(tryGet(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'subPlan'), null())]",
                        "extensions": "[coalesce(tryGet(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'extensions'), null())]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('emailSecurityContact')))]",
                      "type": "Microsoft.Security/securityContacts",
                      "apiVersion": "2020-01-01-preview",
                      "name": "default",
                      "properties": {
                        "notificationsByRole": {
                          "roles": [
                            "AccountAdmin",
                            "Contributor",
                            "Owner",
                            "ServiceAdmin"
                          ],
                          "state": "On"
                        },
                        "alertNotifications": {
                          "state": "On"
                        },
                        "emails": "[parameters('emailSecurityContact')]"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2022-06-01",
                      "name": "Microsoft Cloud Security Benchmark",
                      "properties": {
                        "displayName": "Defender Default",
                        "description": "[parameters('policySetDescription')]",
                        "enforcementMode": "DoNotEnforce",
                        "parameters": {},
                        "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '1f3afdf9-d0c9-4c3d-847f-89da613e70a8')]"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "delimiter": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.delimiter.value]"
            },
            "diskEncryptionSetResourceId": {
              "type": "string",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value, '')]"
            },
            "dnsServers": {
              "type": "array",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), coalesce(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', split(parameters('hubVirtualNetworkResourceId'), '/')[8]), '2023-11-01'), 'dhcpOptions', 'dnsServers'), createArray()), createArray())]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value, '')]"
            },
            "locationProperties": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locationProperties.value]"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
            },
            "mlzTags": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
            },
            "namingConvention": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0].namingConvention]"
            },
            "networkSecurityGroupResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupResourceId.value]"
            },
            "privateDnsZones": {
              "type": "array",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value]"
            },
            "resourceAbbreviations": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceAbbreviations.value]"
            },
            "identifier": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01', 'full').tags.identifier]"
            },
            "storageAccountResourceId": {
              "type": "string",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountResourceId.value, '')]"
            },
            "storageEncryptionKeyName": {
              "type": "string",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value, '')]"
            },
            "subnets": {
              "type": "array",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-network-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value, createArray())]"
            },
            "tier": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value[0]]"
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "value": "[if(not(empty(parameters('virtualNetworkAddressPrefix'))), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}{2}', parameters('workloadShortName'), variables('deploymentIndex'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value, '')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-uami-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[variables('userAssignedManagedIdentityName')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "13900550142894405917"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject())]"
            }
          ],
          "outputs": {
            "clientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "domainJoinPassword": "[if(parameters('joinWindowsDomain'), createObject('value', parameters('windowsDomainAdministratorPassword')), createObject('value', 'None'))]",
          "domainJoinUserPrincipalName": "[if(parameters('joinWindowsDomain'), createObject('value', parameters('windowsDomainAdministratorUserName')), createObject('value', 'None'))]",
          "keyVaultCertificatesOfficerRoleDefinitionResourceId": {
            "value": "[variables('keyVaultCertificatesOfficer')]"
          },
          "keyVaultCryptoOfficerRoleDefinitionResourceId": {
            "value": "[variables('keyVaultCryptoOfficer')]"
          },
          "keyVaultName": {
            "value": "[take(format('{0}-{1}', variables('keyVaultName'), uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName')), variables('keyVaultName'))), 24)]"
          },
          "keyVaultPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value, lambda('name', startsWith(lambdaVariables('name'), 'privatelink.vaultcore')))[0])]"
          },
          "keyVaultSecretsOfficerRoleDefinitionResourceId": {
            "value": "[variables('keyVaultSecretsOfficer')]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "primarySiteAdministratorAccountPassword": {
            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
          },
          "primarySiteAdministratorAccountUserName": {
            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
          },
          "resourcePrefix": {
            "value": "[parameters('resourcePrefix')]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "3988240449822110223"
            }
          },
          "parameters": {
            "diskEncryptionKeyExpirationInDays": {
              "type": "int",
              "defaultValue": 30
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "securestring"
            },
            "keyVaultCertificatesOfficerRoleDefinitionResourceId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "keyVaultCryptoOfficerRoleDefinitionResourceId": {
              "type": "string"
            },
            "keyVaultSecretsOfficerRoleDefinitionResourceId": {
              "type": "string"
            },
            "localAdministratorPassword": {
              "type": "securestring"
            },
            "localAdministratorUsername": {
              "type": "securestring"
            },
            "location": {
              "type": "string"
            },
            "primarySiteAdministratorAccountPassword": {
              "type": "securestring"
            },
            "primarySiteAdministratorAccountUserName": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            }
          },
          "variables": {
            "Secrets": [
              {
                "name": "DomainJoinPassword",
                "value": "[parameters('domainJoinPassword')]"
              },
              {
                "name": "DomainJoinUserPrincipalName",
                "value": "[parameters('domainJoinUserPrincipalName')]"
              },
              {
                "name": "LocalAdministratorPassword",
                "value": "[parameters('localAdministratorPassword')]"
              },
              {
                "name": "LocalAdministratorUsername",
                "value": "[parameters('localAdministratorUsername')]"
              },
              {
                "name": "PrimarySiteAdministratorAccountUserName",
                "value": "[parameters('primarySiteAdministratorAccountUserName')]"
              },
              {
                "name": "PrimarySiteAdministratorAccountPassword",
                "value": "[parameters('primarySiteAdministratorAccountPassword')]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-10-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.KeyVault/vaults'), createObject())]",
              "properties": {
                "enabledForDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "enablePurgeProtection": true,
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "ipRules": [],
                  "virtualNetworkRules": []
                },
                "publicNetworkAccess": "Disabled",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'DiskEncryptionKey')]",
              "properties": {
                "attributes": {
                  "enabled": true
                },
                "keySize": 4096,
                "kty": "RSA",
                "rotationPolicy": {
                  "attributes": {
                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                  },
                  "lifetimeActions": [
                    {
                      "action": {
                        "type": "Notify"
                      },
                      "trigger": {
                        "timeBeforeExpiry": "P10D"
                      }
                    },
                    {
                      "action": {
                        "type": "Rotate"
                      },
                      "trigger": {
                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageEncryptionKey')]",
              "properties": {
                "attributes": {
                  "enabled": true
                },
                "keySize": 4096,
                "kty": "RSA",
                "rotationPolicy": {
                  "attributes": {
                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                  },
                  "lifetimeActions": [
                    {
                      "action": {
                        "type": "Notify"
                      },
                      "trigger": {
                        "timeBeforeExpiry": "P10D"
                      }
                    },
                    {
                      "action": {
                        "type": "Rotate"
                      },
                      "trigger": {
                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "copy": {
                "name": "secrets",
                "count": "[length(variables('Secrets'))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-10-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('Secrets')[copyIndex()].name)]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.KeyVault/vaults'), createObject())]",
              "properties": {
                "value": "[variables('Secrets')[copyIndex()].value]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('keyVaultSecretsOfficerRoleDefinitionResourceId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('keyVaultSecretsOfficerRoleDefinitionResourceId')]",
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('keyVaultCertificatesOfficerRoleDefinitionResourceId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('keyVaultCertificatesOfficerRoleDefinitionResourceId')]",
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-10-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('keyVaultCryptoOfficerRoleDefinitionResourceId'), resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[parameters('keyVaultCryptoOfficerRoleDefinitionResourceId')]",
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('keyVaultName'))]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                      "groupIds": [
                        "vault"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName')), parameters('keyVaultName'))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName')))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyUriWithVersion": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
            },
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2021-10-01').vaultUri]"
            },
            "storageKeyName": {
              "type": "string",
              "value": "StorageEncryptionKey"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-storage-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "containerName": {
            "value": "[variables('container')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "useCloudStorage": {
            "value": "[parameters('useCloudStorage')]"
          },
          "blobsPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value, lambda('name', startsWith(lambdaVariables('name'), 'privatelink.blob')))[0])]"
          },
          "filePrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value, lambda('name', startsWith(lambdaVariables('name'), 'privatelink.file')))[0])]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId]"
          },
          "keyVaultUri": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
          },
          "storageEncryptionKeyName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "resourcePrefix": {
            "value": "[parameters('resourcePrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "2903013564698296740"
            }
          },
          "parameters": {
            "containerName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "storageSKU": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ]
            },
            "tags": {
              "type": "object"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "blobsPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "filePrivateDnsZoneResourceId": {
              "type": "string"
            },
            "fileShareName": {
              "type": "string",
              "defaultValue": "fileshare"
            },
            "useCloudStorage": {
              "type": "bool"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "storageEncryptionKeyName": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            }
          },
          "variables": {
            "uniqueStorageName": "[take(format('{0}', uniqueString(resourceGroup().id)), 10)]",
            "zones": [
              "[parameters('blobsPrivateDnsZoneResourceId')]",
              "[parameters('filePrivateDnsZoneResourceId')]"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject())]",
              "sku": {
                "name": "[parameters('storageSKU')]"
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                }
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "allowBlobPublicAccess": false,
                "allowCrossTenantReplication": false,
                "allowedCopyScope": "PrivateLink",
                "allowSharedKeyAccess": true,
                "defaultToOAuthAuthentication": false,
                "dnsEndpointType": "Standard",
                "encryption": {
                  "identity": {
                    "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId')]"
                  },
                  "keySource": "Microsoft.KeyVault",
                  "keyvaultproperties": {
                    "keyvaulturi": "[parameters('keyVaultUri')]",
                    "keyname": "[parameters('storageEncryptionKeyName')]"
                  },
                  "requireInfrastructureEncryption": true,
                  "services": {
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "queue": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "table": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  }
                },
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Deny"
                },
                "publicNetworkAccess": "Disabled",
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
              "properties": {
                "protocolSettings": {
                  "smb": {}
                },
                "cors": {
                  "corsRules": []
                },
                "shareDeleteRetentionPolicy": {
                  "enabled": true,
                  "days": 7
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/queueServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/tableServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            },
            {
              "condition": "[parameters('useCloudStorage')]",
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default', parameters('fileShareName'))]",
              "properties": {
                "accessTier": "TransactionOptimized",
                "shareQuota": 5120,
                "enabledProtocols": "SMB"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/{1}/{2}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default', parameters('containerName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]"
              ]
            },
            {
              "copy": {
                "name": "privateEndpoints",
                "count": "[length(variables('zones'))]"
              },
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-esri-pe-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex())]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customNetworkInterfaceName": "[format('{0}-esri-nic-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex())]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-esri-pl-{1}', parameters('resourcePrefix'), copyIndex())]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]",
                      "groupIds": [
                        "[split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]]"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            },
            {
              "copy": {
                "name": "privateDnsZoneGroups",
                "count": "[length(variables('zones'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', format('{0}-esri-pe-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex()), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateDnsZoneId": "[variables('zones')[copyIndex()]]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-esri-pe-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex()))]",
                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
              ]
            }
          ],
          "outputs": {
            "cloudStorageAccountCredentialsUserName": {
              "type": "string",
              "value": "[format('{0}{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), replace(split(reference(resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))), '2023-01-01').primaryEndpoints.blob, format('https://{0}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))))[1], '/', ''))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))]"
            },
            "storageEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))), '2023-01-01').primaryEndpoints.blob]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-pip-address-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hostname": {
            "value": "[format('esri-{0}{1}', parameters('resourcePrefix'), uniqueString(variables('subscriptionId')))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "publicIpAddressName": {
            "value": "[variables('publicIpAddressName')]"
          },
          "publicIpAllocationMethod": {
            "value": "Static"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "2810169501892115894"
            }
          },
          "parameters": {
            "hostname": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "publicIpAddressName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "publicIpAllocationMethod": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2023-04-01",
              "name": "[parameters('publicIpAddressName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/publicIPAddresses'), createObject())]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]",
                "idleTimeoutInMinutes": 11,
                "dnsSettings": {
                  "domainNameLabel": "[parameters('hostname')]",
                  "fqdn": "[parameters('hostname')]"
                },
                "ipTags": []
              }
            }
          ],
          "outputs": {
            "pipFqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName')), '2023-04-01').dnsSettings.fqdn]"
            },
            "pipIp": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName')), '2023-04-01').ipAddress]"
            },
            "pipId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
            },
            "pipName": {
              "type": "string",
              "value": "[parameters('publicIpAddressName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-server-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-server', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "2163630172292960162"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-portal-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-portal', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "2163630172292960162"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-datastore-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-datastore', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "2163630172292960162"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-spatiotemporal-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-spatiotemporal', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "2163630172292960162"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-tilecache-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-tilecache', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "2163630172292960162"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-graph-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-graph', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "2163630172292960162"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-avset-odata-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "availabilitySetName": {
            "value": "[format('{0}-av-set-odata', parameters('resourcePrefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "2163630172292960162"
            }
          },
          "parameters": {
            "availabilitySetName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/availabilitySets",
              "apiVersion": "2017-03-30",
              "name": "[parameters('availabilitySetName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "platformUpdateDomainCount": 2,
                "platformFaultDomainCount": 2
              },
              "sku": {
                "name": "Aligned"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('availabilitySetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'singletier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-virtual-machine-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": "[variables('availabilitySetName')]"
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[variables('networkInterfaceName')]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "singletier"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId), createObject('value', 'none'))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value), createObject('value', 'none'))]",
          "virtualMachineName": {
            "value": "[variables('virtualMachineName')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "18355867825742495594"
            }
          },
          "parameters": {
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n    [string]$Domain\r\n)\r\n\r\n# Get Ethernet Connections\r\n$NetworkInterfaceCards = Get-DnsClient | Where-Object -Property 'InterfaceAlias' -Match 'Ethernet'\r\n\r\n# Add Suffix To Each Ethernet Connection\r\nforeach($NetworkInterfaceCard in $NetworkInterfaceCards) \r\n{\r\n    Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $NetworkInterfaceCard.InterfaceIndex -confirm:$false\r\n}",
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('virtualMachineAdminUsername')]",
                  "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierServerVirtualMachines",
        "count": "[length(variables('serverVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-server-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(equals(parameters('architecture'), 'multitier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-server-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('serverVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "server"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('serverVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "18355867825742495594"
            }
          },
          "parameters": {
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n    [string]$Domain\r\n)\r\n\r\n# Get Ethernet Connections\r\n$NetworkInterfaceCards = Get-DnsClient | Where-Object -Property 'InterfaceAlias' -Match 'Ethernet'\r\n\r\n# Add Suffix To Each Ethernet Connection\r\nforeach($NetworkInterfaceCard in $NetworkInterfaceCards) \r\n{\r\n    Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $NetworkInterfaceCard.InterfaceIndex -confirm:$false\r\n}",
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('virtualMachineAdminUsername')]",
                  "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-server-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierPortalVirtualMachines",
        "count": "[length(variables('portalVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-portal-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(equals(parameters('architecture'), 'multitier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-portal-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('portalVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "portal"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('portalVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "18355867825742495594"
            }
          },
          "parameters": {
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n    [string]$Domain\r\n)\r\n\r\n# Get Ethernet Connections\r\n$NetworkInterfaceCards = Get-DnsClient | Where-Object -Property 'InterfaceAlias' -Match 'Ethernet'\r\n\r\n# Add Suffix To Each Ethernet Connection\r\nforeach($NetworkInterfaceCard in $NetworkInterfaceCards) \r\n{\r\n    Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $NetworkInterfaceCard.InterfaceIndex -confirm:$false\r\n}",
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('virtualMachineAdminUsername')]",
                  "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-portal-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierDatastoreServerVirtualMachines",
        "count": "[length(variables('dataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-datastore-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(equals(parameters('architecture'), 'multitier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-datastore-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('dataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "datastore"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('dataStoreVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "18355867825742495594"
            }
          },
          "parameters": {
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n    [string]$Domain\r\n)\r\n\r\n# Get Ethernet Connections\r\n$NetworkInterfaceCards = Get-DnsClient | Where-Object -Property 'InterfaceAlias' -Match 'Ethernet'\r\n\r\n# Add Suffix To Each Ethernet Connection\r\nforeach($NetworkInterfaceCard in $NetworkInterfaceCards) \r\n{\r\n    Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $NetworkInterfaceCard.InterfaceIndex -confirm:$false\r\n}",
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('virtualMachineAdminUsername')]",
                  "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-datastore-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierFileServerVirtualMachines",
        "count": "[length(variables('fileShareVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-fileserver-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": {
            "value": ""
          },
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('fileShareVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "fileshare"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('fileShareVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "18355867825742495594"
            }
          },
          "parameters": {
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n    [string]$Domain\r\n)\r\n\r\n# Get Ethernet Connections\r\n$NetworkInterfaceCards = Get-DnsClient | Where-Object -Property 'InterfaceAlias' -Match 'Ethernet'\r\n\r\n# Add Suffix To Each Ethernet Connection\r\nforeach($NetworkInterfaceCard in $NetworkInterfaceCards) \r\n{\r\n    Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $NetworkInterfaceCard.InterfaceIndex -confirm:$false\r\n}",
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('virtualMachineAdminUsername')]",
                  "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierSpatiotemporalBigDataStoreVirtualMachines",
        "count": "[length(variables('spatiotemporalBigDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-spatiotemporal-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-spatiotemporal-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "spatiotemporal"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "18355867825742495594"
            }
          },
          "parameters": {
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n    [string]$Domain\r\n)\r\n\r\n# Get Ethernet Connections\r\n$NetworkInterfaceCards = Get-DnsClient | Where-Object -Property 'InterfaceAlias' -Match 'Ethernet'\r\n\r\n# Add Suffix To Each Ethernet Connection\r\nforeach($NetworkInterfaceCard in $NetworkInterfaceCards) \r\n{\r\n    Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $NetworkInterfaceCard.InterfaceIndex -confirm:$false\r\n}",
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('virtualMachineAdminUsername')]",
                  "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-spatiotemporal-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierTileCacheVirtualMachines",
        "count": "[length(variables('tileCacheDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-tilecache-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-tilecache-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('tileCacheDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "tilecache"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('tileCacheDataStoreVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "18355867825742495594"
            }
          },
          "parameters": {
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n    [string]$Domain\r\n)\r\n\r\n# Get Ethernet Connections\r\n$NetworkInterfaceCards = Get-DnsClient | Where-Object -Property 'InterfaceAlias' -Match 'Ethernet'\r\n\r\n# Add Suffix To Each Ethernet Connection\r\nforeach($NetworkInterfaceCard in $NetworkInterfaceCards) \r\n{\r\n    Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $NetworkInterfaceCard.InterfaceIndex -confirm:$false\r\n}",
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('virtualMachineAdminUsername')]",
                  "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-tilecache-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierGraphVirtualMachines",
        "count": "[length(variables('graphDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-graph-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-graph-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('graphDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "graph"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('graphDataStoreVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "18355867825742495594"
            }
          },
          "parameters": {
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n    [string]$Domain\r\n)\r\n\r\n# Get Ethernet Connections\r\n$NetworkInterfaceCards = Get-DnsClient | Where-Object -Property 'InterfaceAlias' -Match 'Ethernet'\r\n\r\n# Add Suffix To Each Ethernet Connection\r\nforeach($NetworkInterfaceCard in $NetworkInterfaceCards) \r\n{\r\n    Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $NetworkInterfaceCard.InterfaceIndex -confirm:$false\r\n}",
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('virtualMachineAdminUsername')]",
                  "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-graph-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "multiTierObjectDataStoreVirtualMachines",
        "count": "[length(variables('objectDataStoreVirtualMachines'))]",
        "mode": "serial",
        "batchSize": 5
      },
      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-odata-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-odata-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
          "enableMonitoring": {
            "value": "[parameters('enableMonitoring')]"
          },
          "externalDnsHostName": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "joinEntraDomain": {
            "value": "[parameters('joinEntraDomain')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networkInterfaceName": {
            "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('objectDataStoreVirtualMachines')[copyIndex()])]"
          },
          "ouPath": {
            "value": "[parameters('ouPath')]"
          },
          "serverFunction": {
            "value": "objectDataStore"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('objectDataStoreVirtualMachines')[copyIndex()]]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('windowsDomainAdministratorPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('windowsDomainAdministratorUserName')]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "18355867825742495594"
            }
          },
          "parameters": {
            "architecture": {
              "type": "string"
            },
            "availabilitySetName": {
              "type": "string"
            },
            "domainJoinOptions": {
              "type": "int",
              "defaultValue": 3
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "externalDnsHostName": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "joinEntraDomain": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkInterfaceName": {
              "type": "string"
            },
            "ouPath": {
              "type": "string"
            },
            "serverFunction": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring"
            },
            "windowsDomainAdministratorUserName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n    [string]$Domain\r\n)\r\n\r\n# Get Ethernet Connections\r\n$NetworkInterfaceCards = Get-DnsClient | Where-Object -Property 'InterfaceAlias' -Match 'Ethernet'\r\n\r\n# Add Suffix To Each Ethernet Connection\r\nforeach($NetworkInterfaceCard in $NetworkInterfaceCards) \r\n{\r\n    Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $NetworkInterfaceCard.InterfaceIndex -confirm:$false\r\n}",
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
            "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
            "availabilitySetId": {
              "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "identity": {
                "type": "SystemAssigned"
              },
              "plan": {
                "name": "byol-111",
                "product": "arcgis-enterprise",
                "publisher": "esri"
              },
              "properties": {
                "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                "hardwareProfile": {
                  "vmSize": "[parameters('virtualMachineSize')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "esri",
                    "offer": "arcgis-enterprise",
                    "sku": "byol-111",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "deleteOption": "Detach",
                    "diskSizeGB": 128
                  },
                  "dataDisks": [],
                  "diskControllerType": "SCSI"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('virtualMachineAdminUsername')]",
                  "adminPassword": "[parameters('virtualMachineAdminPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": false,
                    "patchSettings": {
                      "patchMode": "Manual",
                      "assessmentMode": "ImageDefault"
                    },
                    "enableVMAgentPlatformUpdates": false
                  },
                  "secrets": [],
                  "allowExtensionOperations": true
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.ActiveDirectory",
                "type": "AADLoginForWindows",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": null
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "JsonADDomainExtension",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                  "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                  "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                  "restart": true,
                  "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                },
                "protectedSettings": {
                  "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                "type": "GuestAttestation",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "",
                      "maaTenantName": "GuestAttestation"
                    },
                    "AscSettings": {
                      "ascReportingEndpoint": "",
                      "ascReportingFrequency": ""
                    },
                    "useCustomToken": "false",
                    "disableAlerts": "false"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                "type": "DependencyAgentWindows",
                "typeHandlerVersion": "9.5",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.GuestConfiguration",
                "type": "ConfigurationforWindows",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.NetworkWatcher",
                "type": "NetworkWatcherAgentWindows",
                "typeHandlerVersion": "1.4"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Azure.Monitor",
                "type": "AzureMonitorWindowsAgent",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true,
                "enableAutomaticUpgrade": true,
                "settings": {
                  "authentication": {
                    "managedIdentity": {
                      "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                      "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "Domain",
                    "value": "[variables('nicDnsSuffix')]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "virtualMachineName": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            },
            "availabilitySetResourceId": {
              "type": "string",
              "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
            },
            "networkInterfaceInternalDomainNameSuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-odata-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-role-sa-01-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "10823323829836636548"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-role-vm-01-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "13970988469107180033"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('resourceGroupName'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-role-sub-01-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          },
          "userAssignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "8371266759369642632"
            }
          },
          "parameters": {
            "userAssignedIdentityId": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-role-vm-02-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('userAssignedIdentityId')]"
                  },
                  "subscriptionid": {
                    "value": "[parameters('subscriptionId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "11205238247473777874"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "subscriptionid": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('subscriptionid'))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-management-vm-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "artifactsContainerName": {
            "value": "[parameters('artifactsContainerName')]"
          },
          "artifactsStorageAccountName": {
            "value": "[split(parameters('artifactsStorageAccountResourceId'), '/')[8]]"
          },
          "certificateFileName": {
            "value": "[parameters('certificateFileName')]"
          },
          "certificatePassword": {
            "value": "[parameters('certificatePassword')]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
          },
          "esriStorageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "externalDnsHostname": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "hybridUseBenefit": {
            "value": false
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "portalLicenseFile": {
            "value": "[parameters('portalLicenseFile')]"
          },
          "portalLicenseFileName": {
            "value": "[variables('portalLicenseFileName')]"
          },
          "resourcePrefix": {
            "value": "[parameters('resourcePrefix')]"
          },
          "serverLicenseFile": {
            "value": "[parameters('serverLicenseFile')]"
          },
          "serverLicenseFileName": {
            "value": "[variables('serverLicenseFileName')]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].subnetResourceId]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[take(format('{0}-vmesrimgmt', parameters('resourcePrefix')), 15)]"
          },
          "esriStorageAccountContainer": {
            "value": "[variables('container')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "1355432040733087970"
            }
          },
          "parameters": {
            "artifactsContainerName": {
              "type": "string"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "hybridUseBenefit": {
              "type": "bool"
            },
            "localAdministratorPassword": {
              "type": "securestring"
            },
            "localAdministratorUsername": {
              "type": "securestring"
            },
            "location": {
              "type": "string"
            },
            "artifactsStorageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "portalLicenseFile": {
              "type": "string"
            },
            "portalLicenseFileName": {
              "type": "string"
            },
            "serverLicenseFile": {
              "type": "string"
            },
            "serverLicenseFileName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "certificatePassword": {
              "type": "securestring"
            },
            "certificateFileName": {
              "type": "string"
            },
            "externalDnsHostname": {
              "type": "string"
            },
            "esriStorageAccountName": {
              "type": "string"
            },
            "esriStorageAccountContainer": {
              "type": "string"
            },
            "resourcePrefix": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param (\r\n    [string]$ImageOffer,\r\n    [string]$ImagePublisher,\r\n    [string]$ImageSku,\r\n    [string]$ResourceManagerUri,\r\n    [string]$UserAssignedIdentityClientId\r\n)\r\n\r\n# Fix the resource manager URI since only AzureCloud contains a trailing slash\r\n$ResourceManagerUriFixed = if($ResourceManagerUri[-1] -eq '/'){$ResourceManagerUri} else {$ResourceManagerUri + '/'}\r\n\r\n# Get an access token for Azure resources\r\n$AzureManagementAccessToken = (Invoke-RestMethod `\r\n    -Headers @{Metadata=\"true\"} `\r\n    -Uri $('http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=' + $ResourceManagerUriFixed + '&client_id=' + $UserAssignedIdentityClientId)).access_token\r\n\r\n# Set header for Azure Management API\r\n$AzureManagementHeader = @{\r\n    'Content-Type'='application/json'\r\n    'Authorization'='Bearer ' + $AzureManagementAccessToken\r\n}\r\n\r\n# Use the access token to get the marketplace agreement\r\n$Terms = Invoke-RestMethod `\r\n    -Headers $AzureManagementHeader `\r\n    -Method 'GET' `\r\n    -Uri $($ResourceManagerUriFixed + 'subscriptions/' + $SubscriptionId + '/providers/Microsoft.MarketplaceOrdering/agreements/' + $ImagePublisher + '/offers/' + $ImageOffer + '/plans/' + $ImageSku + '?api-version=2021-01-01')\r\n\r\n# Use the access token to set the marketplace agreement\r\nif($Terms.error)\r\n{\r\n    Invoke-RestMethod `\r\n        -Headers $AzureManagementHeader `\r\n        -Method 'POST' `\r\n        -Uri $($ResourceManagerUriFixed + 'subscriptions/' + $SubscriptionId + '/providers/Microsoft.MarketplaceOrdering/agreements/' + $ImagePublisher + '/offers/' + $ImageOffer + '/plans/' + $ImageSku + '/sign?api-version=2021-01-01') | Out-Null\r\n}"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('virtualMachineName'))]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject())]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnetResourceId')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                }
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "Standard_D2s_v3"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('localAdministratorUsername')]",
                  "adminPassword": "[parameters('localAdministratorPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": true,
                    "patchSettings": {
                      "patchMode": "AutomaticByOS",
                      "assessmentMode": "ImageDefault"
                    }
                  }
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "2022-datacenter-core-g2",
                    "version": "latest"
                  },
                  "osDisk": {
                    "caching": "ReadWrite",
                    "createOption": "FromImage",
                    "deleteOption": "Delete",
                    "managedDisk": {
                      "diskEncryptionSet": {
                        "id": "[parameters('diskEncryptionSetResourceId')]"
                      },
                      "storageAccountType": "Premium_LRS"
                    },
                    "name": "[format('{0}-disk-{1}', parameters('resourcePrefix'), parameters('virtualMachineName'))]",
                    "osType": "Windows"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('virtualMachineName')))]",
                      "properties": {
                        "deleteOption": "Delete"
                      }
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": false
                  }
                },
                "securityProfile": {
                  "encryptionAtHost": true,
                  "uefiSettings": {
                    "secureBootEnabled": true,
                    "vTpmEnabled": true
                  },
                  "securityType": "TrustedLaunch"
                },
                "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('virtualMachineName')))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-licenseAndCertificateArtifacts')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "ContainerName",
                    "value": "[parameters('artifactsContainerName')]"
                  },
                  {
                    "name": "StorageAccountName",
                    "value": "[parameters('artifactsStorageAccountName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[environment().suffixes.storage]"
                  },
                  {
                    "name": "Environment",
                    "value": "[environment().name]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  {
                    "name": "UserAssignedIdentityObjectId",
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  {
                    "name": "PortalLicensefile",
                    "value": "[parameters('portalLicenseFile')]"
                  },
                  {
                    "name": "PortalLicenseFileName",
                    "value": "[parameters('portalLicenseFileName')]"
                  },
                  {
                    "name": "ServerLicensefile",
                    "value": "[parameters('serverLicenseFile')]"
                  },
                  {
                    "name": "ServerLicenseFileName",
                    "value": "[parameters('serverLicenseFileName')]"
                  },
                  {
                    "name": "location",
                    "value": "[parameters('location')]"
                  },
                  {
                    "name": "fqdn",
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  {
                    "name": "keyVault",
                    "value": "[parameters('keyVaultName')]"
                  },
                  {
                    "name": "certificateFileName",
                    "value": "[parameters('certificateFileName')]"
                  },
                  {
                    "name": "certificatePassword",
                    "value": "[parameters('certificatePassword')]"
                  },
                  {
                    "name": "subscription",
                    "value": "[subscription().subscriptionId]"
                  },
                  {
                    "name": "EsriStorageAccount",
                    "value": "[parameters('esriStorageAccountName')]"
                  },
                  {
                    "name": "esriStorageAccountContainer",
                    "value": "[parameters('esriStorageAccountContainer')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$CertificateFileName,\r\n        [string]$CertificatePassword,\r\n        [string]$ContainerName,\r\n        [string]$Environment,\r\n        [string]$EsriStorageAccount,\r\n        [string]$EsriStorageAccountContainer,\r\n        [string]$Fqdn,\r\n        [string]$KeyVaultName,\r\n        [string]$Location,\r\n        [string]$PortalLicenseFile,\r\n        [string]$PortalLicenseFileName,\r\n        [string]$ServerLicensefile,\r\n        [string]$ServerLicenseFileName,\r\n        [string]$StorageAccountName,\r\n        [string]$StorageEndpoint,\r\n        [string]$Subscription,\r\n        [string]$TenantId,\r\n        [string]$UserAssignedIdentityClientId,\r\n        [string]$UserAssignedIdentityObjectId\r\n      )\r\n      New-Item -ItemType File \"$env:windir\\temp\\$portalLicenseFileName\"\r\n      New-Item -ItemType File \"$env:windir\\temp\\$serverLicenseFileName\"\r\n\r\n      $plf = \"$env:windir\\temp\\$portalLicenseFileName\"\r\n      $slf = \"$env:windir\\temp\\$serverLicenseFileName\"\r\n\r\n      $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False\r\n\r\n      $portalLicense = [System.Text.UTF8Encoding]::UTF8.GetString([System.Convert]::FromBase64String($portalLicensefile))\r\n      [System.IO.File]::WriteAllLines($plf, $portalLicense, $Utf8NoBomEncoding)\r\n\r\n      $serverLicense = [System.Text.UTF8Encoding]::UTF8.GetString([System.Convert]::FromBase64String($serverLicensefile))\r\n      [System.IO.File]::WriteAllLines($slf, $serverLicense, $Utf8NoBomEncoding)\r\n\r\n      Import-Module az.keyvault\r\n      Connect-AzAccount -Environment $Environment -Subscription $Subscription -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n      $ctx = New-AzStorageContext -StorageAccountName $esriStorageAccount -UseConnectedAccount\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $BlobNames = @($certificateFileName)\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl/$ContainerName/$BlobNames\" -OutFile $env:windir\\temp\\$certificateFileName -Verbose\r\n      $pfx = \"$env:windir\\temp\\$CertificateFileName\"\r\n      Set-AzStorageBlobContent -File $pfx -Container $esriStorageAccountContainer -Blob $CertificateFileName -Context $ctx -Force\r\n      $base64 = [System.Convert]::ToBase64String([System.IO.File]::ReadAllBytes($pfx))\r\n      $Password = ConvertTo-SecureString -String $CertificatePassword -AsPlainText -Force\r\n      $cert = Import-AzKeyVaultCertificate -VaultName $keyVaultName -Name \"pfx$location\" -FilePath $pfx -Password $Password\r\n      $azKeyVaultCert = Get-AzKeyVaultCertificate -VaultName  $keyVaultName -Name \"pfx$location\"\r\n      $azKeyVaultCertBytes = $azKeyVaultCert.Certificate.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert)\r\n      $publicCertificateName = \"wildcard$fqdn-PublicKey.cer\"\r\n      $cerCertFile = \"$env:windir\\temp\\$publicCertificateName\"\r\n      Write-Output $cerCertFile\r\n      [System.IO.File]::WriteAllBytes($cerCertFile, $azKeyVaultCertBytes)\r\n      #$ctx = New-AzStorageContext -StorageAccountName $esriStorageAccount -UseConnectedAccount\r\n      Set-AzStorageBlobContent -File $cerCertFile -Container $esriStorageAccountContainer -Blob $publicCertificateName -Context $ctx -Force\r\n      #Set-AzStorageBlobContent -File $pfx -Container $esriStorageAccountContainer -Blob $CertificateFileName -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File $plf -Container $esriStorageAccountContainer -Properties @{\"ContentEncoding\" = \"UTF-8\"} -Blob $portalLicenseFileName -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File $slf -Container $esriStorageAccountContainer -Properties @{\"ContentEncoding\" = \"UTF-8\"} -Blob $serverLicenseFileName -Context $ctx -Force\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriMarketplaceImageTerms')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "ImageOffer",
                    "value": "arcgis-enterprise"
                  },
                  {
                    "name": "ImagePublisher",
                    "value": "esri"
                  },
                  {
                    "name": "ImageSku",
                    "value": "byol-111"
                  },
                  {
                    "name": "ResourceManagerUri",
                    "value": "[environment().resourceManager]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('virtualMachineName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "multiTierFileServerVirtualMachines",
        "multiTierPortalVirtualMachines",
        "multiTierServerVirtualMachines",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('assign-role-sub-01-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('assign-role-sa-01-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('assign-role-vm-01-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('create-certificates-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "fileUri": {
            "value": "[format('{0}{1}/GenerateSSLCerts.ps1', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "portalInternalCertificateFileName": {
            "value": ""
          },
          "portalVirtualMachineNames": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('portalVirtualMachineNames')))]",
          "selfSignedSSLCertificatePassword": {
            "value": "[parameters('selfSignedCertificatePassword')]"
          },
          "serverInternalCertificateFileName": {
            "value": ""
          },
          "serverVirtualMachineNames": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('serverVirtualMachineNames')))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualMachineName": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('fileShareVirtualMachineName')))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "2602864970611902004"
            }
          },
          "parameters": {
            "fileShareName": {
              "type": "string",
              "defaultValue": "fileshare"
            },
            "fileUri": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object"
            },
            "timestamp": {
              "type": "string",
              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
            },
            "useSelfSignedInternalSSLCertificate": {
              "type": "bool",
              "defaultValue": true
            },
            "virtualMachineName": {
              "type": "string"
            },
            "serverVirtualMachineNames": {
              "type": "string"
            },
            "portalVirtualMachineNames": {
              "type": "string"
            },
            "serverInternalCertificateFileName": {
              "type": "string"
            },
            "portalInternalCertificateFileName": {
              "type": "string"
            },
            "selfSignedSSLCertificatePassword": {
              "type": "securestring"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
              "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.10",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "timestamp": "[parameters('timestamp')]"
                },
                "protectedSettings": {
                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File .\\GenerateSSLCerts.ps1 -ServerMachineNames \"{0}\" -PortalMachineNames \"{1}\" -FileShareName \"{2}\" {3}', parameters('serverVirtualMachineNames'), parameters('portalVirtualMachineNames'), parameters('fileShareName'), if(parameters('useSelfSignedInternalSSLCertificate'), format('-UseInternalSelfSignedCertificate -CertificatePassword {0}', parameters('selfSignedSSLCertificatePassword')), format('-ServerInternalCertificateFileName \"{0}\" -PortalInternalCertificateFileName \"{1}\"', if(empty(parameters('serverInternalCertificateFileName')), '', parameters('serverInternalCertificateFileName')), if(empty(parameters('portalInternalCertificateFileName')), '', parameters('portalInternalCertificateFileName')))))]",
                  "fileUris": [
                    "[parameters('fileUri')]"
                  ],
                  "managedIdentity": {}
                }
              }
            }
          ],
          "outputs": {
            "vmId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
            },
            "serverBackendSSLCert": {
              "type": "string",
              "value": "[split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2023-03-01').instanceView.substatuses[0].message, '###DATA###')[0]]"
            },
            "portalBackendSSLCert": {
              "type": "string",
              "value": "[split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2023-03-01').instanceView.substatuses[0].message, '###DATA###')[1]]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-management-vm-{0}', parameters('deploymentNameSuffix')))]",
        "multiTierFileServerVirtualMachines",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-virtual-machine-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'multitier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-multitier-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "applicationGatewayName": {
            "value": "[variables('applicationGatewayName')]"
          },
          "applicationGatewayPrivateIPAddress": {
            "value": "[variables('applicationGatewayPrivateIpAddress')]"
          },
          "arcgisServiceAccountIsDomainAccount": {
            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
          },
          "arcgisServiceAccountPassword": {
            "value": "[parameters('arcgisServiceAccountPassword')]"
          },
          "arcgisServiceAccountUsername": {
            "value": "[parameters('arcgisServiceAccountUsername')]"
          },
          "architecture": {
            "value": "[parameters('architecture')]"
          },
          "cloudStorageAccountCredentialsUserName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.cloudStorageAccountCredentialsUserName.value]"
          },
          "dataStoreVirtualMachineNames": {
            "value": "[variables('dataStoreVirtualMachineNames')]"
          },
          "dataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('dataStoreVirtualMachineOSDiskSize')]"
          },
          "dataStoreVirtualMachines": {
            "value": "[variables('dataStoreVirtualMachines')]"
          },
          "debugMode": {
            "value": "[parameters('debugMode')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "dscDataStoreFunction": {
            "value": "[variables('dscDataStoreFunction')]"
          },
          "dscGraphDataStoreFunction": {
            "value": "[variables('dscGraphDataStoreFunction')]"
          },
          "dscObjectDataStoreFunction": {
            "value": "[variables('dscObjectDataStoreFunction')]"
          },
          "dscPortalFunction": {
            "value": "[variables('dscPortalFunction')]"
          },
          "dscServerScriptFunction": {
            "value": "[variables('dscServerScriptFunction')]"
          },
          "dscSpatioTemporalFunction": {
            "value": "[variables('dscsSatiotemporalBigDataStoreFunction')]"
          },
          "dscTileCacheFunction": {
            "value": "[variables('dscTileCacheDataStoreDscFunction')]"
          },
          "enableDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableDataStoreVirtualMachineDataDisk')]"
          },
          "enableGraphDataStore": {
            "value": "[parameters('enableGraphDataStore')]"
          },
          "enableGraphDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableGraphDataStoreVirtualMachineDataDisk')]"
          },
          "enableObjectDataStore": {
            "value": "[parameters('enableObjectDataStore')]"
          },
          "enableObjectDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableObjectDataStoreVirtualMachineDataDisk')]"
          },
          "enableServerLogHarvesterPlugin": {
            "value": "[parameters('enableServerLogHarvesterPlugin')]"
          },
          "enableSpatiotemporalBigDataStore": {
            "value": "[parameters('enableSpatiotemporalBigDataStore')]"
          },
          "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk')]"
          },
          "enableTileCacheDataStore": {
            "value": "[parameters('enableTileCacheDataStore')]"
          },
          "enableTileCacheDataStoreVirtualMachineDataDisk": {
            "value": "[parameters('enableTileCacheDataStoreVirtualMachineDataDisk')]"
          },
          "enableVirtualMachineDataDisk": {
            "value": "[parameters('enableVirtualMachineDataDisk')]"
          },
          "externalDnsHostname": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "fileShareDscScriptFunction": {
            "value": "[variables('fileShareDscScriptFunction')]"
          },
          "fileShareVirtualMachineName": {
            "value": "[variables('fileShareVirtualMachineName')]"
          },
          "graphDataStoreVirtualMachineNames": {
            "value": "[variables('graphDataStoreVirtualMachineNames')]"
          },
          "graphDataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('graphDataStoreVirtualMachineOSDiskSize')]"
          },
          "graphDataStoreVirtualMachines": {
            "value": "[variables('graphDataStoreVirtualMachines')]"
          },
          "isMultiMachineTileCacheDataStore": {
            "value": "[variables('isMultiMachineTileCacheDataStore')]"
          },
          "isObjectDataStoreClustered": {
            "value": "[variables('isObjectDataStoreClustered')]"
          },
          "isTileCacheDataStoreClustered": {
            "value": "[variables('isTileCacheDataStoreClustered')]"
          },
          "isUpdatingCertificates": {
            "value": "[parameters('isUpdatingCertificates')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "keyVaultUri": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "objectDataStoreVirtualMachineNames": {
            "value": "[variables('objectDataStoreVirtualMachineNames')]"
          },
          "objectDataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('objectDataStoreVirtualMachineOSDiskSize')]"
          },
          "objectDataStoreVirtualMachines": {
            "value": "[variables('objectDataStoreVirtualMachines')]"
          },
          "portalBackendSslCert": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.portalBackendSSLCert.value]"
          },
          "portalContext": {
            "value": "[variables('portalContext')]"
          },
          "portalLicenseFileName": {
            "value": "[variables('portalLicenseFileName')]"
          },
          "portalLicenseUserTypeId": {
            "value": "[parameters('portalLicenseUserTypeId')]"
          },
          "portalVirtualMachineNames": {
            "value": "[variables('portalVirtualMachineNames')]"
          },
          "portalVirtualMachineOSDiskSize": {
            "value": "[parameters('portalVirtualMachineOSDiskSize')]"
          },
          "portalVirtualMachines": {
            "value": "[variables('portalVirtualMachines')]"
          },
          "primarySiteAdministratorAccountPassword": {
            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
          },
          "primarySiteAdministratorAccountUserName": {
            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
          },
          "publicIpId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.pipId.value]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          },
          "resourceSuffix": {
            "value": "[variables('resourceSuffix')]"
          },
          "secondaryDnsHostName": {
            "value": "[parameters('secondaryDnsHostName')]"
          },
          "selfSignedSSLCertificatePassword": {
            "value": "[parameters('selfSignedCertificatePassword')]"
          },
          "serverBackendSSLCert": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.serverBackendSSLCert.value]"
          },
          "serverContext": {
            "value": "[variables('serverContext')]"
          },
          "serverLicenseFileName": {
            "value": "[variables('serverLicenseFileName')]"
          },
          "serverVirtualMachineNames": {
            "value": "[variables('serverVirtualMachineNames')]"
          },
          "serverVirtualMachines": {
            "value": "[variables('serverVirtualMachines')]"
          },
          "spatiotemporalBigDataStoreVirtualMachineNames": {
            "value": "[variables('spatiotemporalBigDataStoreVirtualMachineNames')]"
          },
          "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]"
          },
          "spatiotemporalBigDataStoreVirtualMachines": {
            "value": "[variables('spatiotemporalBigDataStoreVirtualMachines')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "storageUriPrefix": {
            "value": "[format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "tileCacheDataStoreVirtualMachineOSDiskSize": {
            "value": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]"
          },
          "tileCacheVirtualMachineNames": {
            "value": "[variables('tileCacheDataStoreVirtualMachineNames')]"
          },
          "tileCacheVirtualMachines": {
            "value": "[variables('tileCacheDataStoreVirtualMachines')]"
          },
          "useAzureFiles": {
            "value": "[parameters('useAzureFiles')]"
          },
          "useCloudStorage": {
            "value": "[parameters('useCloudStorage')]"
          },
          "userAssignedIdenityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineOSDiskSize": {
            "value": "[parameters('virtualMachineOSDiskSize')]"
          },
          "virtualNetworkName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.virtualNetwork]"
          },
          "windowsDomainName": "[if(parameters('joinWindowsDomain'), createObject('value', parameters('windowsDomainName')), createObject('value', 'none'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "10521090230984390212"
            }
          },
          "parameters": {
            "applicationGatewayName": {
              "type": "string"
            },
            "applicationGatewayPrivateIPAddress": {
              "type": "string"
            },
            "arcgisServiceAccountIsDomainAccount": {
              "type": "bool"
            },
            "arcgisServiceAccountPassword": {
              "type": "securestring"
            },
            "arcgisServiceAccountUsername": {
              "type": "string"
            },
            "architecture": {
              "type": "string"
            },
            "cloudStorageAccountCredentialsUserName": {
              "type": "string"
            },
            "dataStoreVirtualMachineNames": {
              "type": "string"
            },
            "dataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "dataStoreVirtualMachines": {
              "type": "array"
            },
            "debugMode": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "dscDataStoreFunction": {
              "type": "string"
            },
            "dscGraphDataStoreFunction": {
              "type": "string"
            },
            "dscObjectDataStoreFunction": {
              "type": "string"
            },
            "dscPortalFunction": {
              "type": "string"
            },
            "dscServerScriptFunction": {
              "type": "string"
            },
            "dscSpatioTemporalFunction": {
              "type": "string"
            },
            "dscTileCacheFunction": {
              "type": "string"
            },
            "enableDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "enableGraphDataStore": {
              "type": "bool"
            },
            "enableGraphDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "enableObjectDataStore": {
              "type": "bool"
            },
            "enableObjectDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "enableServerLogHarvesterPlugin": {
              "type": "bool"
            },
            "enableSpatiotemporalBigDataStore": {
              "type": "bool"
            },
            "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "enableTileCacheDataStore": {
              "type": "bool"
            },
            "enableTileCacheDataStoreVirtualMachineDataDisk": {
              "type": "bool"
            },
            "enableVirtualMachineDataDisk": {
              "type": "bool"
            },
            "externalDnsHostname": {
              "type": "string"
            },
            "fileShareDscScriptFunction": {
              "type": "string"
            },
            "fileShareVirtualMachineName": {
              "type": "string"
            },
            "graphDataStoreVirtualMachineNames": {
              "type": "string"
            },
            "graphDataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "graphDataStoreVirtualMachines": {
              "type": "array"
            },
            "isMultiMachineTileCacheDataStore": {
              "type": "bool"
            },
            "isObjectDataStoreClustered": {
              "type": "bool"
            },
            "isTileCacheDataStoreClustered": {
              "type": "bool"
            },
            "isUpdatingCertificates": {
              "type": "bool"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "objectDataStoreVirtualMachineNames": {
              "type": "string"
            },
            "objectDataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "objectDataStoreVirtualMachines": {
              "type": "array"
            },
            "portalBackendSslCert": {
              "type": "string"
            },
            "portalContext": {
              "type": "string"
            },
            "portalLicenseFileName": {
              "type": "string"
            },
            "portalLicenseUserTypeId": {
              "type": "string"
            },
            "portalVirtualMachineNames": {
              "type": "string"
            },
            "portalVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "portalVirtualMachines": {
              "type": "array"
            },
            "primarySiteAdministratorAccountPassword": {
              "type": "securestring"
            },
            "primarySiteAdministratorAccountUserName": {
              "type": "string"
            },
            "publicIpId": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "resourceSuffix": {
              "type": "string"
            },
            "secondaryDnsHostName": {
              "type": "string"
            },
            "selfSignedSSLCertificatePassword": {
              "type": "securestring"
            },
            "serverBackendSSLCert": {
              "type": "string"
            },
            "serverContext": {
              "type": "string"
            },
            "serverLicenseFileName": {
              "type": "string"
            },
            "serverVirtualMachineNames": {
              "type": "string"
            },
            "serverVirtualMachines": {
              "type": "array"
            },
            "spatiotemporalBigDataStoreVirtualMachineNames": {
              "type": "string"
            },
            "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "spatiotemporalBigDataStoreVirtualMachines": {
              "type": "array"
            },
            "tileCacheDataStoreVirtualMachineOSDiskSize": {
              "type": "int"
            },
            "tileCacheVirtualMachines": {
              "type": "array"
            },
            "tileCacheVirtualMachineNames": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageUriPrefix": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]"
            },
            "tags": {
              "type": "object"
            },
            "useAzureFiles": {
              "type": "bool"
            },
            "useCloudStorage": {
              "type": "bool"
            },
            "userAssignedIdenityResourceId": {
              "type": "string"
            },
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "virtualMachineOSDiskSize": {
              "type": "int"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUsername": {
                    "value": "[parameters('arcgisServiceAccountUsername')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('fileShareDscScriptFunction')]"
                  },
                  "dscScript": {
                    "value": "FileShareConfiguration.ps1"
                  },
                  "enableVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "externalDNSHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalContext": {
                    "value": "[parameters('portalContext')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineAdminPassword": {
                    "value": "[parameters('virtualMachineAdminUsername')]"
                  },
                  "virtualMachineAdminUsername": {
                    "value": "[parameters('virtualMachineAdminPassword')]"
                  },
                  "virtualMachineOSDiskSize": {
                    "value": "[parameters('virtualMachineOSDiskSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "6420888983405339973"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUsername": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enableVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "externalDNSHostName": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "portalContext": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineAdminPassword": {
                      "type": "securestring"
                    },
                    "virtualMachineAdminUsername": {
                      "type": "string"
                    },
                    "virtualMachineOSDiskSize": {
                      "type": "int"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('fileShareVirtualMachineName'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "DebugMode": "[parameters('debugMode')]",
                            "EnableDataDisk": "[parameters('enableVirtualMachineDataDisk')]",
                            "ExternalDNSHostName": "[parameters('externalDNSHostName')]",
                            "IsBaseDeployment": "True",
                            "FileShareName": "[parameters('fileShareName')]",
                            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                            "PortalContext": "[parameters('portalContext')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('fileShareVirtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('fileShareVirtualMachineName')), '2023-03-01', 'full').identity.tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUsername')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "MachineAdministratorCredential": {
                              "userName": "[parameters('virtualMachineAdminUsername')]",
                              "password": "[parameters('virtualMachineAdminPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('fileShareVirtualMachineName'), 'DSCConfiguration'), '2018-06-01').provisioningState]"
                    },
                    "fileShareName": {
                      "type": "string",
                      "value": "[parameters('fileShareName')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGatewayName": {
                    "value": "[parameters('applicationGatewayName')]"
                  },
                  "applicationGatewayPrivateIpAddress": {
                    "value": "[parameters('applicationGatewayPrivateIPAddress')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "keyVaultUri": {
                    "value": "[parameters('keyVaultUri')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalBackendSslCert": {
                    "value": "[parameters('portalBackendSslCert')]"
                  },
                  "portalVirtualMachineNames": {
                    "value": "[parameters('portalVirtualMachineNames')]"
                  },
                  "publicIpId": {
                    "value": "[parameters('publicIpId')]"
                  },
                  "resourceGroup": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "resourceSuffix": {
                    "value": "[parameters('resourceSuffix')]"
                  },
                  "serverBackendSSLCert": {
                    "value": "[parameters('serverBackendSSLCert')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "userAssignedIdenityResourceId": {
                    "value": "[parameters('userAssignedIdenityResourceId')]"
                  },
                  "virtualNetworkName": {
                    "value": "[parameters('virtualNetworkName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "8089071357281164736"
                    }
                  },
                  "parameters": {
                    "applicationGatewayName": {
                      "type": "string"
                    },
                    "applicationGatewayPrivateIpAddress": {
                      "type": "string"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "portalBackendSslCert": {
                      "type": "string"
                    },
                    "portalVirtualMachineNames": {
                      "type": "string"
                    },
                    "publicIpId": {
                      "type": "string"
                    },
                    "resourceGroup": {
                      "type": "string"
                    },
                    "resourceSuffix": {
                      "type": "string"
                    },
                    "serverBackendSSLCert": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "userAssignedIdenityResourceId": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "serverBackEndVirtualMachines": "[split(parameters('serverVirtualMachineNames'), ',')]",
                    "portalBackEndVirtualMachines": "[split(parameters('portalVirtualMachineNames'), ',')]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('applicationGatewayName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdenityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "sku": {
                          "name": "Standard_v2",
                          "tier": "Standard_v2",
                          "capacity": 2
                        },
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                              }
                            }
                          }
                        ],
                        "sslCertificates": [
                          {
                            "name": "frontendCert",
                            "properties": {
                              "keyVaultSecretId": "[format('{0}secrets/pfx{1}', parameters('keyVaultUri'), parameters('location'))]"
                            }
                          }
                        ],
                        "trustedRootCertificates": [
                          {
                            "name": "serverBackendSSLCert",
                            "properties": {
                              "data": "[parameters('serverBackendSSLCert')]"
                            }
                          },
                          {
                            "name": "portalBackendSSLCert",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]",
                            "properties": {
                              "data": "[parameters('portalBackendSslCert')]"
                            }
                          }
                        ],
                        "trustedClientCertificates": [],
                        "sslProfiles": [],
                        "frontendIPConfigurations": [
                          {
                            "name": "pipIpConfig",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "publicIPAddress": {
                                "id": "[parameters('publicIpId')]"
                              }
                            }
                          },
                          {
                            "name": "[format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "privateIPAddress": "[parameters('applicationGatewayPrivateIpAddress')]",
                              "privateIPAllocationMethod": "Static",
                              "subnet": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                              }
                            }
                          }
                        ],
                        "frontendPorts": [
                          {
                            "name": "[format('EnterprisePort443{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "port": 443
                            }
                          },
                          {
                            "name": "[format('EnterprisePort80{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "[format('ServerBackendPool{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "copy": [
                                {
                                  "name": "backendAddresses",
                                  "count": "[length(variables('serverBackEndVirtualMachines'))]",
                                  "input": {
                                    "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('{0}PortalBackendPool', parameters('resourceSuffix'))]",
                            "properties": {
                              "copy": [
                                {
                                  "name": "backendAddresses",
                                  "count": "[length(variables('portalBackEndVirtualMachines'))]",
                                  "input": {
                                    "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "loadDistributionPolicies": [],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[format('PortalHttpsSetting{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "port": 7443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "connectionDraining": {
                                "enabled": true,
                                "drainTimeoutInSec": 60
                              },
                              "pickHostNameFromBackendAddress": true,
                              "path": "/arcgis/",
                              "requestTimeout": 180,
                              "probe": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}PortalProbeName', parameters('resourceSuffix')))]"
                              },
                              "trustedRootCertificates": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]"
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('ServerHttpsSetting{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "port": 6443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "connectionDraining": {
                                "enabled": true,
                                "drainTimeoutInSec": 60
                              },
                              "pickHostNameFromBackendAddress": true,
                              "path": "/arcgis/",
                              "requestTimeout": 180,
                              "probe": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}ServerProbeName', parameters('resourceSuffix')))]"
                              },
                              "trustedRootCertificates": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'serverBackendSSLCert')]"
                                }
                              ]
                            }
                          }
                        ],
                        "backendSettingsCollection": [],
                        "httpListeners": [
                          {
                            "name": "[format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                              },
                              "frontendPort": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]"
                              },
                              "protocol": "Http",
                              "hostNames": [
                                "[parameters('externalDnsHostName')]"
                              ],
                              "requireServerNameIndication": false
                            }
                          },
                          {
                            "name": "[format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                              },
                              "frontendPort": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]"
                              },
                              "protocol": "Https",
                              "sslCertificate": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/sslCertificates', parameters('applicationGatewayName'), 'frontendCert')]"
                              },
                              "hostNames": [
                                "[parameters('externalDnsHostName')]"
                              ],
                              "requireServerNameIndication": false
                            }
                          }
                        ],
                        "listeners": [],
                        "urlPathMaps": [
                          {
                            "name": "[format('{0}EnterprisePathMap', parameters('resourceSuffix'))]",
                            "properties": {
                              "defaultBackendAddressPool": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                              },
                              "defaultBackendHttpSettings": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                              },
                              "pathRules": [
                                {
                                  "name": "serverPathRule",
                                  "properties": {
                                    "paths": [
                                      "/server/*",
                                      "/server"
                                    ],
                                    "backendAddressPool": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                                    },
                                    "backendHttpSettings": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                                    },
                                    "rewriteRuleSet": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}ServerRewriteRuleSet', parameters('resourceSuffix')))]"
                                    }
                                  }
                                },
                                {
                                  "name": "portalPathRule",
                                  "properties": {
                                    "paths": [
                                      "/portal/*",
                                      "/portal"
                                    ],
                                    "backendAddressPool": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('{0}PortalBackendPool', parameters('resourceSuffix')))]"
                                    },
                                    "backendHttpSettings": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('PortalHttpsSetting{0}', parameters('resourceSuffix')))]"
                                    },
                                    "rewriteRuleSet": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}PortalRewriteRuleSet', parameters('resourceSuffix')))]"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "[format('{0}EnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                            "properties": {
                              "ruleType": "PathBasedRouting",
                              "priority": 10,
                              "httpListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "urlPathMap": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/urlPathMaps', parameters('applicationGatewayName'), format('{0}EnterprisePathMap', parameters('resourceSuffix')))]"
                              }
                            }
                          },
                          {
                            "name": "[format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                            "properties": {
                              "ruleType": "Basic",
                              "priority": 20,
                              "httpListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "redirectConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/redirectConfigurations', parameters('applicationGatewayName'), format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix')))]"
                              }
                            }
                          }
                        ],
                        "routingRules": [],
                        "probes": [
                          {
                            "name": "[format('{0}ServerProbeName', parameters('resourceSuffix'))]",
                            "properties": {
                              "protocol": "Https",
                              "path": "/arcgis/rest/info/healthcheck",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "pickHostNameFromBackendHttpSettings": true,
                              "minServers": 0,
                              "match": {
                                "statusCodes": [
                                  "200"
                                ]
                              }
                            }
                          },
                          {
                            "name": "[format('{0}PortalProbeName', parameters('resourceSuffix'))]",
                            "properties": {
                              "protocol": "Https",
                              "path": "/arcgis/portaladmin/healthCheck",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "pickHostNameFromBackendHttpSettings": true,
                              "minServers": 0,
                              "match": {
                                "statusCodes": [
                                  "200"
                                ]
                              }
                            }
                          }
                        ],
                        "rewriteRuleSets": [
                          {
                            "name": "[format('{0}PortalRewriteRuleSet', parameters('resourceSuffix'))]",
                            "properties": {
                              "rewriteRules": [
                                {
                                  "ruleSequence": 50,
                                  "conditions": [],
                                  "name": "XForwardedHostRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [
                                      {
                                        "headerName": "X-Forwarded-Host",
                                        "headerValue": "{http_req_host}"
                                      }
                                    ],
                                    "responseHeaderConfigurations": []
                                  }
                                },
                                {
                                  "ruleSequence": 100,
                                  "conditions": [
                                    {
                                      "variable": "http_resp_Location",
                                      "pattern": "(https?):\\/\\/[^\\/]+:7443\\/(?:arcgis|portal)(.*)$",
                                      "ignoreCase": true,
                                      "negate": false
                                    }
                                  ],
                                  "name": "PortalRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [],
                                    "responseHeaderConfigurations": [
                                      {
                                        "headerName": "RewriteLocationValue",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                      },
                                      {
                                        "headerName": "Location",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('{0}ServerRewriteRuleSet', parameters('resourceSuffix'))]",
                            "properties": {
                              "rewriteRules": [
                                {
                                  "ruleSequence": 50,
                                  "conditions": [],
                                  "name": "XForwardedHostRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [
                                      {
                                        "headerName": "X-Forwarded-Host",
                                        "headerValue": "{http_req_host}"
                                      }
                                    ],
                                    "responseHeaderConfigurations": []
                                  }
                                },
                                {
                                  "ruleSequence": 100,
                                  "conditions": [
                                    {
                                      "variable": "http_resp_Location",
                                      "pattern": "(https?):\\/\\/[^\\/]+:6443\\/(?:arcgis|server)(.*)$",
                                      "ignoreCase": true,
                                      "negate": false
                                    }
                                  ],
                                  "name": "ServerRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [],
                                    "responseHeaderConfigurations": [
                                      {
                                        "headerName": "RewriteLocationValue",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                      },
                                      {
                                        "headerName": "Location",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "redirectConfigurations": [
                          {
                            "name": "[format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix'))]",
                            "properties": {
                              "redirectType": "Permanent",
                              "targetListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "includePath": true,
                              "includeQueryString": true,
                              "requestRoutingRules": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/requestRoutingRules', parameters('applicationGatewayName'), format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix')))]"
                                }
                              ]
                            }
                          }
                        ],
                        "privateLinkConfigurations": []
                      }
                    }
                  ],
                  "outputs": {
                    "applicationGatewayPrivateIpAddress": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '2023-06-01').frontendIPConfigurations[1].properties.privateIPAddress]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriServers",
                "count": "[length(parameters('serverVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('serverVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUsername": {
                    "value": "[parameters('arcgisServiceAccountUsername')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscServerScriptFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscServerScriptFunction'))]"
                  },
                  "enableServerLogHarvesterPlugin": {
                    "value": "[parameters('enableServerLogHarvesterPlugin')]"
                  },
                  "enableVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "isUpdatingCertificates": {
                    "value": "[parameters('isUpdatingCertificates')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "publicKeySSLCertificateFileName": {
                    "value": "[format('wildcard{0}-PublicKey.cer', parameters('externalDnsHostname'))]"
                  },
                  "serverContext": {
                    "value": "[parameters('serverContext')]"
                  },
                  "serverLicenseFileName": {
                    "value": "[parameters('serverLicenseFileName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('serverVirtualMachines')[copyIndex()]]"
                  },
                  "virtualMachineOSDiskSize": {
                    "value": "[parameters('virtualMachineOSDiskSize')]"
                  },
                  "selfSignedSSLCertificatePassword": {
                    "value": "[parameters('selfSignedSSLCertificatePassword')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "15300850924766128196"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUsername": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enableServerLogHarvesterPlugin": {
                      "type": "bool"
                    },
                    "enableVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "isUpdatingCertificates": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "publicKeySSLCertificateFileName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "serverContext": {
                      "type": "string"
                    },
                    "serverLicenseFileName": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "virtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "selfSignedSSLCertificatePassword": {
                      "type": "securestring"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "DebugMode": "[string(parameters('debugMode'))]",
                            "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
                            "EnableLogHarvesterPlugin": "[string(parameters('enableServerLogHarvesterPlugin'))]",
                            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
                            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                            "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "ServerContext": "[parameters('serverContext')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "ServerLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('serverLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUsername')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "ServerInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[parameters('selfSignedSSLCertificatePassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscsStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriDataStoreServers",
                "count": "[length(parameters('dataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('dataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUsername": {
                    "value": "[parameters('arcgisServiceAccountUsername')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "dataStoreVirtualMachineNames": {
                    "value": "[parameters('dataStoreVirtualMachineNames')]"
                  },
                  "dataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('dataStoreVirtualMachineOSDiskSize')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscDataStoreFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscDataStoreFunction'))]"
                  },
                  "enableDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableDataStoreVirtualMachineDataDisk')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('dataStoreVirtualMachines')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "4917094214467560406"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUsername": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "dataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "dataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "enableDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "DataStoreMachineNames": "[parameters('dataStoreVirtualMachineNames')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('dataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableDataStoreVirtualMachineDataDisk'))]",
                            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUsername')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscsStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriSpatioTemporalServers",
                "count": "[length(parameters('spatiotemporalBigDataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUsername": {
                    "value": "[parameters('arcgisServiceAccountUsername')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscSpatioTemporalFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscSpatioTemporalFunction'))]"
                  },
                  "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "spatiotemporalBigDataStoreVirtualMachineNames": {
                    "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineNames')]"
                  },
                  "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "13596683694626709247"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUsername": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "spatiotemporalBigDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "SpatiotemporalBigDataStoreMachineNames": "[parameters('spatiotemporalBigDataStoreVirtualMachineNames')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk'))]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUsername')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriDataStoreServers",
                "dscEsriObjectDataStoreServers",
                "dscEsriServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriTileCacheServers",
                "count": "[length(parameters('tileCacheVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('tileCacheVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUsername": {
                    "value": "[parameters('arcgisServiceAccountUsername')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscTileCacheFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscTileCacheFunction'))]"
                  },
                  "enableTileCacheDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableTileCacheDataStoreVirtualMachineDataDisk')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "isMultiMachineTileCacheDataStore": {
                    "value": "[parameters('isMultiMachineTileCacheDataStore')]"
                  },
                  "isTileCacheDataStoreClustered": {
                    "value": "[parameters('isTileCacheDataStoreClustered')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tileCacheDataStoreVirtualMachineNames": {
                    "value": "[parameters('tileCacheVirtualMachineNames')]"
                  },
                  "tileCacheDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('tileCacheVirtualMachines')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "2626642131920207188"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUsername": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "isTileCacheDataStoreClustered": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "tileCacheDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "isMultiMachineTileCacheDataStore": {
                      "type": "bool"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "tileCacheDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "enableTileCacheDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "IsTileCacheDataStoreClustered": "[parameters('isTileCacheDataStoreClustered')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "TileCacheDataStoreMachineNames": "[parameters('tileCacheDataStoreVirtualMachineNames')]",
                            "IsMultiMachineTileCache": "[parameters('isMultiMachineTileCacheDataStore')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableTileCacheDataStoreVirtualMachineDataDisk'))]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUsername')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriDataStoreServers",
                "dscEsriGraphDataStoreServers",
                "dscEsriServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriGraphDataStoreServers",
                "count": "[length(parameters('graphDataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('graphDataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUsername": {
                    "value": "[parameters('arcgisServiceAccountUsername')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscGraphDataStoreFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscGraphDataStoreFunction'))]"
                  },
                  "enableGraphDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableGraphDataStoreVirtualMachineDataDisk')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.fileShareName.value]"
                  },
                  "graphDataStoreVirtualMachineNames": {
                    "value": "[parameters('graphDataStoreVirtualMachineNames')]"
                  },
                  "graphDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('graphDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('graphDataStoreVirtualMachines')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "853925328097792300"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUsername": {
                      "type": "string"
                    },
                    "graphDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "graphDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "enableGraphDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "GraphDataStoreMachineNames": "[parameters('graphDataStoreVirtualMachineNames')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('graphDataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[parameters('enableGraphDataStoreVirtualMachineDataDisk')]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUsername')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscsStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriDataStoreServers",
                "dscEsriObjectDataStoreServers",
                "dscEsriServers",
                "dscEsriSpatioTemporalServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriObjectDataStoreServers",
                "count": "[length(parameters('objectDataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('objectDataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUsername": {
                    "value": "[parameters('arcgisServiceAccountUsername')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscObjectDataStoreFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscObjectDataStoreFunction'))]"
                  },
                  "enableObjectDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableObjectDataStoreVirtualMachineDataDisk')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.fileShareName.value]"
                  },
                  "isObjectDataStoreClustered": {
                    "value": "[parameters('isObjectDataStoreClustered')]"
                  },
                  "objectDataStoreVirtualMachineNames": {
                    "value": "[parameters('objectDataStoreVirtualMachineNames')]"
                  },
                  "objectDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('objectDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('objectDataStoreVirtualMachines')[copyIndex()]]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "14368721306093011933"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUsername": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "isObjectDataStoreClustered": {
                      "type": "bool"
                    },
                    "objectDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "objectDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "enableObjectDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    }
                  },
                  "variables": {
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    },
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "IsObjectDataStoreClustered": "[parameters('isObjectDataStoreClustered')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "ObjectDataStoreMachineNames": "[parameters('objectDataStoreVirtualMachineNames')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "OSDiskSize": "[parameters('objectDataStoreVirtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableObjectDataStoreVirtualMachineDataDisk'))]",
                            "DebugMode": "[string(parameters('debugMode'))]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUsername')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriDataStoreServers",
                "dscEsriServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "dscEsriPortalServers",
                "count": "[length(parameters('portalVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('portalVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUsername": {
                    "value": "[parameters('arcgisServiceAccountUsername')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscPortalFunction')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', parameters('dscPortalFunction'))]"
                  },
                  "enablePortalVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[parameters('fileShareVirtualMachineName')]"
                  },
                  "isUpdatingCertificates": {
                    "value": "[parameters('isUpdatingCertificates')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalContext": {
                    "value": "[parameters('portalContext')]"
                  },
                  "portalLicenseFileName": {
                    "value": "[parameters('portalLicenseFileName')]"
                  },
                  "portalLicenseUserTypeId": {
                    "value": "[parameters('portalLicenseUserTypeId')]"
                  },
                  "portalVirtualMachineNames": {
                    "value": "[parameters('portalVirtualMachineNames')]"
                  },
                  "portalVirtualMachineOSDiskSize": {
                    "value": "[parameters('portalVirtualMachineOSDiskSize')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "publicKeySSLCertificateFileName": {
                    "value": "[format('wildcard{0}-PublicKey.cer', parameters('externalDnsHostname'))]"
                  },
                  "secondaryDnsHostName": {
                    "value": "[parameters('secondaryDnsHostName')]"
                  },
                  "serverContext": {
                    "value": "[parameters('serverContext')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('serverVirtualMachineNames')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('portalVirtualMachines')[copyIndex()]]"
                  },
                  "selfSignedSSLCertificatePassword": {
                    "value": "[parameters('selfSignedSSLCertificatePassword')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "9465569971079271013"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUsername": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enablePortalVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "isUpdatingCertificates": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "portalContext": {
                      "type": "string"
                    },
                    "portalLicenseFileName": {
                      "type": "string"
                    },
                    "portalLicenseUserTypeId": {
                      "type": "string"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "publicKeySSLCertificateFileName": {
                      "type": "string"
                    },
                    "secondaryDnsHostName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "portalVirtualMachineNames": {
                      "type": "string"
                    },
                    "portalVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "serverContext": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "useSelfSignedInternalSSLCertificate": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "selfSignedSSLCertificatePassword": {
                      "type": "securestring"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "DebugMode": "[string(parameters('debugMode'))]",
                            "EnableDataDisk": "[string(parameters('enablePortalVirtualMachineDataDisk'))]",
                            "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                            "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
                            "OSDiskSize": "[parameters('portalVirtualMachineOSDiskSize')]",
                            "PortalContext": "[parameters('portalContext')]",
                            "PortalLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('portalLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "PortalMachineNames": "[parameters('portalVirtualMachineNames')]",
                            "PrivateDNSHostName": "[parameters('secondaryDnsHostName')]",
                            "ServerContext": "[parameters('serverContext')]",
                            "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "PortalLicenseUserTypeId": "[parameters('portalLicenseUserTypeId')]",
                            "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "managedIdentity": {
                            "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "configurationArguments": {
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUsername')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "PortalInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), '')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "dscsStatus": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                "dscEsriDataStoreServers",
                "dscEsriGraphDataStoreServers",
                "dscEsriObjectDataStoreServers",
                "dscEsriServers",
                "dscEsriSpatioTemporalServers",
                "dscEsriTileCacheServers",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-management-vm-{0}', parameters('deploymentNameSuffix')))]",
        "multiTierDatastoreServerVirtualMachines",
        "multiTierFileServerVirtualMachines",
        "multiTierGraphVirtualMachines",
        "multiTierObjectDataStoreVirtualMachines",
        "multiTierPortalVirtualMachines",
        "multiTierServerVirtualMachines",
        "multiTierSpatiotemporalBigDataStoreVirtualMachines",
        "multiTierTileCacheVirtualMachines",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('architecture'), 'singletier')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-singletier-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineAdminPassword": {
            "value": "[parameters('virtualMachineAdminPassword')]"
          },
          "virtualMachineAdminUsername": {
            "value": "[parameters('virtualMachineAdminUsername')]"
          },
          "applicationGatewayName": {
            "value": "[variables('applicationGatewayName')]"
          },
          "applicationGatewayPrivateIpAddress": {
            "value": "[variables('applicationGatewayPrivateIpAddress')]"
          },
          "arcgisServiceAccountIsDomainAccount": {
            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
          },
          "arcgisServiceAccountPassword": {
            "value": "[parameters('arcgisServiceAccountPassword')]"
          },
          "arcgisServiceAccountUsername": {
            "value": "[parameters('arcgisServiceAccountUsername')]"
          },
          "cloudStorageAccountCredentialsUserName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.cloudStorageAccountCredentialsUserName.value]"
          },
          "dataStoreTypesForBaseDeploymentServers": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-single-tier-datastore-types-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.dataStoreTypesForBaseDeploymentServers.value), createObject('value', 'none'))]",
          "debugMode": {
            "value": "[parameters('debugMode')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "dscConfiguration": {
            "value": "[variables('dscSingleTierConfiguration')]"
          },
          "dscScript": {
            "value": "[format('{0}.ps1', variables('dscSingleTierConfiguration'))]"
          },
          "enableServerLogHarvesterPlugin": {
            "value": "[parameters('enableServerLogHarvesterPlugin')]"
          },
          "enableVirtualMachineDataDisk": {
            "value": "[parameters('enableVirtualMachineDataDisk')]"
          },
          "externalDnsHostname": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "hostname": {
            "value": "[parameters('externalDnsHostname')]"
          },
          "isTileCacheDataStoreClustered": {
            "value": "[variables('isTileCacheDataStoreClustered')]"
          },
          "isUpdatingCertificates": {
            "value": "[parameters('isUpdatingCertificates')]"
          },
          "joinWindowsDomain": {
            "value": "[parameters('joinWindowsDomain')]"
          },
          "keyVaultUri": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "portalBackendSslCert": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.portalBackendSSLCert.value]"
          },
          "portalContext": {
            "value": "[variables('portalContext')]"
          },
          "portalLicenseFileName": {
            "value": "[variables('portalLicenseFileName')]"
          },
          "portalLicenseUserTypeId": {
            "value": "[parameters('portalLicenseUserTypeId')]"
          },
          "primarySiteAdministratorAccountPassword": {
            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
          },
          "primarySiteAdministratorAccountUserName": {
            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
          },
          "publicIpId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.pipId.value]"
          },
          "publicKeySSLCertificateFileName": {
            "value": "[format('wildcard{0}-PublicKey.cer', parameters('externalDnsHostname'))]"
          },
          "resourceGroupName": {
            "value": "[variables('resourceGroupName')]"
          },
          "resourceSuffix": {
            "value": "[variables('resourceSuffix')]"
          },
          "selfSignedSSLCertificatePassword": {
            "value": "[parameters('selfSignedCertificatePassword')]"
          },
          "serverBackendSSLCert": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.serverBackendSSLCert.value]"
          },
          "serverContext": {
            "value": "[variables('serverContext')]"
          },
          "serverLicenseFileName": {
            "value": "[variables('serverLicenseFileName')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
          },
          "storageUriPrefix": {
            "value": "[format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "useAzureFiles": {
            "value": "[parameters('useAzureFiles')]"
          },
          "useCloudStorage": {
            "value": "[parameters('useCloudStorage')]"
          },
          "userAssignedIdenityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
          },
          "virtualMachineName": {
            "value": "[variables('virtualMachineName')]"
          },
          "virtualMachineOSDiskSize": {
            "value": "[parameters('virtualMachineOSDiskSize')]"
          },
          "virtualNetworkName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.namingConvention.value.virtualNetwork]"
          },
          "windowsDomainName": {
            "value": "[parameters('windowsDomainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "18431462492256303955"
            }
          },
          "parameters": {
            "virtualMachineAdminPassword": {
              "type": "securestring"
            },
            "virtualMachineAdminUsername": {
              "type": "string"
            },
            "arcgisServiceAccountIsDomainAccount": {
              "type": "bool"
            },
            "arcgisServiceAccountPassword": {
              "type": "securestring"
            },
            "arcgisServiceAccountUsername": {
              "type": "string"
            },
            "applicationGatewayPrivateIpAddress": {
              "type": "string"
            },
            "cloudStorageAccountCredentialsUserName": {
              "type": "string"
            },
            "dataStoreTypesForBaseDeploymentServers": {
              "type": "string"
            },
            "debugMode": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "dscConfiguration": {
              "type": "string"
            },
            "dscScript": {
              "type": "string"
            },
            "enableServerLogHarvesterPlugin": {
              "type": "bool"
            },
            "enableVirtualMachineDataDisk": {
              "type": "bool"
            },
            "hostname": {
              "type": "string"
            },
            "isTileCacheDataStoreClustered": {
              "type": "bool"
            },
            "isUpdatingCertificates": {
              "type": "bool"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "portalContext": {
              "type": "string"
            },
            "portalLicenseFileName": {
              "type": "string"
            },
            "portalLicenseUserTypeId": {
              "type": "string"
            },
            "primarySiteAdministratorAccountPassword": {
              "type": "securestring"
            },
            "primarySiteAdministratorAccountUserName": {
              "type": "string"
            },
            "publicKeySSLCertificateFileName": {
              "type": "string"
            },
            "serverContext": {
              "type": "string"
            },
            "serverLicenseFileName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageUriPrefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "useAzureFiles": {
              "type": "bool"
            },
            "useCloudStorage": {
              "type": "bool"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualMachineOSDiskSize": {
              "type": "int"
            },
            "selfSignedSSLCertificatePassword": {
              "type": "securestring"
            },
            "applicationGatewayName": {
              "type": "string"
            },
            "externalDnsHostname": {
              "type": "string"
            },
            "joinWindowsDomain": {
              "type": "bool"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "portalBackendSslCert": {
              "type": "string"
            },
            "publicIpId": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "resourceSuffix": {
              "type": "string"
            },
            "serverBackendSSLCert": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]"
            },
            "userAssignedIdenityResourceId": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "windowsDomainName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGatewayName": {
                    "value": "[parameters('applicationGatewayName')]"
                  },
                  "applicationGatewayPrivateIpAddress": {
                    "value": "[parameters('applicationGatewayPrivateIpAddress')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "keyVaultUri": {
                    "value": "[parameters('keyVaultUri')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalBackendSslCert": {
                    "value": "[parameters('portalBackendSslCert')]"
                  },
                  "portalVirtualMachineNames": {
                    "value": "[parameters('virtualMachineName')]"
                  },
                  "publicIpId": {
                    "value": "[parameters('publicIpId')]"
                  },
                  "resourceGroup": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "resourceSuffix": {
                    "value": "[parameters('resourceSuffix')]"
                  },
                  "serverBackendSSLCert": {
                    "value": "[parameters('serverBackendSSLCert')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[parameters('virtualMachineName')]"
                  },
                  "userAssignedIdenityResourceId": {
                    "value": "[parameters('userAssignedIdenityResourceId')]"
                  },
                  "virtualNetworkName": {
                    "value": "[parameters('virtualNetworkName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "8089071357281164736"
                    }
                  },
                  "parameters": {
                    "applicationGatewayName": {
                      "type": "string"
                    },
                    "applicationGatewayPrivateIpAddress": {
                      "type": "string"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "portalBackendSslCert": {
                      "type": "string"
                    },
                    "portalVirtualMachineNames": {
                      "type": "string"
                    },
                    "publicIpId": {
                      "type": "string"
                    },
                    "resourceGroup": {
                      "type": "string"
                    },
                    "resourceSuffix": {
                      "type": "string"
                    },
                    "serverBackendSSLCert": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "userAssignedIdenityResourceId": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "serverBackEndVirtualMachines": "[split(parameters('serverVirtualMachineNames'), ',')]",
                    "portalBackEndVirtualMachines": "[split(parameters('portalVirtualMachineNames'), ',')]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2023-06-01",
                      "name": "[parameters('applicationGatewayName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdenityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "sku": {
                          "name": "Standard_v2",
                          "tier": "Standard_v2",
                          "capacity": 2
                        },
                        "gatewayIPConfigurations": [
                          {
                            "name": "appGatewayIpConfig",
                            "properties": {
                              "subnet": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                              }
                            }
                          }
                        ],
                        "sslCertificates": [
                          {
                            "name": "frontendCert",
                            "properties": {
                              "keyVaultSecretId": "[format('{0}secrets/pfx{1}', parameters('keyVaultUri'), parameters('location'))]"
                            }
                          }
                        ],
                        "trustedRootCertificates": [
                          {
                            "name": "serverBackendSSLCert",
                            "properties": {
                              "data": "[parameters('serverBackendSSLCert')]"
                            }
                          },
                          {
                            "name": "portalBackendSSLCert",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]",
                            "properties": {
                              "data": "[parameters('portalBackendSslCert')]"
                            }
                          }
                        ],
                        "trustedClientCertificates": [],
                        "sslProfiles": [],
                        "frontendIPConfigurations": [
                          {
                            "name": "pipIpConfig",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "publicIPAddress": {
                                "id": "[parameters('publicIpId')]"
                              }
                            }
                          },
                          {
                            "name": "[format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "privateIPAddress": "[parameters('applicationGatewayPrivateIpAddress')]",
                              "privateIPAllocationMethod": "Static",
                              "subnet": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                              }
                            }
                          }
                        ],
                        "frontendPorts": [
                          {
                            "name": "[format('EnterprisePort443{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "port": 443
                            }
                          },
                          {
                            "name": "[format('EnterprisePort80{0}', parameters('resourceSuffix'))]",
                            "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]",
                            "properties": {
                              "port": 80
                            }
                          }
                        ],
                        "backendAddressPools": [
                          {
                            "name": "[format('ServerBackendPool{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "copy": [
                                {
                                  "name": "backendAddresses",
                                  "count": "[length(variables('serverBackEndVirtualMachines'))]",
                                  "input": {
                                    "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('{0}PortalBackendPool', parameters('resourceSuffix'))]",
                            "properties": {
                              "copy": [
                                {
                                  "name": "backendAddresses",
                                  "count": "[length(variables('portalBackEndVirtualMachines'))]",
                                  "input": {
                                    "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "loadDistributionPolicies": [],
                        "backendHttpSettingsCollection": [
                          {
                            "name": "[format('PortalHttpsSetting{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "port": 7443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "connectionDraining": {
                                "enabled": true,
                                "drainTimeoutInSec": 60
                              },
                              "pickHostNameFromBackendAddress": true,
                              "path": "/arcgis/",
                              "requestTimeout": 180,
                              "probe": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}PortalProbeName', parameters('resourceSuffix')))]"
                              },
                              "trustedRootCertificates": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]"
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('ServerHttpsSetting{0}', parameters('resourceSuffix'))]",
                            "properties": {
                              "port": 6443,
                              "protocol": "Https",
                              "cookieBasedAffinity": "Disabled",
                              "connectionDraining": {
                                "enabled": true,
                                "drainTimeoutInSec": 60
                              },
                              "pickHostNameFromBackendAddress": true,
                              "path": "/arcgis/",
                              "requestTimeout": 180,
                              "probe": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}ServerProbeName', parameters('resourceSuffix')))]"
                              },
                              "trustedRootCertificates": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'serverBackendSSLCert')]"
                                }
                              ]
                            }
                          }
                        ],
                        "backendSettingsCollection": [],
                        "httpListeners": [
                          {
                            "name": "[format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                              },
                              "frontendPort": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]"
                              },
                              "protocol": "Http",
                              "hostNames": [
                                "[parameters('externalDnsHostName')]"
                              ],
                              "requireServerNameIndication": false
                            }
                          },
                          {
                            "name": "[format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                              },
                              "frontendPort": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]"
                              },
                              "protocol": "Https",
                              "sslCertificate": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/sslCertificates', parameters('applicationGatewayName'), 'frontendCert')]"
                              },
                              "hostNames": [
                                "[parameters('externalDnsHostName')]"
                              ],
                              "requireServerNameIndication": false
                            }
                          }
                        ],
                        "listeners": [],
                        "urlPathMaps": [
                          {
                            "name": "[format('{0}EnterprisePathMap', parameters('resourceSuffix'))]",
                            "properties": {
                              "defaultBackendAddressPool": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                              },
                              "defaultBackendHttpSettings": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                              },
                              "pathRules": [
                                {
                                  "name": "serverPathRule",
                                  "properties": {
                                    "paths": [
                                      "/server/*",
                                      "/server"
                                    ],
                                    "backendAddressPool": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                                    },
                                    "backendHttpSettings": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                                    },
                                    "rewriteRuleSet": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}ServerRewriteRuleSet', parameters('resourceSuffix')))]"
                                    }
                                  }
                                },
                                {
                                  "name": "portalPathRule",
                                  "properties": {
                                    "paths": [
                                      "/portal/*",
                                      "/portal"
                                    ],
                                    "backendAddressPool": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('{0}PortalBackendPool', parameters('resourceSuffix')))]"
                                    },
                                    "backendHttpSettings": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('PortalHttpsSetting{0}', parameters('resourceSuffix')))]"
                                    },
                                    "rewriteRuleSet": {
                                      "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}PortalRewriteRuleSet', parameters('resourceSuffix')))]"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "requestRoutingRules": [
                          {
                            "name": "[format('{0}EnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                            "properties": {
                              "ruleType": "PathBasedRouting",
                              "priority": 10,
                              "httpListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "urlPathMap": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/urlPathMaps', parameters('applicationGatewayName'), format('{0}EnterprisePathMap', parameters('resourceSuffix')))]"
                              }
                            }
                          },
                          {
                            "name": "[format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                            "properties": {
                              "ruleType": "Basic",
                              "priority": 20,
                              "httpListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "redirectConfiguration": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/redirectConfigurations', parameters('applicationGatewayName'), format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix')))]"
                              }
                            }
                          }
                        ],
                        "routingRules": [],
                        "probes": [
                          {
                            "name": "[format('{0}ServerProbeName', parameters('resourceSuffix'))]",
                            "properties": {
                              "protocol": "Https",
                              "path": "/arcgis/rest/info/healthcheck",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "pickHostNameFromBackendHttpSettings": true,
                              "minServers": 0,
                              "match": {
                                "statusCodes": [
                                  "200"
                                ]
                              }
                            }
                          },
                          {
                            "name": "[format('{0}PortalProbeName', parameters('resourceSuffix'))]",
                            "properties": {
                              "protocol": "Https",
                              "path": "/arcgis/portaladmin/healthCheck",
                              "interval": 30,
                              "timeout": 30,
                              "unhealthyThreshold": 3,
                              "pickHostNameFromBackendHttpSettings": true,
                              "minServers": 0,
                              "match": {
                                "statusCodes": [
                                  "200"
                                ]
                              }
                            }
                          }
                        ],
                        "rewriteRuleSets": [
                          {
                            "name": "[format('{0}PortalRewriteRuleSet', parameters('resourceSuffix'))]",
                            "properties": {
                              "rewriteRules": [
                                {
                                  "ruleSequence": 50,
                                  "conditions": [],
                                  "name": "XForwardedHostRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [
                                      {
                                        "headerName": "X-Forwarded-Host",
                                        "headerValue": "{http_req_host}"
                                      }
                                    ],
                                    "responseHeaderConfigurations": []
                                  }
                                },
                                {
                                  "ruleSequence": 100,
                                  "conditions": [
                                    {
                                      "variable": "http_resp_Location",
                                      "pattern": "(https?):\\/\\/[^\\/]+:7443\\/(?:arcgis|portal)(.*)$",
                                      "ignoreCase": true,
                                      "negate": false
                                    }
                                  ],
                                  "name": "PortalRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [],
                                    "responseHeaderConfigurations": [
                                      {
                                        "headerName": "RewriteLocationValue",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                      },
                                      {
                                        "headerName": "Location",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "[format('{0}ServerRewriteRuleSet', parameters('resourceSuffix'))]",
                            "properties": {
                              "rewriteRules": [
                                {
                                  "ruleSequence": 50,
                                  "conditions": [],
                                  "name": "XForwardedHostRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [
                                      {
                                        "headerName": "X-Forwarded-Host",
                                        "headerValue": "{http_req_host}"
                                      }
                                    ],
                                    "responseHeaderConfigurations": []
                                  }
                                },
                                {
                                  "ruleSequence": 100,
                                  "conditions": [
                                    {
                                      "variable": "http_resp_Location",
                                      "pattern": "(https?):\\/\\/[^\\/]+:6443\\/(?:arcgis|server)(.*)$",
                                      "ignoreCase": true,
                                      "negate": false
                                    }
                                  ],
                                  "name": "ServerRewrite",
                                  "actionSet": {
                                    "requestHeaderConfigurations": [],
                                    "responseHeaderConfigurations": [
                                      {
                                        "headerName": "RewriteLocationValue",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                      },
                                      {
                                        "headerName": "Location",
                                        "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "redirectConfigurations": [
                          {
                            "name": "[format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix'))]",
                            "properties": {
                              "redirectType": "Permanent",
                              "targetListener": {
                                "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                              },
                              "includePath": true,
                              "includeQueryString": true,
                              "requestRoutingRules": [
                                {
                                  "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/requestRoutingRules', parameters('applicationGatewayName'), format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix')))]"
                                }
                              ]
                            }
                          }
                        ],
                        "privateLinkConfigurations": []
                      }
                    }
                  ],
                  "outputs": {
                    "applicationGatewayPrivateIpAddress": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '2023-06-01').frontendIPConfigurations[1].properties.privateIPAddress]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('desired-state-configuration-{0}', parameters('deploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUsername": {
                    "value": "[parameters('arcgisServiceAccountUsername')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                  },
                  "dataStoreTypesForBaseDeploymentServers": {
                    "value": "[parameters('dataStoreTypesForBaseDeploymentServers')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "dscConfiguration": {
                    "value": "[parameters('dscConfiguration')]"
                  },
                  "dscScript": {
                    "value": "[parameters('dscScript')]"
                  },
                  "enableServerLogHarvesterPlugin": {
                    "value": "[parameters('enableServerLogHarvesterPlugin')]"
                  },
                  "enableVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "hostname": {
                    "value": "[parameters('hostname')]"
                  },
                  "isTileCacheDataStoreClustered": {
                    "value": "[parameters('isTileCacheDataStoreClustered')]"
                  },
                  "isUpdatingCertificates": {
                    "value": "[parameters('isUpdatingCertificates')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalContext": {
                    "value": "[parameters('portalContext')]"
                  },
                  "portalLicenseFileName": {
                    "value": "[parameters('portalLicenseFileName')]"
                  },
                  "portalLicenseUserTypeId": {
                    "value": "[parameters('portalLicenseUserTypeId')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "publicKeySSLCertificateFileName": {
                    "value": "[parameters('publicKeySSLCertificateFileName')]"
                  },
                  "selfSignedSSLCertificatePassword": {
                    "value": "[parameters('selfSignedSSLCertificatePassword')]"
                  },
                  "serverContext": {
                    "value": "[parameters('serverContext')]"
                  },
                  "serverLicenseFileName": {
                    "value": "[parameters('serverLicenseFileName')]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('storageAccountName')]"
                  },
                  "storageUriPrefix": {
                    "value": "[parameters('storageUriPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "virtualMachineAdminPassword": {
                    "value": "[parameters('virtualMachineAdminPassword')]"
                  },
                  "virtualMachineAdminUsername": {
                    "value": "[parameters('virtualMachineAdminUsername')]"
                  },
                  "virtualMachineNames": {
                    "value": "[parameters('virtualMachineName')]"
                  },
                  "virtualMachineOSDiskSize": {
                    "value": "[parameters('virtualMachineOSDiskSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "1110447615834551106"
                    }
                  },
                  "parameters": {
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUsername": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "convertedEpoch": {
                      "type": "int",
                      "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                    },
                    "dataStoreTypesForBaseDeploymentServers": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enableServerLogHarvesterPlugin": {
                      "type": "bool"
                    },
                    "enableVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "hostname": {
                      "type": "string"
                    },
                    "isTileCacheDataStoreClustered": {
                      "type": "bool"
                    },
                    "isUpdatingCertificates": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "portalContext": {
                      "type": "string"
                    },
                    "portalLicenseFileName": {
                      "type": "string"
                    },
                    "portalLicenseUserTypeId": {
                      "type": "string"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "publicKeySSLCertificateFileName": {
                      "type": "string"
                    },
                    "selfSignedSSLCertificatePassword": {
                      "type": "securestring"
                    },
                    "serverContext": {
                      "type": "string"
                    },
                    "serverLicenseFileName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "useSelfSignedInternalSSLCertificate": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "virtualMachineAdminPassword": {
                      "type": "securestring"
                    },
                    "virtualMachineAdminUsername": {
                      "type": "string"
                    },
                    "virtualMachineNames": {
                      "type": "string"
                    },
                    "virtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "storageAccountName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                    "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                    "sasProperties": {
                      "signedProtocol": "https",
                      "signedResourceTypes": "sco",
                      "signedPermission": "rl",
                      "signedServices": "b",
                      "signedExpiry": "[variables('convertedDatetime')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2018-10-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                      "location": "[parameters('location')]",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject())]",
                      "properties": {
                        "autoUpgradeMinorVersion": true,
                        "publisher": "Microsoft.Powershell",
                        "type": "DSC",
                        "typeHandlerVersion": "2.77",
                        "settings": {
                          "wmfVersion": "latest",
                          "configuration": {
                            "url": "[variables('dscModuleUrl')]",
                            "script": "[parameters('dscScript')]",
                            "function": "[parameters('dscConfiguration')]"
                          },
                          "configurationArguments": {
                            "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                            "PortalLicenseUserTypeId": "[parameters('portalLicenseUserTypeId')]",
                            "MachineName": "[parameters('virtualMachineNames')]",
                            "PeerMachineName": "[parameters('virtualMachineNames')]",
                            "ExternalDNSHostName": "[parameters('hostname')]",
                            "PrivateDNSHostName": "",
                            "DataStoreTypes": "[parameters('dataStoreTypesForBaseDeploymentServers')]",
                            "IsTileCacheDataStoreClustered": "[parameters('isTileCacheDataStoreClustered')]",
                            "FileShareName": "[parameters('fileShareName')]",
                            "UseCloudStorage": "[parameters('useCloudStorage')]",
                            "UseAzureFiles": "[parameters('useAzureFiles')]",
                            "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                            "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
                            "EnableLogHarvesterPlugin": "[string(parameters('enableServerLogHarvesterPlugin'))]",
                            "DebugMode": "[string(parameters('debugMode'))]",
                            "ServerContext": "[parameters('serverContext')]",
                            "PortalContext": "[parameters('portalContext')]",
                            "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]"
                          }
                        },
                        "protectedSettings": {
                          "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                          "configurationArguments": {
                            "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "ServerLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('serverLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "PortalLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('portalLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                            "ServiceCredential": {
                              "userName": "[parameters('arcgisServiceAccountUsername')]",
                              "password": "[parameters('arcgisServiceAccountPassword')]"
                            },
                            "MachineAdministratorCredential": {
                              "userName": "[parameters('virtualMachineAdminUsername')]",
                              "password": "[parameters('virtualMachineAdminPassword')]"
                            },
                            "ServerInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), '')]"
                            },
                            "PortalInternalCertificatePassword": {
                              "userName": "Placeholder",
                              "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), '')]"
                            },
                            "SiteAdministratorCredential": {
                              "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                              "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                            },
                            "StorageAccountCredential": {
                              "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                              "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-management-vm-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-single-tier-datastore-types-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-virtual-machine-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ]
}