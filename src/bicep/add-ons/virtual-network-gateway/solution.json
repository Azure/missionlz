{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "7935838492689304353"
    }
  },
  "parameters": {
    "vgwName": {
      "type": "string",
      "metadata": {
        "description": "The name of the VPN Gateway."
      }
    },
    "vgwLocation": {
      "type": "string",
      "metadata": {
        "description": "The Azure region location of the VPN Gateway."
      }
    },
    "vgwPublicIpAddressNames": {
      "type": "array",
      "metadata": {
        "description": "The names of the public IP addresses to use for the VPN Gateway."
      }
    },
    "vgwSku": {
      "type": "string",
      "defaultValue": "VpnGw2",
      "allowedValues": [
        "VpnGw2",
        "VpnGw3",
        "VpnGw4",
        "VpnGw5"
      ],
      "metadata": {
        "description": "The SKU of the VPN Gateway."
      }
    },
    "localNetworkGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Local Network Gateway Name"
      }
    },
    "localGatewayIpAddress": {
      "type": "string",
      "metadata": {
        "description": "IP Address of the Local Network Gateway, must be a public IP address or be able to be connected to from MLZ network"
      }
    },
    "localAddressPrefixes": {
      "type": "array",
      "metadata": {
        "description": "Address prefixes of the Local Network which will be routable through the VPN Gateway"
      }
    },
    "sharedKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The shared key to use for the VPN connection. If provided, the keyVaultCertificateUri parameter is ignored."
      }
    },
    "keyVaultCertificateUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The URI of the Key Vault certificate to use for the VPN connection. If provided, the sharedKey parameter is ignored."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
      }
    },
    "hubVirtualNetworkResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the hub virtual network."
      }
    },
    "vnetResourceIdList": {
      "type": "array",
      "metadata": {
        "description": "List of peered networks that should use the VPN Gateway once configured."
      }
    }
  },
  "variables": {
    "hubResourceGroupName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
    "hubVnetName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]",
    "extendedVnetResourceIdList": "[union(parameters('vnetResourceIdList'), createArray(parameters('hubVirtualNetworkResourceId')))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('vpnGatewayModule-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('hubResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vgwname": {
            "value": "[parameters('vgwName')]"
          },
          "vgwlocation": {
            "value": "[parameters('vgwLocation')]"
          },
          "publicIpAddressNames": {
            "value": "[parameters('vgwPublicIpAddressNames')]"
          },
          "vgwsku": {
            "value": "[parameters('vgwSku')]"
          },
          "vnetName": {
            "value": "[variables('hubVnetName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "18215410207160400567"
            }
          },
          "parameters": {
            "vgwname": {
              "type": "string"
            },
            "vgwlocation": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "publicIpAddressNames": {
              "type": "array"
            },
            "vgwsku": {
              "type": "string"
            },
            "vnetName": {
              "type": "string"
            }
          },
          "variables": {
            "gatewaySubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), 'GatewaySubnet')]",
            "firstPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressNames')[0])]",
            "secondPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressNames')[1])]"
          },
          "resources": [
            {
              "copy": {
                "name": "publicIpAddresses",
                "count": "[length(parameters('publicIpAddressNames'))]"
              },
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2023-02-01",
              "name": "[parameters('publicIpAddressNames')[copyIndex()]]",
              "location": "[parameters('vgwlocation')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "publicIPAllocationMethod": "Static"
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworkGateways",
              "apiVersion": "2023-02-01",
              "name": "[parameters('vgwname')]",
              "location": "[parameters('vgwlocation')]",
              "properties": {
                "gatewayType": "Vpn",
                "ipConfigurations": [
                  {
                    "name": "first",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[variables('gatewaySubnetId')]"
                      },
                      "publicIPAddress": {
                        "id": "[variables('firstPublicIpAddressId')]"
                      }
                    }
                  },
                  {
                    "name": "second",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[variables('secondPublicIpAddressId')]"
                      },
                      "subnet": {
                        "id": "[variables('gatewaySubnetId')]"
                      }
                    }
                  }
                ],
                "activeActive": true,
                "vpnType": "RouteBased",
                "vpnGatewayGeneration": "Generation2",
                "sku": {
                  "name": "[parameters('vgwsku')]",
                  "tier": "[parameters('vgwsku')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressNames')[1])]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressNames')[0])]"
              ]
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('localNetworkGatewayModule-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('hubResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vgwlocation": {
            "value": "[parameters('vgwLocation')]"
          },
          "localNetworkGatewayName": {
            "value": "[parameters('localNetworkGatewayName')]"
          },
          "gatewayIpAddress": {
            "value": "[parameters('localGatewayIpAddress')]"
          },
          "addressPrefixes": {
            "value": "[parameters('localAddressPrefixes')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "3956066736891748152"
            }
          },
          "parameters": {
            "vgwlocation": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "localNetworkGatewayName": {
              "type": "string"
            },
            "gatewayIpAddress": {
              "type": "string"
            },
            "addressPrefixes": {
              "type": "array"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/localNetworkGateways",
              "apiVersion": "2023-02-01",
              "name": "[parameters('localNetworkGatewayName')]",
              "location": "[parameters('vgwlocation')]",
              "properties": {
                "gatewayIpAddress": "[parameters('gatewayIpAddress')]",
                "localNetworkAddressSpace": {
                  "addressPrefixes": "[parameters('addressPrefixes')]"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('vpnConnectionModule-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[variables('hubResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vpnConnectionName": {
            "value": "[format('{0}-to-{1}', parameters('vgwName'), parameters('localNetworkGatewayName'))]"
          },
          "vgwlocation": {
            "value": "[parameters('vgwLocation')]"
          },
          "vpnGatewayName": {
            "value": "[parameters('vgwName')]"
          },
          "vpnGatewayResourceGroupName": {
            "value": "[variables('hubResourceGroupName')]"
          },
          "sharedKey": {
            "value": "[parameters('sharedKey')]"
          },
          "keyVaultCertificateUri": {
            "value": "[parameters('keyVaultCertificateUri')]"
          },
          "localNetworkGatewayName": {
            "value": "[parameters('localNetworkGatewayName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "3794144760462293218"
            }
          },
          "parameters": {
            "vpnConnectionName": {
              "type": "string"
            },
            "vgwlocation": {
              "type": "string"
            },
            "vpnGatewayName": {
              "type": "string"
            },
            "vpnGatewayResourceGroupName": {
              "type": "string"
            },
            "sharedKey": {
              "type": "string"
            },
            "keyVaultCertificateUri": {
              "type": "string"
            },
            "localNetworkGatewayName": {
              "type": "string"
            }
          },
          "variables": {
            "useSharedKey": "[not(empty(parameters('sharedKey')))]",
            "useKeyVaultCertificate": "[not(empty(parameters('keyVaultCertificateUri')))]",
            "errorMsg": "[if(and(variables('useSharedKey'), variables('useKeyVaultCertificate')), 'Cannot provide both sharedKey and keyVaultCertificateUri', '')]",
            "connectionSharedKey": "[if(variables('useSharedKey'), parameters('sharedKey'), null())]",
            "connectionIpsecPolicies": "[if(variables('useKeyVaultCertificate'), createArray(createObject('saLifeTimeSeconds', 3600, 'saDataSizeKilobytes', 102400000, 'ipsecEncryption', 'AES256', 'ipsecIntegrity', 'SHA256', 'ikeEncryption', 'AES256', 'ikeIntegrity', 'SHA256', 'dhGroup', 'DHGroup2', 'pfsGroup', 'PFS2')), null())]"
          },
          "resources": [
            {
              "condition": "[empty(variables('errorMsg'))]",
              "type": "Microsoft.Network/connections",
              "apiVersion": "2023-02-01",
              "name": "[parameters('vpnConnectionName')]",
              "location": "[parameters('vgwlocation')]",
              "properties": {
                "virtualNetworkGateway1": {
                  "id": "[resourceId(parameters('vpnGatewayResourceGroupName'), 'Microsoft.Network/virtualNetworkGateways', parameters('vpnGatewayName'))]"
                },
                "localNetworkGateway2": {
                  "id": "[resourceId(parameters('vpnGatewayResourceGroupName'), 'Microsoft.Network/localNetworkGateways', parameters('localNetworkGatewayName'))]"
                },
                "connectionType": "IPsec",
                "routingWeight": 10,
                "sharedKey": "[variables('connectionSharedKey')]",
                "ipsecPolicies": "[variables('connectionIpsecPolicies')]",
                "enableBgp": false,
                "usePolicyBasedTrafficSelectors": false
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('localNetworkGatewayModule-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('vpnGatewayModule-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "retrieveVnetPeerings",
        "count": "[length(variables('extendedVnetResourceIdList'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('retrieveVnetPeerings-{0}-{1}', parameters('deploymentNameSuffix'), copyIndex())]",
      "subscriptionId": "[split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[2]]",
      "resourceGroup": "[split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetResourceId": {
            "value": "[variables('extendedVnetResourceIdList')[copyIndex()]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "690677898779274539"
            }
          },
          "parameters": {
            "vnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing hub virtual network"
              }
            }
          },
          "resources": [],
          "outputs": {
            "peeringsData": {
              "type": "object",
              "value": {
                "vnetResourceId": "[parameters('vnetResourceId')]",
                "peeringsList": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('vnetResourceId'), '/')[2], split(parameters('vnetResourceId'), '/')[4]), 'Microsoft.Network/virtualNetworks', last(split(parameters('vnetResourceId'), '/'))), '2022-07-01').virtualNetworkPeerings]"
              }
            }
          }
        }
      }
    },
    {
      "copy": {
        "name": "updatePeerings",
        "count": "[length(variables('extendedVnetResourceIdList'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('updatePeerings-{0}-{1}', parameters('deploymentNameSuffix'), copyIndex())]",
      "subscriptionId": "[split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[2]]",
      "resourceGroup": "[split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[2], split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[4]), 'Microsoft.Resources/deployments', format('retrieveVnetPeerings-{0}-{1}', parameters('deploymentNameSuffix'), copyIndex())), '2022-09-01').outputs.peeringsData.value.vnetResourceId]"
          },
          "peeringsList": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[2], split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[4]), 'Microsoft.Resources/deployments', format('retrieveVnetPeerings-{0}-{1}', parameters('deploymentNameSuffix'), copyIndex())), '2022-09-01').outputs.peeringsData.value.peeringsList]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "17309938767845434764"
            }
          },
          "parameters": {
            "peeringsList": {
              "type": "array",
              "metadata": {
                "description": "The list of peerings to update"
              }
            },
            "vnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing virtual network"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "updatedPeerings",
                "count": "[length(parameters('peeringsList'))]",
                "input": {
                  "name": "[last(split(parameters('peeringsList')[copyIndex('updatedPeerings')].id, '/'))]",
                  "properties": {
                    "allowGatewayTransit": "[if(contains(split(parameters('peeringsList')[copyIndex('updatedPeerings')].id, '/')[8], 'hub'), true(), parameters('peeringsList')[copyIndex('updatedPeerings')].properties.allowGatewayTransit)]",
                    "useRemoteGateways": "[if(not(contains(split(parameters('peeringsList')[copyIndex('updatedPeerings')].id, '/')[8], 'hub')), true(), parameters('peeringsList')[copyIndex('updatedPeerings')].properties.useRemoteGateways)]",
                    "remoteVirtualNetwork": "[parameters('peeringsList')[copyIndex('updatedPeerings')].properties.remoteVirtualNetwork]"
                  }
                }
              }
            ],
            "vnetName": "[last(split(parameters('vnetResourceId'), '/'))]"
          },
          "resources": [
            {
              "copy": {
                "name": "peeringUpdates",
                "count": "[length(variables('updatedPeerings'))]"
              },
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/{1}', variables('vnetName'), variables('updatedPeerings')[copyIndex()].name)]",
              "properties": "[variables('updatedPeerings')[copyIndex()].properties]"
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[2], split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[4]), 'Microsoft.Resources/deployments', format('retrieveVnetPeerings-{0}-{1}', parameters('deploymentNameSuffix'), copyIndex()))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[2], split(variables('extendedVnetResourceIdList')[copyIndex()], '/')[4]), 'Microsoft.Resources/deployments', format('retrieveVnetPeerings-{0}-{1}', parameters('deploymentNameSuffix'), copyIndex()))]"
      ]
    }
  ]
}