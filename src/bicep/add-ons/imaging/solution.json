{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.26.170.59819",
      "templateHash": "4098442217130518679"
    }
  },
  "parameters": {
    "arcGisProInstaller": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The file name of the ArcGIS Pro installer in Azure Blobs."
      }
    },
    "azureFirewallResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the Azure Firewall in the HUB."
      }
    },
    "computeGalleryImageResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID of the source compute gallery image."
      }
    },
    "containerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the container in the storage account where the installer files are located."
      }
    },
    "customizations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The array of customizations to apply to the image."
      }
    },
    "deployActivityLogDiagnosticSetting": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Choose whether to deploy a diagnostic setting for the Activity Log."
      }
    },
    "deployDefender": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Defender for Cloud enabled."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow('yyMMddHHs')]",
      "metadata": {
        "description": "The suffix to append to deployment names."
      }
    },
    "deployNetworkWatcher": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Choose whether to deploy a network watcher for deployment location."
      }
    },
    "deployPolicy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Policy enabled."
      }
    },
    "distributionGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The distribution group for email notifications."
      }
    },
    "domainJoinPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the domain join account."
      }
    },
    "domainJoinUserPrincipalName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The user principal name for the domain join account."
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The domain name to join."
      }
    },
    "emailSecurityContact": {
      "type": "string",
      "metadata": {
        "description": "The email address for the security contact."
      }
    },
    "enableBuildAutomation": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to enable build automation."
      }
    },
    "environmentAbbreviation": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "prod",
        "test"
      ],
      "metadata": {
        "description": "The abbreviation for the environment."
      }
    },
    "excludeFromLatest": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Determines whether to exclude the image from the latest version."
      }
    },
    "exemptPolicyAssignmentIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The array of policy assignment IDs to exempt to prevent issues with the build process."
      }
    },
    "hubVirtualNetworkResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the hub virtual network."
      }
    },
    "hybridUseBenefit": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to use the hybrid use benefit."
      }
    },
    "identifier": {
      "type": "string",
      "maxLength": 3,
      "metadata": {
        "description": "The identifier for the resource names. This value should represent the workload, project, or business unit."
      }
    },
    "imageDefinitionNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "The name prefix for the image definition resource."
      }
    },
    "imageMajorVersion": {
      "type": "int",
      "metadata": {
        "description": "The major version for the name of the image version resource."
      }
    },
    "imagePatchVersion": {
      "type": "int",
      "metadata": {
        "description": "The patch version for the name of the image version resource."
      }
    },
    "installAccess": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install Access."
      }
    },
    "installArcGisPro": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install ArcGIS Pro."
      }
    },
    "installExcel": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install Excel."
      }
    },
    "installOneDrive": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install OneDrive."
      }
    },
    "installOneNote": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install OneNote."
      }
    },
    "installOutlook": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install Outlook."
      }
    },
    "installPowerPoint": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install PowerPoint."
      }
    },
    "installProject": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install Project."
      }
    },
    "installPublisher": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install Publisher."
      }
    },
    "installSkypeForBusiness": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install Skype for Business."
      }
    },
    "installTeams": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install Teams."
      }
    },
    "installUpdates": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Determines whether to install Microsoft/Windows Updates."
      }
    },
    "installVirtualDesktopOptimizationTool": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install the Virtual Desktop Optimization Tool."
      }
    },
    "installVisio": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install Visio."
      }
    },
    "installWord": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to install Word."
      }
    },
    "localAdministratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the local administrator account."
      }
    },
    "localAdministratorUsername": {
      "type": "string",
      "metadata": {
        "description": "The username for the local administrator account."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The location for the resources."
      }
    },
    "logAnalyticsWorkspaceResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID of the log analytics workspace if using build automation and desired."
      }
    },
    "logStorageSkuName": {
      "type": "string",
      "defaultValue": "Standard_GRS",
      "metadata": {
        "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
      }
    },
    "marketplaceImageOffer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The marketplace image offer."
      }
    },
    "marketplaceImagePublisher": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The marketplace image publisher."
      }
    },
    "marketplaceImageSKU": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The marketplace image SKU."
      }
    },
    "msrdcwebrtcsvcInstaller": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The file name of the msrdcwebrtcsvc installer in Azure Blobs."
      }
    },
    "networkSecurityGroupDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "NetworkSecurityGroupEvent",
          "enabled": true
        },
        {
          "category": "NetworkSecurityGroupRuleCounter",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "The network security group diagnostics logs to apply to the subnet."
      }
    },
    "networkSecurityGroupDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The network security group diagnostics metrics to apply to the subnet."
      }
    },
    "networkSecurityGroupRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The network security group rules to apply to the subnet."
      }
    },
    "officeInstaller": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The file name of the Office installer in Azure Blobs."
      }
    },
    "oUPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The distinguished name of the organizational unit to join."
      }
    },
    "policy": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The policy name"
      }
    },
    "replicaCount": {
      "type": "int",
      "metadata": {
        "description": "The count of replicas for the image version resource."
      }
    },
    "sourceImageType": {
      "type": "string",
      "allowedValues": [
        "AzureComputeGallery",
        "AzureMarketplace"
      ],
      "metadata": {
        "description": "The type of source image."
      }
    },
    "spokelogAnalyticsWorkspaceResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the log analytics workspace if using build automation and desired."
      }
    },
    "storageAccountResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the storage account where the installers and scripts are stored in Azure Blobs."
      }
    },
    "subnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.134.0/24",
      "metadata": {
        "description": "The subnet address prefix."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The key value pairs of meta data to apply to the resources."
      }
    },
    "teamsInstaller": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The file name of the Teams installer in Azure Blobs."
      }
    },
    "updateService": {
      "type": "string",
      "defaultValue": "MU",
      "allowedValues": [
        "WU",
        "MU",
        "WSUS",
        "DCAT",
        "STORE",
        "OTHER"
      ],
      "metadata": {
        "description": "Determines if the updates service. (Default: 'MU')"
      }
    },
    "vcRedistInstaller": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The file name of the vcRedist installer in Azure Blobs."
      }
    },
    "vDOTInstaller": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The file name of the vDOT installer in Azure Blobs."
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "metadata": {
        "description": "The size of the image virtual machine."
      }
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.134.0/24",
      "metadata": {
        "description": "The virtual network address prefix."
      }
    },
    "virtualNetworkDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The logs for the diagnostic setting on the virtual network."
      }
    },
    "virtualNetworkDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The metrics for the diagnostic setting on the virtual network."
      }
    },
    "wsusServer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The WSUS Server Url if WSUS is specified. (i.e., https://wsus.corp.contoso.com:8531)"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "AzureChina": {
        "chinaeast": {
          "abbreviation": "cne",
          "recoveryServicesGeo": "sha",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinaeast2": {
          "abbreviation": "cne2",
          "recoveryServicesGeo": "sha2",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinanorth": {
          "abbreviation": "cnn",
          "recoveryServicesGeo": "bjb",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinanorth2": {
          "abbreviation": "cnn2",
          "recoveryServicesGeo": "bjb2",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        }
      },
      "AzureCloud": {
        "australiacentral": {
          "abbreviation": "auc",
          "recoveryServicesGeo": "acl",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiacentral2": {
          "abbreviation": "auc2",
          "recoveryServicesGeo": "acl2",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiaeast": {
          "abbreviation": "aue",
          "recoveryServicesGeo": "ae",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiasoutheast": {
          "abbreviation": "ause",
          "recoveryServicesGeo": "ase",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "brazilsouth": {
          "abbreviation": "brs",
          "recoveryServicesGeo": "brs",
          "timeDifference": "-3:00",
          "timeZone": "E. South America Standard Time"
        },
        "brazilsoutheast": {
          "abbreviation": "brse",
          "recoveryServicesGeo": "bse",
          "timeDifference": "-3:00",
          "timeZone": "E. South America Standard Time"
        },
        "canadacentral": {
          "abbreviation": "cac",
          "recoveryServicesGeo": "cnc",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "canadaeast": {
          "abbreviation": "cae",
          "recoveryServicesGeo": "cne",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "centralindia": {
          "abbreviation": "inc",
          "recoveryServicesGeo": "inc",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "centralus": {
          "abbreviation": "usc",
          "recoveryServicesGeo": "cus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "eastasia": {
          "abbreviation": "ase",
          "recoveryServicesGeo": "ea",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "eastus": {
          "abbreviation": "use",
          "recoveryServicesGeo": "eus",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "eastus2": {
          "abbreviation": "use2",
          "recoveryServicesGeo": "eus2",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "francecentral": {
          "abbreviation": "frc",
          "recoveryServicesGeo": "frc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "francesouth": {
          "abbreviation": "frs",
          "recoveryServicesGeo": "frs",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "germanynorth": {
          "abbreviation": "den",
          "recoveryServicesGeo": "gn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "germanywestcentral": {
          "abbreviation": "dewc",
          "recoveryServicesGeo": "gwc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "israelcentral": {
          "abbreviation": "ilc",
          "recoveryServicesGeo": "ilc",
          "timeDifference": "+2:00",
          "timeZone": "Israel Standard Time"
        },
        "italynorth": {
          "abbreviation": "itn",
          "recoveryServicesGeo": "itn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "japaneast": {
          "abbreviation": "jpe",
          "recoveryServicesGeo": "jpe",
          "timeDifference": "+9:00",
          "timeZone": "Tokyo Standard Time"
        },
        "japanwest": {
          "abbreviation": "jpw",
          "recoveryServicesGeo": "jpw",
          "timeDifference": "+9:00",
          "timeZone": "Tokyo Standard Time"
        },
        "jioindiacentral": {
          "abbreviation": "injc",
          "recoveryServicesGeo": "jic",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "jioindiawest": {
          "abbreviation": "injw",
          "recoveryServicesGeo": "jiw",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "koreacentral": {
          "abbreviation": "krc",
          "recoveryServicesGeo": "krc",
          "timeDifference": "+9:00",
          "timeZone": "Korea Standard Time"
        },
        "koreasouth": {
          "abbreviation": "krs",
          "recoveryServicesGeo": "krs",
          "timeDifference": "+9:00",
          "timeZone": "Korea Standard Time"
        },
        "northcentralus": {
          "abbreviation": "usnc",
          "recoveryServicesGeo": "ncus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "northeurope": {
          "abbreviation": "eun",
          "recoveryServicesGeo": "ne",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "norwayeast": {
          "abbreviation": "noe",
          "recoveryServicesGeo": "nwe",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "norwaywest": {
          "abbreviation": "now",
          "recoveryServicesGeo": "nww",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "polandcentral": {
          "abbreviation": "plc",
          "recoveryServicesGeo": "plc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "qatarcentral": {
          "abbreviation": "qac",
          "recoveryServicesGeo": "qac",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "southafricanorth": {
          "abbreviation": "zan",
          "recoveryServicesGeo": "san",
          "timeDifference": "+2:00",
          "timeZone": "South Africa Standard Time"
        },
        "southafricawest": {
          "abbreviation": "zaw",
          "recoveryServicesGeo": "saw",
          "timeDifference": "+2:00",
          "timeZone": "South Africa Standard Time"
        },
        "southcentralus": {
          "abbreviation": "ussc",
          "recoveryServicesGeo": "scus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "southeastasia": {
          "abbreviation": "asse",
          "recoveryServicesGeo": "sea",
          "timeDifference": "+8:00",
          "timeZone": "Singapore Standard Time"
        },
        "southindia": {
          "abbreviation": "ins",
          "recoveryServicesGeo": "ins",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "swedencentral": {
          "abbreviation": "sec",
          "recoveryServicesGeo": "sdc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "switzerlandnorth": {
          "abbreviation": "chn",
          "recoveryServicesGeo": "szn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "switzerlandwest": {
          "abbreviation": "chw",
          "recoveryServicesGeo": "szw",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "uaecentral": {
          "abbreviation": "aec",
          "recoveryServicesGeo": "uac",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "uaenorth": {
          "abbreviation": "aen",
          "recoveryServicesGeo": "uan",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "uksouth": {
          "abbreviation": "uks",
          "recoveryServicesGeo": "uks",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "ukwest": {
          "abbreviation": "ukw",
          "recoveryServicesGeo": "ukw",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "westcentralus": {
          "abbreviation": "uswc",
          "recoveryServicesGeo": "wcus",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        },
        "westeurope": {
          "abbreviation": "euw",
          "recoveryServicesGeo": "we",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "westindia": {
          "abbreviation": "inw",
          "recoveryServicesGeo": "inw",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "westus": {
          "abbreviation": "usw",
          "recoveryServicesGeo": "wus",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        },
        "westus2": {
          "abbreviation": "usw2",
          "recoveryServicesGeo": "wus2",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        },
        "westus3": {
          "abbreviation": "usw3",
          "recoveryServicesGeo": "wus3",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        }
      },
      "AzureUSGovernment": {
        "usdodcentral": {
          "abbreviation": "dodc",
          "recoveryServicesGeo": "udc",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "usdodeast": {
          "abbreviation": "dode",
          "recoveryServicesGeo": "ude",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "usgovarizona": {
          "abbreviation": "az",
          "recoveryServicesGeo": "uga",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        },
        "usgovtexas": {
          "abbreviation": "tx",
          "recoveryServicesGeo": "ugt",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "usgovvirginia": {
          "abbreviation": "va",
          "recoveryServicesGeo": "ugv",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        }
      },
      "USNat": {
        "usnateast": {
          "abbreviation": "east",
          "recoveryServicesGeo": "exe",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "usnatwest": {
          "abbreviation": "west",
          "recoveryServicesGeo": "exw",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        }
      },
      "USSec": {
        "usseceast": {
          "abbreviation": "east",
          "recoveryServicesGeo": "rxe",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "ussecwest": {
          "abbreviation": "west",
          "recoveryServicesGeo": "rxw",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        }
      }
    },
    "automationAccountPrivateDnsZoneResourceId": "[resourceId(split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4], 'Microsoft.Network/privateDnsZones', format('privatelink.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudSuffix'))))]",
    "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.azure.', ''), '/', '')]",
    "keyVaultPrivateDnsZoneResourceId": "[resourceId(split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4], 'Microsoft.Network/privateDnsZones', replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore'))]",
    "imageDefinitionName": "[if(empty(parameters('computeGalleryImageResourceId')), format('{0}-{1}', parameters('imageDefinitionNamePrefix'), parameters('marketplaceImageSKU')), format('{0}-{1}', parameters('imageDefinitionNamePrefix'), split(parameters('computeGalleryImageResourceId'), '/')[10]))]",
    "privateDnsZoneSuffixes_AzureAutomation": {
      "AzureCloud": "net",
      "AzureUSGovernment": "us",
      "USNat": null,
      "USSec": null
    },
    "subscriptionId": "[subscription().subscriptionId]",
    "locations": "[variables('$fxv#0')[environment().name]]",
    "workloadName": "Imaging",
    "workloadShortName": "img"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deployActivityLogDiagnosticSetting": {
            "value": "[parameters('deployActivityLogDiagnosticSetting')]"
          },
          "deployDefender": {
            "value": "[parameters('deployDefender')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "deployNetworkWatcher": {
            "value": "[parameters('deployNetworkWatcher')]"
          },
          "deployPolicy": {
            "value": "[parameters('deployPolicy')]"
          },
          "emailSecurityContact": {
            "value": "[parameters('emailSecurityContact')]"
          },
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "firewallResourceId": {
            "value": "[parameters('azureFirewallResourceId')]"
          },
          "hubVirtualNetworkResourceId": {
            "value": "[parameters('hubVirtualNetworkResourceId')]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[parameters('spokelogAnalyticsWorkspaceResourceId')]"
          },
          "logStorageSkuName": {
            "value": "[parameters('logStorageSkuName')]"
          },
          "networkSecurityGroupDiagnosticsLogs": {
            "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
          },
          "networkSecurityGroupDiagnosticsMetrics": {
            "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
          },
          "networkSecurityGroupRules": {
            "value": "[parameters('networkSecurityGroupRules')]"
          },
          "policy": {
            "value": "[parameters('policy')]"
          },
          "subnetAddressPrefix": {
            "value": "[parameters('subnetAddressPrefix')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualNetworkAddressPrefix": {
            "value": "[parameters('virtualNetworkAddressPrefix')]"
          },
          "virtualNetworkDiagnosticsLogs": {
            "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
          },
          "virtualNetworkDiagnosticsMetrics": {
            "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
          },
          "workloadName": {
            "value": "[variables('workloadName')]"
          },
          "workloadShortName": {
            "value": "[variables('workloadShortName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.170.59819",
              "templateHash": "15277826004755007051"
            }
          },
          "parameters": {
            "deployActivityLogDiagnosticSetting": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy a diagnostic setting for the Activity Log."
              }
            },
            "deployDefender": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy Defender for Cloud."
              }
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "The suffix to append to the deployment name. It defaults to the current UTC date and time."
              }
            },
            "deployNetworkWatcher": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy Network Watcher for the deployment location."
              }
            },
            "deployPolicy": {
              "type": "bool",
              "metadata": {
                "description": "Choose whether to deploy a policy assignment."
              }
            },
            "emailSecurityContact": {
              "type": "string",
              "metadata": {
                "description": "The email address to use for Defender for Cloud notifications."
              }
            },
            "environmentAbbreviation": {
              "type": "string",
              "defaultValue": "dev",
              "allowedValues": [
                "dev",
                "prod",
                "test"
              ],
              "metadata": {
                "description": "The abbreviation for the environment."
              }
            },
            "firewallResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Firewall in the HUB."
              }
            },
            "hubVirtualNetworkResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the HUB Virtual Network."
              }
            },
            "identifier": {
              "type": "string",
              "maxLength": 3,
              "metadata": {
                "description": "The identifier for the resource names. This value should represent the workload, project, or business unit."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location for the deployment. It defaults to the location of the deployment."
              }
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Log Analytics Workspace to use for log storage."
              }
            },
            "logStorageSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
              }
            },
            "networkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Network Security Group diagnostic logs to apply to the workload Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
              }
            },
            "networkSecurityGroupDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The metrics to monitor for the Network Security Group."
              }
            },
            "networkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The rules to apply to the Network Security Group."
              }
            },
            "policy": {
              "type": "string",
              "metadata": {
                "description": "The policy to assign to the workload."
              }
            },
            "subnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The address prefix for the workload subnet."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The tags to apply to the resources."
              }
            },
            "virtualNetworkAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The address prefix for the workload Virtual Network."
              }
            },
            "virtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The diagnostic logs to apply to the workload Virtual Network."
              }
            },
            "virtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The metrics to monitor for the workload Virtual Network."
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "Tier3",
              "minLength": 1,
              "maxLength": 10,
              "metadata": {
                "description": "The name for the workload."
              }
            },
            "workloadShortName": {
              "type": "string",
              "defaultValue": "t3",
              "minLength": 1,
              "maxLength": 3,
              "metadata": {
                "description": "The short name for the workload."
              }
            }
          },
          "variables": {
            "$fxv#0": "1.0.0",
            "environmentName": {
              "dev": "Development",
              "prod": "Production",
              "test": "Test"
            },
            "mlzTags": {
              "environment": "[variables('environmentName')[parameters('environmentAbbreviation')]]",
              "identifier": "[parameters('identifier')]",
              "workloadName": "[format('MissionLandingZone-{0}', parameters('workloadName'))]",
              "workloadVersion": "[variables('$fxv#0')]"
            },
            "hubResourceGroupName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
            "hubSubscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
            "subscriptionId": "[subscription().subscriptionId]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "resourcePrefix": {
                    "value": "[parameters('identifier')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "11837208542925912913"
                    }
                  },
                  "parameters": {
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "resourcePrefix": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "AzureChina": {
                        "chinaeast": {
                          "abbreviation": "cne",
                          "recoveryServicesGeo": "sha",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinaeast2": {
                          "abbreviation": "cne2",
                          "recoveryServicesGeo": "sha2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth": {
                          "abbreviation": "cnn",
                          "recoveryServicesGeo": "bjb",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth2": {
                          "abbreviation": "cnn2",
                          "recoveryServicesGeo": "bjb2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        }
                      },
                      "AzureCloud": {
                        "australiacentral": {
                          "abbreviation": "auc",
                          "recoveryServicesGeo": "acl",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiacentral2": {
                          "abbreviation": "auc2",
                          "recoveryServicesGeo": "acl2",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiaeast": {
                          "abbreviation": "aue",
                          "recoveryServicesGeo": "ae",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiasoutheast": {
                          "abbreviation": "ause",
                          "recoveryServicesGeo": "ase",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "brazilsouth": {
                          "abbreviation": "brs",
                          "recoveryServicesGeo": "brs",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "brazilsoutheast": {
                          "abbreviation": "brse",
                          "recoveryServicesGeo": "bse",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "canadacentral": {
                          "abbreviation": "cac",
                          "recoveryServicesGeo": "cnc",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "canadaeast": {
                          "abbreviation": "cae",
                          "recoveryServicesGeo": "cne",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "centralindia": {
                          "abbreviation": "inc",
                          "recoveryServicesGeo": "inc",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "centralus": {
                          "abbreviation": "usc",
                          "recoveryServicesGeo": "cus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "eastasia": {
                          "abbreviation": "ase",
                          "recoveryServicesGeo": "ea",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "eastus": {
                          "abbreviation": "use",
                          "recoveryServicesGeo": "eus",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "eastus2": {
                          "abbreviation": "use2",
                          "recoveryServicesGeo": "eus2",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "francecentral": {
                          "abbreviation": "frc",
                          "recoveryServicesGeo": "frc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "francesouth": {
                          "abbreviation": "frs",
                          "recoveryServicesGeo": "frs",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanynorth": {
                          "abbreviation": "den",
                          "recoveryServicesGeo": "gn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanywestcentral": {
                          "abbreviation": "dewc",
                          "recoveryServicesGeo": "gwc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "israelcentral": {
                          "abbreviation": "ilc",
                          "recoveryServicesGeo": "ilc",
                          "timeDifference": "+2:00",
                          "timeZone": "Israel Standard Time"
                        },
                        "italynorth": {
                          "abbreviation": "itn",
                          "recoveryServicesGeo": "itn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "japaneast": {
                          "abbreviation": "jpe",
                          "recoveryServicesGeo": "jpe",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "japanwest": {
                          "abbreviation": "jpw",
                          "recoveryServicesGeo": "jpw",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "jioindiacentral": {
                          "abbreviation": "injc",
                          "recoveryServicesGeo": "jic",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "jioindiawest": {
                          "abbreviation": "injw",
                          "recoveryServicesGeo": "jiw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "koreacentral": {
                          "abbreviation": "krc",
                          "recoveryServicesGeo": "krc",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "koreasouth": {
                          "abbreviation": "krs",
                          "recoveryServicesGeo": "krs",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "northcentralus": {
                          "abbreviation": "usnc",
                          "recoveryServicesGeo": "ncus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "northeurope": {
                          "abbreviation": "eun",
                          "recoveryServicesGeo": "ne",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "norwayeast": {
                          "abbreviation": "noe",
                          "recoveryServicesGeo": "nwe",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "norwaywest": {
                          "abbreviation": "now",
                          "recoveryServicesGeo": "nww",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "polandcentral": {
                          "abbreviation": "plc",
                          "recoveryServicesGeo": "plc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "qatarcentral": {
                          "abbreviation": "qac",
                          "recoveryServicesGeo": "qac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "southafricanorth": {
                          "abbreviation": "zan",
                          "recoveryServicesGeo": "san",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southafricawest": {
                          "abbreviation": "zaw",
                          "recoveryServicesGeo": "saw",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southcentralus": {
                          "abbreviation": "ussc",
                          "recoveryServicesGeo": "scus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "southeastasia": {
                          "abbreviation": "asse",
                          "recoveryServicesGeo": "sea",
                          "timeDifference": "+8:00",
                          "timeZone": "Singapore Standard Time"
                        },
                        "southindia": {
                          "abbreviation": "ins",
                          "recoveryServicesGeo": "ins",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "swedencentral": {
                          "abbreviation": "sec",
                          "recoveryServicesGeo": "sdc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandnorth": {
                          "abbreviation": "chn",
                          "recoveryServicesGeo": "szn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandwest": {
                          "abbreviation": "chw",
                          "recoveryServicesGeo": "szw",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "uaecentral": {
                          "abbreviation": "aec",
                          "recoveryServicesGeo": "uac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uaenorth": {
                          "abbreviation": "aen",
                          "recoveryServicesGeo": "uan",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uksouth": {
                          "abbreviation": "uks",
                          "recoveryServicesGeo": "uks",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "ukwest": {
                          "abbreviation": "ukw",
                          "recoveryServicesGeo": "ukw",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "westcentralus": {
                          "abbreviation": "uswc",
                          "recoveryServicesGeo": "wcus",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "westeurope": {
                          "abbreviation": "euw",
                          "recoveryServicesGeo": "we",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "westindia": {
                          "abbreviation": "inw",
                          "recoveryServicesGeo": "inw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "westus": {
                          "abbreviation": "usw",
                          "recoveryServicesGeo": "wus",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus2": {
                          "abbreviation": "usw2",
                          "recoveryServicesGeo": "wus2",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus3": {
                          "abbreviation": "usw3",
                          "recoveryServicesGeo": "wus3",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        }
                      },
                      "AzureUSGovernment": {
                        "usdodcentral": {
                          "abbreviation": "dodc",
                          "recoveryServicesGeo": "udc",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usdodeast": {
                          "abbreviation": "dode",
                          "recoveryServicesGeo": "ude",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usgovarizona": {
                          "abbreviation": "az",
                          "recoveryServicesGeo": "uga",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "usgovtexas": {
                          "abbreviation": "tx",
                          "recoveryServicesGeo": "ugt",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usgovvirginia": {
                          "abbreviation": "va",
                          "recoveryServicesGeo": "ugv",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        }
                      },
                      "USNat": {
                        "usnateast": {
                          "abbreviation": "east",
                          "recoveryServicesGeo": "exe",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usnatwest": {
                          "abbreviation": "west",
                          "recoveryServicesGeo": "exw",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        }
                      },
                      "USSec": {
                        "usseceast": {
                          "abbreviation": "east",
                          "recoveryServicesGeo": "rxe",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "ussecwest": {
                          "abbreviation": "west",
                          "recoveryServicesGeo": "rxw",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        }
                      }
                    },
                    "$fxv#1": {
                      "actionGroups": "ag",
                      "automationAccounts": "aa",
                      "availabilitySets": "avail",
                      "azureFirewalls": "afw",
                      "bastionHosts": "bas",
                      "computeGallieries": "cg",
                      "dataCollectionRuleAssociations": "dcra",
                      "dataCollectionRules": "dcr",
                      "desktopApplicationGroups": "vdag",
                      "diagnosticSettings": "diag",
                      "diskAccesses": "da",
                      "diskEncryptionSets": "des",
                      "disks": "disk",
                      "firewallPolicies": "afwp",
                      "hostPools": "vdpool",
                      "ipConfigurations": "ipconf",
                      "keyVaults": "kv",
                      "logAnalyticsWorkspaces": "log",
                      "netAppAccounts": "naa",
                      "netAppCapacityPools": "nacp",
                      "networkInterfaces": "nic",
                      "networkSecurityGroups": "nsg",
                      "networkWatchers": "nw",
                      "privateEndpoints": "pe",
                      "privateLinkScopes": "pls",
                      "publicIPAddresses": "pip",
                      "recoveryServicesVaults": "rsv",
                      "remoteApplicationGroups": "vdag",
                      "resourceGroups": "rg",
                      "routeTables": "rt",
                      "storageAccounts": "st",
                      "subnets": "snet",
                      "userAssignedIdentities": "id",
                      "virtualMachines": "vm",
                      "virtualNetworks": "vnet",
                      "workspaces": "vdws"
                    },
                    "locations": "[variables('$fxv#0')[environment().name]]",
                    "locationAbbreviation": "[variables('locations')[parameters('location')].abbreviation]",
                    "resourceAbbreviations": "[variables('$fxv#1')]",
                    "resourceToken": "resource_token",
                    "serviceToken": "service_token",
                    "networkToken": "network_token",
                    "namingConvention": "[format('{0}-{1}-{2}-{3}-{4}-{5}', toLower(parameters('resourcePrefix')), variables('resourceToken'), variables('serviceToken'), variables('networkToken'), parameters('environmentAbbreviation'), variables('locationAbbreviation'))]",
                    "actionGroupNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').actionGroups)]",
                    "automationAccountNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').automationAccounts)]",
                    "bastionHostNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').bastionHosts)]",
                    "computeGalleryNamingConvention": "[replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').computeGallieries), '-', '_')]",
                    "diskEncryptionSetNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').diskEncryptionSets)]",
                    "diskNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').disks)]",
                    "firewallNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').azureFirewalls)]",
                    "firewallPolicyNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').firewallPolicies)]",
                    "ipConfigurationNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').ipConfigurations)]",
                    "keyVaultNamingConvention": "[format('{0}unique_token', replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').keyVaults), '-', ''))]",
                    "logAnalyticsWorkspaceNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
                    "networkInterfaceNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').networkInterfaces)]",
                    "networkSecurityGroupNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').networkSecurityGroups)]",
                    "networkWatcherNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').networkWatchers)]",
                    "privateEndpointNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').privateEndpoints)]",
                    "privateLinkScopeName": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').privateLinkScopes)]",
                    "publicIpAddressNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').publicIPAddresses)]",
                    "resourceGroupNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').resourceGroups)]",
                    "routeTableNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').routeTables)]",
                    "storageAccountNamingConvention": "[toLower(format('{0}unique_token', replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').storageAccounts), '-', '')))]",
                    "subnetNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').subnets)]",
                    "userAssignedIdentityNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').userAssignedIdentities)]",
                    "virtualMachineNamingConvention": "[replace(replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').virtualMachines), '-', ''), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation')))]",
                    "virtualNetworkNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').virtualNetworks)]"
                  },
                  "resources": [],
                  "outputs": {
                    "resources": {
                      "type": "object",
                      "value": {
                        "actionGroup": "[variables('actionGroupNamingConvention')]",
                        "automationAccount": "[variables('automationAccountNamingConvention')]",
                        "bastionHost": "[variables('bastionHostNamingConvention')]",
                        "computeGallery": "[variables('computeGalleryNamingConvention')]",
                        "diskEncryptionSet": "[variables('diskEncryptionSetNamingConvention')]",
                        "disk": "[variables('diskNamingConvention')]",
                        "firewall": "[variables('firewallNamingConvention')]",
                        "firewallPolicy": "[variables('firewallPolicyNamingConvention')]",
                        "ipConfiguration": "[variables('ipConfigurationNamingConvention')]",
                        "keyVault": "[variables('keyVaultNamingConvention')]",
                        "logAnalyticsWorkspace": "[variables('logAnalyticsWorkspaceNamingConvention')]",
                        "networkInterface": "[variables('networkInterfaceNamingConvention')]",
                        "networkSecurityGroup": "[variables('networkSecurityGroupNamingConvention')]",
                        "networkWatcher": "[variables('networkWatcherNamingConvention')]",
                        "privateEndpoint": "[variables('privateEndpointNamingConvention')]",
                        "privateLinkScope": "[variables('privateLinkScopeName')]",
                        "publicIpAddress": "[variables('publicIpAddressNamingConvention')]",
                        "resourceGroup": "[variables('resourceGroupNamingConvention')]",
                        "routeTable": "[variables('routeTableNamingConvention')]",
                        "storageAccount": "[variables('storageAccountNamingConvention')]",
                        "subnet": "[variables('subnetNamingConvention')]",
                        "userAssignedIdentity": "[variables('userAssignedIdentityNamingConvention')]",
                        "virtualMachine": "[variables('virtualMachineNamingConvention')]",
                        "virtualNetwork": "[variables('virtualNetworkNamingConvention')]"
                      }
                    },
                    "tokens": {
                      "type": "object",
                      "value": {
                        "resource": "[variables('resourceToken')]",
                        "service": "[variables('serviceToken')]",
                        "network": "[variables('networkToken')]"
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "resourcePrefix": {
                    "value": "[parameters('identifier')]"
                  },
                  "resources": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resources.value]"
                  },
                  "subscriptionId": {
                    "value": "[variables('subscriptionId')]"
                  },
                  "tokens": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
                  },
                  "workloadName": {
                    "value": "[toLower(parameters('workloadName'))]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "2888361491405108203"
                    }
                  },
                  "parameters": {
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "resourcePrefix": {
                      "type": "string"
                    },
                    "resources": {
                      "type": "object"
                    },
                    "tokens": {
                      "type": "object"
                    },
                    "workloadName": {
                      "type": "string"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "network": {
                      "name": "[parameters('workloadName')]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroupName": "[replace(replace(parameters('resources').resourceGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "deployUniqueResources": true,
                      "actionGroupName": "[replace(replace(parameters('resources').actionGroup, parameters('tokens').service, ''), parameters('tokens').network, parameters('workloadName'))]",
                      "automationAccountName": "[replace(replace(parameters('resources').automationAccount, parameters('tokens').service, ''), parameters('tokens').network, parameters('workloadName'))]",
                      "bastionHostIPConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'bas'), parameters('tokens').network, parameters('workloadName'))]",
                      "bastionHostName": "[replace(replace(parameters('resources').bastionHost, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "bastionHostPublicIPAddressName": "[replace(replace(parameters('resources').publicIpAddress, parameters('tokens').service, 'bas'), parameters('tokens').network, parameters('workloadName'))]",
                      "computeGalleryName": "[replace(replace(parameters('resources').computeGallery, format('_{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "diskEncryptionSetName": "[replace(replace(parameters('resources').diskEncryptionSet, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "firewallClientIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'client-afw'), parameters('tokens').network, parameters('workloadName'))]",
                      "firewallClientPublicIPAddressName": "[replace(replace(parameters('resources').publicIpAddress, parameters('tokens').service, 'client-afw'), parameters('tokens').network, parameters('workloadName'))]",
                      "firewallManagementIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'mgmt-afw'), parameters('tokens').network, parameters('workloadName'))]",
                      "firewallManagementPublicIPAddressName": "[replace(replace(parameters('resources').publicIpAddress, parameters('tokens').service, 'mgmt-afw'), parameters('tokens').network, parameters('workloadName'))]",
                      "firewallName": "[replace(replace(parameters('resources').firewall, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "firewallPolicyName": "[replace(replace(parameters('resources').firewallPolicy, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "keyVaultName": "[take(replace(replace(replace(parameters('resources').keyVault, parameters('tokens').service, ''), parameters('tokens').network, parameters('workloadShortName')), 'unique_token', uniqueString(parameters('resourcePrefix'), parameters('environmentAbbreviation'), parameters('subscriptionId'))), 24)]",
                      "keyVaultNetworkInterfaceName": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, 'kv'), parameters('tokens').network, parameters('workloadName'))]",
                      "keyVaultPrivateEndpointName": "[replace(replace(parameters('resources').privateEndpoint, parameters('tokens').service, 'kv'), parameters('tokens').network, parameters('workloadName'))]",
                      "linuxDiskName": "[replace(replace(parameters('resources').disk, parameters('tokens').service, 'linux'), parameters('tokens').network, parameters('workloadName'))]",
                      "linuxNetworkInterfaceIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'linux'), parameters('tokens').network, parameters('workloadName'))]",
                      "linuxNetworkInterfaceName": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, 'linux'), parameters('tokens').network, parameters('workloadName'))]",
                      "linuxVmName": "[replace(replace(parameters('resources').virtualMachine, parameters('tokens').service, format('l{0}', parameters('tokens').service)), parameters('tokens').network, parameters('workloadShortName'))]",
                      "logStorageAccountName": "[take(replace(replace(replace(parameters('resources').storageAccount, parameters('tokens').service, ''), parameters('tokens').network, parameters('workloadShortName')), 'unique_token', uniqueString(parameters('resourcePrefix'), parameters('environmentAbbreviation'), parameters('subscriptionId'))), 24)]",
                      "logStorageAccountNetworkInterfaceNamePrefix": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, parameters('workloadName'))]",
                      "logStorageAccountPrivateEndpointNamePrefix": "[replace(replace(parameters('resources').privateEndpoint, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, parameters('workloadName'))]",
                      "networkSecurityGroupName": "[replace(replace(parameters('resources').networkSecurityGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "networkWatcherName": "[replace(replace(parameters('resources').networkWatcher, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "routeTableName": "[replace(replace(parameters('resources').routeTable, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "subnetName": "[replace(replace(parameters('resources').subnet, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "userAssignedIdentityName": "[replace(replace(parameters('resources').userAssignedIdentity, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "virtualNetworkName": "[replace(replace(parameters('resources').virtualNetwork, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                      "windowsDiskName": "[replace(replace(parameters('resources').disk, parameters('tokens').service, 'windows'), parameters('tokens').network, parameters('workloadName'))]",
                      "windowsNetworkInterfaceIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'windows'), parameters('tokens').network, parameters('workloadName'))]",
                      "windowsNetworkInterfaceName": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, 'windows'), parameters('tokens').network, parameters('workloadName'))]",
                      "windowsVmName": "[replace(replace(parameters('resources').virtualMachine, parameters('tokens').service, format('w{0}', parameters('tokens').service)), parameters('tokens').network, parameters('workloadShortName'))]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "network": {
                      "type": "object",
                      "value": "[variables('network')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[variables('mlzTags')]"
                  },
                  "name": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.resourceGroupName]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "15837787188813527331"
                    }
                  },
                  "parameters": {
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Resources/resourceGroups'), parameters('tags')['Microsoft.Resources/resourceGroups'], createObject()), parameters('mlzTags'))]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
                    },
                    "tags": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deployNetworkWatcher": {
                    "value": "[parameters('deployNetworkWatcher')]"
                  },
                  "firewallSkuTier": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').sku.tier]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[variables('mlzTags')]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.networkSecurityGroupName]"
                  },
                  "networkSecurityGroupRules": {
                    "value": "[parameters('networkSecurityGroupRules')]"
                  },
                  "networkWatcherName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.networkWatcherName]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.resourceGroupName]"
                  },
                  "routeTableName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.routeTableName]"
                  },
                  "routeTableRouteNextHopIpAddress": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').ipConfigurations[0].properties.privateIPAddress]"
                  },
                  "subnetAddressPrefix": {
                    "value": "[parameters('subnetAddressPrefix')]"
                  },
                  "subnetName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.subnetName]"
                  },
                  "subscriptionId": {
                    "value": "[variables('subscriptionId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualNetworkAddressPrefix": {
                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.virtualNetworkName]"
                  },
                  "vNetDnsServers": {
                    "value": [
                      "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').ipConfigurations[0].properties.privateIPAddress]"
                    ]
                  },
                  "workloadName": {
                    "value": "[toLower(parameters('workloadName'))]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "5206820343027478458"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deployNetworkWatcher": {
                      "type": "bool"
                    },
                    "firewallSkuTier": {
                      "type": "string"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "networkSecurityGroupRules": {
                      "type": "array"
                    },
                    "networkWatcherName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "routeTableName": {
                      "type": "string"
                    },
                    "routeTableRouteNextHopIpAddress": {
                      "type": "string"
                    },
                    "subnetAddressPrefix": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "vNetDnsServers": {
                      "type": "array"
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "workloadName": {
                      "type": "string"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "spokeNetwork",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deployNetworkWatcher": {
                            "value": "[parameters('deployNetworkWatcher')]"
                          },
                          "firewallSkuTier": {
                            "value": "[parameters('firewallSkuTier')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          },
                          "networkSecurityGroupRules": {
                            "value": "[parameters('networkSecurityGroupRules')]"
                          },
                          "networkWatcherName": {
                            "value": "[parameters('networkWatcherName')]"
                          },
                          "routeTableName": {
                            "value": "[parameters('routeTableName')]"
                          },
                          "routeTableRouteNextHopIpAddress": {
                            "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                          },
                          "subnetAddressPrefix": {
                            "value": "[parameters('subnetAddressPrefix')]"
                          },
                          "subnetName": {
                            "value": "[parameters('subnetName')]"
                          },
                          "subnetPrivateEndpointNetworkPolicies": {
                            "value": "Disabled"
                          },
                          "subnetPrivateLinkServiceNetworkPolicies": {
                            "value": "Disabled"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualNetworkAddressPrefix": {
                            "value": "[parameters('virtualNetworkAddressPrefix')]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "vNetDnsServers": {
                            "value": "[parameters('vNetDnsServers')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "9443806356306142434"
                            }
                          },
                          "parameters": {
                            "deployNetworkWatcher": {
                              "type": "bool"
                            },
                            "firewallSkuTier": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            },
                            "networkSecurityGroupRules": {
                              "type": "array"
                            },
                            "networkWatcherName": {
                              "type": "string"
                            },
                            "routeTableName": {
                              "type": "string"
                            },
                            "routeTableRouteName": {
                              "type": "string",
                              "defaultValue": "default_route"
                            },
                            "routeTableRouteAddressPrefix": {
                              "type": "string",
                              "defaultValue": "0.0.0.0/0"
                            },
                            "routeTableRouteNextHopIpAddress": {
                              "type": "string"
                            },
                            "routeTableRouteNextHopType": {
                              "type": "string",
                              "defaultValue": "VirtualAppliance"
                            },
                            "subnetAddressPrefix": {
                              "type": "string"
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "subnetPrivateEndpointNetworkPolicies": {
                              "type": "string"
                            },
                            "subnetPrivateLinkServiceNetworkPolicies": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "vNetDnsServers": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkSecurityGroup",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkSecurityGroupName')]"
                                  },
                                  "securityRules": {
                                    "value": "[parameters('networkSecurityGroupRules')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.170.59819",
                                      "templateHash": "13414814252968710669"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "securityRules": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkSecurityGroups",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/networkSecurityGroups'), parameters('tags')['Microsoft.Network/networkSecurityGroups'], createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "securityRules": "[parameters('securityRules')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "routeTable",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "disableBgpRoutePropagation": {
                                    "value": true
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('routeTableName')]"
                                  },
                                  "routeAddressPrefix": {
                                    "value": "[parameters('routeTableRouteAddressPrefix')]"
                                  },
                                  "routeName": {
                                    "value": "[parameters('routeTableRouteName')]"
                                  },
                                  "routeNextHopIpAddress": {
                                    "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                                  },
                                  "routeNextHopType": {
                                    "value": "[parameters('routeTableRouteNextHopType')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.170.59819",
                                      "templateHash": "8969815603564770173"
                                    }
                                  },
                                  "parameters": {
                                    "disableBgpRoutePropagation": {
                                      "type": "bool"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "routeAddressPrefix": {
                                      "type": "string"
                                    },
                                    "routeName": {
                                      "type": "string"
                                    },
                                    "routeNextHopIpAddress": {
                                      "type": "string"
                                    },
                                    "routeNextHopType": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/routeTables",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/routeTables'), parameters('tags')['Microsoft.Network/routeTables'], createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                        "routes": [
                                          {
                                            "name": "[parameters('routeName')]",
                                            "properties": {
                                              "addressPrefix": "[parameters('routeAddressPrefix')]",
                                              "nextHopIpAddress": "[parameters('routeNextHopIpAddress')]",
                                              "nextHopType": "[parameters('routeNextHopType')]"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "condition": "[parameters('deployNetworkWatcher')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkWatcher",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkWatcherName')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.170.59819",
                                      "templateHash": "6425343849060009850"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkWatchers",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/networkWatchers'), parameters('tags')['Microsoft.Network/networkWatchers'], createObject()), parameters('mlzTags'))]",
                                      "properties": {}
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "virtualNetwork",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "addressPrefix": {
                                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "mlzTags": {
                                    "value": "[parameters('mlzTags')]"
                                  },
                                  "name": {
                                    "value": "[parameters('virtualNetworkName')]"
                                  },
                                  "subnets": {
                                    "value": [
                                      {
                                        "name": "[parameters('subnetName')]",
                                        "properties": {
                                          "addressPrefix": "[parameters('subnetAddressPrefix')]",
                                          "networkSecurityGroup": {
                                            "id": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                                          },
                                          "routeTable": {
                                            "id": "[reference(resourceId('Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value]"
                                          },
                                          "privateEndpointNetworkPolicies": "[parameters('subnetPrivateEndpointNetworkPolicies')]",
                                          "privateLinkServiceNetworkPolicies": "[parameters('subnetPrivateLinkServiceNetworkPolicies')]"
                                        }
                                      }
                                    ]
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "vNetDnsServers": {
                                    "value": "[parameters('vNetDnsServers')]"
                                  },
                                  "firewallSkuTier": {
                                    "value": "[parameters('firewallSkuTier')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.170.59819",
                                      "templateHash": "6916781723220735567"
                                    }
                                  },
                                  "parameters": {
                                    "addressPrefix": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "mlzTags": {
                                      "type": "object"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "subnets": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "vNetDnsServers": {
                                      "type": "array"
                                    },
                                    "firewallSkuTier": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/virtualNetworks'), parameters('tags')['Microsoft.Network/virtualNetworks'], createObject()), parameters('mlzTags'))]",
                                      "properties": {
                                        "addressSpace": {
                                          "addressPrefixes": [
                                            "[parameters('addressPrefix')]"
                                          ]
                                        },
                                        "subnets": "[parameters('subnets')]",
                                        "dhcpOptions": "[if(and(not(equals(parameters('vNetDnsServers'), null())), or(equals(parameters('firewallSkuTier'), 'Premium'), equals(parameters('firewallSkuTier'), 'Standard'))), createObject('dnsServers', parameters('vNetDnsServers')), null())]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    },
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                                    },
                                    "subnets": {
                                      "type": "array",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').subnets]"
                                    },
                                    "addressPrefix": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').addressSpace.addressPrefixes[0]]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup')]",
                                "[resourceId('Microsoft.Resources/deployments', 'networkWatcher')]",
                                "[resourceId('Microsoft.Resources/deployments', 'routeTable')]"
                              ]
                            }
                          ],
                          "outputs": {
                            "virtualNetworkName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.name.value]"
                            },
                            "virtualNetworkResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value]"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.addressPrefix.value]"
                            },
                            "subnetName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].name]"
                            },
                            "subnetAddressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].properties.addressPrefix]"
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].id]"
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.name.value]"
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-peering-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hubVirtualNetworkName": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]"
                          },
                          "hubVirtualNetworkResourceId": {
                            "value": "[parameters('hubVirtualNetworkResourceId')]"
                          },
                          "spokeName": {
                            "value": "[parameters('workloadName')]"
                          },
                          "spokeResourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "spokeVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'spokeNetwork'), '2022-09-01').outputs.virtualNetworkName.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "3360096389164919794"
                            }
                          },
                          "parameters": {
                            "spokeName": {
                              "type": "string"
                            },
                            "spokeResourceGroupName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkName": {
                              "type": "string"
                            },
                            "hubVirtualNetworkName": {
                              "type": "string"
                            },
                            "hubVirtualNetworkResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-to-hub-vnet-peering', parameters('spokeName'))]",
                              "resourceGroup": "[parameters('spokeResourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('{0}/to-{1}', parameters('spokeVirtualNetworkName'), parameters('hubVirtualNetworkName'))]"
                                  },
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.170.59819",
                                      "templateHash": "2973725866451109424"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'spokeNetwork')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-peering-hub-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hubVirtualNetworkName": {
                            "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]"
                          },
                          "spokes": {
                            "value": [
                              {
                                "type": "[parameters('workloadName')]",
                                "virtualNetworkName": "[parameters('virtualNetworkName')]",
                                "virtualNetworkResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'spokeNetwork'), '2022-09-01').outputs.virtualNetworkResourceId.value]"
                              }
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "14482672325640396998"
                            }
                          },
                          "parameters": {
                            "hubVirtualNetworkName": {
                              "type": "string"
                            },
                            "spokes": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "hubToSpokePeering",
                                "count": "[length(parameters('spokes'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('hub-to-{0}-vnet-peering', parameters('spokes')[copyIndex()].type)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('{0}/to-{1}', parameters('hubVirtualNetworkName'), parameters('spokes')[copyIndex()].virtualNetworkName)]"
                                  },
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('spokes')[copyIndex()].virtualNetworkResourceId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.170.59819",
                                      "templateHash": "2973725866451109424"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'spokeNetwork')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'spokeNetwork'), '2022-09-01').outputs.subnetResourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[variables('mlzTags')]"
                  },
                  "networkProperties": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "8607068382992509094"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "networkProperties": {
                      "type": "object"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networkProperties').subscriptionId]",
                      "resourceGroup": "[parameters('networkProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('networkProperties').keyVaultName]"
                          },
                          "keyVaultNetworkInterfaceName": {
                            "value": "[parameters('networkProperties').keyVaultNetworkInterfaceName]"
                          },
                          "keyVaultPrivateDnsZoneResourceId": {
                            "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                          },
                          "keyVaultPrivateEndpointName": {
                            "value": "[parameters('networkProperties').keyVaultPrivateEndpointName]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "2708305007283639705"
                            }
                          },
                          "parameters": {
                            "diskEncryptionKeyExpirationInDays": {
                              "type": "int",
                              "defaultValue": 30
                            },
                            "keyVaultName": {
                              "type": "string"
                            },
                            "keyVaultNetworkInterfaceName": {
                              "type": "string"
                            },
                            "keyVaultPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "keyVaultPrivateEndpointName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "enabledForDeployment": false,
                                "enabledForDiskEncryption": true,
                                "enabledForTemplateDeployment": false,
                                "enablePurgeProtection": true,
                                "enableRbacAuthorization": true,
                                "enableSoftDelete": true,
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "defaultAction": "Deny",
                                  "ipRules": [],
                                  "virtualNetworkRules": []
                                },
                                "publicNetworkAccess": "Disabled",
                                "sku": {
                                  "family": "A",
                                  "name": "standard"
                                },
                                "softDeleteRetentionInDays": 7,
                                "tenantId": "[subscription().tenantId]"
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('keyVaultPrivateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('keyVaultNetworkInterfaceName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('keyVaultPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                                      "groupIds": [
                                        "vault"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultPrivateEndpointName'), parameters('keyVaultName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('keyVaultPrivateEndpointName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'DiskEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "keyUriWithVersion": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
                            },
                            "keyVaultResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                            },
                            "keyVaultName": {
                              "type": "string",
                              "value": "[parameters('keyVaultName')]"
                            },
                            "keyVaultUri": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri]"
                            },
                            "storageKeyName": {
                              "type": "string",
                              "value": "StorageEncryptionKey"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-disk-encryption-set-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networkProperties').subscriptionId]",
                      "resourceGroup": "[parameters('networkProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "diskEncryptionSetName": {
                            "value": "[parameters('networkProperties').diskEncryptionSetName]"
                          },
                          "keyUrl": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyUriWithVersion.value]"
                          },
                          "keyVaultResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), createObject('value', parameters('tags')['Microsoft.Compute/diskEncryptionSets']), createObject('value', createObject()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "2253498434473273498"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "diskEncryptionSetName": {
                              "type": "string"
                            },
                            "keyUrl": {
                              "type": "string"
                            },
                            "keyVaultResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/diskEncryptionSets",
                              "apiVersion": "2023-04-02",
                              "name": "[parameters('diskEncryptionSetName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), parameters('tags')['Microsoft.Compute/diskEncryptionSets'], createObject()), parameters('mlzTags'))]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "activeKey": {
                                  "sourceVault": {
                                    "id": "[parameters('keyVaultResourceId')]"
                                  },
                                  "keyUrl": "[parameters('keyUrl')]"
                                },
                                "encryptionType": "EncryptionAtRestWithPlatformAndCustomerKeys",
                                "rotationToLatestKeyVersionEnabled": true
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('assign-role-disk-encryption-set-ops-{0}', parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')), '2023-04-02', 'full').identity.principalId]"
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceGroup().id]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.170.59819",
                                      "templateHash": "9453050836674512129"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-user-assigned-identity-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networkProperties').subscriptionId]",
                      "resourceGroup": "[parameters('networkProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('networkProperties').userAssignedIdentityName]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "17180318248198488154"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject()), parameters('mlzTags'))]"
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "roleAssignmentEncryption",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceGroup().id]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.170.59819",
                                      "templateHash": "9453050836674512129"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "diskEncryptionSetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-disk-encryption-set-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "KeyVaultName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                    },
                    "keyVaultUri": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                    },
                    "keyVaultResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                    },
                    "storageKeyName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "blobsPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                  },
                  "keyVaultUri": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logStorageSkuName": {
                    "value": "[parameters('logStorageSkuName')]"
                  },
                  "mlzTags": {
                    "value": "[variables('mlzTags')]"
                  },
                  "network": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value]"
                  },
                  "serviceToken": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tablesPrivateDnsZoneResourceId": {
                    "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.table.{0}', environment().suffixes.storage))]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "4236106586138373505"
                    }
                  },
                  "parameters": {
                    "blobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "logStorageSkuName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "network": {
                      "type": "object"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tablesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "storage",
                      "subscriptionId": "[parameters('network').subscriptionId]",
                      "resourceGroup": "[parameters('network').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "blobsPrivateDnsZoneResourceId": {
                            "value": "[parameters('blobsPrivateDnsZoneResourceId')]"
                          },
                          "keyVaultUri": {
                            "value": "[parameters('keyVaultUri')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "serviceToken": {
                            "value": "[parameters('serviceToken')]"
                          },
                          "skuName": {
                            "value": "[parameters('logStorageSkuName')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('network').logStorageAccountName]"
                          },
                          "storageAccountNetworkInterfaceNamePrefix": {
                            "value": "[parameters('network').logStorageAccountNetworkInterfaceNamePrefix]"
                          },
                          "storageAccountPrivateEndpointNamePrefix": {
                            "value": "[parameters('network').logStorageAccountPrivateEndpointNamePrefix]"
                          },
                          "storageEncryptionKeyName": {
                            "value": "[parameters('storageEncryptionKeyName')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tablesPrivateDnsZoneResourceId": {
                            "value": "[parameters('tablesPrivateDnsZoneResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityResourceId": {
                            "value": "[parameters('userAssignedIdentityResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "2945887437755946902"
                            }
                          },
                          "parameters": {
                            "blobsPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "keyVaultUri": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "serviceToken": {
                              "type": "string"
                            },
                            "skuName": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "storageAccountNetworkInterfaceNamePrefix": {
                              "type": "string"
                            },
                            "storageAccountPrivateEndpointNamePrefix": {
                              "type": "string"
                            },
                            "storageEncryptionKeyName": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tablesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "zones": [
                              "[parameters('blobsPrivateDnsZoneResourceId')]",
                              "[parameters('tablesPrivateDnsZoneResourceId')]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('storageAccountName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Storage/storageAccounts'), parameters('tags')['Microsoft.Storage/storageAccounts'], createObject()), parameters('mlzTags'))]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "kind": "StorageV2",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "properties": {
                                "accessTier": "Hot",
                                "allowBlobPublicAccess": false,
                                "allowCrossTenantReplication": false,
                                "allowedCopyScope": "PrivateLink",
                                "allowSharedKeyAccess": true,
                                "defaultToOAuthAuthentication": false,
                                "dnsEndpointType": "Standard",
                                "encryption": {
                                  "identity": {
                                    "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId')]"
                                  },
                                  "keySource": "Microsoft.KeyVault",
                                  "keyvaultproperties": {
                                    "keyvaulturi": "[parameters('keyVaultUri')]",
                                    "keyname": "[parameters('storageEncryptionKeyName')]"
                                  },
                                  "requireInfrastructureEncryption": true,
                                  "services": {
                                    "blob": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "file": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "queue": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "table": {
                                      "keyType": "Account",
                                      "enabled": true
                                    }
                                  }
                                },
                                "minimumTlsVersion": "TLS1_2",
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "virtualNetworkRules": [],
                                  "ipRules": [],
                                  "defaultAction": "Deny"
                                },
                                "publicNetworkAccess": "Disabled",
                                "supportsHttpsTrafficOnly": true
                              }
                            },
                            {
                              "copy": {
                                "name": "privateEndpoints",
                                "count": "[length(variables('zones'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "customNetworkInterfaceName": "[replace(parameters('storageAccountNetworkInterfaceNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                                      "groupIds": [
                                        "[split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]]"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneGroups",
                                "count": "[length(variables('zones'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]), parameters('storageAccountName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[variables('zones')[copyIndex()]]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "storageAccountResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('network').subscriptionId, parameters('network').resourceGroupName), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-diagnostics-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deployActivityLogDiagnosticSetting": {
                    "value": "[parameters('deployActivityLogDiagnosticSetting')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "network": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value]"
                  },
                  "networkSecurityGroupDiagnosticsLogs": {
                    "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                  },
                  "networkSecurityGroupDiagnosticsMetrics": {
                    "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountResourceId.value]"
                  },
                  "virtualNetworkDiagnosticsLogs": {
                    "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                  },
                  "virtualNetworkDiagnosticsMetrics": {
                    "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "17843709133926695075"
                    }
                  },
                  "parameters": {
                    "deployActivityLogDiagnosticSetting": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "network": {
                      "type": "object"
                    },
                    "networkSecurityGroupDiagnosticsLogs": {
                      "type": "array"
                    },
                    "networkSecurityGroupDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    },
                    "virtualNetworkDiagnosticsLogs": {
                      "type": "array"
                    },
                    "virtualNetworkDiagnosticsMetrics": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('deployActivityLogDiagnosticSetting')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-activity-diags-{0}-{1}', parameters('network').name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('network').subscriptionId]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "16067990757204095170"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "name": "[format('diag-activity-log-{0}', subscription().subscriptionId)]",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "logs": [
                                  {
                                    "category": "Administrative",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Security",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ServiceHealth",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Alert",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Recommendation",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Policy",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Autoscale",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ResourceHealth",
                                    "enabled": true
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-nsg-diags-{0}-{1}', parameters('network').name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('network').subscriptionId]",
                      "resourceGroup": "[parameters('network').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                          },
                          "logStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "metrics": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
                          },
                          "name": {
                            "value": "[parameters('network').networkSecurityGroupName]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "9767149346014876086"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "logStorageAccountResourceId": {
                              "type": "string"
                            },
                            "metrics": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[format('{0}-diagnostics', parameters('name'))]",
                              "properties": {
                                "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-diags-{0}-{1}', parameters('network').name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('network').subscriptionId]",
                      "resourceGroup": "[parameters('network').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                          },
                          "logStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "metrics": {
                            "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                          },
                          "name": {
                            "value": "[parameters('network').virtualNetworkName]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "5378372176274077006"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "logStorageAccountResourceId": {
                              "type": "string"
                            },
                            "metrics": {
                              "type": "array"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                              "name": "[format('{0}-diagnostics', parameters('name'))]",
                              "properties": {
                                "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('deployPolicy')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-policy-{0}-{1}', toLower(parameters('workloadName')), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "networks": {
                    "value": [
                      "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value]"
                    ]
                  },
                  "policy": {
                    "value": "[parameters('policy')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "8662249564598303366"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "networks": {
                      "type": "array"
                    },
                    "policy": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "policyAssignment",
                        "count": "[length(parameters('networks'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('assign-policy-{0}-{1}', parameters('networks')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                      "resourceGroup": "[parameters('networks')[copyIndex()].resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "builtInAssignment": {
                            "value": "[parameters('policy')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "1672482425067053944"
                            }
                          },
                          "parameters": {
                            "builtInAssignment": {
                              "type": "string",
                              "defaultValue": "NISTRev4",
                              "allowedValues": [
                                "NISTRev4",
                                "NISTRev5",
                                "IL5",
                                "CMMC"
                              ],
                              "metadata": {
                                "description": "[NISTRev4/NISTRev5/IL5/CMMC] Built-in policy assignments to assign, default is NISTRev4. IL5 is only available for AzureUsGovernment and will switch to NISTRev4 if tried in AzureCloud."
                              }
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "deployRemediation": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Starts a policy remediation for the VM Agent policies in hub RG. Set to false by default since this is time consuming in deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "The location of this resource"
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": "    {\r\n        \"listOfMembersToExcludeFromWindowsVMAdministratorsGroup\": \r\n        {\r\n        \"value\": \"admin\"\r\n        },\r\n        \"listOfMembersToIncludeInWindowsVMAdministratorsGroup\": \r\n        {\r\n        \"value\": \"azureuser\"\r\n        },\r\n        \"logAnalyticsWorkspaceIdforVMReporting\": \r\n        {\r\n        \"value\": \"<LAWORKSPACE>\"\r\n        },\r\n        \"IncludeArcMachines\": \r\n        {\r\n            \"value\": \"true\"\r\n        },\r\n        \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": \r\n        {\r\n            \"value\": \"1.2\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": \r\n        {\r\n            \"value\": \"Compliant\"\r\n        },\r\n        \"requiredRetentionDays\": \r\n        {\r\n            \"value\": \"365\"\r\n        },\r\n        \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": \r\n        {\r\n            \"value\": \"NetworkWatcherRG\"\r\n        }\r\n    }",
                            "$fxv#1": "    {\r\n        \"IncludeArcMachines\": \r\n        {\r\n            \"value\": \"true\"\r\n        },\r\n        \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": \r\n        {\r\n            \"value\": \"1.2\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": \r\n        {\r\n            \"value\": \"Compliant\"\r\n        },\r\n        \"requiredRetentionDays\": \r\n        {\r\n            \"value\": \"365\"\r\n        },\r\n        \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": \r\n        {\r\n            \"value\": \"NetworkWatcherRG\"\r\n        }\r\n    }",
                            "$fxv#2": "{\r\n    \"IncludeArcMachines\" : { \r\n        \"value\" : \"false\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\" : { \r\n        \"value\" : \"Compliant\"\r\n        },\r\n        \"MinimumTLSVersionForWindowsServers\" : { \r\n        \"value\" : \"1.2\"\r\n        },\r\n        \"requiredRetentionDays\" : { \r\n        \"value\" : \"365\"\r\n        },\r\n        \"effect-febd0533-8e55-448f-b837-bd0e06f16469\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"allowedContainerImagesRegex-febd0533-8e55-448f-b837-bd0e06f16469\" : { \r\n        \"value\" : \"^(.+){0}$\"\r\n        },\r\n        \"effect-95edb821-ddaf-4404-9732-666045e056b4\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-440b515e-a580-421e-abeb-b159a61ddcbc\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-233a2a17-77ca-4fb1-9b6b-69223d272a44\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"cpuLimit-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"0\"\r\n        },\r\n        \"memoryLimit-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"0\"\r\n        },\r\n        \"effect-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"runAsUserRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"MustRunAsNonRoot\"\r\n        },\r\n        \"runAsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"supplementalGroupsRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"fsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"effect-1c6e92c9-99f0-4e55-9cf2-0c234dc48f99\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-47a1ee2f-2a2a-4576-bf2a-e0e36709c2b8\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-df49d893-a74c-421d-bc95-c663042e5b80\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-c26596ff-4d70-4e6a-9a30-c2506bd2f80c\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-511f5417-5d12-434d-ab2e-816901e72a5e\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-82985f06-dc18-4a48-bc1c-b9f4f0098cfe\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-098fc59e-46c7-4d99-9b16-64990e543d75\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"NetworkWatcherResourceGroupName\" : { \r\n        \"value\" : \"NetworkWatcherRG\"\r\n        },\r\n        \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n        \"value\" : \"enabled\"\r\n        },\r\n        \"aadAuthenticationInServiceFabricMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-71ef260a-8f18-47b7-abcb-62d0673d94dc\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-862e97cf-49fc-4a5c-9de4-40d4e2e7c8eb\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-d9da03a1-f3c3-412a-9709-947156872263\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-b4ac1030-89c5-4697-8e00-28b5ba6a8811\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-ea0dfaed-95fb-448c-934e-d6e713ce393d\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-41425d9f-d1a5-499a-9932-f8ed8453932c\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-fc4d8e41-e223-45ea-9bf5-eada37891d87\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-86efb160-8de7-451d-bc08-5d475b0aadae\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-4ec52d6d-beb7-40c4-9a9e-fe753254690e\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-64d314f6-6062-4780-a861-c23e8951bee5\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1fd32ebd-e4c3-4e13-a54a-d7422d4d95f6\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-fa298e57-9444-42ba-bf04-86e8470e32c7\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1f905d99-2ab7-462c-a6b0-f709acca6c8f\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ba769a63-b8cc-4b2d-abf6-ac33c7204be8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0aa61e00-0a01-4a3c-9945-e93cffedf0e6\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-47031206-ce96-41f8-861b-6a915f3de284\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-51522a96-0869-4791-82f3-981000c2c67f\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-b5ec538c-daa0-4006-8596-35468b9148e8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-56a5ee18-2ae6-4810-86f7-18e39ce5629b\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-2e94d99a-8a36-4563-bc77-810d8893b671\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1fafeaf6-7927-4059-a50a-8eb2a7a6f2b5\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-99e9ccd8-3db9-4592-b0d1-14b1715a4d8a\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1f68a601-6e6d-4e42-babf-3f643a047ea2\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ca91455f-eace-4f96-be59-e6e2c35b4816\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-702dd420-7fcc-42c5-afe8-4026edd20fe0\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"diagnosticsLogsInRedisCacheMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"secureTransferToStorageAccountMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-7d092e0a-7acd-40d2-a975-dca21cae48c4\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-2a1a9cdf-e04d-429a-8416-3bfb72a1b26f\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"disableUnrestrictedNetworkToStorageAccountMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-55615ac9-af46-4a59-874e-391cc3dfb490\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1b8ca024-1d5c-4dec-8995-b1a932b41780\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-53503636-bcc9-4748-9663-5348217f160f\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-40cec1dd-a100-4920-b15b-3024fe8901ab\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-a049bf77-880b-470f-ba6d-9f21c530cf83\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ee980b6d-0eca-4501-8d54-f6290fd512c3\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1d84d5fb-01f6-4d12-ba4f-4a26081d403d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-37e0d2fe-28a5-43d6-a273-67d37d1f5606\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"identityDesignateMoreThanOneOwnerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"diskEncryptionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"emailNotificationToSubscriptionOwnerHighSeverityAlertsEnabledEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlDbEncryptionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vulnerabilityAssessmentOnManagedInstanceMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePHPVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"aadAuthenticationInSqlServerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vmssEndpointProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vmssOsVulnerabilitiesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"adaptiveApplicationControlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForPostgreSQLEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"ensureJavaVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityDesignateLessThanOwnersMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"securityContactEmailAddressForSubscriptionEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppRestrictCORSAccessMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithWritePermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithReadPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveDeprecatedAccountMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"ensurePythonVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePythonVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePHPVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePythonVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForMySQLEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"systemUpdatesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureJavaVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForWritePermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureJavaVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"nextGenerationFirewallMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"useRbacRulesMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"webAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"sqlServerAuditingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vnetEnableDDoSProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"endpointProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"jitNetworkAccessMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"geoRedundantStorageShouldBeEnabledForStorageAccountsEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"vmssSystemUpdatesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"longtermGeoRedundantBackupEnabledAzureSQLDatabasesEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"systemConfigurationsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForReadPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"containerBenchmarkMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveDeprecatedAccountWithOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vulnerabilityAssessmentOnServerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"kubernetesServiceVersionUpToDateMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"sqlDbVulnerabilityAssesmentMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"membersToIncludeInLocalAdministratorsGroup\" : { \r\n        \"value\" : \"\"\r\n        },\r\n        \"membersToExcludeInLocalAdministratorsGroup\" : { \r\n        \"value\" : \"\"\r\n        },\r\n        \"logAnalyticsWorkspaceIDForVMAgents\" : { \r\n        \"value\" : \"<LAWORKSPACE>\"\r\n        },\r\n        \"PHPLatestVersionForAppServices\" : { \r\n        \"value\" : \"7.4\"\r\n        },\r\n        \"JavaLatestVersionForAppServices\" : { \r\n        \"value\" : \"11\"\r\n        },\r\n        \"WindowsPythonLatestVersionForAppServices\" : { \r\n        \"value\" : \"3.6\"\r\n        },\r\n        \"LinuxPythonLatestVersionForAppServices\" : { \r\n        \"value\" : \"3.9\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityEmailsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"vulnerabilityAssessmentMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForWebAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityEmailsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"microsoftIaaSAntimalwareExtensionShouldBeDeployedOnWindowsServersEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"securityCenterStandardPricingTierShouldBeSelectedEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachinesEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensurePHPVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityEmailAdminsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"securityContactPhoneNumberShouldBeProvidedForSubscriptionEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"threatDetectionTypesOnManagedInstanceMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForAPIAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityEmailAdminsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"threatDetectionTypesOnServerMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachineScaleSetsEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        }\r\n}",
                            "$fxv#3": "{\r\n    \"logAnalyticsWorkspaceId-f47b5582-33ec-4c5c-87c0-b010a6b2e917\" : { \r\n        \"value\" : \"<LAWORKSPACE>\"\r\n    },\r\n    \"effect-09024ccc-0c5f-475e-9457-b7c0d9ed487b\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"MembersToExclude-69bf4abd-ca1e-4cf6-8b5a-762d42e61d4f\" :{\r\n        \"value\": \"\"\r\n    },\r\n    \"MembersToInclude-30f71ea1-ac77-4f26-9fc5-2d926bbd4ba7\": {\r\n        \"value\": \"\"\r\n    },\r\n    \"effect-0961003e-5a0a-4549-abde-af6a37f2724d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0b15565f-aa9e-48ba-8619-45960f2c314d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0e60b895-3786-45da-8377-9c6b4b6ac5f9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-17k78e20-9358-41c9-923c-fb736d382a12\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-1bc1795e-d44a-4d48-9b3b-6fff0fd5f9ba\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"PHPLatestVersion\" : { \r\n    \"value\" : \"7.3\"\r\n    },\r\n    \"effect-22bee202-a82f-4305-9a2a-6d7f44d4dedb\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-26a828e1-e88f-464e-bbb3-c134a282b9de\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-34c877ad-507e-4c82-993e-3452a6e0ad3c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-3c735d8a-a4ba-4a3a-b7cf-db7754cf57f4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-404c3081-a854-4457-ae30-26a93ef643f9\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-47a6b606-51aa-4496-8bb7-64b11cf66adc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-496223c3-ad65-4ecd-878a-bae78737e9ed\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"JavaLatestVersion\" : { \r\n    \"value\" : \"11\"\r\n    },\r\n    \"effect-4f11b553-d42e-4e3a-89be-32ca364cad4c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-4f4f78b8-e367-4b10-a341-d9a4ad5cf1c7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5c607a2e-c700-4744-8254-d77e7c9eb5e4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5f76cf89-fbf2-47fd-a3f4-b891fa780b60\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6b1cbf55-e8b6-442f-ba4c-7246b6381474\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6d555dd1-86f2-4f1c-8ed7-5abae7c6cbab\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-7008174a-fd10-4ef0-817e-fc820a951d73\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"LinuxPythonLatestVersion\" : { \r\n    \"value\" : \"3.8\"\r\n    },\r\n    \"effect-7238174a-fd10-4ef0-817e-fc820a951d73\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7261b898-8a84-4db8-9e04-18527132abb3\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-74c3584d-afae-46f7-a20a-6f8adba71a16\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-86b3d65f-7626-441e-b690-81a8b71cff60\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-88999f4c-376a-45c8-bcb3-4058f713cf39\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-8c122334-9d20-4eb8-89ea-ac9a705b74ae\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-8cb6aa8b-9e41-4f4e-aa25-089a7ac2581e\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9297c21d-2ed6-4474-b48f-163f75654ce3\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-991310cd-e9f3-47bc-b7b6-f57b557d07db\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9b597639-28e4-48eb-b506-56b05d366257\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9d0b6ea4-93e2-4578-bf2f-6bb17d22b4bc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9daedab3-fb2d-461e-b861-71790eead4f6\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-a4af4a39-4135-47fb-b175-47fbdf85311d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n    \"value\" : \"enabled\"\r\n    },\r\n    \"effect-a70ca396-0a34-413a-88e1-b956c1e683be\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-aa633080-8b72-40c4-a2d7-d00c03e80bed\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-abfb4388-5bf4-4ad7-ba82-2cd2f41ceae9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-abfb7388-5bf4-4ad7-ba99-2cd2f41cebb9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-af6cd1bd-1635-48cb-bde7-5b15693900b9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\" : { \r\n    \"value\" : \"NetworkWatcherRG\"\r\n    },\r\n    \"effect-b7ddfbdc-1260-477d-91fd-98bd9be789a6\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c3f317a7-a95c-4547-b7e7-11017ebdf2fe\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-cb510bfd-1cba-4d9f-a230-cb0976f4bb71\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e1e5fd5d-3e4c-4ce1-8661-7d1873ae6b15\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e2c1c086-2d84-4019-bff3-c44ccd95113c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e3576e28-8b17-4677-84c3-db2990658d64\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e8cbc669-f12d-49eb-93e7-9273119e9933\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e9c8d085-d9cc-4b17-9cdc-059f1f01f19e\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ebb62a0c-3560-49e1-89ed-27e074e9f8ad\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-efbde977-ba53-4479-b8e9-10b957924fbf\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f0e6e85b-9b9f-4a4b-b67b-f730d42f1b0b\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f6de0be7-9a8a-4b8a-b349-43cf02d22f7c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f8456c1c-aa66-4dfb-861a-25d127b775c9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f9d614c5-c173-4d56-95a7-b4437057d193\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-fb893a29-21bb-418c-a157-e99480ec364c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-feedbf84-6b99-488c-acc2-71c829aa5ffc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-3b980d31-7904-4bb7-8575-5665739a8052\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6e2593d9-add6-4083-9c9b-4b7d2188c899\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b607c5de-e7d9-4eee-9e5c-83f1bcee4fa0\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-12430be1-6cc8-4527-a9a8-e3d38f250096\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"modeRequirement-12430be1-6cc8-4527-a9a8-e3d38f250096\" : { \r\n    \"value\" : \"Detection\"\r\n    },\r\n    \"effect-425bea59-a659-4cbb-8d31-34499bd030b8\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"modeRequirement-425bea59-a659-4cbb-8d31-34499bd030b8\" : { \r\n    \"value\" : \"Detection\"\r\n    },\r\n    \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-013e242c-8828-4970-87b3-ab247555486d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-d38fc420-0735-4ef3-ac11-c806f651a570\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-a1181c5f-672a-477a-979a-7d58aa086233\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-308fbb08-4ab8-4e67-9b29-592e93fb94fa\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-4da35fc9-c9e7-4960-aec9-797fe7d9051d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-523b5cd1-3e23-492f-a539-13118b6d1e3a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7fe3b40f-802b-4cdd-8bd4-fd799c948cc2\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-c25d9a16-bc35-4e15-a7e5-9db606bf9ed4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b0f33259-77d7-4c9e-aac6-3aabcfae693c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-0820b7b9-23aa-4725-a1ce-ae4558f718e5\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fab\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-358c20a6-3f9e-4f0e-97ff-c6ce485e2aac\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5744710e-cc2f-4ee8-8809-3b11e89f4bc9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ac4a19c2-fa67-49b4-8ae5-0b2e78c49457\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c9d007d0-c057-4772-b18c-01e546713bcd\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-e372f825-a257-4fb8-9175-797a8a8627d6\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-d158790f-bfb0-486c-8631-2dc6b4e8e6af\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-e802a67a-daf5-4436-9ea6-f6d821dd0c5d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-a451c1ef-c6ca-483d-87ed-f49761e3ffb5\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftSql-servers-firewallRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-securityRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-securityRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ae89ebca-1c92-4898-ac2c-9f63decb045c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-d26f7642-7545-4e18-9b75-8c9bbdee3a9a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-1a4e592a-6a6e-44a5-9814-e36264ca96e7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7796937f-307b-4598-941c-67d3a05ebfe7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-c5447c04-a4d7-4ba8-a263-c9ee321a6858\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-41388f1c-2db0-4c25-95b2-35d7f5ccbfa9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b02aacc0-b073-424e-8298-42b22829ee0a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-057d6cfe-9c4f-4a6d-bc60-14420ea1f1a9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0ec47710-77ff-4a3d-9181-6aa50af424d0\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-48af4db5-9b8b-401c-8e74-076be876a430\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-82339799-d096-41ae-8538-b108becf0970\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1b7aa243-30e4-4c9e-bca8-d0d3022b634a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ef2a8f2a-b3d9-49cd-a8a8-9a3aaaf647d9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-bb91dfba-c30d-4263-9add-9c2384e659a6\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e71308d3-144b-4262-b144-efdc3cc90517\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2bdd0062-9d75-436e-89df-487dd8e4b3c7\" : { \r\n    \"value\" : \"Disabled\"\r\n    },\r\n    \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-6fac406b-40ca-413b-bf8e-0bf964659c25\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-048248b0-55cd-46da-b1ff-39efd52db260\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0d134df8-db83-46fb-ad72-fe0c9428c8dd\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fb2\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\" : { \r\n    \"value\" : \"audit\"\r\n    },\r\n    \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c43e4a30-77cb-48ab-a4dd-93f175c63b57\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1f314764-cb73-4fc9-b863-8eca98ac36e9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-123a3936-f020-408a-ba0c-47873faf1534\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    }\r\n}\r\n",
                            "modifiedAssignment": "[if(and(equals(toLower(environment().name), toLower('AzureCloud')), equals(toLower(parameters('builtInAssignment')), toLower('IL5'))), 'NISTRev4', parameters('builtInAssignment'))]",
                            "assignmentName": "[format('{0} {1}', variables('modifiedAssignment'), resourceGroup().name)]",
                            "agentVmssAssignmentName": "[format('Deploy VMSS Agents {0}', resourceGroup().name)]",
                            "agentVmAssignmentName": "[format('Deploy VM Agents {0}', resourceGroup().name)]",
                            "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                            "lawsReaderRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('assignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', json(replace(variables('$fxv#0'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', json(replace(variables('$fxv#2'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', json(replace(variables('$fxv#3'), '<LAWORKSPACE>', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId))))[variables('modifiedAssignment')].id]",
                                "parameters": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', json(replace(variables('$fxv#0'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', json(replace(variables('$fxv#2'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', json(replace(variables('$fxv#3'), '<LAWORKSPACE>', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId))))[variables('modifiedAssignment')].parameters]"
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmssAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '75714362-cae7-409e-9b99-a8e5075b7fad')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '55f3eceb-5573-4f18-9695-226972c6d74a')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('assignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[if(empty(variables('modifiedAssignment')), '', reference(resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName')), '2020-09-01', 'full').identity.principalId)]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmssAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('deployRemediation')]",
                              "type": "Microsoft.PolicyInsights/remediations",
                              "apiVersion": "2019-07-01",
                              "name": "VM-Agent-Policy-Remediation",
                              "properties": {
                                "policyAssignmentId": "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]",
                                "resourceDiscoveryMode": "ReEvaluateCompliance"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Assign-Laws-Role-Policy-{0}', resourceGroup().name)]",
                              "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "targetResourceId": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[variables('lawsReaderRoleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.170.59819",
                                      "templateHash": "9453050836674512129"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('deployDefender')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('set-{0}-sub-defender', toLower(parameters('workloadName')))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "emailSecurityContact": {
                    "value": "[parameters('emailSecurityContact')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "17296430727130356523"
                    }
                  },
                  "parameters": {
                    "defenderPlans": {
                      "type": "array",
                      "defaultValue": [
                        "VirtualMachines"
                      ],
                      "metadata": {
                        "description": "Defender Paid protection Plans. Even if a customer selects the free sku, at least 1 paid protection plan must be specified."
                      }
                    },
                    "enableAutoProvisioning": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Turn automatic deployment by Defender of the MMA (OMS VM extension) on or off"
                      }
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Specify the ID of your custom Log Analytics workspace to collect Defender data."
                      }
                    },
                    "emailSecurityContact": {
                      "type": "string",
                      "metadata": {
                        "description": "Email address of the contact, in the form of john@doe.com"
                      }
                    },
                    "policySetDescription": {
                      "type": "string",
                      "defaultValue": "The Microsoft Cloud Security Benchmark initiative represents the policies and controls implementing security recommendations defined in Microsoft Cloud Security Benchmark v2, see https://aka.ms/azsecbm. This also serves as the Microsoft Defender for Cloud default policy initiative. You can directly assign this initiative, or manage its policies and compliance results within Microsoft Defender.",
                      "metadata": {
                        "description": "Policy Initiative description field"
                      }
                    },
                    "defenderSkuTier": {
                      "type": "string",
                      "defaultValue": "Free",
                      "metadata": {
                        "description": "[Standard/Free] The SKU for Defender. It defaults to \"Free\"."
                      }
                    }
                  },
                  "variables": {
                    "autoProvisioning": "[if(parameters('enableAutoProvisioning'), 'On', 'Off')]",
                    "defenderPaidPlanConfig": {
                      "AzureCloud": {
                        "Api": {
                          "subPlan": "P1"
                        },
                        "appServices": {},
                        "KeyVaults": {
                          "subPlan": "PerKeyVault"
                        },
                        "Arm": {
                          "subPlan": "PerSubscription"
                        },
                        "CloudPosture": {
                          "extensions": [
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            },
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessVmScanning",
                              "isEnabled": "True"
                            },
                            {
                              "name": "EntraPermissionsManagement",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "Containers": {
                          "extensions": [
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "CosmosDbs": {},
                        "StorageAccounts": {
                          "subPlan": "DefenderForStorageV2",
                          "extensions": [
                            {
                              "name": "OnUploadMalwareScanning",
                              "isEnabled": "True",
                              "additionalExtensionProperties": {
                                "CapGBPerMonthPerStorageAccount": "5000"
                              }
                            },
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "VirtualMachines": {
                          "subPlan": "P1"
                        },
                        "SqlServerVirtualMachines": {},
                        "SqlServers": {},
                        "OpenSourceRelationalDatabases": {}
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "defenderFreeAllClouds",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[equals(parameters('defenderSkuTier'), 'Free')]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardNoSubplanNoExtensions",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), not(equals(environment().name, 'AzureCloud')))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardSubplanExtensionsAzureCloud",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), equals(environment().name, 'AzureCloud'))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]",
                        "subPlan": "[if(contains(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'subPlan'), variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]].subPlan, json('null'))]",
                        "extensions": "[if(contains(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'extensions'), variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]].extensions, json('null'))]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/autoProvisioningSettings",
                      "apiVersion": "2019-01-01",
                      "name": "default",
                      "properties": {
                        "autoProvision": "[variables('autoProvisioning')]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/workspaceSettings",
                      "apiVersion": "2019-01-01",
                      "name": "default",
                      "properties": {
                        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "scope": "[subscription().id]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('emailSecurityContact')))]",
                      "type": "Microsoft.Security/securityContacts",
                      "apiVersion": "2020-01-01-preview",
                      "name": "default",
                      "properties": {
                        "notificationsByRole": {
                          "roles": [
                            "AccountAdmin",
                            "Contributor",
                            "Owner",
                            "ServiceAdmin"
                          ],
                          "state": "On"
                        },
                        "alertNotifications": {
                          "state": "On"
                        },
                        "emails": "[parameters('emailSecurityContact')]"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2022-06-01",
                      "name": "Microsoft Cloud Security Benchmark",
                      "properties": {
                        "displayName": "Defender Default",
                        "description": "[parameters('policySetDescription')]",
                        "enforcementMode": "DoNotEnforce",
                        "parameters": {},
                        "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '1f3afdf9-d0c9-4c3d-847f-89da613e70a8')]"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "diskEncryptionSetResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
            },
            "mlzTags": {
              "type": "object",
              "value": "[variables('mlzTags')]"
            },
            "network": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value]"
            },
            "subnetResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
            },
            "tokens": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-imaging-baseline-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "computeGalleryName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.computeGalleryName]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
          },
          "enableBuildAutomation": {
            "value": "[parameters('enableBuildAutomation')]"
          },
          "exemptPolicyAssignmentIds": {
            "value": "[parameters('exemptPolicyAssignmentIds')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "resourceGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.resourceGroupName]"
          },
          "storageAccountResourceId": {
            "value": "[parameters('storageAccountResourceId')]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.userAssignedIdentityName]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.170.59819",
              "templateHash": "7690073340382206658"
            }
          },
          "parameters": {
            "computeGalleryName": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "enableBuildAutomation": {
              "type": "bool"
            },
            "exemptPolicyAssignmentIds": {
              "type": "array"
            },
            "location": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "storageAccountResourceId": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "name": {
                    "value": "[parameters('userAssignedIdentityName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "6296883959770176834"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject()), parameters('mlzTags'))]"
                    }
                  ],
                  "outputs": {
                    "clientId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                    },
                    "principalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('role-assignment-compute-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "1613196570045452117"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionIds": [
                      "f353d9bd-d4a6-484e-a77a-8050b599b867",
                      "f1a07417-d97a-45cb-824c-7a7467783830",
                      "acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(variables('roleDefinitionIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionIds')[copyIndex()], resourceGroup().name)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionIds')[copyIndex()])]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('role-assignment-storage-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "storageAccountResourceId": {
                    "value": "[parameters('storageAccountResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "16678314039986560835"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', split(parameters('storageAccountResourceId'), '/')[8])]",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('storageAccountResourceId'))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('disk-encryption-set-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[split(parameters('diskEncryptionSetResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('diskEncryptionSetResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diskEncryptionSetName": {
                    "value": "[split(parameters('diskEncryptionSetResourceId'), '/')[8]]"
                  },
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "17953983585809496662"
                    }
                  },
                  "parameters": {
                    "diskEncryptionSetName": {
                      "type": "string"
                    },
                    "principalId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Compute/diskEncryptionSets/{0}', parameters('diskEncryptionSetName'))]",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('gallery-image-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "computeGalleryName": {
                    "value": "[parameters('computeGalleryName')]"
                  },
                  "enableBuildAutomation": {
                    "value": "[parameters('enableBuildAutomation')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "17328117917467575507"
                    }
                  },
                  "parameters": {
                    "computeGalleryName": {
                      "type": "string"
                    },
                    "enableBuildAutomation": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/galleries",
                      "apiVersion": "2022-01-03",
                      "name": "[parameters('computeGalleryName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject()), parameters('mlzTags'))]"
                    },
                    {
                      "condition": "[parameters('enableBuildAutomation')]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Compute/galleries/{0}', parameters('computeGalleryName'))]",
                      "name": "[guid(parameters('userAssignedIdentityPrincipalId'), variables('roleDefinitionId'), resourceId('Microsoft.Compute/galleries', parameters('computeGalleryName')))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/galleries', parameters('computeGalleryName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "computeGalleryResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/galleries', parameters('computeGalleryName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "policyExemptions",
                "count": "[length(range(0, length(parameters('exemptPolicyAssignmentIds'))))]"
              },
              "condition": "[not(empty(parameters('exemptPolicyAssignmentIds')[0]))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('PolicyExemption_{0}', range(0, length(parameters('exemptPolicyAssignmentIds')))[copyIndex()])]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "policyAssignmentId": {
                    "value": "[parameters('exemptPolicyAssignmentIds')[range(0, length(parameters('exemptPolicyAssignmentIds')))[copyIndex()]]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "4949441353974629907"
                    }
                  },
                  "parameters": {
                    "policyAssignmentId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/policyExemptions",
                      "apiVersion": "2022-07-01-preview",
                      "name": "exempt-imaging-resource-group",
                      "properties": {
                        "assignmentScopeValidation": "Default",
                        "description": "Exempts the imaging resource group to prevent issues with building images.",
                        "displayName": "Imaging resource group",
                        "exemptionCategory": "Mitigated",
                        "expiresOn": null,
                        "metadata": null,
                        "policyAssignmentId": "[parameters('policyAssignmentId')]",
                        "policyDefinitionReferenceIds": [],
                        "resourceSelectors": []
                      }
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "computeGalleryResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('gallery-image-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.computeGalleryResourceId.value]"
            },
            "userAssignedIdentityClientId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('enableBuildAutomation')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-build-automation-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "actionGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.actionGroupName]"
          },
          "arcGisProInstaller": {
            "value": "[parameters('arcGisProInstaller')]"
          },
          "automationAccountName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.automationAccountName]"
          },
          "automationAccountPrivateDnsZoneResourceId": {
            "value": "[variables('automationAccountPrivateDnsZoneResourceId')]"
          },
          "computeGalleryImageResourceId": {
            "value": "[parameters('computeGalleryImageResourceId')]"
          },
          "computeGalleryResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-imaging-baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.computeGalleryResourceId.value]"
          },
          "containerName": {
            "value": "[parameters('containerName')]"
          },
          "customizations": {
            "value": "[parameters('customizations')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
          },
          "distributionGroup": {
            "value": "[parameters('distributionGroup')]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "enableBuildAutomation": {
            "value": "[parameters('enableBuildAutomation')]"
          },
          "excludeFromLatest": {
            "value": "[parameters('excludeFromLatest')]"
          },
          "hybridUseBenefit": {
            "value": "[parameters('hybridUseBenefit')]"
          },
          "imageDefinitionName": {
            "value": "[variables('imageDefinitionName')]"
          },
          "imageMajorVersion": {
            "value": "[parameters('imageMajorVersion')]"
          },
          "imagePatchVersion": {
            "value": "[parameters('imagePatchVersion')]"
          },
          "imageVirtualMachineName": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.virtualMachineName, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'b')]"
          },
          "installAccess": {
            "value": "[parameters('installAccess')]"
          },
          "installArcGisPro": {
            "value": "[parameters('installArcGisPro')]"
          },
          "installExcel": {
            "value": "[parameters('installExcel')]"
          },
          "installOneDrive": {
            "value": "[parameters('installOneDrive')]"
          },
          "installOneNote": {
            "value": "[parameters('installOneNote')]"
          },
          "installOutlook": {
            "value": "[parameters('installOutlook')]"
          },
          "installPowerPoint": {
            "value": "[parameters('installPowerPoint')]"
          },
          "installProject": {
            "value": "[parameters('installProject')]"
          },
          "installPublisher": {
            "value": "[parameters('installPublisher')]"
          },
          "installSkypeForBusiness": {
            "value": "[parameters('installSkypeForBusiness')]"
          },
          "installTeams": {
            "value": "[parameters('installTeams')]"
          },
          "installUpdates": {
            "value": "[parameters('installUpdates')]"
          },
          "installVirtualDesktopOptimizationTool": {
            "value": "[parameters('installVirtualDesktopOptimizationTool')]"
          },
          "installVisio": {
            "value": "[parameters('installVisio')]"
          },
          "installWord": {
            "value": "[parameters('installWord')]"
          },
          "keyVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.keyVaultName]"
          },
          "keyVaultPrivateDnsZoneResourceId": {
            "value": "[variables('keyVaultPrivateDnsZoneResourceId')]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('localAdministratorPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('localAdministratorUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
          },
          "managementVirtualMachineName": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.virtualMachineName, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'm')]"
          },
          "marketplaceImageOffer": {
            "value": "[parameters('marketplaceImageOffer')]"
          },
          "marketplaceImagePublisher": {
            "value": "[parameters('marketplaceImagePublisher')]"
          },
          "marketplaceImageSKU": {
            "value": "[parameters('marketplaceImageSKU')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "msrdcwebrtcsvcInstaller": {
            "value": "[parameters('msrdcwebrtcsvcInstaller')]"
          },
          "officeInstaller": {
            "value": "[parameters('officeInstaller')]"
          },
          "oUPath": {
            "value": "[parameters('oUPath')]"
          },
          "replicaCount": {
            "value": "[parameters('replicaCount')]"
          },
          "resourceGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.resourceGroupName]"
          },
          "sourceImageType": {
            "value": "[parameters('sourceImageType')]"
          },
          "storageAccountResourceId": {
            "value": "[parameters('storageAccountResourceId')]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "teamsInstaller": {
            "value": "[parameters('teamsInstaller')]"
          },
          "timeZone": {
            "value": "[variables('locations')[parameters('location')].timeZone]"
          },
          "updateService": {
            "value": "[parameters('updateService')]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-imaging-baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityClientId.value]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-imaging-baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-imaging-baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
          },
          "vcRedistInstaller": {
            "value": "[parameters('vcRedistInstaller')]"
          },
          "vDOTInstaller": {
            "value": "[parameters('vDOTInstaller')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "wsusServer": {
            "value": "[parameters('wsusServer')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.170.59819",
              "templateHash": "4119811371263647101"
            }
          },
          "parameters": {
            "actionGroupName": {
              "type": "string"
            },
            "arcGisProInstaller": {
              "type": "string"
            },
            "automationAccountName": {
              "type": "string"
            },
            "automationAccountPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "computeGalleryResourceId": {
              "type": "string"
            },
            "containerName": {
              "type": "string"
            },
            "customizations": {
              "type": "array"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "distributionGroup": {
              "type": "string"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "enableBuildAutomation": {
              "type": "bool"
            },
            "excludeFromLatest": {
              "type": "bool"
            },
            "hybridUseBenefit": {
              "type": "bool"
            },
            "imageDefinitionName": {
              "type": "string"
            },
            "imageMajorVersion": {
              "type": "int"
            },
            "imagePatchVersion": {
              "type": "int"
            },
            "imageVirtualMachineName": {
              "type": "string"
            },
            "installAccess": {
              "type": "bool"
            },
            "installArcGisPro": {
              "type": "bool"
            },
            "installExcel": {
              "type": "bool"
            },
            "installOneDrive": {
              "type": "bool"
            },
            "installOneNote": {
              "type": "bool"
            },
            "installOutlook": {
              "type": "bool"
            },
            "installPowerPoint": {
              "type": "bool"
            },
            "installProject": {
              "type": "bool"
            },
            "installPublisher": {
              "type": "bool"
            },
            "installSkypeForBusiness": {
              "type": "bool"
            },
            "installTeams": {
              "type": "bool"
            },
            "installUpdates": {
              "type": "bool"
            },
            "installVirtualDesktopOptimizationTool": {
              "type": "bool"
            },
            "installVisio": {
              "type": "bool"
            },
            "installWord": {
              "type": "bool"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "localAdministratorPassword": {
              "type": "securestring"
            },
            "localAdministratorUsername": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "marketplaceImageOffer": {
              "type": "string"
            },
            "marketplaceImagePublisher": {
              "type": "string"
            },
            "marketplaceImageSKU": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "msrdcwebrtcsvcInstaller": {
              "type": "string"
            },
            "officeInstaller": {
              "type": "string"
            },
            "oUPath": {
              "type": "string"
            },
            "replicaCount": {
              "type": "int"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "computeGalleryImageResourceId": {
              "type": "string"
            },
            "sourceImageType": {
              "type": "string"
            },
            "storageAccountResourceId": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "teamsInstaller": {
              "type": "string"
            },
            "timeZone": {
              "type": "string"
            },
            "updateService": {
              "type": "string"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "vcRedistInstaller": {
              "type": "string"
            },
            "vDOTInstaller": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "wsusServer": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleDefinitions",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, 'KeyVaultDeployAction')]",
              "properties": {
                "roleName": "[format('KeyVaultDeployAction_{0}', subscription().subscriptionId)]",
                "description": "Allows a principal to get but not view Key Vault secrets for ARM template deployments.",
                "assignableScopes": [
                  "[subscription().id]"
                ],
                "permissions": [
                  {
                    "actions": [
                      "Microsoft.KeyVault/vaults/deploy/action"
                    ]
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('virtual-network-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[split(parameters('subnetResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('subnetResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  "virtualNetworkName": {
                    "value": "[split(parameters('subnetResourceId'), '/')[8]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "5195701968567661875"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('virtualNetworkName'))]",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('key-vault-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('localAdministratorPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('localAdministratorUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "roleDefinitionResourceId": {
                    "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(subscription().id, 'KeyVaultDeployAction'))]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "17814077642366917627"
                    }
                  },
                  "parameters": {
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "securestring"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "roleDefinitionResourceId": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "privateEndpointName": "[format('pe-{0}', parameters('keyVaultName'))]",
                    "Secrets": [
                      {
                        "name": "DomainJoinPassword",
                        "value": "[parameters('domainJoinPassword')]"
                      },
                      {
                        "name": "DomainJoinUserPrincipalName",
                        "value": "[parameters('domainJoinUserPrincipalName')]"
                      },
                      {
                        "name": "LocalAdministratorPassword",
                        "value": "[parameters('localAdministratorPassword')]"
                      },
                      {
                        "name": "LocalAdministratorUsername",
                        "value": "[parameters('localAdministratorUsername')]"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-10-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "tenantId": "[subscription().tenantId]",
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "enabledForDeployment": true,
                        "enabledForTemplateDeployment": true,
                        "enabledForDiskEncryption": false,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": false,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "publicNetworkAccess": "Disabled"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-05-01",
                      "name": "[variables('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('privateEndpointName')]",
                            "id": "[resourceId('Microsoft.Network/privateEndpoints/privateLinkServiceConnections', variables('privateEndpointName'), variables('privateEndpointName'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                              "groupIds": [
                                "vault"
                              ]
                            }
                          }
                        ],
                        "customNetworkInterfaceName": "[format('nic-{0}', parameters('keyVaultName'))]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', variables('privateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "privatelink-azure-automation-net",
                            "properties": {
                              "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "secrets",
                        "count": "[length(variables('Secrets'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-10-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('Secrets')[copyIndex()].name)]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "value": "[variables('Secrets')[copyIndex()].value]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('roleDefinitionResourceId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionResourceId')]",
                        "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(subscription().id, 'KeyVaultDeployAction'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('template-spec-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "imageDefinitionName": {
                    "value": "[parameters('imageDefinitionName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "15655695416078279043"
                    }
                  },
                  "parameters": {
                    "imageDefinitionName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                      "contentVersion": "1.0.0.0",
                      "metadata": {
                        "_generator": {
                          "name": "bicep",
                          "version": "0.26.170.59819",
                          "templateHash": "3135582023314630375"
                        }
                      },
                      "parameters": {
                        "arcGisProInstaller": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "computeGalleryImageResourceId": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "computeGalleryName": {
                          "type": "string"
                        },
                        "containerName": {
                          "type": "string"
                        },
                        "customizations": {
                          "type": "array",
                          "defaultValue": []
                        },
                        "deploymentNameSuffix": {
                          "type": "string",
                          "defaultValue": "[[utcNow('yyMMddHHs')]"
                        },
                        "diskEncryptionSetResourceId": {
                          "type": "string"
                        },
                        "enableBuildAutomation": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "excludeFromLatest": {
                          "type": "bool",
                          "defaultValue": true
                        },
                        "hybridUseBenefit": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "imageDefinitionName": {
                          "type": "string"
                        },
                        "imageMajorVersion": {
                          "type": "int"
                        },
                        "imagePatchVersion": {
                          "type": "int"
                        },
                        "imageVirtualMachineName": {
                          "type": "string"
                        },
                        "installAccess": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installArcGisPro": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installExcel": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installOneDrive": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installOneNote": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installOutlook": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installPowerPoint": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installProject": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installPublisher": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installSkypeForBusiness": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installTeams": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installUpdates": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installVirtualDesktopOptimizationTool": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installVisio": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "installWord": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "keyVaultName": {
                          "type": "string"
                        },
                        "localAdministratorPassword": {
                          "type": "securestring",
                          "defaultValue": ""
                        },
                        "localAdministratorUsername": {
                          "type": "securestring",
                          "defaultValue": ""
                        },
                        "location": {
                          "type": "string",
                          "defaultValue": "[[deployment().location]"
                        },
                        "managementVirtualMachineName": {
                          "type": "string"
                        },
                        "marketplaceImageOffer": {
                          "type": "string"
                        },
                        "marketplaceImagePublisher": {
                          "type": "string"
                        },
                        "marketplaceImageSKU": {
                          "type": "string"
                        },
                        "mlzTags": {
                          "type": "object",
                          "defaultValue": {}
                        },
                        "msrdcwebrtcsvcInstaller": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "officeInstaller": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "replicaCount": {
                          "type": "int",
                          "defaultValue": 1
                        },
                        "resourceGroupName": {
                          "type": "string"
                        },
                        "runbookExecution": {
                          "type": "bool",
                          "defaultValue": false
                        },
                        "sourceImageType": {
                          "type": "string",
                          "defaultValue": "AzureMarketplace"
                        },
                        "storageAccountResourceId": {
                          "type": "string"
                        },
                        "subnetResourceId": {
                          "type": "string"
                        },
                        "tags": {
                          "type": "object",
                          "defaultValue": {}
                        },
                        "teamsInstaller": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "updateService": {
                          "type": "string",
                          "defaultValue": "MicrosoftUpdate"
                        },
                        "userAssignedIdentityClientId": {
                          "type": "string"
                        },
                        "userAssignedIdentityPrincipalId": {
                          "type": "string"
                        },
                        "userAssignedIdentityResourceId": {
                          "type": "string"
                        },
                        "vcRedistInstaller": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "vDOTInstaller": {
                          "type": "string",
                          "defaultValue": ""
                        },
                        "virtualMachineSize": {
                          "type": "string"
                        },
                        "wsusServer": {
                          "type": "string",
                          "defaultValue": ""
                        }
                      },
                      "variables": {
                        "autoImageVersion": "[[format('{0}.{1}.{2}', parameters('imageMajorVersion'), variables('imageSuffix'), parameters('imagePatchVersion'))]",
                        "imageSuffix": "[[take(parameters('deploymentNameSuffix'), 9)]",
                        "storageAccountName": "[[split(parameters('storageAccountResourceId'), '/')[8]]",
                        "storageEndpoint": "[[environment().suffixes.storage]",
                        "subscriptionId": "[[subscription().subscriptionId]"
                      },
                      "resources": [
                        {
                          "condition": "[[not(parameters('enableBuildAutomation'))]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('management-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[variables('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "containerName": {
                                "value": "[[parameters('containerName')]"
                              },
                              "diskEncryptionSetResourceId": {
                                "value": "[[parameters('diskEncryptionSetResourceId')]"
                              },
                              "hybridUseBenefit": {
                                "value": "[[parameters('hybridUseBenefit')]"
                              },
                              "localAdministratorPassword": {
                                "value": "[[parameters('localAdministratorPassword')]"
                              },
                              "localAdministratorUsername": {
                                "value": "[[parameters('localAdministratorUsername')]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "mlzTags": {
                                "value": "[[parameters('mlzTags')]"
                              },
                              "storageAccountName": {
                                "value": "[[split(parameters('storageAccountResourceId'), '/')[8]]"
                              },
                              "subnetResourceId": {
                                "value": "[[parameters('subnetResourceId')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityPrincipalId": {
                                "value": "[[parameters('userAssignedIdentityPrincipalId')]"
                              },
                              "userAssignedIdentityResourceId": {
                                "value": "[[parameters('userAssignedIdentityResourceId')]"
                              },
                              "virtualMachineName": {
                                "value": "[[parameters('managementVirtualMachineName')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.26.170.59819",
                                  "templateHash": "8898522588803558538"
                                }
                              },
                              "parameters": {
                                "containerName": {
                                  "type": "string"
                                },
                                "diskEncryptionSetResourceId": {
                                  "type": "string"
                                },
                                "hybridUseBenefit": {
                                  "type": "bool"
                                },
                                "localAdministratorPassword": {
                                  "type": "securestring"
                                },
                                "localAdministratorUsername": {
                                  "type": "securestring"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "mlzTags": {
                                  "type": "object"
                                },
                                "storageAccountName": {
                                  "type": "string"
                                },
                                "subnetResourceId": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityPrincipalId": {
                                  "type": "string"
                                },
                                "userAssignedIdentityResourceId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Network/networkInterfaces",
                                  "apiVersion": "2023-04-01",
                                  "name": "[[format('nic-{0}', parameters('virtualMachineName'))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "ipConfigurations": [
                                      {
                                        "name": "ipconfig",
                                        "properties": {
                                          "privateIPAllocationMethod": "Dynamic",
                                          "subnet": {
                                            "id": "[[parameters('subnetResourceId')]"
                                          },
                                          "primary": true,
                                          "privateIPAddressVersion": "IPv4"
                                        }
                                      }
                                    ],
                                    "enableAcceleratedNetworking": true,
                                    "enableIPForwarding": false
                                  }
                                },
                                {
                                  "type": "Microsoft.Compute/virtualMachines",
                                  "apiVersion": "2022-03-01",
                                  "name": "[[parameters('virtualMachineName')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "identity": {
                                    "type": "UserAssigned",
                                    "userAssignedIdentities": {
                                      "[[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                    }
                                  },
                                  "properties": {
                                    "hardwareProfile": {
                                      "vmSize": "Standard_D2s_v3"
                                    },
                                    "osProfile": {
                                      "computerName": "[[parameters('virtualMachineName')]",
                                      "adminUsername": "[[parameters('localAdministratorUsername')]",
                                      "adminPassword": "[[parameters('localAdministratorPassword')]",
                                      "windowsConfiguration": {
                                        "provisionVMAgent": true,
                                        "enableAutomaticUpdates": true,
                                        "patchSettings": {
                                          "patchMode": "AutomaticByOS",
                                          "assessmentMode": "ImageDefault"
                                        }
                                      }
                                    },
                                    "storageProfile": {
                                      "imageReference": {
                                        "publisher": "MicrosoftWindowsServer",
                                        "offer": "WindowsServer",
                                        "sku": "2019-datacenter-core-g2",
                                        "version": "latest"
                                      },
                                      "osDisk": {
                                        "caching": "ReadWrite",
                                        "createOption": "FromImage",
                                        "deleteOption": "Delete",
                                        "managedDisk": {
                                          "diskEncryptionSet": {
                                            "id": "[[parameters('diskEncryptionSetResourceId')]"
                                          },
                                          "storageAccountType": "Premium_LRS"
                                        },
                                        "name": "[[format('disk-{0}', parameters('virtualMachineName'))]",
                                        "osType": "Windows"
                                      }
                                    },
                                    "networkProfile": {
                                      "networkInterfaces": [
                                        {
                                          "id": "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                                          "properties": {
                                            "deleteOption": "Delete"
                                          }
                                        }
                                      ]
                                    },
                                    "diagnosticsProfile": {
                                      "bootDiagnostics": {
                                        "enabled": false
                                      }
                                    },
                                    "securityProfile": {
                                      "encryptionAtHost": true,
                                      "uefiSettings": {
                                        "secureBootEnabled": true,
                                        "vTpmEnabled": true
                                      },
                                      "securityType": "TrustedLaunch"
                                    },
                                    "licenseType": "[[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                                  ]
                                },
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'appAzModules')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[environment().suffixes.storage]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityPrincipalId')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.12.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                                    }
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                                  ]
                                }
                              ],
                              "outputs": {
                                "name": {
                                  "type": "string",
                                  "value": "[[parameters('virtualMachineName')]"
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('image-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[variables('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "localAdministratorPassword": "[[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorPassword')), createObject('value', parameters('localAdministratorPassword')))]",
                              "localAdministratorUsername": "[[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorUsername')), createObject('value', parameters('localAdministratorUsername')))]",
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "marketplaceImageOffer": {
                                "value": "[[parameters('marketplaceImageOffer')]"
                              },
                              "marketplaceImagePublisher": {
                                "value": "[[parameters('marketplaceImagePublisher')]"
                              },
                              "marketplaceImageSKU": {
                                "value": "[[parameters('marketplaceImageSKU')]"
                              },
                              "mlzTags": {
                                "value": "[[parameters('mlzTags')]"
                              },
                              "computeGalleryImageResourceId": {
                                "value": "[[parameters('computeGalleryImageResourceId')]"
                              },
                              "sourceImageType": {
                                "value": "[[parameters('sourceImageType')]"
                              },
                              "subnetResourceId": {
                                "value": "[[parameters('subnetResourceId')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityResourceId": {
                                "value": "[[parameters('userAssignedIdentityResourceId')]"
                              },
                              "virtualMachineName": {
                                "value": "[[parameters('imageVirtualMachineName')]"
                              },
                              "virtualMachineSize": {
                                "value": "[[parameters('virtualMachineSize')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.26.170.59819",
                                  "templateHash": "8557004379539182499"
                                }
                              },
                              "parameters": {
                                "computeGalleryImageResourceId": {
                                  "type": "string"
                                },
                                "localAdministratorPassword": {
                                  "type": "securestring"
                                },
                                "localAdministratorUsername": {
                                  "type": "securestring"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "marketplaceImageOffer": {
                                  "type": "string"
                                },
                                "marketplaceImagePublisher": {
                                  "type": "string"
                                },
                                "marketplaceImageSKU": {
                                  "type": "string"
                                },
                                "mlzTags": {
                                  "type": "object"
                                },
                                "sourceImageType": {
                                  "type": "string"
                                },
                                "subnetResourceId": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityResourceId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                },
                                "virtualMachineSize": {
                                  "type": "string"
                                }
                              },
                              "variables": {
                                "imageReference": "[[if(equals(parameters('sourceImageType'), 'AzureComputeGallery'), createObject('id', parameters('computeGalleryImageResourceId')), createObject('publisher', parameters('marketplaceImagePublisher'), 'offer', parameters('marketplaceImageOffer'), 'sku', parameters('marketplaceImageSKU'), 'version', 'latest'))]"
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Network/networkInterfaces",
                                  "apiVersion": "2022-05-01",
                                  "name": "[[format('nic-{0}', parameters('virtualMachineName'))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "ipConfigurations": [
                                      {
                                        "name": "ipconfig1",
                                        "properties": {
                                          "privateIPAllocationMethod": "Dynamic",
                                          "subnet": {
                                            "id": "[[parameters('subnetResourceId')]"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "Microsoft.Compute/virtualMachines",
                                  "apiVersion": "2022-03-01",
                                  "name": "[[parameters('virtualMachineName')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "identity": {
                                    "type": "UserAssigned",
                                    "userAssignedIdentities": {
                                      "[[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                    }
                                  },
                                  "properties": {
                                    "hardwareProfile": {
                                      "vmSize": "[[parameters('virtualMachineSize')]"
                                    },
                                    "osProfile": {
                                      "computerName": "[[parameters('virtualMachineName')]",
                                      "adminUsername": "[[parameters('localAdministratorUsername')]",
                                      "adminPassword": "[[parameters('localAdministratorPassword')]"
                                    },
                                    "storageProfile": {
                                      "imageReference": "[[variables('imageReference')]",
                                      "osDisk": {
                                        "createOption": "FromImage",
                                        "deleteOption": "Delete",
                                        "managedDisk": {
                                          "storageAccountType": "StandardSSD_LRS"
                                        },
                                        "name": "[[format('disk-{0}', parameters('virtualMachineName'))]"
                                      }
                                    },
                                    "networkProfile": {
                                      "networkInterfaces": [
                                        {
                                          "id": "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                                          "properties": {
                                            "deleteOption": "Delete"
                                          }
                                        }
                                      ]
                                    },
                                    "diagnosticsProfile": {
                                      "bootDiagnostics": {
                                        "enabled": false
                                      }
                                    },
                                    "securityProfile": {
                                      "uefiSettings": {
                                        "secureBootEnabled": true,
                                        "vTpmEnabled": true
                                      },
                                      "securityType": "TrustedLaunch"
                                    }
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                                  ]
                                }
                              ],
                              "outputs": {
                                "name": {
                                  "type": "string",
                                  "value": "[[parameters('virtualMachineName')]"
                                },
                                "resourceId": {
                                  "type": "string",
                                  "value": "[[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('customizations-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[variables('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "arcGisProInstaller": {
                                "value": "[[parameters('arcGisProInstaller')]"
                              },
                              "containerName": {
                                "value": "[[parameters('containerName')]"
                              },
                              "customizations": {
                                "value": "[[parameters('customizations')]"
                              },
                              "installAccess": {
                                "value": "[[parameters('installAccess')]"
                              },
                              "installArcGisPro": {
                                "value": "[[parameters('installArcGisPro')]"
                              },
                              "installExcel": {
                                "value": "[[parameters('installExcel')]"
                              },
                              "installOneDrive": {
                                "value": "[[parameters('installOneDrive')]"
                              },
                              "installOneNote": {
                                "value": "[[parameters('installOneNote')]"
                              },
                              "installOutlook": {
                                "value": "[[parameters('installOutlook')]"
                              },
                              "installPowerPoint": {
                                "value": "[[parameters('installPowerPoint')]"
                              },
                              "installProject": {
                                "value": "[[parameters('installProject')]"
                              },
                              "installPublisher": {
                                "value": "[[parameters('installPublisher')]"
                              },
                              "installSkypeForBusiness": {
                                "value": "[[parameters('installSkypeForBusiness')]"
                              },
                              "installTeams": {
                                "value": "[[parameters('installTeams')]"
                              },
                              "installVirtualDesktopOptimizationTool": {
                                "value": "[[parameters('installVirtualDesktopOptimizationTool')]"
                              },
                              "installVisio": {
                                "value": "[[parameters('installVisio')]"
                              },
                              "installWord": {
                                "value": "[[parameters('installWord')]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "mlzTags": {
                                "value": "[[parameters('mlzTags')]"
                              },
                              "msrdcwebrtcsvcInstaller": {
                                "value": "[[parameters('msrdcwebrtcsvcInstaller')]"
                              },
                              "officeInstaller": {
                                "value": "[[parameters('officeInstaller')]"
                              },
                              "storageAccountName": {
                                "value": "[[variables('storageAccountName')]"
                              },
                              "storageEndpoint": {
                                "value": "[[variables('storageEndpoint')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "teamsInstaller": {
                                "value": "[[parameters('teamsInstaller')]"
                              },
                              "userAssignedIdentityObjectId": {
                                "value": "[[parameters('userAssignedIdentityPrincipalId')]"
                              },
                              "vcRedistInstaller": {
                                "value": "[[parameters('vcRedistInstaller')]"
                              },
                              "vDotInstaller": {
                                "value": "[[parameters('vDOTInstaller')]"
                              },
                              "virtualMachineName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.26.170.59819",
                                  "templateHash": "3676051126599760309"
                                }
                              },
                              "parameters": {
                                "arcGisProInstaller": {
                                  "type": "string"
                                },
                                "containerName": {
                                  "type": "string"
                                },
                                "customizations": {
                                  "type": "array"
                                },
                                "installAccess": {
                                  "type": "bool"
                                },
                                "installArcGisPro": {
                                  "type": "bool"
                                },
                                "installExcel": {
                                  "type": "bool"
                                },
                                "installOneDrive": {
                                  "type": "bool"
                                },
                                "installOneNote": {
                                  "type": "bool"
                                },
                                "installOutlook": {
                                  "type": "bool"
                                },
                                "installPowerPoint": {
                                  "type": "bool"
                                },
                                "installProject": {
                                  "type": "bool"
                                },
                                "installPublisher": {
                                  "type": "bool"
                                },
                                "installSkypeForBusiness": {
                                  "type": "bool"
                                },
                                "installTeams": {
                                  "type": "bool"
                                },
                                "installVirtualDesktopOptimizationTool": {
                                  "type": "bool"
                                },
                                "installVisio": {
                                  "type": "bool"
                                },
                                "installWord": {
                                  "type": "bool"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "mlzTags": {
                                  "type": "object"
                                },
                                "msrdcwebrtcsvcInstaller": {
                                  "type": "string"
                                },
                                "officeInstaller": {
                                  "type": "string"
                                },
                                "storageAccountName": {
                                  "type": "string"
                                },
                                "storageEndpoint": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "teamsInstaller": {
                                  "type": "string"
                                },
                                "userAssignedIdentityObjectId": {
                                  "type": "string"
                                },
                                "vcRedistInstaller": {
                                  "type": "string"
                                },
                                "vDotInstaller": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "variables": {
                                "installAccessVar": "[[format('{0}installAccess', parameters('installAccess'))]",
                                "installers": "[[parameters('customizations')]",
                                "installExcelVar": "[[format('{0}installWord', parameters('installExcel'))]",
                                "installOneDriveVar": "[[format('{0}installOneDrive', parameters('installOneDrive'))]",
                                "installOneNoteVar": "[[format('{0}installOneNote', parameters('installOneNote'))]",
                                "installOutlookVar": "[[format('{0}installOutlook', parameters('installOutlook'))]",
                                "installPowerPointVar": "[[format('{0}installPowerPoint', parameters('installPowerPoint'))]",
                                "installProjectVar": "[[format('{0}installProject', parameters('installProject'))]",
                                "installPublisherVar": "[[format('{0}installPublisher', parameters('installPublisher'))]",
                                "installSkypeForBusinessVar": "[[format('{0}installSkypeForBusiness', parameters('installSkypeForBusiness'))]",
                                "installVisioVar": "[[format('{0}installVisio', parameters('installVisio'))]",
                                "installWordVar": "[[format('{0}installWord', parameters('installWord'))]"
                              },
                              "resources": [
                                {
                                  "[string('copy')]": {
                                    "name": "applications",
                                    "count": "[[length(variables('installers'))]",
                                    "mode": "serial",
                                    "batchSize": 1
                                  },
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), format('app-{0}', variables('installers')[copyIndex()].name))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "Blobname",
                                        "value": "[[variables('installers')[copyIndex()].blobName]"
                                      },
                                      {
                                        "name": "Installer",
                                        "value": "[[variables('installers')[copyIndex()].name]"
                                      },
                                      {
                                        "name": "Arguments",
                                        "value": "[[variables('installers')[copyIndex()].arguments]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName,\r\n          [string]$Installer,\r\n          [string]$Arguments\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        New-Item -Path $env:windir\\temp -Name $Installer -ItemType \"directory\" -Force\r\n        New-Item -Path $env:windir\\temp\\$Installer -Name 'Files' -ItemType \"directory\" -Force\r\n        #Invoking WebClient to download blobs because it is more efficient than Invoke-WebRequest for large files.\r\n        $WebClient = New-Object System.Net.WebClient\r\n        $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n        $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n        $webClient.DownloadFile(\"$StorageAccountUrl$ContainerName/$BlobName\", \"$env:windir\\temp\\$Installer\\Files\\$Blobname\")\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\\$Installer\r\n        if($Blobname -like (\"*.exe\"))\r\n        {\r\n          Start-Process -FilePath $env:windir\\temp\\$Installer\\Files\\$Blobname -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.msi\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.bat\"))\r\n        {\r\n          Start-Process -FilePath cmd.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.ps1\"))\r\n        {\r\n          Start-Process -FilePath PowerShell.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.zip\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Expand-Archive -Path $env:windir\\temp\\$Installer\\Files\\$Blobname -DestinationPath $env:windir\\temp\\$Installer\\Files -Force\r\n          Remove-Item -Path .\\$Blobname -Force -Recurse\r\n        }\r\n        Write-Host \"Removing $Installer Files\"\r\n        Remove-item $env:windir\\temp\\$Installer -Force -Recurse -Confirm:$false\r\n       "
                                    }
                                  }
                                },
                                {
                                  "condition": "[[or(or(or(or(or(or(or(or(or(or(parameters('installAccess'), parameters('installExcel')), parameters('installOneDrive')), parameters('installOneNote')), parameters('installOutlook')), parameters('installPowerPoint')), parameters('installPublisher')), parameters('installSkypeForBusiness')), parameters('installWord')), parameters('installVisio')), parameters('installProject'))]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'office')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "InstallAccess",
                                        "value": "[[variables('installAccessVar')]"
                                      },
                                      {
                                        "name": "InstallWord",
                                        "value": "[[variables('installWordVar')]"
                                      },
                                      {
                                        "name": "InstallExcel",
                                        "value": "[[variables('installExcelVar')]"
                                      },
                                      {
                                        "name": "InstallOneDrive",
                                        "value": "[[variables('installOneDriveVar')]"
                                      },
                                      {
                                        "name": "InstallOneNote",
                                        "value": "[[variables('installOneNoteVar')]"
                                      },
                                      {
                                        "name": "InstallOutlook",
                                        "value": "[[variables('installOutlookVar')]"
                                      },
                                      {
                                        "name": "InstallPowerPoint",
                                        "value": "[[variables('installPowerPointVar')]"
                                      },
                                      {
                                        "name": "InstallProject",
                                        "value": "[[variables('installProjectVar')]"
                                      },
                                      {
                                        "name": "InstallPublisher",
                                        "value": "[[variables('installPublisherVar')]"
                                      },
                                      {
                                        "name": "InstallSkypeForBusiness",
                                        "value": "[[variables('installSkypeForBusinessVar')]"
                                      },
                                      {
                                        "name": "InstallVisio",
                                        "value": "[[variables('installVisioVar')]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[parameters('officeInstaller')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$InstallAccess,\r\n        [string]$InstallExcel,\r\n        [string]$InstallOneDrive,\r\n        [string]$InstallOutlook,\r\n        [string]$InstallProject,\r\n        [string]$InstallPublisher,\r\n        [string]$InstallSkypeForBusiness,\r\n        [string]$InstallVisio,\r\n        [string]$InstallWord,\r\n        [string]$InstallOneNote,\r\n        [string]$InstallPowerPoint,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      New-Item -Path \"$env:windir\\temp\\office\" -ItemType \"directory\" -Force\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $o365ConfigHeader = Set-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Configuration><Add OfficeClientEdition=\"64\" Channel=\"Current\">'\r\n      $o365OfficeHeader = Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"O365ProPlusRetail\"><Language ID=\"en-us\" /><ExcludeApp ID=\"Teams\"/>'\r\n      if($InstallAccess -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Access\" />'\r\n      }\r\n      if($InstallExcel -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Excel\" />'\r\n      }\r\n      if($InstallOneDrive -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"OneDrive\" />'\r\n      }\r\n      if($InstallOneNote -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"OneNote\" />'\r\n      }\r\n      if($InstallOutlook -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Outlook\" />'\r\n      }\r\n      if($InstallPowerPoint -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"PowerPoint\" />'\r\n      }\r\n      if($InstallPublisher -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Publisher\" />'\r\n      }\r\n      if($InstallSkypeForBusiness -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Lync\" />'\r\n      }\r\n      if($InstallWord -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Word\" />'\r\n      }\r\n      $addOfficefooter = Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Product>'\r\n      if($InstallProject -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"ProjectProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      if($InstallVisio -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"VisioProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Add><Updates Enabled=\"FALSE\" /><Display Level=\"None\" AcceptEULA=\"TRUE\" /><Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\"/>'\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Property Name=\"SharedComputerLicensing\" Value=\"1\"/>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Configuration>'\r\n      $Installer = \"$env:windir\\temp\\office\\office.exe\"\r\n      #$DownloadLinks = Invoke-WebRequest -Uri \"https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117\" -UseBasicParsing\r\n      #$URL = $DownloadLinks.Links.href | Where-Object {$_ -like \"https://download.microsoft.com/download/*officedeploymenttool*\"} | Select-Object -First 1\r\n      #Invoke-WebRequest -Uri $URL -OutFile $Installer -UseBasicParsing\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $Installer\r\n      Start-Process -FilePath $Installer -ArgumentList \"/extract:$env:windir\\temp\\office /quiet /passive /norestart\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Downloaded & extracted the Office 365 Deployment Toolkit\"\r\n      Start-Process -FilePath \"$env:windir\\temp\\office\\setup.exe\" -ArgumentList \"/configure $env:windir\\temp\\office\\office365x64.xml\" -Wait -PassThru -ErrorAction \"Stop\" | Out-Null\r\n      Write-Host \"Installed the selected Office365 applications\"\r\n      Write-Host \"Removing Office FIles\"\r\n      Remove-item -Path  \"$env:windir\\temp\\office\" -Force -Confirm:$false -Recurse\r\n      "
                                    }
                                  },
                                  "dependsOn": [
                                    "applications"
                                  ]
                                },
                                {
                                  "condition": "[[parameters('installVirtualDesktopOptimizationTool')]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'vdot')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[parameters('vDotInstaller')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $ZIP = \"$env:windir\\temp\\VDOT.zip\"\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\r\n        Unblock-File -Path $ZIP\r\n        Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\" -Force\r\n        $Path = (Get-ChildItem -Path \"$env:windir\\temp\" -Recurse | Where-Object {$_.Name -eq \"Windows_VDOT.ps1\"}).FullName\r\n        $Script = Get-Content -Path $Path\r\n        $ScriptUpdate = $Script.Replace(\"Set-NetAdapterAdvancedProperty\",\"#Set-NetAdapterAdvancedProperty\")\r\n        $ScriptUpdate | Set-Content -Path $Path\r\n        & $Path -Optimizations @(\"AppxPackages\",\"Autologgers\",\"DefaultUserSettings\",\"LGPO\";\"NetworkOptimizations\",\"ScheduledTasks\",\"Services\",\"WindowsMediaPlayer\") -AdvancedOptimizations \"All\" -AcceptEULA\r\n        Write-Host \"Removing VDOT Files\"\r\n        # Expecting this format for vDot ZIP, update if using a different ZIP format for folder structure\r\n        Remove-Item -Path $env:windir\\temp\\Virtual-Desktop-Optimization-Tool-main -Force -Recurse -Confirm:$false\r\n        "
                                    },
                                    "timeoutInSeconds": 640
                                  },
                                  "dependsOn": [
                                    "applications",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'teams')]"
                                  ]
                                },
                                {
                                  "condition": "[[parameters('installTeams')]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'teams')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[parameters('teamsInstaller')]"
                                      },
                                      {
                                        "name": "BlobName2",
                                        "value": "[[parameters('vcRedistInstaller')]"
                                      },
                                      {
                                        "name": "BlobName3",
                                        "value": "[[parameters('msrdcwebrtcsvcInstaller')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$BlobName2,\r\n        [string]$BlobName3\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $vcRedistFile = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      $webSocketFile = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      $teamsFile = \"$env:windir\\temp\\teams.msi\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $teamsFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName2\" -OutFile $vcRedistFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName3\" -OutFile  $webSocketFile\r\n\r\n      # Enable media optimizations for Team\r\n      Start-Process \"reg\" -ArgumentList \"add HKLM\\SOFTWARE\\Microsoft\\Teams /v IsWVDEnvironment /t REG_DWORD /d 1 /f\" -Wait -PassThru -ErrorAction \"Stop\"\r\n      Write-Host \"Enabled media optimizations for Teams\"\r\n      # Download & install the latest version of Microsoft Visual C++ Redistributable\r\n      #$File = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/vs/16/release/vc_redist.x64.exe\" -OutFile $File\r\n      Start-Process -FilePath  $vcRedistFile -Args \"/install /quiet /norestart /log vcdist.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the latest version of Microsoft Visual C++ Redistributable\"\r\n      # Download & install the Remote Desktop WebRTC Redirector Service\r\n      #$File = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/msrdcwebrtcsvc/msi\" -OutFile $File\r\n      Start-Process -FilePath msiexec.exe -Args \"/i  $webSocketFile /quiet /qn /norestart /passive /log webSocket.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the Remote Desktop WebRTC Redirector Service\"\r\n      # Install Teams\r\n      #$File = \"$env:windir\\temp\\teams.msi\"\r\n      #Write-host $($TeamsUrl)\r\n      #Invoke-WebRequest -Uri \"$TeamsUrl\" -OutFile $File\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\"ALLUSER=1\"}else{\"\"}\r\n      Start-Process -FilePath msiexec.exe -Args \"/i $teamsFile /quiet /qn /norestart /passive /log teams.log $PerMachineConfiguration ALLUSERS=1\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed Teams\"\r\n      Write-Host \"Removing Teams Files\"\r\n      Remove-Item \"$teamsFile\" -Force -Confirm:$false\r\n      Remove-Item \"$vcRedistFile\" -Force -Confirm:$false\r\n      Remove-Item \"$webSocketFile\" -Force -Confirm:$false\r\n      "
                                    }
                                  },
                                  "dependsOn": [
                                    "applications",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]"
                                  ]
                                },
                                {
                                  "condition": "[[parameters('installArcGisPro')]",
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'arcGisPro')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "UserAssignedIdentityObjectId",
                                        "value": "[[parameters('userAssignedIdentityObjectId')]"
                                      },
                                      {
                                        "name": "StorageAccountName",
                                        "value": "[[parameters('storageAccountName')]"
                                      },
                                      {
                                        "name": "ContainerName",
                                        "value": "[[parameters('containerName')]"
                                      },
                                      {
                                        "name": "StorageEndpoint",
                                        "value": "[[parameters('storageEndpoint')]"
                                      },
                                      {
                                        "name": "BlobName",
                                        "value": "[[parameters('arcGisProInstaller')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      # Retrieve Files\r\n      New-Item -Path $env:windir\\temp -Name arcgis -ItemType \"directory\" -Force\r\n      $ZIP = \"$env:windir\\temp\\arcgispro.zip\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n      Start-Sleep -Seconds 30\r\n      Set-Location -Path $env:windir\\temp\r\n      Unblock-File -Path $ZIP\r\n      Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\\arcgis\" -Force\r\n\r\n      # Install Arcgis\r\n      $arcGisProMsi = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -eq \"ArcGisPro.msi\"})\r\n      $arcGisProMsp = (Get-ChildItem \"$env:windir\\temp\\arcgis\" -Recurse | where {$_.Extension -eq \".msp\"})\r\n      $winDesktopRuntime = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -like \"windowsdesktop-runtime-*\"})\r\n\r\n      # If found Install Windows Desktop Runtime Pre-Req\r\n      try {\r\n        if ($winDesktopRuntime ){\r\n            Start-Process -FilePath \"$($winDesktopRuntime.Directory.FullName)\\$winDesktopRuntime\" -ArgumentList \"/install /quiet /norestart\" -Wait -NoNewWindow -PassThru\r\n        }\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n        # Install ArcGis Pro\r\n        $arcGisProArguments = \"/i $($arcGisProMsi.Directory.FullName)\\$arcGisProMsi ALLUSERS=1 ACCEPTEULA=yes ENABLEEUEI=0 SOFTWARE_CLASS=Professional AUTHORIZATION_TYPE=NAMED_USER LOCK_AUTH_SETTINGS=False ArcGIS_Connection=TRUE /qn /norestart\"\r\n        Start-Process \"msiexec.exe\" -ArgumentList $arcGisProArguments  -Wait -NoNewWindow -PassThru\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n      # If MSP is found, patch ArcGisPro with MSP file\r\n      if($arcGisProMsp){\r\n          Start-Process \"msiexec.exe\" -ArgumentList \"/p $($arcGisProMsp.Directory.FullName)\\$arcGisProMsp /qn\" -Wait -NoNewWindow -PassThru\r\n      }\r\n    }\r\n    catch {\r\n      Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n    }\r\n    Write-Host \"Removing ArcGis Files\"\r\n    Remove-Item $ZIP -Force -Confirm:$false -Recurse\r\n    Remove-item -Path  \"$env:windir\\temp\\arcgis\" -Force -Confirm:$false -Recurse\r\n    "
                                    }
                                  },
                                  "dependsOn": [
                                    "applications",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'teams')]",
                                    "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'vdot')]"
                                  ]
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('restart-vm-1-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[variables('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "imageVirtualMachineName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              },
                              "resourceGroupName": {
                                "value": "[[parameters('resourceGroupName')]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "mlzTags": {
                                "value": "[[parameters('mlzTags')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityClientId": {
                                "value": "[[parameters('userAssignedIdentityClientId')]"
                              },
                              "virtualMachineName": "[[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.26.170.59819",
                                  "templateHash": "14414542062672835812"
                                }
                              },
                              "parameters": {
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "resourceGroupName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "mlzTags": {
                                  "type": "object"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityClientId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'restartVirtualMachine')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "Environment",
                                        "value": "[[environment().name]"
                                      },
                                      {
                                        "name": "ResourceGroupName",
                                        "value": "[[parameters('resourceGroupName')]"
                                      },
                                      {
                                        "name": "SubscriptionId",
                                        "value": "[[subscription().subscriptionId]"
                                      },
                                      {
                                        "name": "TenantId",
                                        "value": "[[tenant().tenantId]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityClientId",
                                        "value": "[[parameters('userAssignedIdentityClientId')]"
                                      },
                                      {
                                        "name": "VirtualMachineName",
                                        "value": "[[parameters('imageVirtualMachineName')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Restart-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName\r\n        $AgentStatus = $Null\r\n        while ($Null -eq $AgentStatus) \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $AgentStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).VMAgent\r\n        }\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('customizations-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "condition": "[[parameters('installUpdates')]",
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('microsoft-updates-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[variables('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "imageVirtualMachineName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "mlzTags": {
                                "value": "[[parameters('mlzTags')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "updateService": {
                                "value": "[[parameters('updateService')]"
                              },
                              "wsusServer": {
                                "value": "[[parameters('wsusServer')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.26.170.59819",
                                  "templateHash": "461917832205884645"
                                }
                              },
                              "parameters": {
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "mlzTags": {
                                  "type": "object"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "updateService": {
                                  "type": "string"
                                },
                                "wsusServer": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('imageVirtualMachineName'), 'install-microsoft-updates')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "asyncExecution": false,
                                    "parameters": "[[if(equals(parameters('updateService'), 'WSUS'), createArray(createObject('name', 'Service', 'value', parameters('updateService')), createObject('name', 'WSUSServer', 'value', parameters('wsusServer'))), createArray(createObject('name', 'Service', 'value', parameters('updateService'))))]",
                                    "source": {
                                      "script": "        param (\r\n          # The App Name to pass to the WUA API as the calling application.\r\n          [Parameter()]\r\n          [String]$AppName = \"Windows Update API Script\",\r\n          # The search criteria to be used.\r\n          [Parameter()]\r\n          [String]$Criteria = \"IsInstalled=0 and Type='Software' and IsHidden=0\",\r\n          [Parameter()]\r\n          [bool]$ExcludePreviewUpdates = $true,\r\n          # Default service (WSUS if machine is configured to use it, or MU if opted in, or WU otherwise.)\r\n          [Parameter()]\r\n          [ValidateSet(\"WU\",\"MU\",\"WSUS\",\"DCAT\",\"STORE\",\"OTHER\")]\r\n          [string]$Service = 'MU',\r\n          # The http/https fqdn for the Windows Server Update Server\r\n          [Parameter()]\r\n          [string]$WSUSServer\r\n        )\r\n        \r\n        Function ConvertFrom-InstallationResult {\r\n        [CmdletBinding()]\r\n            param (\r\n                [Parameter()]\r\n                [int]$Result\r\n            )        \r\n            switch ($Result) {\r\n                2 { $Text = 'Succeeded' }\r\n                3 { $Text = 'Succeeded with errors' }\r\n                4 { $Text = 'Failed' }\r\n                5 { $Text = 'Cancelled' }\r\n                Default { $Text = \"Unexpected ($Result)\"}\r\n            }        \r\n            Return $Text\r\n        }\r\n        Start-Transcript -Path \"$env:SystemRoot\\Logs\\ImageBuild\\Install-Updates.log\"\r\n        Switch ($Service.ToUpper()) {\r\n            'WU' { $ServerSelection = 2 }\r\n            'MU' { $ServerSelection = 3; $ServiceId = \"7971f918-a847-4430-9279-4a52d1efe18d\" }\r\n            'WSUS' { $ServerSelection = 1 }\r\n            'DCAT' { $ServerSelection = 3; $ServiceId = \"855E8A7C-ECB4-4CA3-B045-1DFA50104289\" }\r\n            'STORE' { $serverSelection = 3; $ServiceId = \"117cab2d-82b1-4b5a-a08c-4d62dbee7782\" }\r\n            'OTHER' { $ServerSelection = 3; $ServiceId = $Service }\r\n        }        \r\n        If ($Service -eq 'MU') {\r\n            $UpdateServiceManager = New-Object -ComObject Microsoft.Update.ServiceManager\r\n            $UpdateServiceManager.ClientApplicationID = $AppName\r\n            $UpdateServiceManager.AddService2(\"7971f918-a847-4430-9279-4a52d1efe18d\", 7, \"\")\r\n            $null = cmd /c reg.exe ADD \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /t REG_DWORD /d 1 /f '2>&1'\r\n            Write-Output \"Added Registry entry to configure Microsoft Update. Exit Code: [$LastExitCode]\"\r\n        } Elseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n            $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n            $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n            Write-Output \"Added Registry entry to configure WSUS Server. Exit Code: [$LastExitCode]\"\r\n        }        \r\n        $UpdateSession = New-Object -ComObject Microsoft.Update.Session\r\n        $updateSession.ClientApplicationID = $AppName   \r\n        $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()\r\n        $UpdateSearcher.ServerSelection = $ServerSelection\r\n        If ($ServerSelection -eq 3) {\r\n            $UpdateSearcher.ServiceId = $ServiceId\r\n        }\r\n        Write-Output \"Searching for Updates...\"\r\n        $SearchResult = $UpdateSearcher.Search($Criteria)\r\n        If ($SearchResult.Updates.Count -eq 0) {\r\n            Write-Output \"There are no applicable updates.\"\r\n            Write-Output \"Now Exiting\"\r\n            Exit $ExitCode\r\n        }\r\n        Write-Output \"List of applicable items found for this computer:\"\r\n        For ($i = 0; $i -lt $SearchResult.Updates.Count; $i++) {\r\n            $Update = $SearchResult.Updates[$i]\r\n            Write-Output \"$($i + 1) > $($update.Title)\"\r\n        }\r\n        $AtLeastOneAdded = $false\r\n        $ExclusiveAdded = $false   \r\n        $UpdatesToDownload = New-Object -ComObject Microsoft.Update.UpdateColl\r\n        Write-Output \"Checking search results:\"\r\n        For ($i = 0; $i -lt $SearchResult.Updates.Count; $i++) {\r\n            $Update = $SearchResult.Updates[$i]\r\n            $AddThisUpdate = $false        \r\n            If ($ExclusiveAdded) {\r\n                Write-Output \"$($i + 1) > skipping: '$($update.Title)' because an exclusive update has already been selected.\"\r\n            } Else {\r\n                $AddThisUpdate = $true\r\n            }        \r\n            if ($ExcludePreviewUpdates -and $update.Title -like '*Preview*') {\r\n                Write-Output \"$($i + 1) > Skipping: '$($update.Title)' because it is a preview update.\"\r\n                $AddThisUpdate = $false\r\n            }        \r\n            If ($AddThisUpdate) {\r\n                $PropertyTest = 0\r\n                $ErrorActionPreference = 'SilentlyContinue'\r\n                $PropertyTest = $Update.InstallationBehavior.Impact\r\n                $ErrorActionPreference = 'Stop'\r\n                If ($PropertyTest -eq 2) {\r\n                    If ($AtLeastOneAdded) {\r\n                        Write-Output \"$($i + 1) > skipping: '$($update.Title)' because it is exclusive and other updates are being installed first.\"\r\n                        $AddThisUpdate = $false\r\n                    }\r\n                }\r\n            }\r\n            If ($AddThisUpdate) {\r\n                Write-Output \"$($i + 1) > adding: '$($update.Title)'\"\r\n                $UpdatesToDownload.Add($Update) | out-null\r\n                $AtLeastOneAdded = $true\r\n                $ErrorActionPreference = 'SilentlyContinue'\r\n                $PropertyTest = $Update.InstallationBehavior.Impact\r\n                $ErrorActionPreference = 'Stop'\r\n                If ($PropertyTest -eq 2) {\r\n                    Write-Output \"This update is exclusive; skipping remaining updates\"\r\n                    $ExclusiveAdded = $true\r\n                }\r\n            }\r\n        }        \r\n        $UpdatesToInstall = New-Object -ComObject Microsoft.Update.UpdateColl\r\n        Write-Output \"Downloading updates...\"\r\n        $Downloader = $UpdateSession.CreateUpdateDownloader()\r\n        $Downloader.Updates = $UpdatesToDownload\r\n        $Downloader.Download()\r\n        Write-Output \"Successfully downloaded updates:\"        \r\n        For ($i = 0; $i -lt $UpdatesToDownload.Count; $i++) {\r\n            $Update = $UpdatesToDownload[$i]\r\n            If ($Update.IsDownloaded -eq $true) {\r\n                Write-Output \"$($i + 1) > $($update.title)\"\r\n                $UpdatesToInstall.Add($Update) | out-null\r\n            }\r\n        }        \r\n        If ($UpdatesToInstall.Count -gt 0) {\r\n            Write-Output \"Now installing updates...\"\r\n            $Installer = $UpdateSession.CreateUpdateInstaller()\r\n            $Installer.Updates = $UpdatesToInstall\r\n            $InstallationResult = $Installer.Install()\r\n            $Text = ConvertFrom-InstallationResult -Result $InstallationResult.ResultCode\r\n            Write-Output \"Installation Result: $($Text)\"        \r\n            If ($InstallationResult.RebootRequired) {\r\n                Write-Output \"Atleast one update requires a reboot to complete the installation.\"\r\n            }\r\n        }\r\n        If ($service -eq 'MU') {\r\n            Reg.exe DELETE \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /f\r\n        } Elseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n            reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /f\r\n            reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /f\r\n        }\r\n        Stop-Transcript\r\n      "
                                    },
                                    "treatFailureAsDeploymentFailure": true
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-1-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('restart-vm-2-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[variables('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "imageVirtualMachineName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              },
                              "resourceGroupName": {
                                "value": "[[parameters('resourceGroupName')]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "mlzTags": {
                                "value": "[[parameters('mlzTags')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityClientId": {
                                "value": "[[parameters('userAssignedIdentityClientId')]"
                              },
                              "virtualMachineName": "[[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.26.170.59819",
                                  "templateHash": "14414542062672835812"
                                }
                              },
                              "parameters": {
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "resourceGroupName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "mlzTags": {
                                  "type": "object"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityClientId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'restartVirtualMachine')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "Environment",
                                        "value": "[[environment().name]"
                                      },
                                      {
                                        "name": "ResourceGroupName",
                                        "value": "[[parameters('resourceGroupName')]"
                                      },
                                      {
                                        "name": "SubscriptionId",
                                        "value": "[[subscription().subscriptionId]"
                                      },
                                      {
                                        "name": "TenantId",
                                        "value": "[[tenant().tenantId]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityClientId",
                                        "value": "[[parameters('userAssignedIdentityClientId')]"
                                      },
                                      {
                                        "name": "VirtualMachineName",
                                        "value": "[[parameters('imageVirtualMachineName')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Restart-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName\r\n        $AgentStatus = $Null\r\n        while ($Null -eq $AgentStatus) \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $AgentStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).VMAgent\r\n        }\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('microsoft-updates-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('sysprep-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[variables('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "mlzTags": {
                                "value": "[[parameters('mlzTags')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "virtualMachineName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.26.170.59819",
                                  "templateHash": "7415404915420906908"
                                }
                              },
                              "parameters": {
                                "location": {
                                  "type": "string"
                                },
                                "mlzTags": {
                                  "type": "object"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'sysprepVirtualMachine')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": false,
                                    "asyncExecution": true,
                                    "parameters": [],
                                    "source": {
                                      "script": "        Start-Sleep -Seconds 30\r\n        Remove-Item -LiteralPath 'C:\\Windows\\Panther' -Force -Recurse -ErrorAction SilentlyContinue\r\n        Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\cdrom' -Name 'Start' -Value 1\r\n        Start-Process -File 'C:\\Windows\\System32\\Sysprep\\Sysprep.exe' -ArgumentList '/generalize /oobe /shutdown /mode:vm'\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-1-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-2-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('generalize-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[variables('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "imageVirtualMachineName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              },
                              "resourceGroupName": {
                                "value": "[[parameters('resourceGroupName')]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "mlzTags": {
                                "value": "[[parameters('mlzTags')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityClientId": {
                                "value": "[[parameters('userAssignedIdentityClientId')]"
                              },
                              "virtualMachineName": "[[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.26.170.59819",
                                  "templateHash": "15694908783439778041"
                                }
                              },
                              "parameters": {
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "resourceGroupName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string",
                                  "defaultValue": "[[resourceGroup().location]"
                                },
                                "mlzTags": {
                                  "type": "object"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityClientId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'generalizeVirtualMachine')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": false,
                                    "parameters": [
                                      {
                                        "name": "Environment",
                                        "value": "[[environment().name]"
                                      },
                                      {
                                        "name": "ResourceGroupName",
                                        "value": "[[parameters('resourceGroupName')]"
                                      },
                                      {
                                        "name": "SubscriptionId",
                                        "value": "[[subscription().subscriptionId]"
                                      },
                                      {
                                        "name": "TenantId",
                                        "value": "[[tenant().tenantId]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityClientId",
                                        "value": "[[parameters('userAssignedIdentityClientId')]"
                                      },
                                      {
                                        "name": "VirtualMachineName",
                                        "value": "[[parameters('imageVirtualMachineName')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        $PowerStatus = ''\r\n        while ($PowerStatus -ne 'VM stopped') \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $PowerStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).Statuses[1].DisplayStatus\r\n        }\r\n        Set-AzVm -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Generalized\r\n        Start-Sleep -Seconds 30\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('image-version-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[variables('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "computeGalleryImageResourceId": {
                                "value": "[[parameters('computeGalleryImageResourceId')]"
                              },
                              "computeGalleryName": {
                                "value": "[[parameters('computeGalleryName')]"
                              },
                              "excludeFromLatest": {
                                "value": "[[parameters('excludeFromLatest')]"
                              },
                              "imageDefinitionName": {
                                "value": "[[parameters('imageDefinitionName')]"
                              },
                              "imageVersionNumber": {
                                "value": "[[variables('autoImageVersion')]"
                              },
                              "imageVirtualMachineResourceId": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "marketplaceImageOffer": {
                                "value": "[[parameters('marketplaceImageOffer')]"
                              },
                              "marketplaceImagePublisher": {
                                "value": "[[parameters('marketplaceImagePublisher')]"
                              },
                              "mlzTags": {
                                "value": "[[parameters('mlzTags')]"
                              },
                              "replicaCount": {
                                "value": "[[parameters('replicaCount')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              }
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.26.170.59819",
                                  "templateHash": "673135601830674247"
                                }
                              },
                              "parameters": {
                                "allowDeletionOfReplicatedLocations": {
                                  "type": "bool",
                                  "defaultValue": true
                                },
                                "computeGalleryName": {
                                  "type": "string"
                                },
                                "computeGalleryImageResourceId": {
                                  "type": "string"
                                },
                                "excludeFromLatest": {
                                  "type": "bool"
                                },
                                "imageDefinitionName": {
                                  "type": "string"
                                },
                                "imageVersionNumber": {
                                  "type": "string"
                                },
                                "imageVirtualMachineResourceId": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string"
                                },
                                "marketplaceImageOffer": {
                                  "type": "string"
                                },
                                "marketplaceImagePublisher": {
                                  "type": "string"
                                },
                                "mlzTags": {
                                  "type": "object"
                                },
                                "replicaCount": {
                                  "type": "int"
                                },
                                "tags": {
                                  "type": "object"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/galleries/images",
                                  "apiVersion": "2022-03-03",
                                  "name": "[[format('{0}/{1}', parameters('computeGalleryName'), parameters('imageDefinitionName'))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "architecture": "x64",
                                    "features": [
                                      {
                                        "name": "SecurityType",
                                        "value": "TrustedLaunch"
                                      }
                                    ],
                                    "hyperVGeneration": "V2",
                                    "identifier": {
                                      "offer": "[[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImageOffer'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.offer)]",
                                      "publisher": "[[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImagePublisher'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.publisher)]",
                                      "sku": "[[parameters('imageDefinitionName')]"
                                    },
                                    "osState": "Generalized",
                                    "osType": "Windows"
                                  }
                                },
                                {
                                  "type": "Microsoft.Compute/galleries/images/versions",
                                  "apiVersion": "2022-03-03",
                                  "name": "[[format('{0}/{1}/{2}', parameters('computeGalleryName'), parameters('imageDefinitionName'), parameters('imageVersionNumber'))]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "publishingProfile": {
                                      "excludeFromLatest": "[[parameters('excludeFromLatest')]",
                                      "replicaCount": "[[parameters('replicaCount')]",
                                      "replicationMode": "Full",
                                      "storageAccountType": "Standard_LRS",
                                      "targetRegions": [
                                        {
                                          "name": "[[parameters('location')]",
                                          "regionalReplicaCount": "[[parameters('replicaCount')]",
                                          "storageAccountType": "Standard_LRS"
                                        }
                                      ]
                                    },
                                    "safetyProfile": {
                                      "allowDeletionOfReplicatedLocations": "[[parameters('allowDeletionOfReplicatedLocations')]"
                                    },
                                    "storageProfile": {
                                      "source": {
                                        "id": "[[parameters('imageVirtualMachineResourceId')]"
                                      }
                                    }
                                  },
                                  "dependsOn": [
                                    "[[resourceId('Microsoft.Compute/galleries/images', parameters('computeGalleryName'), parameters('imageDefinitionName'))]"
                                  ]
                                }
                              ],
                              "outputs": {
                                "imageDefinitionResourceId": {
                                  "type": "string",
                                  "value": "[[resourceId('Microsoft.Compute/galleries/images', parameters('computeGalleryName'), parameters('imageDefinitionName'))]"
                                }
                              }
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('generalize-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        },
                        {
                          "type": "Microsoft.Resources/deployments",
                          "apiVersion": "2022-09-01",
                          "name": "[[format('remove-vm-{0}', parameters('deploymentNameSuffix'))]",
                          "subscriptionId": "[[variables('subscriptionId')]",
                          "resourceGroup": "[[parameters('resourceGroupName')]",
                          "properties": {
                            "expressionEvaluationOptions": {
                              "scope": "inner"
                            },
                            "mode": "Incremental",
                            "parameters": {
                              "enableBuildAutomation": {
                                "value": "[[parameters('enableBuildAutomation')]"
                              },
                              "imageVirtualMachineName": {
                                "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                              },
                              "location": {
                                "value": "[[parameters('location')]"
                              },
                              "mlzTags": {
                                "value": "[[parameters('mlzTags')]"
                              },
                              "tags": {
                                "value": "[[parameters('tags')]"
                              },
                              "userAssignedIdentityClientId": {
                                "value": "[[parameters('userAssignedIdentityClientId')]"
                              },
                              "virtualMachineName": "[[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                            },
                            "template": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.26.170.59819",
                                  "templateHash": "874338715058883059"
                                }
                              },
                              "parameters": {
                                "enableBuildAutomation": {
                                  "type": "bool"
                                },
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "location": {
                                  "type": "string",
                                  "defaultValue": "[[resourceGroup().location]"
                                },
                                "mlzTags": {
                                  "type": "object"
                                },
                                "tags": {
                                  "type": "object"
                                },
                                "userAssignedIdentityClientId": {
                                  "type": "string"
                                },
                                "virtualMachineName": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Compute/virtualMachines/runCommands",
                                  "apiVersion": "2023-03-01",
                                  "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'removeVirtualMachine')]",
                                  "location": "[[parameters('location')]",
                                  "tags": "[[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                                  "properties": {
                                    "treatFailureAsDeploymentFailure": true,
                                    "asyncExecution": "[[if(parameters('enableBuildAutomation'), false(), true())]",
                                    "parameters": [
                                      {
                                        "name": "EnableBuildAutomation",
                                        "value": "[[string(parameters('enableBuildAutomation'))]"
                                      },
                                      {
                                        "name": "Environment",
                                        "value": "[[environment().name]"
                                      },
                                      {
                                        "name": "ImageVmName",
                                        "value": "[[parameters('imageVirtualMachineName')]"
                                      },
                                      {
                                        "name": "ManagementVmName",
                                        "value": "[[parameters('virtualMachineName')]"
                                      },
                                      {
                                        "name": "ResourceGroupName",
                                        "value": "[[resourceGroup().name]"
                                      },
                                      {
                                        "name": "SubscriptionId",
                                        "value": "[[subscription().subscriptionId]"
                                      },
                                      {
                                        "name": "TenantId",
                                        "value": "[[tenant().tenantId]"
                                      },
                                      {
                                        "name": "UserAssignedIdentityClientId",
                                        "value": "[[parameters('userAssignedIdentityClientId')]"
                                      }
                                    ],
                                    "source": {
                                      "script": "        param(\r\n          [string]$EnableBuildAutomation,\r\n          [string]$Environment,\r\n          [string]$ImageVmName,\r\n          [string]$ManagementVmName,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ImageVmName -Force\r\n        if($EnableBuildAutomation -eq 'false')\r\n        {\r\n          Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ManagementVmName -NoWait -Force -AsJob\r\n        }\r\n      "
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "dependsOn": [
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-version-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                            "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                          ]
                        }
                      ],
                      "outputs": {
                        "imageDefinitionResourceId": {
                          "type": "string",
                          "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-version-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.imageDefinitionResourceId.value]"
                        }
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/templateSpecs",
                      "apiVersion": "2022-02-01",
                      "name": "[format('ts-{0}', parameters('imageDefinitionName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Resources/templateSpecs'), parameters('tags')['Microsoft.Resources/templateSpecs'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "description": "[format('An automation runbook deploys a new image version for the \"{0}\" image definition from this template spec.', parameters('imageDefinitionName'))]",
                        "displayName": "[format('Zero Trust Image Build Automation: {0}', parameters('imageDefinitionName'))]"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/templateSpecs/versions",
                      "apiVersion": "2022-02-01",
                      "name": "[format('{0}/{1}', format('ts-{0}', parameters('imageDefinitionName')), '1.0')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Resources/templateSpecs'), parameters('tags')['Microsoft.Resources/templateSpecs'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "mainTemplate": "[variables('$fxv#0')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/templateSpecs', format('ts-{0}', parameters('imageDefinitionName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Resources/templateSpecs/versions', format('ts-{0}', parameters('imageDefinitionName')), '1.0')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('management-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "hybridUseBenefit": {
                    "value": "[parameters('hybridUseBenefit')]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('localAdministratorPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('localAdministratorUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "storageAccountName": {
                    "value": "[split(parameters('storageAccountResourceId'), '/')[8]]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[parameters('userAssignedIdentityResourceId')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "8898522588803558538"
                    }
                  },
                  "parameters": {
                    "containerName": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "hybridUseBenefit": {
                      "type": "bool"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[format('nic-{0}', parameters('virtualMachineName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": true,
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "Standard_D2s_v3"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('localAdministratorUsername')]",
                          "adminPassword": "[parameters('localAdministratorPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": true,
                            "patchSettings": {
                              "patchMode": "AutomaticByOS",
                              "assessmentMode": "ImageDefault"
                            }
                          }
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2019-datacenter-core-g2",
                            "version": "latest"
                          },
                          "osDisk": {
                            "caching": "ReadWrite",
                            "createOption": "FromImage",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "Premium_LRS"
                            },
                            "name": "[format('disk-{0}', parameters('virtualMachineName'))]",
                            "osType": "Windows"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "securityProfile": {
                          "encryptionAtHost": true,
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch"
                        },
                        "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'appAzModules')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[environment().suffixes.storage]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.12.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('automation-account-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcGisProInstaller": {
                    "value": "[parameters('arcGisProInstaller')]"
                  },
                  "actionGroupName": {
                    "value": "[parameters('actionGroupName')]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('automationAccountName')]"
                  },
                  "automationAccountPrivateDnsZoneResourceId": {
                    "value": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
                  },
                  "computeGalleryImageResourceId": {
                    "value": "[parameters('computeGalleryImageResourceId')]"
                  },
                  "computeGalleryResourceId": {
                    "value": "[parameters('computeGalleryResourceId')]"
                  },
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "customizations": {
                    "value": "[parameters('customizations')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "distributionGroup": {
                    "value": "[parameters('distributionGroup')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "enableBuildAutomation": {
                    "value": "[parameters('enableBuildAutomation')]"
                  },
                  "excludeFromLatest": {
                    "value": "[parameters('excludeFromLatest')]"
                  },
                  "hybridUseBenefit": {
                    "value": "[parameters('hybridUseBenefit')]"
                  },
                  "imageDefinitionName": {
                    "value": "[parameters('imageDefinitionName')]"
                  },
                  "imageMajorVersion": {
                    "value": "[parameters('imageMajorVersion')]"
                  },
                  "imagePatchVersion": {
                    "value": "[parameters('imagePatchVersion')]"
                  },
                  "imageVirtualMachineName": {
                    "value": "[parameters('imageVirtualMachineName')]"
                  },
                  "installAccess": {
                    "value": "[parameters('installAccess')]"
                  },
                  "installArcGisPro": {
                    "value": "[parameters('installArcGisPro')]"
                  },
                  "installExcel": {
                    "value": "[parameters('installExcel')]"
                  },
                  "installOneDrive": {
                    "value": "[parameters('installOneDrive')]"
                  },
                  "installOneNote": {
                    "value": "[parameters('installOneNote')]"
                  },
                  "installOutlook": {
                    "value": "[parameters('installOutlook')]"
                  },
                  "installPowerPoint": {
                    "value": "[parameters('installPowerPoint')]"
                  },
                  "installProject": {
                    "value": "[parameters('installProject')]"
                  },
                  "installPublisher": {
                    "value": "[parameters('installPublisher')]"
                  },
                  "installSkypeForBusiness": {
                    "value": "[parameters('installSkypeForBusiness')]"
                  },
                  "installTeams": {
                    "value": "[parameters('installTeams')]"
                  },
                  "installUpdates": {
                    "value": "[parameters('installUpdates')]"
                  },
                  "installVirtualDesktopOptimizationTool": {
                    "value": "[parameters('installVirtualDesktopOptimizationTool')]"
                  },
                  "installVisio": {
                    "value": "[parameters('installVisio')]"
                  },
                  "installWord": {
                    "value": "[parameters('installWord')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "marketplaceImageOffer": {
                    "value": "[parameters('marketplaceImageOffer')]"
                  },
                  "marketplaceImagePublisher": {
                    "value": "[parameters('marketplaceImagePublisher')]"
                  },
                  "marketplaceImageSKU": {
                    "value": "[parameters('marketplaceImageSKU')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "msrdcwebrtcsvcInstaller": {
                    "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                  },
                  "officeInstaller": {
                    "value": "[parameters('officeInstaller')]"
                  },
                  "oUPath": {
                    "value": "[parameters('oUPath')]"
                  },
                  "replicaCount": {
                    "value": "[parameters('replicaCount')]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "sourceImageType": {
                    "value": "[parameters('sourceImageType')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[parameters('storageAccountResourceId')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "teamsInstaller": {
                    "value": "[parameters('teamsInstaller')]"
                  },
                  "templateSpecResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('template-spec-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  },
                  "updateService": {
                    "value": "[parameters('updateService')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[parameters('userAssignedIdentityResourceId')]"
                  },
                  "vcRedistInstaller": {
                    "value": "[parameters('vcRedistInstaller')]"
                  },
                  "vDOTInstaller": {
                    "value": "[parameters('vDOTInstaller')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "wsusServer": {
                    "value": "[parameters('wsusServer')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "17109972071763386466"
                    }
                  },
                  "parameters": {
                    "arcGisProInstaller": {
                      "type": "string"
                    },
                    "actionGroupName": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "automationAccountPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "computeGalleryImageResourceId": {
                      "type": "string"
                    },
                    "computeGalleryResourceId": {
                      "type": "string"
                    },
                    "containerName": {
                      "type": "string"
                    },
                    "customizations": {
                      "type": "array"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "distributionGroup": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "enableBuildAutomation": {
                      "type": "bool"
                    },
                    "excludeFromLatest": {
                      "type": "bool"
                    },
                    "hybridUseBenefit": {
                      "type": "bool"
                    },
                    "imageDefinitionName": {
                      "type": "string"
                    },
                    "imageMajorVersion": {
                      "type": "int"
                    },
                    "imagePatchVersion": {
                      "type": "int"
                    },
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "installAccess": {
                      "type": "bool"
                    },
                    "installArcGisPro": {
                      "type": "bool"
                    },
                    "installExcel": {
                      "type": "bool"
                    },
                    "installOneDrive": {
                      "type": "bool"
                    },
                    "installOneNote": {
                      "type": "bool"
                    },
                    "installOutlook": {
                      "type": "bool"
                    },
                    "installPowerPoint": {
                      "type": "bool"
                    },
                    "installProject": {
                      "type": "bool"
                    },
                    "installPublisher": {
                      "type": "bool"
                    },
                    "installSkypeForBusiness": {
                      "type": "bool"
                    },
                    "installTeams": {
                      "type": "bool"
                    },
                    "installUpdates": {
                      "type": "bool"
                    },
                    "installVirtualDesktopOptimizationTool": {
                      "type": "bool"
                    },
                    "installVisio": {
                      "type": "bool"
                    },
                    "installWord": {
                      "type": "bool"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "jobScheduleName": {
                      "type": "string",
                      "defaultValue": "[newGuid()]"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "marketplaceImageOffer": {
                      "type": "string"
                    },
                    "marketplaceImagePublisher": {
                      "type": "string"
                    },
                    "marketplaceImageSKU": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "msrdcwebrtcsvcInstaller": {
                      "type": "string"
                    },
                    "officeInstaller": {
                      "type": "string"
                    },
                    "oUPath": {
                      "type": "string"
                    },
                    "replicaCount": {
                      "type": "int"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "sourceImageType": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "teamsInstaller": {
                      "type": "string"
                    },
                    "templateSpecResourceId": {
                      "type": "string"
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "timeZone": {
                      "type": "string"
                    },
                    "updateService": {
                      "type": "string"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "vcRedistInstaller": {
                      "type": "string"
                    },
                    "vDOTInstaller": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "wsusServer": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "parameters": {
                      "arcGisProInstaller": "[parameters('arcGisProInstaller')]",
                      "computeGalleryResourceId": "[parameters('computeGalleryResourceId')]",
                      "containerName": "[parameters('containerName')]",
                      "customizations": "[string(parameters('customizations'))]",
                      "diskEncryptionSetResourceId": "[parameters('diskEncryptionSetResourceId')]",
                      "enableBuildAutomation": "[string(parameters('enableBuildAutomation'))]",
                      "environmentName": "[environment().name]",
                      "excludeFromLatest": "[parameters('excludeFromLatest')]",
                      "hybridUseBenefit": "[parameters('hybridUseBenefit')]",
                      "imageDefinitionName": "[parameters('imageDefinitionName')]",
                      "imageMajorVersion": "[string(parameters('imageMajorVersion'))]",
                      "imagePatchVersion": "[string(parameters('imagePatchVersion'))]",
                      "imageVirtualMachineName": "[parameters('imageVirtualMachineName')]",
                      "installAccess": "[string(parameters('installAccess'))]",
                      "installArcGisPro": "[string(parameters('installArcGisPro'))]",
                      "installExcel": "[string(parameters('installExcel'))]",
                      "InstallOneDrive": "[string(parameters('installOneDrive'))]",
                      "installOneNote": "[string(parameters('installOneNote'))]",
                      "installOutlook": "[string(parameters('installOutlook'))]",
                      "installPowerPoint": "[string(parameters('installPowerPoint'))]",
                      "installProject": "[string(parameters('installProject'))]",
                      "installPublisher": "[string(parameters('installPublisher'))]",
                      "installSkypeForBusiness": "[string(parameters('installSkypeForBusiness'))]",
                      "installTeams": "[string(parameters('installTeams'))]",
                      "installUpdates": "[string(parameters('installUpdates'))]",
                      "installVirtualDesktopOptimizationTool": "[string(parameters('installVirtualDesktopOptimizationTool'))]",
                      "installVisio": "[string(parameters('installVisio'))]",
                      "installWord": "[string(parameters('installWord'))]",
                      "keyVaultName": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "managementVirtualMachineName": "[parameters('managementVirtualMachineName')]",
                      "marketplaceImageOffer": "[parameters('marketplaceImageOffer')]",
                      "marketplaceImagePublisher": "[parameters('marketplaceImagePublisher')]",
                      "marketplaceImageSKU": "[parameters('marketplaceImageSKU')]",
                      "mlzTags": "[string(parameters('mlzTags'))]",
                      "msrdcwebrtcsvcInstaller": "[parameters('msrdcwebrtcsvcInstaller')]",
                      "officeInstaller": "[parameters('officeInstaller')]",
                      "replicaCount": "[string(parameters('replicaCount'))]",
                      "resourceGroupName": "[parameters('resourceGroupName')]",
                      "computeGalleryImageResourceId": "[parameters('computeGalleryImageResourceId')]",
                      "sourceImageType": "[parameters('sourceImageType')]",
                      "storageAccountResourceId": "[parameters('storageAccountResourceId')]",
                      "subnetResourceId": "[parameters('subnetResourceId')]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "tags": "[string(parameters('tags'))]",
                      "teamsInstaller": "[parameters('teamsInstaller')]",
                      "templateSpecResourceId": "[parameters('templateSpecResourceId')]",
                      "tenantId": "[variables('tenantId')]",
                      "updateService": "[parameters('updateService')]",
                      "userAssignedIdentityClientId": "[parameters('userAssignedIdentityClientId')]",
                      "userAssignedIdentityPrincipalId": "[parameters('userAssignedIdentityPrincipalId')]",
                      "userAssignedIdentityResourceId": "[parameters('userAssignedIdentityResourceId')]",
                      "vcRedistInstaller": "[parameters('vcRedistInstaller')]",
                      "vDOTInstaller": "[parameters('vDOTInstaller')]",
                      "virtualMachineSize": "[parameters('virtualMachineSize')]",
                      "wsusServer": "[parameters('wsusServer')]"
                    },
                    "privateEndpointName": "[format('pe-{0}', parameters('automationAccountName'))]",
                    "runbookName": "New-AzureZeroTrustImageBuild",
                    "storageEndpoint": "[environment().suffixes.storage]",
                    "subscriptionId": "[subscription().subscriptionId]",
                    "tenantId": "[subscription().tenantId]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Automation/automationAccounts",
                      "apiVersion": "2022-08-08",
                      "name": "[parameters('automationAccountName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "disableLocalAuth": false,
                        "publicNetworkAccess": false,
                        "sku": {
                          "name": "Basic"
                        },
                        "encryption": {
                          "keySource": "Microsoft.Automation",
                          "identity": {}
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-05-01",
                      "name": "[variables('privateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('privateEndpointName')]",
                            "id": "[resourceId('Microsoft.Network/privateEndpoints/privateLinkServiceConnections', variables('privateEndpointName'), variables('privateEndpointName'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                              "groupIds": [
                                "DSCAndHybridWorker"
                              ]
                            }
                          }
                        ],
                        "customNetworkInterfaceName": "[format('nic-{0}', parameters('automationAccountName'))]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', variables('privateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "privatelink-azure-automation-net",
                            "properties": {
                              "privateDnsZoneId": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-07-01",
                      "name": "[format('{0}/{1}', parameters('managementVirtualMachineName'), 'runbook')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "AutomationAccountName",
                            "value": "[parameters('automationAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "ResourceGroupName",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "RunbookName",
                            "value": "[variables('runbookName')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[split(parameters('storageAccountResourceId'), '/')[8]]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[variables('storageEndpoint')]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "TenantId",
                            "value": "[tenant().tenantId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          }
                        ],
                        "source": {
                          "script": "        param (\r\n          [string]$AutomationAccountName,\r\n          [string]$ContainerName,\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$RunbookName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $BlobName = 'New-AzureZeroTrustImageBuild.ps1'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $File = \"$env:windir\\temp\\$BlobName\"\r\n        do\r\n        {\r\n            try\r\n            {\r\n                Write-Output \"Download Attempt $i\"\r\n                Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $File\r\n            }\r\n            catch [System.Net.WebException]\r\n            {\r\n                Start-Sleep -Seconds 60\r\n                $i++\r\n                if($i -gt 10){throw}\r\n                continue\r\n            }\r\n            catch\r\n            {\r\n                $Output = $_ | select *\r\n                Write-Output $Output\r\n                throw\r\n            }\r\n        }\r\n        until(Test-Path -Path $File)\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Import-AzAutomationRunbook -Name $RunbookName -Path $File -Type PowerShell -AutomationAccountName $AutomationAccountName -ResourceGroupName $ResourceGroupName -Published -Force | Out-Null\r\n      "
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/schedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('imageDefinitionName'))]",
                      "properties": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "[dateTimeAdd(parameters('time'), 'P1D')]",
                        "timeZone": "[parameters('timeZone')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('jobScheduleName'))]",
                      "properties": {
                        "parameters": {
                          "parameters": "[replace(string(variables('parameters')), '\"', '\\\"')]"
                        },
                        "runbook": {
                          "name": "[variables('runbookName')]"
                        },
                        "runOn": "Zero Trust Image Build Automation",
                        "schedule": {
                          "name": "[parameters('imageDefinitionName')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]",
                        "[resourceId('Microsoft.Automation/automationAccounts/schedules', parameters('automationAccountName'), parameters('imageDefinitionName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups/hybridRunbookWorkers",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}/{2}', parameters('automationAccountName'), 'Zero Trust Image Build Automation', guid(resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')))]",
                      "properties": {
                        "vmResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('managementVirtualMachineName'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('managementVirtualMachineName'), 'HybridWorkerForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Automation.HybridWorker",
                        "type": "HybridWorkerForWindows",
                        "typeHandlerVersion": "1.1",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "AutomationAccountURL": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2022-08-08').automationHybridServiceUrl]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]"
                      ]
                    },
                    {
                      "condition": "[and(and(not(empty(parameters('domainJoinUserPrincipalName'))), not(empty(parameters('domainName')))), not(empty(parameters('oUPath'))))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('managementVirtualMachineName'), 'JsonADDomainExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "forceUpdateTag": "[parameters('time')]",
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('domainName')]",
                          "User": "[parameters('domainJoinUserPrincipalName')]",
                          "Restart": "true",
                          "Options": "3",
                          "OUPath": "[parameters('oUPath')]"
                        },
                        "protectedSettings": {
                          "Password": "[parameters('domainJoinPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('managementVirtualMachineName'), 'HybridWorkerForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]"
                      ]
                    },
                    {
                      "condition": "[and(and(not(empty(parameters('logAnalyticsWorkspaceResourceId'))), not(empty(parameters('distributionGroup')))), not(empty(parameters('actionGroupName'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('monitoring-{0}', parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "actionGroupName": {
                            "value": "[parameters('actionGroupName')]"
                          },
                          "automationAccountName": {
                            "value": "[parameters('automationAccountName')]"
                          },
                          "distributionGroup": {
                            "value": "[parameters('distributionGroup')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "16943257959653266739"
                            }
                          },
                          "parameters": {
                            "actionGroupName": {
                              "type": "string"
                            },
                            "automationAccountName": {
                              "type": "string"
                            },
                            "distributionGroup": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "alerts": [
                              {
                                "name": "[format('Zero Trust Image Build - Failure ({0})', parameters('automationAccountName'))]",
                                "description": "Sends an error alert when the runbook build fails.",
                                "severity": 0,
                                "evaluationFrequency": "PT5M",
                                "windowSize": "PT5M",
                                "criteria": {
                                  "allOf": [
                                    {
                                      "query": "AzureDiagnostics\n| where ResourceProvider == \"MICROSOFT.AUTOMATION\"\n| where Category  == \"JobStreams\"\n| where ResultDescription has \"Image build failed\"",
                                      "timeAggregation": "Count",
                                      "dimensions": [
                                        {
                                          "name": "ResultDescription",
                                          "operator": "Include",
                                          "values": [
                                            "*"
                                          ]
                                        }
                                      ],
                                      "operator": "GreaterThanOrEqual",
                                      "threshold": 1,
                                      "failingPeriods": {
                                        "numberOfEvaluationPeriods": 1,
                                        "minFailingPeriodsToAlert": 1
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "name": "[format('Zero Trust Image Build - Success ({0})', parameters('automationAccountName'))]",
                                "description": "Sends an informational alert when the runbook build succeeds.",
                                "severity": 3,
                                "evaluationFrequency": "PT5M",
                                "windowSize": "PT5M",
                                "criteria": {
                                  "allOf": [
                                    {
                                      "query": "AzureDiagnostics\n| where ResourceProvider == \"MICROSOFT.AUTOMATION\"\n| where Category  == \"JobStreams\"\n| where ResultDescription has \"Image build succeeded\"",
                                      "timeAggregation": "Count",
                                      "dimensions": [
                                        {
                                          "name": "ResultDescription",
                                          "operator": "Include",
                                          "values": [
                                            "*"
                                          ]
                                        }
                                      ],
                                      "operator": "GreaterThanOrEqual",
                                      "threshold": 1,
                                      "failingPeriods": {
                                        "numberOfEvaluationPeriods": 1,
                                        "minFailingPeriodsToAlert": 1
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('automationAccountName'))]",
                              "name": "[format('diag-{0}', parameters('automationAccountName'))]",
                              "properties": {
                                "logs": [
                                  {
                                    "category": "JobLogs",
                                    "enabled": true
                                  },
                                  {
                                    "category": "JobStreams",
                                    "enabled": true
                                  }
                                ],
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              }
                            },
                            {
                              "condition": "[and(not(empty(parameters('actionGroupName'))), not(empty(parameters('distributionGroup'))))]",
                              "type": "Microsoft.Insights/actionGroups",
                              "apiVersion": "2022-06-01",
                              "name": "[parameters('actionGroupName')]",
                              "location": "global",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Insights/actionGroups'), parameters('tags')['Microsoft.Insights/actionGroups'], createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "emailReceivers": [
                                  {
                                    "emailAddress": "[parameters('distributionGroup')]",
                                    "name": "[parameters('distributionGroup')]",
                                    "useCommonAlertSchema": true
                                  }
                                ],
                                "enabled": true,
                                "groupShortName": "Image Builds"
                              }
                            },
                            {
                              "copy": {
                                "name": "scheduledQueryRules",
                                "count": "[length(range(0, length(variables('alerts'))))]"
                              },
                              "condition": "[and(not(empty(parameters('actionGroupName'))), not(empty(parameters('logAnalyticsWorkspaceResourceId'))))]",
                              "type": "Microsoft.Insights/scheduledQueryRules",
                              "apiVersion": "2022-06-15",
                              "name": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].name]",
                              "location": "[parameters('location')]",
                              "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tags')['Microsoft.Insights/scheduledQueryRules'], createObject()), parameters('mlzTags'))]",
                              "kind": "LogAlert",
                              "properties": {
                                "actions": {
                                  "actionGroups": [
                                    "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]"
                                  ]
                                },
                                "autoMitigate": false,
                                "skipQueryValidation": false,
                                "criteria": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].criteria]",
                                "description": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].description]",
                                "displayName": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].name]",
                                "enabled": true,
                                "evaluationFrequency": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].evaluationFrequency]",
                                "severity": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].severity]",
                                "windowSize": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].windowSize]",
                                "scopes": [
                                  "[parameters('logAnalyticsWorkspaceResourceId')]"
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('template-spec-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-imaging-baseline-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('build-image-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "arcGisProInstaller": {
            "value": "[parameters('arcGisProInstaller')]"
          },
          "computeGalleryImageResourceId": {
            "value": "[parameters('computeGalleryImageResourceId')]"
          },
          "computeGalleryName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.computeGalleryName]"
          },
          "containerName": {
            "value": "[parameters('containerName')]"
          },
          "customizations": {
            "value": "[parameters('customizations')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
          },
          "enableBuildAutomation": {
            "value": "[parameters('enableBuildAutomation')]"
          },
          "excludeFromLatest": {
            "value": "[parameters('excludeFromLatest')]"
          },
          "hybridUseBenefit": {
            "value": "[parameters('hybridUseBenefit')]"
          },
          "imageDefinitionName": {
            "value": "[variables('imageDefinitionName')]"
          },
          "imageMajorVersion": {
            "value": "[parameters('imageMajorVersion')]"
          },
          "imagePatchVersion": {
            "value": "[parameters('imagePatchVersion')]"
          },
          "imageVirtualMachineName": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.windowsVmName, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'b')]"
          },
          "installAccess": {
            "value": "[parameters('installAccess')]"
          },
          "installArcGisPro": {
            "value": "[parameters('installArcGisPro')]"
          },
          "installExcel": {
            "value": "[parameters('installExcel')]"
          },
          "installOneDrive": {
            "value": "[parameters('installOneDrive')]"
          },
          "installOneNote": {
            "value": "[parameters('installOneNote')]"
          },
          "installOutlook": {
            "value": "[parameters('installOutlook')]"
          },
          "installPowerPoint": {
            "value": "[parameters('installPowerPoint')]"
          },
          "installProject": {
            "value": "[parameters('installProject')]"
          },
          "installPublisher": {
            "value": "[parameters('installPublisher')]"
          },
          "installSkypeForBusiness": {
            "value": "[parameters('installSkypeForBusiness')]"
          },
          "installTeams": {
            "value": "[parameters('installTeams')]"
          },
          "installUpdates": {
            "value": "[parameters('installUpdates')]"
          },
          "installVirtualDesktopOptimizationTool": {
            "value": "[parameters('installVirtualDesktopOptimizationTool')]"
          },
          "installVisio": {
            "value": "[parameters('installVisio')]"
          },
          "installWord": {
            "value": "[parameters('installWord')]"
          },
          "keyVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.keyVaultName]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('localAdministratorPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('localAdministratorUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managementVirtualMachineName": {
            "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.windowsVmName, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'm')]"
          },
          "marketplaceImageOffer": {
            "value": "[parameters('marketplaceImageOffer')]"
          },
          "marketplaceImagePublisher": {
            "value": "[parameters('marketplaceImagePublisher')]"
          },
          "marketplaceImageSKU": {
            "value": "[parameters('marketplaceImageSKU')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "msrdcwebrtcsvcInstaller": {
            "value": "[parameters('msrdcwebrtcsvcInstaller')]"
          },
          "officeInstaller": {
            "value": "[parameters('officeInstaller')]"
          },
          "replicaCount": {
            "value": "[parameters('replicaCount')]"
          },
          "resourceGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.resourceGroupName]"
          },
          "sourceImageType": {
            "value": "[parameters('sourceImageType')]"
          },
          "storageAccountResourceId": {
            "value": "[parameters('storageAccountResourceId')]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "teamsInstaller": {
            "value": "[parameters('teamsInstaller')]"
          },
          "updateService": {
            "value": "[parameters('updateService')]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-imaging-baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityClientId.value]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-imaging-baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-imaging-baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
          },
          "vcRedistInstaller": {
            "value": "[parameters('vcRedistInstaller')]"
          },
          "vDOTInstaller": {
            "value": "[parameters('vDOTInstaller')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "wsusServer": {
            "value": "[parameters('wsusServer')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.170.59819",
              "templateHash": "3135582023314630375"
            }
          },
          "parameters": {
            "arcGisProInstaller": {
              "type": "string",
              "defaultValue": ""
            },
            "computeGalleryImageResourceId": {
              "type": "string",
              "defaultValue": ""
            },
            "computeGalleryName": {
              "type": "string"
            },
            "containerName": {
              "type": "string"
            },
            "customizations": {
              "type": "array",
              "defaultValue": []
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow('yyMMddHHs')]"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "enableBuildAutomation": {
              "type": "bool",
              "defaultValue": false
            },
            "excludeFromLatest": {
              "type": "bool",
              "defaultValue": true
            },
            "hybridUseBenefit": {
              "type": "bool",
              "defaultValue": false
            },
            "imageDefinitionName": {
              "type": "string"
            },
            "imageMajorVersion": {
              "type": "int"
            },
            "imagePatchVersion": {
              "type": "int"
            },
            "imageVirtualMachineName": {
              "type": "string"
            },
            "installAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "installArcGisPro": {
              "type": "bool",
              "defaultValue": false
            },
            "installExcel": {
              "type": "bool",
              "defaultValue": false
            },
            "installOneDrive": {
              "type": "bool",
              "defaultValue": false
            },
            "installOneNote": {
              "type": "bool",
              "defaultValue": false
            },
            "installOutlook": {
              "type": "bool",
              "defaultValue": false
            },
            "installPowerPoint": {
              "type": "bool",
              "defaultValue": false
            },
            "installProject": {
              "type": "bool",
              "defaultValue": false
            },
            "installPublisher": {
              "type": "bool",
              "defaultValue": false
            },
            "installSkypeForBusiness": {
              "type": "bool",
              "defaultValue": false
            },
            "installTeams": {
              "type": "bool",
              "defaultValue": false
            },
            "installUpdates": {
              "type": "bool",
              "defaultValue": false
            },
            "installVirtualDesktopOptimizationTool": {
              "type": "bool",
              "defaultValue": false
            },
            "installVisio": {
              "type": "bool",
              "defaultValue": false
            },
            "installWord": {
              "type": "bool",
              "defaultValue": false
            },
            "keyVaultName": {
              "type": "string"
            },
            "localAdministratorPassword": {
              "type": "securestring",
              "defaultValue": ""
            },
            "localAdministratorUsername": {
              "type": "securestring",
              "defaultValue": ""
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "marketplaceImageOffer": {
              "type": "string"
            },
            "marketplaceImagePublisher": {
              "type": "string"
            },
            "marketplaceImageSKU": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object",
              "defaultValue": {}
            },
            "msrdcwebrtcsvcInstaller": {
              "type": "string",
              "defaultValue": ""
            },
            "officeInstaller": {
              "type": "string",
              "defaultValue": ""
            },
            "replicaCount": {
              "type": "int",
              "defaultValue": 1
            },
            "resourceGroupName": {
              "type": "string"
            },
            "runbookExecution": {
              "type": "bool",
              "defaultValue": false
            },
            "sourceImageType": {
              "type": "string",
              "defaultValue": "AzureMarketplace"
            },
            "storageAccountResourceId": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "teamsInstaller": {
              "type": "string",
              "defaultValue": ""
            },
            "updateService": {
              "type": "string",
              "defaultValue": "MicrosoftUpdate"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "vcRedistInstaller": {
              "type": "string",
              "defaultValue": ""
            },
            "vDOTInstaller": {
              "type": "string",
              "defaultValue": ""
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "wsusServer": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "autoImageVersion": "[format('{0}.{1}.{2}', parameters('imageMajorVersion'), variables('imageSuffix'), parameters('imagePatchVersion'))]",
            "imageSuffix": "[take(parameters('deploymentNameSuffix'), 9)]",
            "storageAccountName": "[split(parameters('storageAccountResourceId'), '/')[8]]",
            "storageEndpoint": "[environment().suffixes.storage]",
            "subscriptionId": "[subscription().subscriptionId]"
          },
          "resources": [
            {
              "condition": "[not(parameters('enableBuildAutomation'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('management-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "hybridUseBenefit": {
                    "value": "[parameters('hybridUseBenefit')]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('localAdministratorPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('localAdministratorUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "storageAccountName": {
                    "value": "[split(parameters('storageAccountResourceId'), '/')[8]]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[parameters('userAssignedIdentityResourceId')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "8898522588803558538"
                    }
                  },
                  "parameters": {
                    "containerName": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "hybridUseBenefit": {
                      "type": "bool"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[format('nic-{0}', parameters('virtualMachineName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": true,
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "Standard_D2s_v3"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('localAdministratorUsername')]",
                          "adminPassword": "[parameters('localAdministratorPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": true,
                            "patchSettings": {
                              "patchMode": "AutomaticByOS",
                              "assessmentMode": "ImageDefault"
                            }
                          }
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2019-datacenter-core-g2",
                            "version": "latest"
                          },
                          "osDisk": {
                            "caching": "ReadWrite",
                            "createOption": "FromImage",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "Premium_LRS"
                            },
                            "name": "[format('disk-{0}', parameters('virtualMachineName'))]",
                            "osType": "Windows"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "securityProfile": {
                          "encryptionAtHost": true,
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch"
                        },
                        "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'appAzModules')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[environment().suffixes.storage]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.12.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('image-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localAdministratorPassword": "[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorPassword')), createObject('value', parameters('localAdministratorPassword')))]",
                  "localAdministratorUsername": "[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorUsername')), createObject('value', parameters('localAdministratorUsername')))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "marketplaceImageOffer": {
                    "value": "[parameters('marketplaceImageOffer')]"
                  },
                  "marketplaceImagePublisher": {
                    "value": "[parameters('marketplaceImagePublisher')]"
                  },
                  "marketplaceImageSKU": {
                    "value": "[parameters('marketplaceImageSKU')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "computeGalleryImageResourceId": {
                    "value": "[parameters('computeGalleryImageResourceId')]"
                  },
                  "sourceImageType": {
                    "value": "[parameters('sourceImageType')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[parameters('userAssignedIdentityResourceId')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('imageVirtualMachineName')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "8557004379539182499"
                    }
                  },
                  "parameters": {
                    "computeGalleryImageResourceId": {
                      "type": "string"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "location": {
                      "type": "string"
                    },
                    "marketplaceImageOffer": {
                      "type": "string"
                    },
                    "marketplaceImagePublisher": {
                      "type": "string"
                    },
                    "marketplaceImageSKU": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "sourceImageType": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "imageReference": "[if(equals(parameters('sourceImageType'), 'AzureComputeGallery'), createObject('id', parameters('computeGalleryImageResourceId')), createObject('publisher', parameters('marketplaceImagePublisher'), 'offer', parameters('marketplaceImageOffer'), 'sku', parameters('marketplaceImageSKU'), 'version', 'latest'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2022-05-01",
                      "name": "[format('nic-{0}', parameters('virtualMachineName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('localAdministratorUsername')]",
                          "adminPassword": "[parameters('localAdministratorPassword')]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('imageReference')]",
                          "osDisk": {
                            "createOption": "FromImage",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "storageAccountType": "StandardSSD_LRS"
                            },
                            "name": "[format('disk-{0}', parameters('virtualMachineName'))]"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "securityProfile": {
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('customizations-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcGisProInstaller": {
                    "value": "[parameters('arcGisProInstaller')]"
                  },
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "customizations": {
                    "value": "[parameters('customizations')]"
                  },
                  "installAccess": {
                    "value": "[parameters('installAccess')]"
                  },
                  "installArcGisPro": {
                    "value": "[parameters('installArcGisPro')]"
                  },
                  "installExcel": {
                    "value": "[parameters('installExcel')]"
                  },
                  "installOneDrive": {
                    "value": "[parameters('installOneDrive')]"
                  },
                  "installOneNote": {
                    "value": "[parameters('installOneNote')]"
                  },
                  "installOutlook": {
                    "value": "[parameters('installOutlook')]"
                  },
                  "installPowerPoint": {
                    "value": "[parameters('installPowerPoint')]"
                  },
                  "installProject": {
                    "value": "[parameters('installProject')]"
                  },
                  "installPublisher": {
                    "value": "[parameters('installPublisher')]"
                  },
                  "installSkypeForBusiness": {
                    "value": "[parameters('installSkypeForBusiness')]"
                  },
                  "installTeams": {
                    "value": "[parameters('installTeams')]"
                  },
                  "installVirtualDesktopOptimizationTool": {
                    "value": "[parameters('installVirtualDesktopOptimizationTool')]"
                  },
                  "installVisio": {
                    "value": "[parameters('installVisio')]"
                  },
                  "installWord": {
                    "value": "[parameters('installWord')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "msrdcwebrtcsvcInstaller": {
                    "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                  },
                  "officeInstaller": {
                    "value": "[parameters('officeInstaller')]"
                  },
                  "storageAccountName": {
                    "value": "[variables('storageAccountName')]"
                  },
                  "storageEndpoint": {
                    "value": "[variables('storageEndpoint')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "teamsInstaller": {
                    "value": "[parameters('teamsInstaller')]"
                  },
                  "userAssignedIdentityObjectId": {
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  "vcRedistInstaller": {
                    "value": "[parameters('vcRedistInstaller')]"
                  },
                  "vDotInstaller": {
                    "value": "[parameters('vDOTInstaller')]"
                  },
                  "virtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "3676051126599760309"
                    }
                  },
                  "parameters": {
                    "arcGisProInstaller": {
                      "type": "string"
                    },
                    "containerName": {
                      "type": "string"
                    },
                    "customizations": {
                      "type": "array"
                    },
                    "installAccess": {
                      "type": "bool"
                    },
                    "installArcGisPro": {
                      "type": "bool"
                    },
                    "installExcel": {
                      "type": "bool"
                    },
                    "installOneDrive": {
                      "type": "bool"
                    },
                    "installOneNote": {
                      "type": "bool"
                    },
                    "installOutlook": {
                      "type": "bool"
                    },
                    "installPowerPoint": {
                      "type": "bool"
                    },
                    "installProject": {
                      "type": "bool"
                    },
                    "installPublisher": {
                      "type": "bool"
                    },
                    "installSkypeForBusiness": {
                      "type": "bool"
                    },
                    "installTeams": {
                      "type": "bool"
                    },
                    "installVirtualDesktopOptimizationTool": {
                      "type": "bool"
                    },
                    "installVisio": {
                      "type": "bool"
                    },
                    "installWord": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "msrdcwebrtcsvcInstaller": {
                      "type": "string"
                    },
                    "officeInstaller": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageEndpoint": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "teamsInstaller": {
                      "type": "string"
                    },
                    "userAssignedIdentityObjectId": {
                      "type": "string"
                    },
                    "vcRedistInstaller": {
                      "type": "string"
                    },
                    "vDotInstaller": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "installAccessVar": "[format('{0}installAccess', parameters('installAccess'))]",
                    "installers": "[parameters('customizations')]",
                    "installExcelVar": "[format('{0}installWord', parameters('installExcel'))]",
                    "installOneDriveVar": "[format('{0}installOneDrive', parameters('installOneDrive'))]",
                    "installOneNoteVar": "[format('{0}installOneNote', parameters('installOneNote'))]",
                    "installOutlookVar": "[format('{0}installOutlook', parameters('installOutlook'))]",
                    "installPowerPointVar": "[format('{0}installPowerPoint', parameters('installPowerPoint'))]",
                    "installProjectVar": "[format('{0}installProject', parameters('installProject'))]",
                    "installPublisherVar": "[format('{0}installPublisher', parameters('installPublisher'))]",
                    "installSkypeForBusinessVar": "[format('{0}installSkypeForBusiness', parameters('installSkypeForBusiness'))]",
                    "installVisioVar": "[format('{0}installVisio', parameters('installVisio'))]",
                    "installWordVar": "[format('{0}installWord', parameters('installWord'))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "applications",
                        "count": "[length(variables('installers'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), format('app-{0}', variables('installers')[copyIndex()].name))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "Blobname",
                            "value": "[variables('installers')[copyIndex()].blobName]"
                          },
                          {
                            "name": "Installer",
                            "value": "[variables('installers')[copyIndex()].name]"
                          },
                          {
                            "name": "Arguments",
                            "value": "[variables('installers')[copyIndex()].arguments]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName,\r\n          [string]$Installer,\r\n          [string]$Arguments\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        New-Item -Path $env:windir\\temp -Name $Installer -ItemType \"directory\" -Force\r\n        New-Item -Path $env:windir\\temp\\$Installer -Name 'Files' -ItemType \"directory\" -Force\r\n        #Invoking WebClient to download blobs because it is more efficient than Invoke-WebRequest for large files.\r\n        $WebClient = New-Object System.Net.WebClient\r\n        $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n        $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n        $webClient.DownloadFile(\"$StorageAccountUrl$ContainerName/$BlobName\", \"$env:windir\\temp\\$Installer\\Files\\$Blobname\")\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\\$Installer\r\n        if($Blobname -like (\"*.exe\"))\r\n        {\r\n          Start-Process -FilePath $env:windir\\temp\\$Installer\\Files\\$Blobname -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.msi\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.bat\"))\r\n        {\r\n          Start-Process -FilePath cmd.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.ps1\"))\r\n        {\r\n          Start-Process -FilePath PowerShell.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.zip\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Expand-Archive -Path $env:windir\\temp\\$Installer\\Files\\$Blobname -DestinationPath $env:windir\\temp\\$Installer\\Files -Force\r\n          Remove-Item -Path .\\$Blobname -Force -Recurse\r\n        }\r\n        Write-Host \"Removing $Installer Files\"\r\n        Remove-item $env:windir\\temp\\$Installer -Force -Recurse -Confirm:$false\r\n       "
                        }
                      }
                    },
                    {
                      "condition": "[or(or(or(or(or(or(or(or(or(or(parameters('installAccess'), parameters('installExcel')), parameters('installOneDrive')), parameters('installOneNote')), parameters('installOutlook')), parameters('installPowerPoint')), parameters('installPublisher')), parameters('installSkypeForBusiness')), parameters('installWord')), parameters('installVisio')), parameters('installProject'))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'office')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "InstallAccess",
                            "value": "[variables('installAccessVar')]"
                          },
                          {
                            "name": "InstallWord",
                            "value": "[variables('installWordVar')]"
                          },
                          {
                            "name": "InstallExcel",
                            "value": "[variables('installExcelVar')]"
                          },
                          {
                            "name": "InstallOneDrive",
                            "value": "[variables('installOneDriveVar')]"
                          },
                          {
                            "name": "InstallOneNote",
                            "value": "[variables('installOneNoteVar')]"
                          },
                          {
                            "name": "InstallOutlook",
                            "value": "[variables('installOutlookVar')]"
                          },
                          {
                            "name": "InstallPowerPoint",
                            "value": "[variables('installPowerPointVar')]"
                          },
                          {
                            "name": "InstallProject",
                            "value": "[variables('installProjectVar')]"
                          },
                          {
                            "name": "InstallPublisher",
                            "value": "[variables('installPublisherVar')]"
                          },
                          {
                            "name": "InstallSkypeForBusiness",
                            "value": "[variables('installSkypeForBusinessVar')]"
                          },
                          {
                            "name": "InstallVisio",
                            "value": "[variables('installVisioVar')]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[parameters('officeInstaller')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$InstallAccess,\r\n        [string]$InstallExcel,\r\n        [string]$InstallOneDrive,\r\n        [string]$InstallOutlook,\r\n        [string]$InstallProject,\r\n        [string]$InstallPublisher,\r\n        [string]$InstallSkypeForBusiness,\r\n        [string]$InstallVisio,\r\n        [string]$InstallWord,\r\n        [string]$InstallOneNote,\r\n        [string]$InstallPowerPoint,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      New-Item -Path \"$env:windir\\temp\\office\" -ItemType \"directory\" -Force\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $o365ConfigHeader = Set-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Configuration><Add OfficeClientEdition=\"64\" Channel=\"Current\">'\r\n      $o365OfficeHeader = Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"O365ProPlusRetail\"><Language ID=\"en-us\" /><ExcludeApp ID=\"Teams\"/>'\r\n      if($InstallAccess -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Access\" />'\r\n      }\r\n      if($InstallExcel -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Excel\" />'\r\n      }\r\n      if($InstallOneDrive -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"OneDrive\" />'\r\n      }\r\n      if($InstallOneNote -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"OneNote\" />'\r\n      }\r\n      if($InstallOutlook -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Outlook\" />'\r\n      }\r\n      if($InstallPowerPoint -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"PowerPoint\" />'\r\n      }\r\n      if($InstallPublisher -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Publisher\" />'\r\n      }\r\n      if($InstallSkypeForBusiness -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Lync\" />'\r\n      }\r\n      if($InstallWord -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Word\" />'\r\n      }\r\n      $addOfficefooter = Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Product>'\r\n      if($InstallProject -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"ProjectProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      if($InstallVisio -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"VisioProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Add><Updates Enabled=\"FALSE\" /><Display Level=\"None\" AcceptEULA=\"TRUE\" /><Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\"/>'\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Property Name=\"SharedComputerLicensing\" Value=\"1\"/>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Configuration>'\r\n      $Installer = \"$env:windir\\temp\\office\\office.exe\"\r\n      #$DownloadLinks = Invoke-WebRequest -Uri \"https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117\" -UseBasicParsing\r\n      #$URL = $DownloadLinks.Links.href | Where-Object {$_ -like \"https://download.microsoft.com/download/*officedeploymenttool*\"} | Select-Object -First 1\r\n      #Invoke-WebRequest -Uri $URL -OutFile $Installer -UseBasicParsing\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $Installer\r\n      Start-Process -FilePath $Installer -ArgumentList \"/extract:$env:windir\\temp\\office /quiet /passive /norestart\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Downloaded & extracted the Office 365 Deployment Toolkit\"\r\n      Start-Process -FilePath \"$env:windir\\temp\\office\\setup.exe\" -ArgumentList \"/configure $env:windir\\temp\\office\\office365x64.xml\" -Wait -PassThru -ErrorAction \"Stop\" | Out-Null\r\n      Write-Host \"Installed the selected Office365 applications\"\r\n      Write-Host \"Removing Office FIles\"\r\n      Remove-item -Path  \"$env:windir\\temp\\office\" -Force -Confirm:$false -Recurse\r\n      "
                        }
                      },
                      "dependsOn": [
                        "applications"
                      ]
                    },
                    {
                      "condition": "[parameters('installVirtualDesktopOptimizationTool')]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'vdot')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[parameters('vDotInstaller')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $ZIP = \"$env:windir\\temp\\VDOT.zip\"\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\r\n        Unblock-File -Path $ZIP\r\n        Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\" -Force\r\n        $Path = (Get-ChildItem -Path \"$env:windir\\temp\" -Recurse | Where-Object {$_.Name -eq \"Windows_VDOT.ps1\"}).FullName\r\n        $Script = Get-Content -Path $Path\r\n        $ScriptUpdate = $Script.Replace(\"Set-NetAdapterAdvancedProperty\",\"#Set-NetAdapterAdvancedProperty\")\r\n        $ScriptUpdate | Set-Content -Path $Path\r\n        & $Path -Optimizations @(\"AppxPackages\",\"Autologgers\",\"DefaultUserSettings\",\"LGPO\";\"NetworkOptimizations\",\"ScheduledTasks\",\"Services\",\"WindowsMediaPlayer\") -AdvancedOptimizations \"All\" -AcceptEULA\r\n        Write-Host \"Removing VDOT Files\"\r\n        # Expecting this format for vDot ZIP, update if using a different ZIP format for folder structure\r\n        Remove-Item -Path $env:windir\\temp\\Virtual-Desktop-Optimization-Tool-main -Force -Recurse -Confirm:$false\r\n        "
                        },
                        "timeoutInSeconds": 640
                      },
                      "dependsOn": [
                        "applications",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'teams')]"
                      ]
                    },
                    {
                      "condition": "[parameters('installTeams')]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'teams')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[parameters('teamsInstaller')]"
                          },
                          {
                            "name": "BlobName2",
                            "value": "[parameters('vcRedistInstaller')]"
                          },
                          {
                            "name": "BlobName3",
                            "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$BlobName2,\r\n        [string]$BlobName3\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $vcRedistFile = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      $webSocketFile = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      $teamsFile = \"$env:windir\\temp\\teams.msi\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $teamsFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName2\" -OutFile $vcRedistFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName3\" -OutFile  $webSocketFile\r\n\r\n      # Enable media optimizations for Team\r\n      Start-Process \"reg\" -ArgumentList \"add HKLM\\SOFTWARE\\Microsoft\\Teams /v IsWVDEnvironment /t REG_DWORD /d 1 /f\" -Wait -PassThru -ErrorAction \"Stop\"\r\n      Write-Host \"Enabled media optimizations for Teams\"\r\n      # Download & install the latest version of Microsoft Visual C++ Redistributable\r\n      #$File = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/vs/16/release/vc_redist.x64.exe\" -OutFile $File\r\n      Start-Process -FilePath  $vcRedistFile -Args \"/install /quiet /norestart /log vcdist.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the latest version of Microsoft Visual C++ Redistributable\"\r\n      # Download & install the Remote Desktop WebRTC Redirector Service\r\n      #$File = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/msrdcwebrtcsvc/msi\" -OutFile $File\r\n      Start-Process -FilePath msiexec.exe -Args \"/i  $webSocketFile /quiet /qn /norestart /passive /log webSocket.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the Remote Desktop WebRTC Redirector Service\"\r\n      # Install Teams\r\n      #$File = \"$env:windir\\temp\\teams.msi\"\r\n      #Write-host $($TeamsUrl)\r\n      #Invoke-WebRequest -Uri \"$TeamsUrl\" -OutFile $File\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\"ALLUSER=1\"}else{\"\"}\r\n      Start-Process -FilePath msiexec.exe -Args \"/i $teamsFile /quiet /qn /norestart /passive /log teams.log $PerMachineConfiguration ALLUSERS=1\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed Teams\"\r\n      Write-Host \"Removing Teams Files\"\r\n      Remove-Item \"$teamsFile\" -Force -Confirm:$false\r\n      Remove-Item \"$vcRedistFile\" -Force -Confirm:$false\r\n      Remove-Item \"$webSocketFile\" -Force -Confirm:$false\r\n      "
                        }
                      },
                      "dependsOn": [
                        "applications",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]"
                      ]
                    },
                    {
                      "condition": "[parameters('installArcGisPro')]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'arcGisPro')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityObjectId')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('storageAccountName')]"
                          },
                          {
                            "name": "ContainerName",
                            "value": "[parameters('containerName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[parameters('storageEndpoint')]"
                          },
                          {
                            "name": "BlobName",
                            "value": "[parameters('arcGisProInstaller')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      # Retrieve Files\r\n      New-Item -Path $env:windir\\temp -Name arcgis -ItemType \"directory\" -Force\r\n      $ZIP = \"$env:windir\\temp\\arcgispro.zip\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n      Start-Sleep -Seconds 30\r\n      Set-Location -Path $env:windir\\temp\r\n      Unblock-File -Path $ZIP\r\n      Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\\arcgis\" -Force\r\n\r\n      # Install Arcgis\r\n      $arcGisProMsi = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -eq \"ArcGisPro.msi\"})\r\n      $arcGisProMsp = (Get-ChildItem \"$env:windir\\temp\\arcgis\" -Recurse | where {$_.Extension -eq \".msp\"})\r\n      $winDesktopRuntime = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -like \"windowsdesktop-runtime-*\"})\r\n\r\n      # If found Install Windows Desktop Runtime Pre-Req\r\n      try {\r\n        if ($winDesktopRuntime ){\r\n            Start-Process -FilePath \"$($winDesktopRuntime.Directory.FullName)\\$winDesktopRuntime\" -ArgumentList \"/install /quiet /norestart\" -Wait -NoNewWindow -PassThru\r\n        }\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n        # Install ArcGis Pro\r\n        $arcGisProArguments = \"/i $($arcGisProMsi.Directory.FullName)\\$arcGisProMsi ALLUSERS=1 ACCEPTEULA=yes ENABLEEUEI=0 SOFTWARE_CLASS=Professional AUTHORIZATION_TYPE=NAMED_USER LOCK_AUTH_SETTINGS=False ArcGIS_Connection=TRUE /qn /norestart\"\r\n        Start-Process \"msiexec.exe\" -ArgumentList $arcGisProArguments  -Wait -NoNewWindow -PassThru\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n      # If MSP is found, patch ArcGisPro with MSP file\r\n      if($arcGisProMsp){\r\n          Start-Process \"msiexec.exe\" -ArgumentList \"/p $($arcGisProMsp.Directory.FullName)\\$arcGisProMsp /qn\" -Wait -NoNewWindow -PassThru\r\n      }\r\n    }\r\n    catch {\r\n      Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n    }\r\n    Write-Host \"Removing ArcGis Files\"\r\n    Remove-Item $ZIP -Force -Confirm:$false -Recurse\r\n    Remove-item -Path  \"$env:windir\\temp\\arcgis\" -Force -Confirm:$false -Recurse\r\n    "
                        }
                      },
                      "dependsOn": [
                        "applications",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'teams')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'vdot')]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('restart-vm-1-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "imageVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "virtualMachineName": "[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "14414542062672835812"
                    }
                  },
                  "parameters": {
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'restartVirtualMachine')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "ResourceGroupName",
                            "value": "[parameters('resourceGroupName')]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "TenantId",
                            "value": "[tenant().tenantId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          {
                            "name": "VirtualMachineName",
                            "value": "[parameters('imageVirtualMachineName')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Restart-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName\r\n        $AgentStatus = $Null\r\n        while ($Null -eq $AgentStatus) \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $AgentStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).VMAgent\r\n        }\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('customizations-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('installUpdates')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('microsoft-updates-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "imageVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "updateService": {
                    "value": "[parameters('updateService')]"
                  },
                  "wsusServer": {
                    "value": "[parameters('wsusServer')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "461917832205884645"
                    }
                  },
                  "parameters": {
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "updateService": {
                      "type": "string"
                    },
                    "wsusServer": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('imageVirtualMachineName'), 'install-microsoft-updates')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "asyncExecution": false,
                        "parameters": "[if(equals(parameters('updateService'), 'WSUS'), createArray(createObject('name', 'Service', 'value', parameters('updateService')), createObject('name', 'WSUSServer', 'value', parameters('wsusServer'))), createArray(createObject('name', 'Service', 'value', parameters('updateService'))))]",
                        "source": {
                          "script": "        param (\r\n          # The App Name to pass to the WUA API as the calling application.\r\n          [Parameter()]\r\n          [String]$AppName = \"Windows Update API Script\",\r\n          # The search criteria to be used.\r\n          [Parameter()]\r\n          [String]$Criteria = \"IsInstalled=0 and Type='Software' and IsHidden=0\",\r\n          [Parameter()]\r\n          [bool]$ExcludePreviewUpdates = $true,\r\n          # Default service (WSUS if machine is configured to use it, or MU if opted in, or WU otherwise.)\r\n          [Parameter()]\r\n          [ValidateSet(\"WU\",\"MU\",\"WSUS\",\"DCAT\",\"STORE\",\"OTHER\")]\r\n          [string]$Service = 'MU',\r\n          # The http/https fqdn for the Windows Server Update Server\r\n          [Parameter()]\r\n          [string]$WSUSServer\r\n        )\r\n        \r\n        Function ConvertFrom-InstallationResult {\r\n        [CmdletBinding()]\r\n            param (\r\n                [Parameter()]\r\n                [int]$Result\r\n            )        \r\n            switch ($Result) {\r\n                2 { $Text = 'Succeeded' }\r\n                3 { $Text = 'Succeeded with errors' }\r\n                4 { $Text = 'Failed' }\r\n                5 { $Text = 'Cancelled' }\r\n                Default { $Text = \"Unexpected ($Result)\"}\r\n            }        \r\n            Return $Text\r\n        }\r\n        Start-Transcript -Path \"$env:SystemRoot\\Logs\\ImageBuild\\Install-Updates.log\"\r\n        Switch ($Service.ToUpper()) {\r\n            'WU' { $ServerSelection = 2 }\r\n            'MU' { $ServerSelection = 3; $ServiceId = \"7971f918-a847-4430-9279-4a52d1efe18d\" }\r\n            'WSUS' { $ServerSelection = 1 }\r\n            'DCAT' { $ServerSelection = 3; $ServiceId = \"855E8A7C-ECB4-4CA3-B045-1DFA50104289\" }\r\n            'STORE' { $serverSelection = 3; $ServiceId = \"117cab2d-82b1-4b5a-a08c-4d62dbee7782\" }\r\n            'OTHER' { $ServerSelection = 3; $ServiceId = $Service }\r\n        }        \r\n        If ($Service -eq 'MU') {\r\n            $UpdateServiceManager = New-Object -ComObject Microsoft.Update.ServiceManager\r\n            $UpdateServiceManager.ClientApplicationID = $AppName\r\n            $UpdateServiceManager.AddService2(\"7971f918-a847-4430-9279-4a52d1efe18d\", 7, \"\")\r\n            $null = cmd /c reg.exe ADD \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /t REG_DWORD /d 1 /f '2>&1'\r\n            Write-Output \"Added Registry entry to configure Microsoft Update. Exit Code: [$LastExitCode]\"\r\n        } Elseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n            $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n            $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n            Write-Output \"Added Registry entry to configure WSUS Server. Exit Code: [$LastExitCode]\"\r\n        }        \r\n        $UpdateSession = New-Object -ComObject Microsoft.Update.Session\r\n        $updateSession.ClientApplicationID = $AppName   \r\n        $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()\r\n        $UpdateSearcher.ServerSelection = $ServerSelection\r\n        If ($ServerSelection -eq 3) {\r\n            $UpdateSearcher.ServiceId = $ServiceId\r\n        }\r\n        Write-Output \"Searching for Updates...\"\r\n        $SearchResult = $UpdateSearcher.Search($Criteria)\r\n        If ($SearchResult.Updates.Count -eq 0) {\r\n            Write-Output \"There are no applicable updates.\"\r\n            Write-Output \"Now Exiting\"\r\n            Exit $ExitCode\r\n        }\r\n        Write-Output \"List of applicable items found for this computer:\"\r\n        For ($i = 0; $i -lt $SearchResult.Updates.Count; $i++) {\r\n            $Update = $SearchResult.Updates[$i]\r\n            Write-Output \"$($i + 1) > $($update.Title)\"\r\n        }\r\n        $AtLeastOneAdded = $false\r\n        $ExclusiveAdded = $false   \r\n        $UpdatesToDownload = New-Object -ComObject Microsoft.Update.UpdateColl\r\n        Write-Output \"Checking search results:\"\r\n        For ($i = 0; $i -lt $SearchResult.Updates.Count; $i++) {\r\n            $Update = $SearchResult.Updates[$i]\r\n            $AddThisUpdate = $false        \r\n            If ($ExclusiveAdded) {\r\n                Write-Output \"$($i + 1) > skipping: '$($update.Title)' because an exclusive update has already been selected.\"\r\n            } Else {\r\n                $AddThisUpdate = $true\r\n            }        \r\n            if ($ExcludePreviewUpdates -and $update.Title -like '*Preview*') {\r\n                Write-Output \"$($i + 1) > Skipping: '$($update.Title)' because it is a preview update.\"\r\n                $AddThisUpdate = $false\r\n            }        \r\n            If ($AddThisUpdate) {\r\n                $PropertyTest = 0\r\n                $ErrorActionPreference = 'SilentlyContinue'\r\n                $PropertyTest = $Update.InstallationBehavior.Impact\r\n                $ErrorActionPreference = 'Stop'\r\n                If ($PropertyTest -eq 2) {\r\n                    If ($AtLeastOneAdded) {\r\n                        Write-Output \"$($i + 1) > skipping: '$($update.Title)' because it is exclusive and other updates are being installed first.\"\r\n                        $AddThisUpdate = $false\r\n                    }\r\n                }\r\n            }\r\n            If ($AddThisUpdate) {\r\n                Write-Output \"$($i + 1) > adding: '$($update.Title)'\"\r\n                $UpdatesToDownload.Add($Update) | out-null\r\n                $AtLeastOneAdded = $true\r\n                $ErrorActionPreference = 'SilentlyContinue'\r\n                $PropertyTest = $Update.InstallationBehavior.Impact\r\n                $ErrorActionPreference = 'Stop'\r\n                If ($PropertyTest -eq 2) {\r\n                    Write-Output \"This update is exclusive; skipping remaining updates\"\r\n                    $ExclusiveAdded = $true\r\n                }\r\n            }\r\n        }        \r\n        $UpdatesToInstall = New-Object -ComObject Microsoft.Update.UpdateColl\r\n        Write-Output \"Downloading updates...\"\r\n        $Downloader = $UpdateSession.CreateUpdateDownloader()\r\n        $Downloader.Updates = $UpdatesToDownload\r\n        $Downloader.Download()\r\n        Write-Output \"Successfully downloaded updates:\"        \r\n        For ($i = 0; $i -lt $UpdatesToDownload.Count; $i++) {\r\n            $Update = $UpdatesToDownload[$i]\r\n            If ($Update.IsDownloaded -eq $true) {\r\n                Write-Output \"$($i + 1) > $($update.title)\"\r\n                $UpdatesToInstall.Add($Update) | out-null\r\n            }\r\n        }        \r\n        If ($UpdatesToInstall.Count -gt 0) {\r\n            Write-Output \"Now installing updates...\"\r\n            $Installer = $UpdateSession.CreateUpdateInstaller()\r\n            $Installer.Updates = $UpdatesToInstall\r\n            $InstallationResult = $Installer.Install()\r\n            $Text = ConvertFrom-InstallationResult -Result $InstallationResult.ResultCode\r\n            Write-Output \"Installation Result: $($Text)\"        \r\n            If ($InstallationResult.RebootRequired) {\r\n                Write-Output \"Atleast one update requires a reboot to complete the installation.\"\r\n            }\r\n        }\r\n        If ($service -eq 'MU') {\r\n            Reg.exe DELETE \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /f\r\n        } Elseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n            reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /f\r\n            reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /f\r\n        }\r\n        Stop-Transcript\r\n      "
                        },
                        "treatFailureAsDeploymentFailure": true
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-1-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('restart-vm-2-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "imageVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "virtualMachineName": "[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "14414542062672835812"
                    }
                  },
                  "parameters": {
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'restartVirtualMachine')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "ResourceGroupName",
                            "value": "[parameters('resourceGroupName')]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "TenantId",
                            "value": "[tenant().tenantId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          {
                            "name": "VirtualMachineName",
                            "value": "[parameters('imageVirtualMachineName')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Restart-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName\r\n        $AgentStatus = $Null\r\n        while ($Null -eq $AgentStatus) \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $AgentStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).VMAgent\r\n        }\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('microsoft-updates-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('sysprep-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "7415404915420906908"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'sysprepVirtualMachine')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": false,
                        "asyncExecution": true,
                        "parameters": [],
                        "source": {
                          "script": "        Start-Sleep -Seconds 30\r\n        Remove-Item -LiteralPath 'C:\\Windows\\Panther' -Force -Recurse -ErrorAction SilentlyContinue\r\n        Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\cdrom' -Name 'Start' -Value 1\r\n        Start-Process -File 'C:\\Windows\\System32\\Sysprep\\Sysprep.exe' -ArgumentList '/generalize /oobe /shutdown /mode:vm'\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-1-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-2-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('generalize-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "imageVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "virtualMachineName": "[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "15694908783439778041"
                    }
                  },
                  "parameters": {
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'generalizeVirtualMachine')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "ResourceGroupName",
                            "value": "[parameters('resourceGroupName')]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "TenantId",
                            "value": "[tenant().tenantId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          {
                            "name": "VirtualMachineName",
                            "value": "[parameters('imageVirtualMachineName')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        $PowerStatus = ''\r\n        while ($PowerStatus -ne 'VM stopped') \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $PowerStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).Statuses[1].DisplayStatus\r\n        }\r\n        Set-AzVm -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Generalized\r\n        Start-Sleep -Seconds 30\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('image-version-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "computeGalleryImageResourceId": {
                    "value": "[parameters('computeGalleryImageResourceId')]"
                  },
                  "computeGalleryName": {
                    "value": "[parameters('computeGalleryName')]"
                  },
                  "excludeFromLatest": {
                    "value": "[parameters('excludeFromLatest')]"
                  },
                  "imageDefinitionName": {
                    "value": "[parameters('imageDefinitionName')]"
                  },
                  "imageVersionNumber": {
                    "value": "[variables('autoImageVersion')]"
                  },
                  "imageVirtualMachineResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "marketplaceImageOffer": {
                    "value": "[parameters('marketplaceImageOffer')]"
                  },
                  "marketplaceImagePublisher": {
                    "value": "[parameters('marketplaceImagePublisher')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "replicaCount": {
                    "value": "[parameters('replicaCount')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "673135601830674247"
                    }
                  },
                  "parameters": {
                    "allowDeletionOfReplicatedLocations": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "computeGalleryName": {
                      "type": "string"
                    },
                    "computeGalleryImageResourceId": {
                      "type": "string"
                    },
                    "excludeFromLatest": {
                      "type": "bool"
                    },
                    "imageDefinitionName": {
                      "type": "string"
                    },
                    "imageVersionNumber": {
                      "type": "string"
                    },
                    "imageVirtualMachineResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "marketplaceImageOffer": {
                      "type": "string"
                    },
                    "marketplaceImagePublisher": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "replicaCount": {
                      "type": "int"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/galleries/images",
                      "apiVersion": "2022-03-03",
                      "name": "[format('{0}/{1}', parameters('computeGalleryName'), parameters('imageDefinitionName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "architecture": "x64",
                        "features": [
                          {
                            "name": "SecurityType",
                            "value": "TrustedLaunch"
                          }
                        ],
                        "hyperVGeneration": "V2",
                        "identifier": {
                          "offer": "[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImageOffer'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.offer)]",
                          "publisher": "[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImagePublisher'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.publisher)]",
                          "sku": "[parameters('imageDefinitionName')]"
                        },
                        "osState": "Generalized",
                        "osType": "Windows"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/galleries/images/versions",
                      "apiVersion": "2022-03-03",
                      "name": "[format('{0}/{1}/{2}', parameters('computeGalleryName'), parameters('imageDefinitionName'), parameters('imageVersionNumber'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publishingProfile": {
                          "excludeFromLatest": "[parameters('excludeFromLatest')]",
                          "replicaCount": "[parameters('replicaCount')]",
                          "replicationMode": "Full",
                          "storageAccountType": "Standard_LRS",
                          "targetRegions": [
                            {
                              "name": "[parameters('location')]",
                              "regionalReplicaCount": "[parameters('replicaCount')]",
                              "storageAccountType": "Standard_LRS"
                            }
                          ]
                        },
                        "safetyProfile": {
                          "allowDeletionOfReplicatedLocations": "[parameters('allowDeletionOfReplicatedLocations')]"
                        },
                        "storageProfile": {
                          "source": {
                            "id": "[parameters('imageVirtualMachineResourceId')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/galleries/images', parameters('computeGalleryName'), parameters('imageDefinitionName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "imageDefinitionResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/galleries/images', parameters('computeGalleryName'), parameters('imageDefinitionName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('generalize-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('remove-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "enableBuildAutomation": {
                    "value": "[parameters('enableBuildAutomation')]"
                  },
                  "imageVirtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "virtualMachineName": "[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "874338715058883059"
                    }
                  },
                  "parameters": {
                    "enableBuildAutomation": {
                      "type": "bool"
                    },
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'removeVirtualMachine')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": "[if(parameters('enableBuildAutomation'), false(), true())]",
                        "parameters": [
                          {
                            "name": "EnableBuildAutomation",
                            "value": "[string(parameters('enableBuildAutomation'))]"
                          },
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "ImageVmName",
                            "value": "[parameters('imageVirtualMachineName')]"
                          },
                          {
                            "name": "ManagementVmName",
                            "value": "[parameters('virtualMachineName')]"
                          },
                          {
                            "name": "ResourceGroupName",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "TenantId",
                            "value": "[tenant().tenantId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$EnableBuildAutomation,\r\n          [string]$Environment,\r\n          [string]$ImageVmName,\r\n          [string]$ManagementVmName,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ImageVmName -Force\r\n        if($EnableBuildAutomation -eq 'false')\r\n        {\r\n          Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ManagementVmName -NoWait -Force -AsJob\r\n        }\r\n      "
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-version-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "imageDefinitionResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-version-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.imageDefinitionResourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-imaging-baseline-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-build-automation-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "imageDefinitionResourceId": {
      "type": "string",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('build-image-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.imageDefinitionResourceId.value]"
    }
  }
}