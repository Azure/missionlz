{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.26.54.24096",
      "templateHash": "17533849453387847776"
    }
  },
  "parameters": {
    "arcGisProInstaller": {
      "type": "string",
      "metadata": {
        "description": "The file name of the ArcGIS Pro installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
      }
    },
    "arcgisServiceAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the ArcGIS service account."
      }
    },
    "arcgisServiceAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "The username for the ArcGIS service account."
      }
    },
    "avdAgentBootLoaderMsiName": {
      "type": "string",
      "metadata": {
        "description": "The blob name of the MSI file for the AVD Agent Boot Loader installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
      }
    },
    "avdAgentMsiName": {
      "type": "string",
      "metadata": {
        "description": "The blob name of the MSI file for the AVD Agent installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
      }
    },
    "avdObjectId": {
      "type": "string",
      "metadata": {
        "description": "The object ID for the Azure Virtual Desktop enterprise application in Microsoft Entra ID.  The object ID can found by selecting Microsoft Applications using the Application type filter in the Enterprise Applications blade of Microsoft Entra ID."
      }
    },
    "azurePowerShellModuleMsiName": {
      "type": "string",
      "metadata": {
        "description": "The blob name of the MSI file for the  Azure PowerShell Module installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
      }
    },
    "certificateFileName": {
      "type": "string",
      "metadata": {
        "description": "The file name for the certificate that will secure the ESRI portal. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
      }
    },
    "certificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the certificate that will secure the ESRI portal."
      }
    },
    "containerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the container in Azure Blobs for the deployment artifacts."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "The suffix used for naming deployments uniquely. It defaults to a timestamp with the utcNow function."
      }
    },
    "domainJoinPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the domain join account that will be created in Entra Domain Services."
      }
    },
    "domainJoinUsername": {
      "type": "string",
      "defaultValue": "domainjoin",
      "metadata": {
        "description": "The username for the domain join account that will be created in Entra Domain Services."
      }
    },
    "domainName": {
      "type": "string",
      "metadata": {
        "description": "The name of the domain to use for Entra Domain Services."
      }
    },
    "emailSecurityContact": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The email address or distribution list to receive security alerts."
      }
    },
    "hybridUseBenefit": {
      "type": "bool",
      "metadata": {
        "description": "Determines whether to use the hybrid use benefit for the Windows virtual machines."
      }
    },
    "identifier": {
      "type": "string",
      "minLength": 1,
      "maxLength": 3,
      "metadata": {
        "description": "The unique identifier between the business unit or project this solution will support."
      }
    },
    "localAdministratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the local administrator account on the virtual machines."
      }
    },
    "localAdministratorUsername": {
      "type": "string",
      "metadata": {
        "description": "The username for the local administrator account on the virtual machines."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The region to deploy resources into. It defaults to the deployment location."
      }
    },
    "portalLicenseFile": {
      "type": "string",
      "metadata": {
        "description": "The base 64 encoded string containing the license file for the ESRI portal."
      }
    },
    "portalLicenseUserTypeId": {
      "type": "string",
      "allowedValues": [
        "creatorUT",
        "editorUT",
        "fieldWorkerUT",
        "GISProfessionalAdvUT",
        "GISProfessionalBasicUT",
        "GISProfessionalStdUT",
        "IndoorsUserUT",
        "insightsAnalystUT",
        "viewerUT"
      ],
      "metadata": {
        "description": "The license user type ID for the ESRI portal."
      }
    },
    "primarySiteAdministratorAccountPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the ESRI Primary Site Administrator Account."
      }
    },
    "primarySiteAdministratorAccountUserName": {
      "type": "string",
      "metadata": {
        "description": "The username for the ESRI Primary Site Administrator Account."
      }
    },
    "resourcePrefix": {
      "type": "string",
      "minLength": 3,
      "maxLength": 6,
      "metadata": {
        "description": "A prefix, 3-6 alphanumeric characters without whitespace, used to prefix resources and generate uniqueness for resources with globally unique naming requirements like Storage Accounts and Log Analytics Workspaces"
      }
    },
    "securityPrincipals": {
      "type": "array",
      "metadata": {
        "description": "The array of Security Principals with their object IDs and display names to assign to the AVD Application Group and FSLogix Storage."
      }
    },
    "serverLicenseFile": {
      "type": "string",
      "metadata": {
        "description": "The base 64 encoded string containing the license file for ESRI Enterprise server."
      }
    },
    "storageAccountResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Azure Storage Account used for storing the deployment artifacts."
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_NV4as_v4",
      "allowedValues": [
        "Standard_NV4as_v4",
        "Standard_NV8as_v4",
        "Standard_NV16as_v4",
        "Standard_NV32as_v4"
      ],
      "metadata": {
        "description": "The virtual machine SKU for the AVD session hosts."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentAbbreviation": {
            "value": "dev"
          },
          "deployIdentity": {
            "value": true
          },
          "firewallSkuTier": {
            "value": "Standard"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourcePrefix": {
            "value": "[parameters('resourcePrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "6658095312691062805"
            }
          },
          "parameters": {
            "resourcePrefix": {
              "type": "string",
              "minLength": 3,
              "maxLength": 6,
              "metadata": {
                "description": "A prefix, 3-6 alphanumeric characters without whitespace, used to prefix resources and generate uniqueness for resources with globally unique naming requirements like Storage Accounts and Log Analytics Workspaces"
              }
            },
            "environmentAbbreviation": {
              "type": "string",
              "defaultValue": "dev",
              "allowedValues": [
                "dev",
                "prod",
                "test"
              ],
              "metadata": {
                "description": "The abbreviation for the environment."
              }
            },
            "hubSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "The subscription ID for the Hub Network and resources. It defaults to the deployment subscription."
              }
            },
            "identitySubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "The subscription ID for the Identity Network and resources. It defaults to the deployment subscription."
              }
            },
            "operationsSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "The subscription ID for the Operations Network and resources. It defaults to the deployment subscription."
              }
            },
            "sharedServicesSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "The subscription ID for the Shared Services Network and resources. It defaults to the deployment subscription."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The region to deploy resources into. It defaults to the deployment location."
              }
            },
            "supportedClouds": {
              "type": "array",
              "defaultValue": [
                "AzureCloud",
                "AzureUSGovernment"
              ],
              "metadata": {
                "description": "Supported Azure Clouds array. It defaults to the Public cloud and the Azure US Government cloud."
              }
            },
            "deployIdentity": {
              "type": "bool",
              "metadata": {
                "description": "Choose to deploy the identity resources. The identity resoures are not required if you plan to use cloud identities."
              }
            },
            "deployNetworkWatcher": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Choose whether to deploy network watcher for the desired deployment location. Only one network watcher per location can exist in a subscription."
              }
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "A string dictionary of tags to add to deployed resources. See https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/tag-resources?tabs=json#arm-templates for valid settings."
              }
            },
            "hubVirtualNetworkAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.128.0/23",
              "metadata": {
                "description": "The CIDR Virtual Network Address Prefix for the Hub Virtual Network."
              }
            },
            "hubSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.128.128/26",
              "metadata": {
                "description": "The CIDR Subnet Address Prefix for the default Hub subnet. It must be in the Hub Virtual Network space."
              }
            },
            "firewallClientSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.128.0/26",
              "metadata": {
                "description": "The CIDR Subnet Address Prefix for the Azure Firewall Subnet. It must be in the Hub Virtual Network space. It must be /26."
              }
            },
            "firewallManagementSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.128.64/26",
              "metadata": {
                "description": "The CIDR Subnet Address Prefix for the Azure Firewall Management Subnet. It must be in the Hub Virtual Network space. It must be /26."
              }
            },
            "identityVirtualNetworkAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.130.0/24",
              "metadata": {
                "description": "The CIDR Virtual Network Address Prefix for the Identity Virtual Network."
              }
            },
            "identitySubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.130.0/24",
              "metadata": {
                "description": "The CIDR Subnet Address Prefix for the default Identity subnet. It must be in the Identity Virtual Network space."
              }
            },
            "operationsVirtualNetworkAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.131.0/24",
              "metadata": {
                "description": "The CIDR Virtual Network Address Prefix for the Operations Virtual Network."
              }
            },
            "operationsSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.131.0/24",
              "metadata": {
                "description": "The CIDR Subnet Address Prefix for the default Operations subnet. It must be in the Operations Virtual Network space."
              }
            },
            "sharedServicesVirtualNetworkAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.132.0/24",
              "metadata": {
                "description": "The CIDR Virtual Network Address Prefix for the Shared Services Virtual Network."
              }
            },
            "sharedServicesSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.132.0/24",
              "metadata": {
                "description": "The CIDR Subnet Address Prefix for the default Shared Services subnet. It must be in the Shared Services Virtual Network space."
              }
            },
            "firewallSkuTier": {
              "type": "string",
              "allowedValues": [
                "Standard",
                "Premium",
                "Basic"
              ],
              "metadata": {
                "description": "[Standard/Premium/Basic] The SKU for Azure Firewall. It defaults to \"Premium\". Selecting a value other than Premium is not recommended for environments that are required to be SCCA compliant."
              }
            },
            "firewallThreatIntelMode": {
              "type": "string",
              "defaultValue": "Alert",
              "allowedValues": [
                "Alert",
                "Deny",
                "Off"
              ],
              "metadata": {
                "description": "[Alert/Deny/Off] The Azure Firewall Threat Intelligence Rule triggered logging behavior. Valid values are \"Alert\", \"Deny\", or \"Off\". The default value is \"Alert\"."
              }
            },
            "firewallIntrusionDetectionMode": {
              "type": "string",
              "defaultValue": "Alert",
              "allowedValues": [
                "Alert",
                "Deny",
                "Off"
              ],
              "metadata": {
                "description": "[Alert/Deny/Off] The Azure Firewall Intrusion Detection mode. Valid values are \"Alert\", \"Deny\", or \"Off\". The default value is \"Alert\"."
              }
            },
            "enableProxy": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "[true/false] The Azure Firewall DNS Proxy will forward all DNS traffic. When this value is set to true, you must provide a value for \"servers\""
              }
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": [
                "168.63.129.16"
              ],
              "metadata": {
                "description": "['168.63.129.16'] The Azure Firewall DNS Proxy will forward all DNS traffic. When this value is set to true, you must provide a value for \"servers\". This should be a comma separated list of IP addresses to forward DNS traffic"
              }
            },
            "firewallDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AzureFirewallApplicationRule",
                  "enabled": true
                },
                {
                  "category": "AzureFirewallNetworkRule",
                  "enabled": true
                },
                {
                  "category": "AzureFirewallDnsProxy",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Firewall Diagnostic Logs categories to collect. See \"https://docs.microsoft.com/en-us/azure/firewall/firewall-diagnostics#enable-diagnostic-logging-through-the-azure-portal\" for valid values."
              }
            },
            "firewallDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AllMetrics",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Firewall Diagnostic Metrics categories to collect. See \"https://docs.microsoft.com/en-us/azure/firewall/firewall-diagnostics#enable-diagnostic-logging-through-the-azure-portal\" for valid values."
              }
            },
            "firewallClientPublicIPAddressAvailabilityZones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Azure Firewall Public IP Address Availability Zones. It defaults to empty, or \"No-Zone\", because Availability Zones are not available in every cloud. See https://docs.microsoft.com/en-us/azure/virtual-network/ip-services/public-ip-addresses#sku for valid settings."
              }
            },
            "firewallManagementPublicIPAddressAvailabilityZones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Azure Firewall Public IP Address Availability Zones. It defaults to empty, or \"No-Zone\", because Availability Zones are not available in every cloud. See https://docs.microsoft.com/en-us/azure/virtual-network/ip-services/public-ip-addresses#sku for valid settings."
              }
            },
            "firewallSupernetIPAddress": {
              "type": "string",
              "defaultValue": "10.0.128.0/18",
              "metadata": {
                "description": "Supernet CIDR address for the entire network of vnets, this address allows for communication between spokes. Recommended to use a Supernet calculator if modifying vnet addresses"
              }
            },
            "publicIPAddressDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "DDoSProtectionNotifications",
                  "enabled": true
                },
                {
                  "category": "DDoSMitigationFlowLogs",
                  "enabled": true
                },
                {
                  "category": "DDoSMitigationReports",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Public IP Address Diagnostic Logs for the Azure Firewall. See https://docs.microsoft.com/en-us/azure/ddos-protection/diagnostic-logging?tabs=DDoSProtectionNotifications#configure-ddos-diagnostic-logs for valid settings."
              }
            },
            "publicIPAddressDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AllMetrics",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Public IP Address Diagnostic Metrics for the Azure Firewall. See https://docs.microsoft.com/en-us/azure/ddos-protection/diagnostic-logging?tabs=DDoSProtectionNotifications for valid settings."
              }
            },
            "hubVirtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Logs to enable for the Hub Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#logs for valid settings."
              }
            },
            "hubVirtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Metrics to enable for the Hub Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics for valid settings."
              }
            },
            "hubNetworkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Security Group Rules to apply to the Hub Virtual Network. See https://docs.microsoft.com/en-us/azure/templates/microsoft.network/networksecuritygroups/securityrules?tabs=bicep#securityrulepropertiesformat for valid settings."
              }
            },
            "hubNetworkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Network Security Group diagnostic logs to apply to the Hub Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
              }
            },
            "hubNetworkSecurityGroupDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Security Group Metrics to apply to enable for the Hub Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics for valid settings."
              }
            },
            "identityVirtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Logs to enable for the Identity Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#logs for valid settings."
              }
            },
            "identityVirtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Metrics to enable for the Identity Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics for valid settings."
              }
            },
            "identityNetworkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Security Group Rules to apply to the Identity Virtual Network. See https://docs.microsoft.com/en-us/azure/templates/microsoft.network/networksecuritygroups/securityrules?tabs=bicep#securityrulepropertiesformat for valid settings."
              }
            },
            "identityNetworkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Network Security Group diagnostic logs to apply to the Identity Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
              }
            },
            "identityNetworkSecurityGroupDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Security Group Metrics to apply to enable for the Identity Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics for valid settings."
              }
            },
            "KeyVaultDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "AuditEvent",
                  "enabled": true
                },
                {
                  "category": "AzurePolicyEvaluationDetails",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Key Vault Diagnostic Logs categories to collect. See \"https://learn.microsoft.com/en-us/azure/key-vault/general/logging?tabs=Vault\" for valid values."
              }
            },
            "operationsVirtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Logs to enable for the Operations Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#logs for valid settings."
              }
            },
            "operationsVirtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Metrics to enable for the Operations Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics for valid settings."
              }
            },
            "operationsNetworkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Security Group rules to apply to the Operations Virtual Network. See https://docs.microsoft.com/en-us/azure/templates/microsoft.network/networksecuritygroups/securityrules?tabs=bicep#securityrulepropertiesformat for valid settings."
              }
            },
            "operationsNetworkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Network Security Group diagnostic logs to apply to the Operations Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
              }
            },
            "operationsNetworkSecurityGroupDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Security Group Diagnostic Metrics to enable for the Operations Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics for valid settings."
              }
            },
            "sharedServicesVirtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Logs to enable for the SharedServices Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#logs for valid settings."
              }
            },
            "sharedServicesVirtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Metrics to enable for the SharedServices Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics for valid settings."
              }
            },
            "sharedServicesNetworkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Security Group rules to apply to the SharedServices Virtual Network. See https://docs.microsoft.com/en-us/azure/templates/microsoft.network/networksecuritygroups/securityrules?tabs=bicep#securityrulepropertiesformat for valid settings."
              }
            },
            "sharedServicesNetworkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "An array of Network Security Group diagnostic logs to apply to the SharedServices Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
              }
            },
            "sharedServicesNetworkSecurityGroupDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Security Group Diagnostic Metrics to enable for the SharedServices Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics for valid settings."
              }
            },
            "deploySentinel": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "When set to \"true\", enables Microsoft Sentinel within the Log Analytics Workspace created in this deployment. It defaults to \"false\"."
              }
            },
            "logAnalyticsWorkspaceCappingDailyQuotaGb": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "The daily quota for Log Analytics Workspace logs in Gigabytes. It defaults to \"-1\" for no quota."
              }
            },
            "logAnalyticsWorkspaceNoSentinelRetentionInDays": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "The number of days to retain Log Analytics Workspace logs without Sentinel. It defaults to \"30\"."
              }
            },
            "logAnalyticsSentinelWorkspaceRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "metadata": {
                "description": "The number of days to retain logs in Sentinel-linked Workspace. It defaults to \"90\"."
              }
            },
            "logAnalyticsWorkspaceSkuName": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "Free",
                "Standard",
                "Premium",
                "PerNode",
                "PerGB2018",
                "Standalone"
              ],
              "metadata": {
                "description": "[Free/Standard/Premium/PerNode/PerGB2018/Standalone] The SKU for the Log Analytics Workspace. It defaults to \"PerGB2018\". See https://docs.microsoft.com/en-us/azure/azure-monitor/logs/resource-manager-workspace for valid settings."
              }
            },
            "logStorageSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
              }
            },
            "deployRemoteAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "When set to \"true\", provisions Azure Bastion Host and virtual machine jumpboxes. It defaults to \"false\"."
              }
            },
            "bastionHostSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.128.192/26",
              "metadata": {
                "description": "The CIDR Subnet Address Prefix for the Azure Bastion Subnet. It must be in the Hub Virtual Network space \"hubVirtualNetworkAddressPrefix\" parameter value. It must be /27 or larger."
              }
            },
            "bastionHostPublicIPAddressAvailabilityZones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The Azure Bastion Public IP Address Availability Zones. It defaults to \"No-Zone\" because Availability Zones are not available in every cloud. See https://docs.microsoft.com/en-us/azure/virtual-network/ip-services/public-ip-addresses#sku for valid settings."
              }
            },
            "hybridUseBenefit": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "The hybrid use benefit provides a discount on virtual machines when a customer has an on-premises Windows Server license with Software Assurance."
              }
            },
            "linuxVmAdminUsername": {
              "type": "string",
              "defaultValue": "azureuser",
              "metadata": {
                "description": "The administrator username for the Linux Virtual Machine to Azure Bastion remote into. It defaults to \"azureuser\"."
              }
            },
            "linuxVmAuthenticationType": {
              "type": "string",
              "defaultValue": "password",
              "allowedValues": [
                "sshPublicKey",
                "password"
              ],
              "metadata": {
                "description": "[sshPublicKey/password] The authentication type for the Linux Virtual Machine to Azure Bastion remote into. It defaults to \"password\"."
              }
            },
            "linuxVmAdminPasswordOrKey": {
              "type": "securestring",
              "defaultValue": "[if(parameters('deployRemoteAccess'), '', newGuid())]",
              "minLength": 12,
              "metadata": {
                "description": "The administrator password or public SSH key for the Linux Virtual Machine to Azure Bastion remote into. See https://docs.microsoft.com/en-us/azure/virtual-machines/linux/faq#what-are-the-password-requirements-when-creating-a-vm- for password requirements."
              }
            },
            "linuxVmSize": {
              "type": "string",
              "defaultValue": "Standard_B2s",
              "metadata": {
                "description": "The size of the Linux Virtual Machine to Azure Bastion remote into. It defaults to \"Standard_B2s\"."
              }
            },
            "linuxVmOsDiskCreateOption": {
              "type": "string",
              "defaultValue": "FromImage",
              "metadata": {
                "description": "The disk creation option of the Linux Virtual Machine to Azure Bastion remote into. It defaults to \"FromImage\"."
              }
            },
            "linuxVmOsDiskType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "The disk type of the Linux Virtual Machine to Azure Bastion remote into. It defaults to \"Standard_LRS\"."
              }
            },
            "linuxVmImagePublisher": {
              "type": "string",
              "defaultValue": "Canonical",
              "metadata": {
                "description": "The image publisher of the Linux Virtual Machine to Azure Bastion remote into. It defaults to \"Canonical\"."
              }
            },
            "linuxVmImageOffer": {
              "type": "string",
              "defaultValue": "UbuntuServer",
              "metadata": {
                "description": "The image offer of the Linux Virtual Machine to Azure Bastion remote into. It defaults to \"UbuntuServer\"."
              }
            },
            "linuxVmImageSku": {
              "type": "string",
              "defaultValue": "18_04-lts-gen2",
              "metadata": {
                "description": "The image SKU of the Linux Virtual Machine to Azure Bastion remote into. It defaults to \"18.04-LTS\"."
              }
            },
            "linuxVmImageVersion": {
              "type": "string",
              "defaultValue": "latest",
              "metadata": {
                "description": "The image version of the Linux Virtual Machine to Azure Bastion remote into. It defaults to \"latest\"."
              }
            },
            "linuxNetworkInterfacePrivateIPAddressAllocationMethod": {
              "type": "string",
              "defaultValue": "Dynamic",
              "allowedValues": [
                "Static",
                "Dynamic"
              ],
              "metadata": {
                "description": "[Static/Dynamic] The public IP Address allocation method for the Linux virtual machine. It defaults to \"Dynamic\"."
              }
            },
            "windowsVmAdminUsername": {
              "type": "string",
              "defaultValue": "azureuser",
              "metadata": {
                "description": "The administrator username for the Windows Virtual Machine to Azure Bastion remote into. It defaults to \"azureuser\"."
              }
            },
            "windowsVmAdminPassword": {
              "type": "securestring",
              "defaultValue": "[if(parameters('deployRemoteAccess'), '', newGuid())]",
              "minLength": 12,
              "metadata": {
                "description": "The administrator password the Windows Virtual Machine to Azure Bastion remote into. It must be > 12 characters in length. See https://docs.microsoft.com/en-us/azure/virtual-machines/windows/faq#what-are-the-password-requirements-when-creating-a-vm- for password requirements."
              }
            },
            "windowsVmSize": {
              "type": "string",
              "defaultValue": "Standard_DS1_v2",
              "metadata": {
                "description": "The size of the Windows Virtual Machine to Azure Bastion remote into. It defaults to \"Standard_DS1_v2\"."
              }
            },
            "windowsVmPublisher": {
              "type": "string",
              "defaultValue": "MicrosoftWindowsServer",
              "metadata": {
                "description": "The publisher of the Windows Virtual Machine to Azure Bastion remote into. It defaults to \"MicrosoftWindowsServer\"."
              }
            },
            "windowsVmOffer": {
              "type": "string",
              "defaultValue": "WindowsServer",
              "metadata": {
                "description": "The offer of the Windows Virtual Machine to Azure Bastion remote into. It defaults to \"WindowsServer\"."
              }
            },
            "windowsVmSku": {
              "type": "string",
              "defaultValue": "2019-datacenter-gensecond",
              "metadata": {
                "description": "The SKU of the Windows Virtual Machine to Azure Bastion remote into. It defaults to \"2019-datacenter\"."
              }
            },
            "windowsVmVersion": {
              "type": "string",
              "defaultValue": "latest",
              "metadata": {
                "description": "The version of the Windows Virtual Machine to Azure Bastion remote into. It defaults to \"latest\"."
              }
            },
            "windowsVmCreateOption": {
              "type": "string",
              "defaultValue": "FromImage",
              "metadata": {
                "description": "The disk creation option of the Windows Virtual Machine to Azure Bastion remote into. It defaults to \"FromImage\"."
              }
            },
            "windowsVmStorageAccountType": {
              "type": "string",
              "defaultValue": "StandardSSD_LRS",
              "metadata": {
                "description": "The storage account type of the Windows Virtual Machine to Azure Bastion remote into. It defaults to \"StandardSSD_LRS\"."
              }
            },
            "windowsNetworkInterfacePrivateIPAddressAllocationMethod": {
              "type": "string",
              "defaultValue": "Dynamic",
              "allowedValues": [
                "Static",
                "Dynamic"
              ],
              "metadata": {
                "description": "[Static/Dynamic] The public IP Address allocation method for the Windows virtual machine. It defaults to \"Dynamic\"."
              }
            },
            "deployPolicy": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "When set to \"true\", deploys the Azure Policy set defined at by the parameter \"policy\" to the resource groups generated in the deployment. It defaults to \"false\"."
              }
            },
            "policy": {
              "type": "string",
              "defaultValue": "NISTRev4",
              "allowedValues": [
                "NISTRev4",
                "NISTRev5",
                "IL5",
                "CMMC"
              ],
              "metadata": {
                "description": "[NISTRev4/NISTRev5/IL5/CMMC] Built-in policy assignments to assign, it defaults to \"NISTRev4\". IL5 is only available for AzureUsGovernment and will switch to NISTRev4 if tried in AzureCloud."
              }
            },
            "deployDefender": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "When set to \"true\", enables Microsoft Defender for Cloud for the subscriptions used in the deployment. It defaults to \"false\"."
              }
            },
            "defenderSkuTier": {
              "type": "string",
              "defaultValue": "Free",
              "allowedValues": [
                "Standard",
                "Free"
              ],
              "metadata": {
                "description": "[Standard/Free] The SKU for Defender. It defaults to \"Free\"."
              }
            },
            "emailSecurityContact": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Email address of the contact, in the form of john@doe.com"
              }
            },
            "deployDefenderPlans": {
              "type": "array",
              "defaultValue": [
                "VirtualMachines"
              ],
              "allowedValues": [
                "Api",
                "AppServices",
                "Arm",
                "CloudPosture",
                "Containers",
                "CosmosDbs",
                "KeyVaults",
                "OpenSourceRelationalDatabases",
                "SqlServers",
                "SqlServerVirtualMachines",
                "StorageAccounts",
                "VirtualMachines"
              ],
              "metadata": {
                "description": "Paid Workload Protection plans for Defender for Cloud"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "firewallClientUsableIpAddresses",
                "count": "[length(range(0, 4))]",
                "input": "[cidrHost(parameters('firewallClientSubnetAddressPrefix'), range(0, 4)[copyIndex('firewallClientUsableIpAddresses')])]"
              }
            ],
            "calculatedTags": "[union(parameters('tags'), variables('defaultTags'))]",
            "defaultTags": {
              "resourcePrefix": "[parameters('resourcePrefix')]",
              "environmentAbbreviation": "[parameters('environmentAbbreviation')]",
              "DeploymentType": "MissionLandingZoneARM"
            },
            "firewallClientPrivateIpAddress": "[variables('firewallClientUsableIpAddresses')[3]]",
            "logAnalyticsWorkspaceRetentionInDays": "[if(parameters('deploySentinel'), parameters('logAnalyticsSentinelWorkspaceRetentionInDays'), parameters('logAnalyticsWorkspaceNoSentinelRetentionInDays'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-naming-convention-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "resourcePrefix": {
                    "value": "[parameters('resourcePrefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "16223515126777270114"
                    }
                  },
                  "parameters": {
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "resourcePrefix": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "AzureChina": {
                        "chinaeast": {
                          "abbreviation": "cne",
                          "recoveryServicesGeo": "sha",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinaeast2": {
                          "abbreviation": "cne2",
                          "recoveryServicesGeo": "sha2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth": {
                          "abbreviation": "cnn",
                          "recoveryServicesGeo": "bjb",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth2": {
                          "abbreviation": "cnn2",
                          "recoveryServicesGeo": "bjb2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        }
                      },
                      "AzureCloud": {
                        "australiacentral": {
                          "abbreviation": "auc",
                          "recoveryServicesGeo": "acl",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiacentral2": {
                          "abbreviation": "auc2",
                          "recoveryServicesGeo": "acl2",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiaeast": {
                          "abbreviation": "aue",
                          "recoveryServicesGeo": "ae",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiasoutheast": {
                          "abbreviation": "ause",
                          "recoveryServicesGeo": "ase",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "brazilsouth": {
                          "abbreviation": "brs",
                          "recoveryServicesGeo": "brs",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "brazilsoutheast": {
                          "abbreviation": "brse",
                          "recoveryServicesGeo": "bse",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "canadacentral": {
                          "abbreviation": "cac",
                          "recoveryServicesGeo": "cnc",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "canadaeast": {
                          "abbreviation": "cae",
                          "recoveryServicesGeo": "cne",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "centralindia": {
                          "abbreviation": "inc",
                          "recoveryServicesGeo": "inc",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "centralus": {
                          "abbreviation": "usc",
                          "recoveryServicesGeo": "cus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "eastasia": {
                          "abbreviation": "ase",
                          "recoveryServicesGeo": "ea",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "eastus": {
                          "abbreviation": "use",
                          "recoveryServicesGeo": "eus",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "eastus2": {
                          "abbreviation": "use2",
                          "recoveryServicesGeo": "eus2",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "francecentral": {
                          "abbreviation": "frc",
                          "recoveryServicesGeo": "frc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "francesouth": {
                          "abbreviation": "frs",
                          "recoveryServicesGeo": "frs",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanynorth": {
                          "abbreviation": "den",
                          "recoveryServicesGeo": "gn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanywestcentral": {
                          "abbreviation": "dewc",
                          "recoveryServicesGeo": "gwc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "israelcentral": {
                          "abbreviation": "ilc",
                          "recoveryServicesGeo": "ilc",
                          "timeDifference": "+2:00",
                          "timeZone": "Israel Standard Time"
                        },
                        "italynorth": {
                          "abbreviation": "itn",
                          "recoveryServicesGeo": "itn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "japaneast": {
                          "abbreviation": "jpe",
                          "recoveryServicesGeo": "jpe",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "japanwest": {
                          "abbreviation": "jpw",
                          "recoveryServicesGeo": "jpw",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "jioindiacentral": {
                          "abbreviation": "injc",
                          "recoveryServicesGeo": "jic",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "jioindiawest": {
                          "abbreviation": "injw",
                          "recoveryServicesGeo": "jiw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "koreacentral": {
                          "abbreviation": "krc",
                          "recoveryServicesGeo": "krc",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "koreasouth": {
                          "abbreviation": "krs",
                          "recoveryServicesGeo": "krs",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "northcentralus": {
                          "abbreviation": "usnc",
                          "recoveryServicesGeo": "ncus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "northeurope": {
                          "abbreviation": "eun",
                          "recoveryServicesGeo": "ne",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "norwayeast": {
                          "abbreviation": "noe",
                          "recoveryServicesGeo": "nwe",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "norwaywest": {
                          "abbreviation": "now",
                          "recoveryServicesGeo": "nww",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "polandcentral": {
                          "abbreviation": "plc",
                          "recoveryServicesGeo": "plc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "qatarcentral": {
                          "abbreviation": "qac",
                          "recoveryServicesGeo": "qac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "southafricanorth": {
                          "abbreviation": "zan",
                          "recoveryServicesGeo": "san",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southafricawest": {
                          "abbreviation": "zaw",
                          "recoveryServicesGeo": "saw",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southcentralus": {
                          "abbreviation": "ussc",
                          "recoveryServicesGeo": "scus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "southeastasia": {
                          "abbreviation": "asse",
                          "recoveryServicesGeo": "sea",
                          "timeDifference": "+8:00",
                          "timeZone": "Singapore Standard Time"
                        },
                        "southindia": {
                          "abbreviation": "ins",
                          "recoveryServicesGeo": "ins",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "swedencentral": {
                          "abbreviation": "sec",
                          "recoveryServicesGeo": "sdc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandnorth": {
                          "abbreviation": "chn",
                          "recoveryServicesGeo": "szn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandwest": {
                          "abbreviation": "chw",
                          "recoveryServicesGeo": "szw",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "uaecentral": {
                          "abbreviation": "aec",
                          "recoveryServicesGeo": "uac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uaenorth": {
                          "abbreviation": "aen",
                          "recoveryServicesGeo": "uan",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uksouth": {
                          "abbreviation": "uks",
                          "recoveryServicesGeo": "uks",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "ukwest": {
                          "abbreviation": "ukw",
                          "recoveryServicesGeo": "ukw",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "westcentralus": {
                          "abbreviation": "uswc",
                          "recoveryServicesGeo": "wcus",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "westeurope": {
                          "abbreviation": "euw",
                          "recoveryServicesGeo": "we",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "westindia": {
                          "abbreviation": "inw",
                          "recoveryServicesGeo": "inw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "westus": {
                          "abbreviation": "usw",
                          "recoveryServicesGeo": "wus",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus2": {
                          "abbreviation": "usw2",
                          "recoveryServicesGeo": "wus2",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus3": {
                          "abbreviation": "usw3",
                          "recoveryServicesGeo": "wus3",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        }
                      },
                      "AzureUSGovernment": {
                        "usdodcentral": {
                          "abbreviation": "dodc",
                          "recoveryServicesGeo": "udc",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usdodeast": {
                          "abbreviation": "dode",
                          "recoveryServicesGeo": "ude",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usgovarizona": {
                          "abbreviation": "az",
                          "recoveryServicesGeo": "uga",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "usgovtexas": {
                          "abbreviation": "tx",
                          "recoveryServicesGeo": "ugt",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usgovvirginia": {
                          "abbreviation": "va",
                          "recoveryServicesGeo": "ugv",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        }
                      },
                      "USNat": {
                        "usnateast": {
                          "abbreviation": "east",
                          "recoveryServicesGeo": "exe",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usnatwest": {
                          "abbreviation": "west",
                          "recoveryServicesGeo": "exw",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        }
                      },
                      "USSec": {
                        "usseceast": {
                          "abbreviation": "east",
                          "recoveryServicesGeo": "rxe",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "ussecwest": {
                          "abbreviation": "west",
                          "recoveryServicesGeo": "rxw",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        }
                      }
                    },
                    "$fxv#1": {
                      "actionGroups": "ag",
                      "automationAccounts": "aa",
                      "availabilitySets": "avail",
                      "azureFirewalls": "afw",
                      "bastionHosts": "bas",
                      "computeGallieries": "cg",
                      "dataCollectionRuleAssociations": "dcra",
                      "dataCollectionRules": "dcr",
                      "desktopApplicationGroups": "vdag",
                      "diagnosticSettings": "diag",
                      "diskAccesses": "da",
                      "diskEncryptionSets": "des",
                      "disks": "disk",
                      "firewallPolicies": "afwp",
                      "hostPools": "vdpool",
                      "ipConfigurations": "ipconf",
                      "keyVaults": "kv",
                      "logAnalyticsWorkspaces": "log",
                      "netAppAccounts": "naa",
                      "netAppCapacityPools": "nacp",
                      "networkInterfaces": "nic",
                      "networkSecurityGroups": "nsg",
                      "networkWatchers": "nw",
                      "privateEndpoints": "pe",
                      "privateLinkScopes": "pls",
                      "publicIPAddresses": "pip",
                      "recoveryServicesVaults": "rsv",
                      "remoteApplicationGroups": "vdag",
                      "resourceGroups": "rg",
                      "routeTables": "rt",
                      "storageAccounts": "st",
                      "subnets": "snet",
                      "userAssignedIdentities": "id",
                      "virtualMachines": "vm",
                      "virtualNetworks": "vnet",
                      "workspaces": "vdws"
                    },
                    "locations": "[variables('$fxv#0')[environment().name]]",
                    "locationAbbreviation": "[variables('locations')[parameters('location')].abbreviation]",
                    "resourceAbbreviations": "[variables('$fxv#1')]",
                    "resourceToken": "resource_token",
                    "serviceToken": "service_token",
                    "networkToken": "network_token",
                    "namingConvention": "[format('{0}-{1}-{2}-{3}-{4}-{5}', toLower(parameters('resourcePrefix')), variables('resourceToken'), variables('serviceToken'), variables('networkToken'), parameters('environmentAbbreviation'), variables('locationAbbreviation'))]",
                    "actionGroupNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').actionGroups)]",
                    "automationAccountNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').automationAccounts)]",
                    "bastionHostNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').bastionHosts)]",
                    "computeGalleryNamingConvention": "[replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').computeGallieries), '-', '_')]",
                    "diskEncryptionSetNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').diskEncryptionSets)]",
                    "diskNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').disks)]",
                    "firewallNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').azureFirewalls)]",
                    "firewallPolicyNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').firewallPolicies)]",
                    "ipConfigurationNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').ipConfigurations)]",
                    "keyVaultNamingConvention": "[format('{0}unique_token', replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').keyVaults), '-', ''))]",
                    "logAnalyticsWorkspaceNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
                    "networkInterfaceNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').networkInterfaces)]",
                    "networkSecurityGroupNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').networkSecurityGroups)]",
                    "networkWatcherNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').networkWatchers)]",
                    "privateEndpointNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').privateEndpoints)]",
                    "privateLinkScopeName": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').privateLinkScopes)]",
                    "publicIpAddressNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').publicIPAddresses)]",
                    "resourceGroupNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').resourceGroups)]",
                    "routeTableNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').routeTables)]",
                    "storageAccountNamingConvention": "[toLower(format('{0}unique_token', replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').storageAccounts), '-', '')))]",
                    "subnetNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').subnets)]",
                    "userAssignedIdentityNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').userAssignedIdentities)]",
                    "virtualMachineNamingConvention": "[replace(replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').virtualMachines), '-', ''), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation')))]",
                    "virtualNetworkNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').virtualNetworks)]"
                  },
                  "resources": [],
                  "outputs": {
                    "resources": {
                      "type": "object",
                      "value": {
                        "actionGroup": "[variables('actionGroupNamingConvention')]",
                        "automationAccount": "[variables('automationAccountNamingConvention')]",
                        "bastionHost": "[variables('bastionHostNamingConvention')]",
                        "computeGallery": "[variables('computeGalleryNamingConvention')]",
                        "diskEncryptionSet": "[variables('diskEncryptionSetNamingConvention')]",
                        "disk": "[variables('diskNamingConvention')]",
                        "firewall": "[variables('firewallNamingConvention')]",
                        "firewallPolicy": "[variables('firewallPolicyNamingConvention')]",
                        "ipConfiguration": "[variables('ipConfigurationNamingConvention')]",
                        "keyVault": "[variables('keyVaultNamingConvention')]",
                        "logAnalyticsWorkspace": "[variables('logAnalyticsWorkspaceNamingConvention')]",
                        "networkInterface": "[variables('networkInterfaceNamingConvention')]",
                        "networkSecurityGroup": "[variables('networkSecurityGroupNamingConvention')]",
                        "networkWatcher": "[variables('networkWatcherNamingConvention')]",
                        "privateEndpoint": "[variables('privateEndpointNamingConvention')]",
                        "privateLinkScope": "[variables('privateLinkScopeName')]",
                        "publicIpAddress": "[variables('publicIpAddressNamingConvention')]",
                        "resourceGroup": "[variables('resourceGroupNamingConvention')]",
                        "routeTable": "[variables('routeTableNamingConvention')]",
                        "storageAccount": "[variables('storageAccountNamingConvention')]",
                        "subnet": "[variables('subnetNamingConvention')]",
                        "userAssignedIdentity": "[variables('userAssignedIdentityNamingConvention')]",
                        "virtualMachine": "[variables('virtualMachineNamingConvention')]",
                        "virtualNetwork": "[variables('virtualNetworkNamingConvention')]"
                      }
                    },
                    "tokens": {
                      "type": "object",
                      "value": {
                        "resource": "[variables('resourceToken')]",
                        "service": "[variables('serviceToken')]",
                        "network": "[variables('networkToken')]"
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('get-logic-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deployIdentity": {
                    "value": "[parameters('deployIdentity')]"
                  },
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "hubSubscriptionId": {
                    "value": "[parameters('hubSubscriptionId')]"
                  },
                  "identitySubnetAddressPrefix": {
                    "value": "[parameters('identitySubnetAddressPrefix')]"
                  },
                  "identitySubscriptionId": {
                    "value": "[parameters('identitySubscriptionId')]"
                  },
                  "operationsSubnetAddressPrefix": {
                    "value": "[parameters('operationsSubnetAddressPrefix')]"
                  },
                  "operationsSubscriptionId": {
                    "value": "[parameters('operationsSubscriptionId')]"
                  },
                  "resourcePrefix": {
                    "value": "[parameters('resourcePrefix')]"
                  },
                  "resources": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-convention-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resources.value]"
                  },
                  "sharedServicesSubscriptionId": {
                    "value": "[parameters('sharedServicesSubscriptionId')]"
                  },
                  "tokens": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-convention-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
                  },
                  "identityNetworkSecurityGroupDiagnosticsLogs": {
                    "value": "[parameters('identityNetworkSecurityGroupDiagnosticsLogs')]"
                  },
                  "identityNetworkSecurityGroupDiagnosticsMetrics": {
                    "value": "[parameters('identityNetworkSecurityGroupDiagnosticsMetrics')]"
                  },
                  "identityNetworkSecurityGroupRules": {
                    "value": "[parameters('identityNetworkSecurityGroupRules')]"
                  },
                  "identityVirtualNetworkAddressPrefix": {
                    "value": "[parameters('identityVirtualNetworkAddressPrefix')]"
                  },
                  "identityVirtualNetworkDiagnosticsLogs": {
                    "value": "[parameters('identityVirtualNetworkDiagnosticsLogs')]"
                  },
                  "identityVirtualNetworkDiagnosticsMetrics": {
                    "value": "[parameters('identityVirtualNetworkDiagnosticsMetrics')]"
                  },
                  "operationsNetworkSecurityGroupDiagnosticsLogs": {
                    "value": "[parameters('operationsNetworkSecurityGroupDiagnosticsLogs')]"
                  },
                  "operationsNetworkSecurityGroupDiagnosticsMetrics": {
                    "value": "[parameters('operationsNetworkSecurityGroupDiagnosticsMetrics')]"
                  },
                  "operationsNetworkSecurityGroupRules": {
                    "value": "[parameters('operationsNetworkSecurityGroupRules')]"
                  },
                  "operationsVirtualNetworkAddressPrefix": {
                    "value": "[parameters('operationsVirtualNetworkAddressPrefix')]"
                  },
                  "operationsVirtualNetworkDiagnosticsLogs": {
                    "value": "[parameters('operationsVirtualNetworkDiagnosticsLogs')]"
                  },
                  "operationsVirtualNetworkDiagnosticsMetrics": {
                    "value": "[parameters('operationsVirtualNetworkDiagnosticsMetrics')]"
                  },
                  "sharedServicesNetworkSecurityGroupDiagnosticsLogs": {
                    "value": "[parameters('sharedServicesNetworkSecurityGroupDiagnosticsLogs')]"
                  },
                  "sharedServicesNetworkSecurityGroupDiagnosticsMetrics": {
                    "value": "[parameters('sharedServicesNetworkSecurityGroupDiagnosticsMetrics')]"
                  },
                  "sharedServicesNetworkSecurityGroupRules": {
                    "value": "[parameters('sharedServicesNetworkSecurityGroupRules')]"
                  },
                  "sharedServicesSubnetAddressPrefix": {
                    "value": "[parameters('sharedServicesSubnetAddressPrefix')]"
                  },
                  "sharedServicesVirtualNetworkAddressPrefix": {
                    "value": "[parameters('sharedServicesVirtualNetworkAddressPrefix')]"
                  },
                  "sharedServicesVirtualNetworkDiagnosticsLogs": {
                    "value": "[parameters('sharedServicesVirtualNetworkDiagnosticsLogs')]"
                  },
                  "sharedServicesVirtualNetworkDiagnosticsMetrics": {
                    "value": "[parameters('sharedServicesVirtualNetworkDiagnosticsMetrics')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "5799196638828757253"
                    }
                  },
                  "parameters": {
                    "deployIdentity": {
                      "type": "bool"
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "hubSubscriptionId": {
                      "type": "string"
                    },
                    "identityNetworkSecurityGroupDiagnosticsLogs": {
                      "type": "array"
                    },
                    "identityNetworkSecurityGroupDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "identityNetworkSecurityGroupRules": {
                      "type": "array"
                    },
                    "identitySubnetAddressPrefix": {
                      "type": "string"
                    },
                    "identitySubscriptionId": {
                      "type": "string"
                    },
                    "identityVirtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "identityVirtualNetworkDiagnosticsLogs": {
                      "type": "array"
                    },
                    "identityVirtualNetworkDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "operationsNetworkSecurityGroupDiagnosticsLogs": {
                      "type": "array"
                    },
                    "operationsNetworkSecurityGroupDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "operationsNetworkSecurityGroupRules": {
                      "type": "array"
                    },
                    "operationsSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "operationsSubscriptionId": {
                      "type": "string"
                    },
                    "operationsVirtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "operationsVirtualNetworkDiagnosticsLogs": {
                      "type": "array"
                    },
                    "operationsVirtualNetworkDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "resourcePrefix": {
                      "type": "string"
                    },
                    "resources": {
                      "type": "object"
                    },
                    "sharedServicesNetworkSecurityGroupDiagnosticsLogs": {
                      "type": "array"
                    },
                    "sharedServicesNetworkSecurityGroupDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "sharedServicesNetworkSecurityGroupRules": {
                      "type": "array"
                    },
                    "sharedServicesSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "sharedServicesSubscriptionId": {
                      "type": "string"
                    },
                    "sharedServicesVirtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "sharedServicesVirtualNetworkDiagnosticsLogs": {
                      "type": "array"
                    },
                    "sharedServicesVirtualNetworkDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "tokens": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "hubName": "hub",
                    "hubShortName": "hub",
                    "identityName": "identity",
                    "identityShortName": "id",
                    "operationsName": "operations",
                    "operationsShortName": "ops",
                    "sharedServicesName": "sharedServices",
                    "sharedServicesShortName": "svcs",
                    "hub": {
                      "name": "[variables('hubName')]",
                      "subscriptionId": "[parameters('hubSubscriptionId')]",
                      "resourceGroupName": "[replace(replace(parameters('resources').resourceGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('hubName'))]",
                      "deployUniqueResources": true,
                      "bastionHostIPConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'bas'), parameters('tokens').network, variables('hubName'))]",
                      "bastionHostName": "[replace(replace(parameters('resources').bastionHost, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('hubName'))]",
                      "bastionHostPublicIPAddressName": "[replace(replace(parameters('resources').publicIpAddress, parameters('tokens').service, 'bas'), parameters('tokens').network, variables('hubName'))]",
                      "diskEncryptionSetName": "[replace(replace(parameters('resources').diskEncryptionSet, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('hubName'))]",
                      "firewallClientIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'client-afw'), parameters('tokens').network, variables('hubName'))]",
                      "firewallClientPublicIPAddressName": "[replace(replace(parameters('resources').publicIpAddress, parameters('tokens').service, 'client-afw'), parameters('tokens').network, variables('hubName'))]",
                      "firewallManagementIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'mgmt-afw'), parameters('tokens').network, variables('hubName'))]",
                      "firewallManagementPublicIPAddressName": "[replace(replace(parameters('resources').publicIpAddress, parameters('tokens').service, 'mgmt-afw'), parameters('tokens').network, variables('hubName'))]",
                      "firewallName": "[replace(replace(parameters('resources').firewall, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('hubName'))]",
                      "firewallPolicyName": "[replace(replace(parameters('resources').firewallPolicy, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('hubName'))]",
                      "keyVaultName": "[take(replace(replace(replace(parameters('resources').keyVault, parameters('tokens').service, ''), parameters('tokens').network, variables('hubShortName')), 'unique_token', uniqueString(parameters('resourcePrefix'), parameters('environmentAbbreviation'), parameters('hubSubscriptionId'))), 24)]",
                      "keyVaultNetworkInterfaceName": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, 'kv'), parameters('tokens').network, variables('hubName'))]",
                      "keyVaultPrivateEndpointName": "[replace(replace(parameters('resources').privateEndpoint, parameters('tokens').service, 'kv'), parameters('tokens').network, variables('hubName'))]",
                      "linuxDiskName": "[replace(replace(parameters('resources').disk, parameters('tokens').service, 'linux'), parameters('tokens').network, variables('hubName'))]",
                      "linuxNetworkInterfaceIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'linux'), parameters('tokens').network, variables('hubName'))]",
                      "linuxNetworkInterfaceName": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, 'linux'), parameters('tokens').network, variables('hubName'))]",
                      "linuxVmName": "[replace(replace(parameters('resources').virtualMachine, parameters('tokens').service, 'lra'), parameters('tokens').network, variables('hubName'))]",
                      "logStorageAccountName": "[take(replace(replace(replace(parameters('resources').storageAccount, parameters('tokens').service, ''), parameters('tokens').network, variables('hubShortName')), 'unique_token', uniqueString(parameters('resourcePrefix'), parameters('environmentAbbreviation'), parameters('hubSubscriptionId'))), 24)]",
                      "logStorageAccountNetworkInterfaceNamePrefix": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, variables('hubName'))]",
                      "logStorageAccountPrivateEndpointNamePrefix": "[replace(replace(parameters('resources').privateEndpoint, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, variables('hubName'))]",
                      "networkSecurityGroupName": "[replace(replace(parameters('resources').networkSecurityGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('hubName'))]",
                      "networkWatcherName": "[replace(replace(parameters('resources').networkWatcher, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('hubName'))]",
                      "routeTableName": "[replace(replace(parameters('resources').routeTable, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('hubName'))]",
                      "subnetName": "[replace(replace(parameters('resources').subnet, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('hubName'))]",
                      "userAssignedIdentityName": "[replace(replace(parameters('resources').userAssignedIdentity, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('hubName'))]",
                      "virtualNetworkName": "[replace(replace(parameters('resources').virtualNetwork, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('hubName'))]",
                      "windowsDiskName": "[replace(replace(parameters('resources').disk, parameters('tokens').service, 'windows'), parameters('tokens').network, variables('hubName'))]",
                      "windowsNetworkInterfaceIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'windows'), parameters('tokens').network, variables('hubName'))]",
                      "windowsNetworkInterfaceName": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, 'windows'), parameters('tokens').network, variables('hubName'))]",
                      "windowsVmName": "[replace(replace(parameters('resources').virtualMachine, parameters('tokens').service, 'wra'), parameters('tokens').network, variables('hubName'))]"
                    },
                    "spokes": "[union(variables('spokesCommon'), variables('spokesIdentity'))]",
                    "spokesCommon": [
                      {
                        "name": "[variables('operationsName')]",
                        "subscriptionId": "[parameters('operationsSubscriptionId')]",
                        "resourceGroupName": "[replace(replace(parameters('resources').resourceGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('operationsName'))]",
                        "deployUniqueResources": "[if(contains(createArray(parameters('hubSubscriptionId')), parameters('operationsSubscriptionId')), false(), true())]",
                        "logAnalyticsWorkspaceName": "[replace(replace(parameters('resources').logAnalyticsWorkspace, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('operationsName'))]",
                        "logStorageAccountName": "[take(replace(replace(replace(parameters('resources').storageAccount, parameters('tokens').service, ''), parameters('tokens').network, variables('operationsShortName')), 'unique_token', uniqueString(parameters('resourcePrefix'), parameters('environmentAbbreviation'), parameters('operationsSubscriptionId'))), 24)]",
                        "logStorageAccountNetworkInterfaceNamePrefix": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, variables('operationsName'))]",
                        "logStorageAccountPrivateEndpointNamePrefix": "[replace(replace(parameters('resources').privateEndpoint, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, variables('operationsName'))]",
                        "networkSecurityGroupDiagnosticsLogs": "[parameters('operationsNetworkSecurityGroupDiagnosticsLogs')]",
                        "networkSecurityGroupDiagnosticsMetrics": "[parameters('operationsNetworkSecurityGroupDiagnosticsMetrics')]",
                        "networkSecurityGroupName": "[replace(replace(parameters('resources').networkSecurityGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('operationsName'))]",
                        "networkSecurityGroupRules": "[parameters('operationsNetworkSecurityGroupRules')]",
                        "networkWatcherName": "[replace(replace(parameters('resources').networkWatcher, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('operationsName'))]",
                        "privateLinkScopeName": "[replace(replace(parameters('resources').privateLinkScope, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('operationsName'))]",
                        "privateLinkScopeNetworkInterfaceName": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, 'pls'), parameters('tokens').network, variables('operationsName'))]",
                        "privateLinkScopePrivateEndpointName": "[replace(replace(parameters('resources').privateEndpoint, parameters('tokens').service, 'pls'), parameters('tokens').network, variables('operationsName'))]",
                        "routeTableName": "[replace(replace(parameters('resources').routeTable, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('operationsName'))]",
                        "subnetAddressPrefix": "[parameters('operationsSubnetAddressPrefix')]",
                        "subnetName": "[replace(replace(parameters('resources').subnet, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('operationsName'))]",
                        "subnetPrivateEndpointNetworkPolicies": "Disabled",
                        "subnetPrivateLinkServiceNetworkPolicies": "Disabled",
                        "virtualNetworkAddressPrefix": "[parameters('operationsVirtualNetworkAddressPrefix')]",
                        "virtualNetworkDiagnosticsLogs": "[parameters('operationsVirtualNetworkDiagnosticsLogs')]",
                        "virtualNetworkDiagnosticsMetrics": "[parameters('operationsVirtualNetworkDiagnosticsMetrics')]",
                        "virtualNetworkName": "[replace(replace(parameters('resources').virtualNetwork, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('operationsName'))]"
                      },
                      {
                        "name": "[variables('sharedServicesName')]",
                        "subscriptionId": "[parameters('sharedServicesSubscriptionId')]",
                        "resourceGroupName": "[replace(replace(parameters('resources').resourceGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('sharedServicesName'))]",
                        "deployUniqueResources": "[if(contains(createArray(parameters('hubSubscriptionId'), parameters('operationsSubscriptionId')), parameters('sharedServicesSubscriptionId')), false(), true())]",
                        "logStorageAccountName": "[take(replace(replace(replace(parameters('resources').storageAccount, parameters('tokens').service, ''), parameters('tokens').network, variables('sharedServicesShortName')), 'unique_token', uniqueString(parameters('resourcePrefix'), parameters('environmentAbbreviation'), parameters('sharedServicesSubscriptionId'))), 24)]",
                        "logStorageAccountNetworkInterfaceNamePrefix": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, variables('sharedServicesName'))]",
                        "logStorageAccountPrivateEndpointNamePrefix": "[replace(replace(parameters('resources').privateEndpoint, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, variables('sharedServicesName'))]",
                        "networkSecurityGroupDiagnosticsLogs": "[parameters('sharedServicesNetworkSecurityGroupDiagnosticsLogs')]",
                        "networkSecurityGroupDiagnosticsMetrics": "[parameters('sharedServicesNetworkSecurityGroupDiagnosticsMetrics')]",
                        "networkSecurityGroupName": "[replace(replace(parameters('resources').networkSecurityGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('sharedServicesName'))]",
                        "networkSecurityGroupRules": "[parameters('sharedServicesNetworkSecurityGroupRules')]",
                        "networkWatcherName": "[replace(replace(parameters('resources').networkWatcher, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('sharedServicesName'))]",
                        "routeTableName": "[replace(replace(parameters('resources').routeTable, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('sharedServicesName'))]",
                        "subnetAddressPrefix": "[parameters('sharedServicesSubnetAddressPrefix')]",
                        "subnetName": "[replace(replace(parameters('resources').subnet, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('sharedServicesName'))]",
                        "subnetPrivateEndpointNetworkPolicies": "Disabled",
                        "subnetPrivateLinkServiceNetworkPolicies": "Disabled",
                        "virtualNetworkAddressPrefix": "[parameters('sharedServicesVirtualNetworkAddressPrefix')]",
                        "virtualNetworkDiagnosticsLogs": "[parameters('sharedServicesVirtualNetworkDiagnosticsLogs')]",
                        "virtualNetworkDiagnosticsMetrics": "[parameters('sharedServicesVirtualNetworkDiagnosticsMetrics')]",
                        "virtualNetworkName": "[replace(replace(parameters('resources').virtualNetwork, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('sharedServicesName'))]"
                      }
                    ],
                    "spokesIdentity": "[if(parameters('deployIdentity'), createArray(createObject('name', variables('identityName'), 'subscriptionId', parameters('identitySubscriptionId'), 'resourceGroupName', replace(replace(parameters('resources').resourceGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('identityName')), 'deployUniqueResources', if(contains(createArray(parameters('hubSubscriptionId'), parameters('operationsSubscriptionId'), parameters('sharedServicesSubscriptionId')), parameters('identitySubscriptionId')), false(), true()), 'logStorageAccountName', take(replace(replace(replace(parameters('resources').storageAccount, parameters('tokens').service, ''), parameters('tokens').network, variables('identityShortName')), 'unique_token', uniqueString(parameters('resourcePrefix'), parameters('environmentAbbreviation'), parameters('identitySubscriptionId'))), 24), 'logStorageAccountNetworkInterfaceNamePrefix', replace(replace(parameters('resources').networkInterface, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, variables('identityName')), 'logStorageAccountPrivateEndpointNamePrefix', replace(replace(parameters('resources').privateEndpoint, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, variables('identityName')), 'networkSecurityGroupDiagnosticsLogs', parameters('identityNetworkSecurityGroupDiagnosticsLogs'), 'networkSecurityGroupDiagnosticsMetrics', parameters('identityNetworkSecurityGroupDiagnosticsMetrics'), 'networkSecurityGroupName', replace(replace(parameters('resources').networkSecurityGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('identityName')), 'networkSecurityGroupRules', parameters('identityNetworkSecurityGroupRules'), 'networkWatcherName', replace(replace(parameters('resources').networkWatcher, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('identityName')), 'routeTableName', replace(replace(parameters('resources').routeTable, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('identityName')), 'subnetAddressPrefix', parameters('identitySubnetAddressPrefix'), 'subnetName', replace(replace(parameters('resources').subnet, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('identityName')), 'subnetPrivateEndpointNetworkPolicies', 'Disabled', 'subnetPrivateLinkServiceNetworkPolicies', 'Disabled', 'virtualNetworkAddressPrefix', parameters('identityVirtualNetworkAddressPrefix'), 'virtualNetworkDiagnosticsLogs', parameters('identityVirtualNetworkDiagnosticsLogs'), 'virtualNetworkDiagnosticsMetrics', parameters('identityVirtualNetworkDiagnosticsMetrics'), 'virtualNetworkName', replace(replace(parameters('resources').virtualNetwork, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, variables('identityName')))), createArray())]"
                  },
                  "resources": [],
                  "outputs": {
                    "networks": {
                      "type": "array",
                      "value": "[union(createArray(variables('hub')), variables('spokes'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-convention-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networks": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networks.value]"
                  },
                  "tags": {
                    "value": "[variables('calculatedTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "805276655037964756"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networks": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "resourceGroups",
                        "count": "[length(parameters('networks'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-rg-{0}-{1}', parameters('networks')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('networks')[copyIndex()].resourceGroupName]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "14258191516922489977"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/resourceGroups",
                              "apiVersion": "2019-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
                            },
                            "tags": {
                              "type": "object",
                              "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-networking-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "bastionHostSubnetAddressPrefix": {
                    "value": "[parameters('bastionHostSubnetAddressPrefix')]"
                  },
                  "deployIdentity": {
                    "value": "[parameters('deployIdentity')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deployNetworkWatcher": {
                    "value": "[parameters('deployNetworkWatcher')]"
                  },
                  "deployRemoteAccess": {
                    "value": "[parameters('deployRemoteAccess')]"
                  },
                  "dnsServers": {
                    "value": "[parameters('dnsServers')]"
                  },
                  "enableProxy": {
                    "value": "[parameters('enableProxy')]"
                  },
                  "firewallSettings": {
                    "value": {
                      "clientPrivateIpAddress": "[variables('firewallClientPrivateIpAddress')]",
                      "clientPublicIPAddressAvailabilityZones": "[parameters('firewallClientPublicIPAddressAvailabilityZones')]",
                      "clientSubnetAddressPrefix": "[parameters('firewallClientSubnetAddressPrefix')]",
                      "intrusionDetectionMode": "[parameters('firewallIntrusionDetectionMode')]",
                      "managementPublicIPAddressAvailabilityZones": "[parameters('firewallManagementPublicIPAddressAvailabilityZones')]",
                      "managementSubnetAddressPrefix": "[parameters('firewallManagementSubnetAddressPrefix')]",
                      "publicIpAddressAllocationMethod": "Static",
                      "publicIpAddressSkuName": "Standard",
                      "skuTier": "[parameters('firewallSkuTier')]",
                      "supernetIPAddress": "[parameters('firewallSupernetIPAddress')]",
                      "threatIntelMode": "[parameters('firewallThreatIntelMode')]"
                    }
                  },
                  "hubNetworkSecurityGroupRules": {
                    "value": "[parameters('hubNetworkSecurityGroupRules')]"
                  },
                  "hubSubnetAddressPrefix": {
                    "value": "[parameters('hubSubnetAddressPrefix')]"
                  },
                  "hubVirtualNetworkAddressPrefix": {
                    "value": "[parameters('hubVirtualNetworkAddressPrefix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networks": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networks.value]"
                  },
                  "tags": {
                    "value": "[variables('calculatedTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "12805260671779525318"
                    }
                  },
                  "parameters": {
                    "bastionHostSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "deployIdentity": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deployNetworkWatcher": {
                      "type": "bool"
                    },
                    "deployRemoteAccess": {
                      "type": "bool"
                    },
                    "dnsServers": {
                      "type": "array"
                    },
                    "enableProxy": {
                      "type": "bool"
                    },
                    "firewallSettings": {
                      "type": "object"
                    },
                    "hubNetworkSecurityGroupRules": {
                      "type": "array"
                    },
                    "hubSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "hubVirtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networks": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "hub": "[first(filter(parameters('networks'), lambda('network', equals(lambdaVariables('network').name, 'hub'))))]",
                    "identity": "[if(parameters('deployIdentity'), first(filter(parameters('networks'), lambda('network', equals(lambdaVariables('network').name, 'identity')))), createObject())]",
                    "spokes": "[filter(parameters('networks'), lambda('network', not(equals(lambdaVariables('network').name, 'hub'))))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('hub').subscriptionId]",
                      "resourceGroup": "[variables('hub').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "bastionHostSubnetAddressPrefix": {
                            "value": "[parameters('bastionHostSubnetAddressPrefix')]"
                          },
                          "deployNetworkWatcher": {
                            "value": "[parameters('deployNetworkWatcher')]"
                          },
                          "deployRemoteAccess": {
                            "value": "[parameters('deployRemoteAccess')]"
                          },
                          "dnsServers": {
                            "value": "[parameters('dnsServers')]"
                          },
                          "enableProxy": {
                            "value": "[parameters('enableProxy')]"
                          },
                          "firewallClientIpConfigurationName": {
                            "value": "[variables('hub').firewallClientIpConfigurationName]"
                          },
                          "firewallClientPrivateIpAddress": {
                            "value": "[parameters('firewallSettings').clientPrivateIpAddress]"
                          },
                          "firewallClientPublicIPAddressAvailabilityZones": {
                            "value": "[parameters('firewallSettings').clientPublicIPAddressAvailabilityZones]"
                          },
                          "firewallClientPublicIPAddressName": {
                            "value": "[variables('hub').firewallClientPublicIPAddressName]"
                          },
                          "firewallClientPublicIPAddressSkuName": {
                            "value": "Standard"
                          },
                          "firewallClientPublicIpAllocationMethod": {
                            "value": "Static"
                          },
                          "firewallClientSubnetAddressPrefix": {
                            "value": "[parameters('firewallSettings').clientSubnetAddressPrefix]"
                          },
                          "firewallClientSubnetName": {
                            "value": "AzureFirewallSubnet"
                          },
                          "firewallIntrusionDetectionMode": {
                            "value": "[parameters('firewallSettings').intrusionDetectionMode]"
                          },
                          "firewallManagementIpConfigurationName": {
                            "value": "[variables('hub').firewallManagementIpConfigurationName]"
                          },
                          "firewallManagementPublicIPAddressAvailabilityZones": {
                            "value": "[parameters('firewallSettings').managementPublicIPAddressAvailabilityZones]"
                          },
                          "firewallManagementPublicIPAddressName": {
                            "value": "[variables('hub').firewallManagementPublicIPAddressName]"
                          },
                          "firewallManagementPublicIPAddressSkuName": {
                            "value": "[parameters('firewallSettings').publicIpAddressSkuName]"
                          },
                          "firewallManagementPublicIpAllocationMethod": {
                            "value": "[parameters('firewallSettings').publicIpAddressAllocationMethod]"
                          },
                          "firewallManagementSubnetAddressPrefix": {
                            "value": "[parameters('firewallSettings').managementSubnetAddressPrefix]"
                          },
                          "firewallManagementSubnetName": {
                            "value": "AzureFirewallManagementSubnet"
                          },
                          "firewallName": {
                            "value": "[variables('hub').firewallName]"
                          },
                          "firewallPolicyName": {
                            "value": "[variables('hub').firewallPolicyName]"
                          },
                          "firewallSkuTier": {
                            "value": "[parameters('firewallSettings').skuTier]"
                          },
                          "firewallSupernetIPAddress": {
                            "value": "[parameters('firewallSettings').supernetIPAddress]"
                          },
                          "firewallThreatIntelMode": {
                            "value": "[parameters('firewallSettings').threatIntelMode]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[variables('hub').networkSecurityGroupName]"
                          },
                          "networkSecurityGroupRules": {
                            "value": "[parameters('hubNetworkSecurityGroupRules')]"
                          },
                          "networkWatcherName": {
                            "value": "[variables('hub').networkWatcherName]"
                          },
                          "routeTableName": {
                            "value": "[variables('hub').routeTableName]"
                          },
                          "subnetAddressPrefix": {
                            "value": "[parameters('hubSubnetAddressPrefix')]"
                          },
                          "subnetName": {
                            "value": "[variables('hub').subnetName]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualNetworkAddressPrefix": {
                            "value": "[parameters('hubVirtualNetworkAddressPrefix')]"
                          },
                          "virtualNetworkName": {
                            "value": "[variables('hub').virtualNetworkName]"
                          },
                          "vNetDnsServers": {
                            "value": [
                              "[parameters('firewallSettings').clientPrivateIpAddress]"
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "1867861694959053688"
                            }
                          },
                          "parameters": {
                            "bastionHostSubnetAddressPrefix": {
                              "type": "string"
                            },
                            "deployNetworkWatcher": {
                              "type": "bool"
                            },
                            "deployRemoteAccess": {
                              "type": "bool"
                            },
                            "dnsServers": {
                              "type": "array"
                            },
                            "enableProxy": {
                              "type": "bool"
                            },
                            "firewallClientIpConfigurationName": {
                              "type": "string"
                            },
                            "firewallClientPrivateIpAddress": {
                              "type": "string"
                            },
                            "firewallClientPublicIPAddressAvailabilityZones": {
                              "type": "array"
                            },
                            "firewallClientPublicIPAddressName": {
                              "type": "string"
                            },
                            "firewallClientPublicIPAddressSkuName": {
                              "type": "string"
                            },
                            "firewallClientPublicIpAllocationMethod": {
                              "type": "string"
                            },
                            "firewallClientSubnetAddressPrefix": {
                              "type": "string"
                            },
                            "firewallClientSubnetName": {
                              "type": "string"
                            },
                            "firewallIntrusionDetectionMode": {
                              "type": "string",
                              "allowedValues": [
                                "Alert",
                                "Deny",
                                "Off"
                              ]
                            },
                            "firewallManagementIpConfigurationName": {
                              "type": "string"
                            },
                            "firewallManagementPublicIPAddressAvailabilityZones": {
                              "type": "array"
                            },
                            "firewallManagementPublicIPAddressName": {
                              "type": "string"
                            },
                            "firewallManagementPublicIPAddressSkuName": {
                              "type": "string"
                            },
                            "firewallManagementPublicIpAllocationMethod": {
                              "type": "string"
                            },
                            "firewallManagementSubnetAddressPrefix": {
                              "type": "string"
                            },
                            "firewallManagementSubnetName": {
                              "type": "string"
                            },
                            "firewallName": {
                              "type": "string"
                            },
                            "firewallPolicyName": {
                              "type": "string"
                            },
                            "firewallSkuTier": {
                              "type": "string"
                            },
                            "firewallSupernetIPAddress": {
                              "type": "string"
                            },
                            "firewallThreatIntelMode": {
                              "type": "string",
                              "allowedValues": [
                                "Alert",
                                "Deny",
                                "Off"
                              ]
                            },
                            "location": {
                              "type": "string"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            },
                            "networkSecurityGroupRules": {
                              "type": "array"
                            },
                            "networkWatcherName": {
                              "type": "string"
                            },
                            "routeTableName": {
                              "type": "string"
                            },
                            "routeTableRouteAddressPrefix": {
                              "type": "string",
                              "defaultValue": "0.0.0.0/0"
                            },
                            "routeTableRouteName": {
                              "type": "string",
                              "defaultValue": "default_route"
                            },
                            "routeTableRouteNextHopType": {
                              "type": "string",
                              "defaultValue": "VirtualAppliance"
                            },
                            "subnetAddressPrefix": {
                              "type": "string"
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "vNetDnsServers": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "subnetsBastion": "[if(parameters('deployRemoteAccess'), createArray(createObject('name', 'AzureBastionSubnet', 'properties', createObject('addressPrefix', parameters('bastionHostSubnetAddressPrefix')))), createArray())]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkSecurityGroup",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkSecurityGroupName')]"
                                  },
                                  "securityRules": {
                                    "value": "[parameters('networkSecurityGroupRules')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "7780881015892644264"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "securityRules": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkSecurityGroups",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "securityRules": "[parameters('securityRules')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "routeTable",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "disableBgpRoutePropagation": {
                                    "value": false
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('routeTableName')]"
                                  },
                                  "routeAddressPrefix": {
                                    "value": "[parameters('routeTableRouteAddressPrefix')]"
                                  },
                                  "routeName": {
                                    "value": "[parameters('routeTableRouteName')]"
                                  },
                                  "routeNextHopIpAddress": {
                                    "value": "[parameters('firewallClientPrivateIpAddress')]"
                                  },
                                  "routeNextHopType": {
                                    "value": "[parameters('routeTableRouteNextHopType')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "3452822322028754232"
                                    }
                                  },
                                  "parameters": {
                                    "disableBgpRoutePropagation": {
                                      "type": "bool"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "routeAddressPrefix": {
                                      "type": "string"
                                    },
                                    "routeName": {
                                      "type": "string"
                                    },
                                    "routeNextHopIpAddress": {
                                      "type": "string"
                                    },
                                    "routeNextHopType": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/routeTables",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                        "routes": [
                                          {
                                            "name": "[parameters('routeName')]",
                                            "properties": {
                                              "addressPrefix": "[parameters('routeAddressPrefix')]",
                                              "nextHopIpAddress": "[parameters('routeNextHopIpAddress')]",
                                              "nextHopType": "[parameters('routeNextHopType')]"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "condition": "[parameters('deployNetworkWatcher')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkWatcher",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkWatcherName')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "7600987290536274187"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkWatchers",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {}
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "virtualNetwork",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "addressPrefix": {
                                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('virtualNetworkName')]"
                                  },
                                  "subnets": {
                                    "value": "[union(createArray(createObject('name', 'AzureFirewallSubnet', 'properties', createObject('addressPrefix', parameters('firewallClientSubnetAddressPrefix'))), createObject('name', 'AzureFirewallManagementSubnet', 'properties', createObject('addressPrefix', parameters('firewallManagementSubnetAddressPrefix'))), createObject('name', parameters('subnetName'), 'properties', createObject('addressPrefix', parameters('subnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value), 'privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled', 'routeTable', createObject('id', reference(resourceId('Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value)))), variables('subnetsBastion'))]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "vNetDnsServers": {
                                    "value": "[parameters('vNetDnsServers')]"
                                  },
                                  "firewallSkuTier": {
                                    "value": "[parameters('firewallSkuTier')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "10147997802991299261"
                                    }
                                  },
                                  "parameters": {
                                    "addressPrefix": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "subnets": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "vNetDnsServers": {
                                      "type": "array"
                                    },
                                    "firewallSkuTier": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "addressSpace": {
                                          "addressPrefixes": [
                                            "[parameters('addressPrefix')]"
                                          ]
                                        },
                                        "subnets": "[parameters('subnets')]",
                                        "dhcpOptions": "[if(and(not(equals(parameters('vNetDnsServers'), null())), or(equals(parameters('firewallSkuTier'), 'Premium'), equals(parameters('firewallSkuTier'), 'Standard'))), createObject('dnsServers', parameters('vNetDnsServers')), null())]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    },
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                                    },
                                    "subnets": {
                                      "type": "array",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').subnets]"
                                    },
                                    "addressPrefix": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').addressSpace.addressPrefixes[0]]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup')]",
                                "[resourceId('Microsoft.Resources/deployments', 'networkWatcher')]",
                                "[resourceId('Microsoft.Resources/deployments', 'routeTable')]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "firewallClientPublicIPAddress",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "availabilityZones": {
                                    "value": "[parameters('firewallClientPublicIPAddressAvailabilityZones')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('firewallClientPublicIPAddressName')]"
                                  },
                                  "publicIpAllocationMethod": {
                                    "value": "[parameters('firewallClientPublicIpAllocationMethod')]"
                                  },
                                  "skuName": {
                                    "value": "[parameters('firewallClientPublicIPAddressSkuName')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "11737243810289041859"
                                    }
                                  },
                                  "parameters": {
                                    "availabilityZones": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "publicIpAllocationMethod": {
                                      "type": "string"
                                    },
                                    "skuName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "sku": {
                                        "name": "[parameters('skuName')]"
                                      },
                                      "properties": {
                                        "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]"
                                      },
                                      "zones": "[parameters('availabilityZones')]"
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "firewallManagementPublicIPAddress",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "availabilityZones": {
                                    "value": "[parameters('firewallManagementPublicIPAddressAvailabilityZones')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('firewallManagementPublicIPAddressName')]"
                                  },
                                  "publicIpAllocationMethod": {
                                    "value": "[parameters('firewallManagementPublicIpAllocationMethod')]"
                                  },
                                  "skuName": {
                                    "value": "[parameters('firewallManagementPublicIPAddressSkuName')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "11737243810289041859"
                                    }
                                  },
                                  "parameters": {
                                    "availabilityZones": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "publicIpAllocationMethod": {
                                      "type": "string"
                                    },
                                    "skuName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "sku": {
                                        "name": "[parameters('skuName')]"
                                      },
                                      "properties": {
                                        "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]"
                                      },
                                      "zones": "[parameters('availabilityZones')]"
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "firewall",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "clientIpConfigurationName": {
                                    "value": "[parameters('firewallClientIpConfigurationName')]"
                                  },
                                  "clientIpConfigurationPublicIPAddressResourceId": {
                                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'firewallClientPublicIPAddress'), '2022-09-01').outputs.id.value]"
                                  },
                                  "clientIpConfigurationSubnetResourceId": {
                                    "value": "[format('{0}/subnets/{1}', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value, parameters('firewallClientSubnetName'))]"
                                  },
                                  "dnsServers": {
                                    "value": "[parameters('dnsServers')]"
                                  },
                                  "enableProxy": {
                                    "value": "[parameters('enableProxy')]"
                                  },
                                  "firewallPolicyName": {
                                    "value": "[parameters('firewallPolicyName')]"
                                  },
                                  "firewallSupernetIPAddress": {
                                    "value": "[parameters('firewallSupernetIPAddress')]"
                                  },
                                  "intrusionDetectionMode": {
                                    "value": "[parameters('firewallIntrusionDetectionMode')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "managementIpConfigurationName": {
                                    "value": "[parameters('firewallManagementIpConfigurationName')]"
                                  },
                                  "managementIpConfigurationPublicIPAddressResourceId": {
                                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'firewallManagementPublicIPAddress'), '2022-09-01').outputs.id.value]"
                                  },
                                  "managementIpConfigurationSubnetResourceId": {
                                    "value": "[format('{0}/subnets/{1}', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value, parameters('firewallManagementSubnetName'))]"
                                  },
                                  "name": {
                                    "value": "[parameters('firewallName')]"
                                  },
                                  "skuTier": {
                                    "value": "[parameters('firewallSkuTier')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "threatIntelMode": {
                                    "value": "[parameters('firewallThreatIntelMode')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "17878198270712885843"
                                    }
                                  },
                                  "parameters": {
                                    "clientIpConfigurationName": {
                                      "type": "string"
                                    },
                                    "clientIpConfigurationSubnetResourceId": {
                                      "type": "string"
                                    },
                                    "clientIpConfigurationPublicIPAddressResourceId": {
                                      "type": "string"
                                    },
                                    "dnsServers": {
                                      "type": "array"
                                    },
                                    "enableProxy": {
                                      "type": "bool"
                                    },
                                    "firewallPolicyName": {
                                      "type": "string"
                                    },
                                    "firewallSupernetIPAddress": {
                                      "type": "string"
                                    },
                                    "intrusionDetectionMode": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Alert",
                                        "Deny",
                                        "Off"
                                      ]
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "managementIpConfigurationName": {
                                      "type": "string"
                                    },
                                    "managementIpConfigurationSubnetResourceId": {
                                      "type": "string"
                                    },
                                    "managementIpConfigurationPublicIPAddressResourceId": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "skuTier": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Standard",
                                        "Premium",
                                        "Basic"
                                      ]
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {}
                                    },
                                    "threatIntelMode": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Alert",
                                        "Deny",
                                        "Off"
                                      ]
                                    }
                                  },
                                  "variables": {
                                    "intrusionDetectionObject": {
                                      "mode": "[parameters('intrusionDetectionMode')]"
                                    },
                                    "dnsSettings": {
                                      "enableProxy": "[parameters('enableProxy')]",
                                      "servers": "[parameters('dnsServers')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/firewallPolicies",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('firewallPolicyName')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "threatIntelMode": "[parameters('threatIntelMode')]",
                                        "intrusionDetection": "[if(equals(parameters('skuTier'), 'Premium'), variables('intrusionDetectionObject'), null())]",
                                        "sku": {
                                          "tier": "[parameters('skuTier')]"
                                        },
                                        "dnsSettings": "[if(or(equals(parameters('skuTier'), 'Premium'), equals(parameters('skuTier'), 'Standard')), variables('dnsSettings'), null())]"
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}/{1}', parameters('firewallPolicyName'), 'DefaultApplicationRuleCollectionGroup')]",
                                      "properties": {
                                        "priority": 300,
                                        "ruleCollections": [
                                          {
                                            "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                                            "action": {
                                              "type": "Allow"
                                            },
                                            "rules": [
                                              {
                                                "ruleType": "ApplicationRule",
                                                "name": "msftauth",
                                                "protocols": [
                                                  {
                                                    "protocolType": "Https",
                                                    "port": 443
                                                  }
                                                ],
                                                "fqdnTags": [],
                                                "webCategories": [],
                                                "targetFqdns": [
                                                  "aadcdn.msftauth.net",
                                                  "aadcdn.msauth.net"
                                                ],
                                                "targetUrls": [],
                                                "terminateTLS": false,
                                                "sourceAddresses": [
                                                  "*"
                                                ],
                                                "destinationAddresses": [],
                                                "sourceIpGroups": []
                                              }
                                            ],
                                            "name": "AzureAuth",
                                            "priority": 110
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/firewallPolicies', parameters('firewallPolicyName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
                                      "apiVersion": "2021-02-01",
                                      "name": "[format('{0}/{1}', parameters('firewallPolicyName'), 'DefaultNetworkRuleCollectionGroup')]",
                                      "properties": {
                                        "priority": 200,
                                        "ruleCollections": [
                                          {
                                            "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                                            "action": {
                                              "type": "Allow"
                                            },
                                            "rules": [
                                              {
                                                "ruleType": "NetworkRule",
                                                "name": "AzureCloud",
                                                "ipProtocols": [
                                                  "Any"
                                                ],
                                                "sourceAddresses": [
                                                  "*"
                                                ],
                                                "sourceIpGroups": [],
                                                "destinationAddresses": [
                                                  "AzureCloud"
                                                ],
                                                "destinationIpGroups": [],
                                                "destinationFqdns": [],
                                                "destinationPorts": [
                                                  "*"
                                                ]
                                              }
                                            ],
                                            "name": "AllowAzureCloud",
                                            "priority": 100
                                          },
                                          {
                                            "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                                            "action": {
                                              "type": "Allow"
                                            },
                                            "rules": [
                                              {
                                                "ruleType": "NetworkRule",
                                                "name": "AllSpokeTraffic",
                                                "ipProtocols": [
                                                  "Any"
                                                ],
                                                "sourceAddresses": [
                                                  "[parameters('firewallSupernetIPAddress')]"
                                                ],
                                                "sourceIpGroups": [],
                                                "destinationAddresses": [
                                                  "*"
                                                ],
                                                "destinationIpGroups": [],
                                                "destinationFqdns": [],
                                                "destinationPorts": [
                                                  "*"
                                                ]
                                              }
                                            ],
                                            "name": "AllowTrafficBetweenSpokes",
                                            "priority": 200
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/firewallPolicies/ruleCollectionGroups', parameters('firewallPolicyName'), 'DefaultApplicationRuleCollectionGroup')]",
                                        "[resourceId('Microsoft.Network/firewallPolicies', parameters('firewallPolicyName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Network/azureFirewalls",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "ipConfigurations": [
                                          {
                                            "name": "[parameters('clientIpConfigurationName')]",
                                            "properties": {
                                              "subnet": {
                                                "id": "[parameters('clientIpConfigurationSubnetResourceId')]"
                                              },
                                              "publicIPAddress": {
                                                "id": "[parameters('clientIpConfigurationPublicIPAddressResourceId')]"
                                              }
                                            }
                                          }
                                        ],
                                        "managementIpConfiguration": {
                                          "name": "[parameters('managementIpConfigurationName')]",
                                          "properties": {
                                            "subnet": {
                                              "id": "[parameters('managementIpConfigurationSubnetResourceId')]"
                                            },
                                            "publicIPAddress": {
                                              "id": "[parameters('managementIpConfigurationPublicIPAddressResourceId')]"
                                            }
                                          }
                                        },
                                        "firewallPolicy": {
                                          "id": "[resourceId('Microsoft.Network/firewallPolicies', parameters('firewallPolicyName'))]"
                                        },
                                        "sku": {
                                          "tier": "[parameters('skuTier')]"
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/firewallPolicies/ruleCollectionGroups', parameters('firewallPolicyName'), 'DefaultApplicationRuleCollectionGroup')]",
                                        "[resourceId('Microsoft.Network/firewallPolicies/ruleCollectionGroups', parameters('firewallPolicyName'), 'DefaultNetworkRuleCollectionGroup')]",
                                        "[resourceId('Microsoft.Network/firewallPolicies', parameters('firewallPolicyName'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2021-02-01').ipConfigurations[0].properties.privateIPAddress]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', 'firewallClientPublicIPAddress')]",
                                "[resourceId('Microsoft.Resources/deployments', 'firewallManagementPublicIPAddress')]",
                                "[resourceId('Microsoft.Resources/deployments', 'virtualNetwork')]"
                              ]
                            }
                          ],
                          "outputs": {
                            "bastionHostSubnetResourceId": {
                              "type": "string",
                              "value": "[if(parameters('deployRemoteAccess'), reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[3].id, '')]"
                            },
                            "firewallName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'firewall'), '2022-09-01').outputs.name.value]"
                            },
                            "firewallPrivateIPAddress": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'firewall'), '2022-09-01').outputs.privateIPAddress.value]"
                            },
                            "firewallResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'firewall'), '2022-09-01').outputs.resourceId.value]"
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.name.value]"
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                            },
                            "subnetAddressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[2].properties.addressPrefix]"
                            },
                            "subnetName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[2].name]"
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[2].id]"
                            },
                            "virtualNetworkName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.name.value]"
                            },
                            "virtualNetworkResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "spokeNetworks",
                        "count": "[length(variables('spokes'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-{0}-{1}', variables('spokes')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('spokes')[copyIndex()].subscriptionId]",
                      "resourceGroup": "[variables('spokes')[copyIndex()].resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deployNetworkWatcher": {
                            "value": "[variables('spokes')[copyIndex()].deployUniqueResources]"
                          },
                          "firewallSkuTier": {
                            "value": "[parameters('firewallSettings').skuTier]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[variables('spokes')[copyIndex()].networkSecurityGroupName]"
                          },
                          "networkSecurityGroupRules": {
                            "value": "[variables('spokes')[copyIndex()].networkSecurityGroupRules]"
                          },
                          "networkWatcherName": {
                            "value": "[variables('spokes')[copyIndex()].networkWatcherName]"
                          },
                          "routeTableName": {
                            "value": "[variables('spokes')[copyIndex()].routeTableName]"
                          },
                          "routeTableRouteNextHopIpAddress": {
                            "value": "[parameters('firewallSettings').clientPrivateIpAddress]"
                          },
                          "subnetAddressPrefix": {
                            "value": "[variables('spokes')[copyIndex()].subnetAddressPrefix]"
                          },
                          "subnetName": {
                            "value": "[variables('spokes')[copyIndex()].subnetName]"
                          },
                          "subnetPrivateEndpointNetworkPolicies": {
                            "value": "[variables('spokes')[copyIndex()].subnetPrivateEndpointNetworkPolicies]"
                          },
                          "subnetPrivateLinkServiceNetworkPolicies": {
                            "value": "[variables('spokes')[copyIndex()].subnetPrivateLinkServiceNetworkPolicies]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualNetworkAddressPrefix": {
                            "value": "[variables('spokes')[copyIndex()].virtualNetworkAddressPrefix]"
                          },
                          "virtualNetworkName": {
                            "value": "[variables('spokes')[copyIndex()].virtualNetworkName]"
                          },
                          "vNetDnsServers": {
                            "value": [
                              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.firewallPrivateIPAddress.value]"
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "11944009476052352030"
                            }
                          },
                          "parameters": {
                            "deployNetworkWatcher": {
                              "type": "bool"
                            },
                            "firewallSkuTier": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            },
                            "networkSecurityGroupRules": {
                              "type": "array"
                            },
                            "networkWatcherName": {
                              "type": "string"
                            },
                            "routeTableName": {
                              "type": "string"
                            },
                            "routeTableRouteName": {
                              "type": "string",
                              "defaultValue": "default_route"
                            },
                            "routeTableRouteAddressPrefix": {
                              "type": "string",
                              "defaultValue": "0.0.0.0/0"
                            },
                            "routeTableRouteNextHopIpAddress": {
                              "type": "string"
                            },
                            "routeTableRouteNextHopType": {
                              "type": "string",
                              "defaultValue": "VirtualAppliance"
                            },
                            "subnetAddressPrefix": {
                              "type": "string"
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "subnetPrivateEndpointNetworkPolicies": {
                              "type": "string"
                            },
                            "subnetPrivateLinkServiceNetworkPolicies": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "vNetDnsServers": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkSecurityGroup",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkSecurityGroupName')]"
                                  },
                                  "securityRules": {
                                    "value": "[parameters('networkSecurityGroupRules')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "7780881015892644264"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "securityRules": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkSecurityGroups",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "securityRules": "[parameters('securityRules')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "routeTable",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "disableBgpRoutePropagation": {
                                    "value": true
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('routeTableName')]"
                                  },
                                  "routeAddressPrefix": {
                                    "value": "[parameters('routeTableRouteAddressPrefix')]"
                                  },
                                  "routeName": {
                                    "value": "[parameters('routeTableRouteName')]"
                                  },
                                  "routeNextHopIpAddress": {
                                    "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                                  },
                                  "routeNextHopType": {
                                    "value": "[parameters('routeTableRouteNextHopType')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "3452822322028754232"
                                    }
                                  },
                                  "parameters": {
                                    "disableBgpRoutePropagation": {
                                      "type": "bool"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "routeAddressPrefix": {
                                      "type": "string"
                                    },
                                    "routeName": {
                                      "type": "string"
                                    },
                                    "routeNextHopIpAddress": {
                                      "type": "string"
                                    },
                                    "routeNextHopType": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/routeTables",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                        "routes": [
                                          {
                                            "name": "[parameters('routeName')]",
                                            "properties": {
                                              "addressPrefix": "[parameters('routeAddressPrefix')]",
                                              "nextHopIpAddress": "[parameters('routeNextHopIpAddress')]",
                                              "nextHopType": "[parameters('routeNextHopType')]"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "condition": "[parameters('deployNetworkWatcher')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "networkWatcher",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkWatcherName')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "7600987290536274187"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkWatchers",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {}
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "virtualNetwork",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "addressPrefix": {
                                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('virtualNetworkName')]"
                                  },
                                  "subnets": {
                                    "value": [
                                      {
                                        "name": "[parameters('subnetName')]",
                                        "properties": {
                                          "addressPrefix": "[parameters('subnetAddressPrefix')]",
                                          "networkSecurityGroup": {
                                            "id": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                                          },
                                          "routeTable": {
                                            "id": "[reference(resourceId('Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value]"
                                          },
                                          "privateEndpointNetworkPolicies": "[parameters('subnetPrivateEndpointNetworkPolicies')]",
                                          "privateLinkServiceNetworkPolicies": "[parameters('subnetPrivateLinkServiceNetworkPolicies')]"
                                        }
                                      }
                                    ]
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "vNetDnsServers": {
                                    "value": "[parameters('vNetDnsServers')]"
                                  },
                                  "firewallSkuTier": {
                                    "value": "[parameters('firewallSkuTier')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "10147997802991299261"
                                    }
                                  },
                                  "parameters": {
                                    "addressPrefix": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "subnets": {
                                      "type": "array"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "vNetDnsServers": {
                                      "type": "array"
                                    },
                                    "firewallSkuTier": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "addressSpace": {
                                          "addressPrefixes": [
                                            "[parameters('addressPrefix')]"
                                          ]
                                        },
                                        "subnets": "[parameters('subnets')]",
                                        "dhcpOptions": "[if(and(not(equals(parameters('vNetDnsServers'), null())), or(equals(parameters('firewallSkuTier'), 'Premium'), equals(parameters('firewallSkuTier'), 'Standard'))), createObject('dnsServers', parameters('vNetDnsServers')), null())]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    },
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                                    },
                                    "subnets": {
                                      "type": "array",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').subnets]"
                                    },
                                    "addressPrefix": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').addressSpace.addressPrefixes[0]]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup')]",
                                "[resourceId('Microsoft.Resources/deployments', 'networkWatcher')]",
                                "[resourceId('Microsoft.Resources/deployments', 'routeTable')]"
                              ]
                            }
                          ],
                          "outputs": {
                            "virtualNetworkName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.name.value]"
                            },
                            "virtualNetworkResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value]"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.addressPrefix.value]"
                            },
                            "subnetName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].name]"
                            },
                            "subnetAddressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].properties.addressPrefix]"
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].id]"
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.name.value]"
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-peerings-hub-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('hub').subscriptionId]",
                      "resourceGroup": "[variables('hub').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hubVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "spokes": {
                            "copy": [
                              {
                                "name": "value",
                                "count": "[length(variables('spokes'))]",
                                "input": "[createObject('type', variables('spokes')[copyIndex('value')].name, 'virtualNetworkName', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokes')[copyIndex('value')].subscriptionId, variables('spokes')[copyIndex('value')].resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[copyIndex('value')].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value, 'virtualNetworkResourceId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokes')[copyIndex('value')].subscriptionId, variables('spokes')[copyIndex('value')].resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[copyIndex('value')].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value)]"
                              }
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "11212369470578362410"
                            }
                          },
                          "parameters": {
                            "hubVirtualNetworkName": {
                              "type": "string"
                            },
                            "spokes": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "hubToSpokePeering",
                                "count": "[length(parameters('spokes'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('hub-to-{0}-vnet-peering', parameters('spokes')[copyIndex()].type)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('{0}/to-{1}', parameters('hubVirtualNetworkName'), parameters('spokes')[copyIndex()].virtualNetworkName)]"
                                  },
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('spokes')[copyIndex()].virtualNetworkResourceId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "10509951780144584720"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix')))]",
                        "spokeNetworks"
                      ]
                    },
                    {
                      "copy": {
                        "name": "spokeVirtualNetworkPeerings",
                        "count": "[length(variables('spokes'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-peerings-{0}-{1}', variables('spokes')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('spokes')[copyIndex()].subscriptionId]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "spokeName": {
                            "value": "[variables('spokes')[copyIndex()].name]"
                          },
                          "spokeResourceGroupName": {
                            "value": "[variables('spokes')[copyIndex()].resourceGroupName]"
                          },
                          "spokeVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokes')[copyIndex()].subscriptionId, variables('spokes')[copyIndex()].resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[copyIndex()].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "hubVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "hubVirtualNetworkResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "13987612441032900755"
                            }
                          },
                          "parameters": {
                            "spokeName": {
                              "type": "string"
                            },
                            "spokeResourceGroupName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkName": {
                              "type": "string"
                            },
                            "hubVirtualNetworkName": {
                              "type": "string"
                            },
                            "hubVirtualNetworkResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-to-hub-vnet-peering', parameters('spokeName'))]",
                              "resourceGroup": "[parameters('spokeResourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('{0}/to-{1}', parameters('spokeVirtualNetworkName'), parameters('hubVirtualNetworkName'))]"
                                  },
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "10509951780144584720"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokes')[copyIndex()].subscriptionId, variables('spokes')[copyIndex()].resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[copyIndex()].name, parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('hub').subscriptionId]",
                      "resourceGroup": "[variables('hub').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deployIdentity": {
                            "value": "[parameters('deployIdentity')]"
                          },
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "hubVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "hubVirtualNetworkResourceGroupName": {
                            "value": "[variables('hub').resourceGroupName]"
                          },
                          "hubVirtualNetworkSubscriptionId": {
                            "value": "[variables('hub').subscriptionId]"
                          },
                          "identityVirtualNetworkName": "[if(parameters('deployIdentity'), createObject('value', variables('identity').virtualNetworkName), createObject('value', ''))]",
                          "identityVirtualNetworkResourceGroupName": "[if(parameters('deployIdentity'), createObject('value', variables('identity').resourceGroupName), createObject('value', ''))]",
                          "identityVirtualNetworkSubscriptionId": "[if(parameters('deployIdentity'), createObject('value', variables('identity').subscriptionId), createObject('value', ''))]",
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "10889540705507833390"
                            }
                          },
                          "parameters": {
                            "deployIdentity": {
                              "type": "bool"
                            },
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "hubVirtualNetworkName": {
                              "type": "string"
                            },
                            "hubVirtualNetworkResourceGroupName": {
                              "type": "string"
                            },
                            "hubVirtualNetworkSubscriptionId": {
                              "type": "string"
                            },
                            "identityVirtualNetworkName": {
                              "type": "string"
                            },
                            "identityVirtualNetworkResourceGroupName": {
                              "type": "string"
                            },
                            "identityVirtualNetworkSubscriptionId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneNames_Backup",
                                "count": "[length(items(variables('locations')))]",
                                "input": "[format('privatelink.{0}.backup.windowsazure.{1}', items(variables('locations'))[copyIndex('privateDnsZoneNames_Backup')].value.recoveryServicesGeo, coalesce(variables('privateDnsZoneSuffixes_Backup')[environment().name], variables('cloudSuffix')))]"
                              }
                            ],
                            "$fxv#0": {
                              "AzureChina": {
                                "chinaeast": {
                                  "abbreviation": "cne",
                                  "recoveryServicesGeo": "sha",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinaeast2": {
                                  "abbreviation": "cne2",
                                  "recoveryServicesGeo": "sha2",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinanorth": {
                                  "abbreviation": "cnn",
                                  "recoveryServicesGeo": "bjb",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinanorth2": {
                                  "abbreviation": "cnn2",
                                  "recoveryServicesGeo": "bjb2",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                }
                              },
                              "AzureCloud": {
                                "australiacentral": {
                                  "abbreviation": "auc",
                                  "recoveryServicesGeo": "acl",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiacentral2": {
                                  "abbreviation": "auc2",
                                  "recoveryServicesGeo": "acl2",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiaeast": {
                                  "abbreviation": "aue",
                                  "recoveryServicesGeo": "ae",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiasoutheast": {
                                  "abbreviation": "ause",
                                  "recoveryServicesGeo": "ase",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "brazilsouth": {
                                  "abbreviation": "brs",
                                  "recoveryServicesGeo": "brs",
                                  "timeDifference": "-3:00",
                                  "timeZone": "E. South America Standard Time"
                                },
                                "brazilsoutheast": {
                                  "abbreviation": "brse",
                                  "recoveryServicesGeo": "bse",
                                  "timeDifference": "-3:00",
                                  "timeZone": "E. South America Standard Time"
                                },
                                "canadacentral": {
                                  "abbreviation": "cac",
                                  "recoveryServicesGeo": "cnc",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "canadaeast": {
                                  "abbreviation": "cae",
                                  "recoveryServicesGeo": "cne",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "centralindia": {
                                  "abbreviation": "inc",
                                  "recoveryServicesGeo": "inc",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "centralus": {
                                  "abbreviation": "usc",
                                  "recoveryServicesGeo": "cus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "eastasia": {
                                  "abbreviation": "ase",
                                  "recoveryServicesGeo": "ea",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "eastus": {
                                  "abbreviation": "use",
                                  "recoveryServicesGeo": "eus",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "eastus2": {
                                  "abbreviation": "use2",
                                  "recoveryServicesGeo": "eus2",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "francecentral": {
                                  "abbreviation": "frc",
                                  "recoveryServicesGeo": "frc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "francesouth": {
                                  "abbreviation": "frs",
                                  "recoveryServicesGeo": "frs",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "germanynorth": {
                                  "abbreviation": "den",
                                  "recoveryServicesGeo": "gn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "germanywestcentral": {
                                  "abbreviation": "dewc",
                                  "recoveryServicesGeo": "gwc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "israelcentral": {
                                  "abbreviation": "ilc",
                                  "recoveryServicesGeo": "ilc",
                                  "timeDifference": "+2:00",
                                  "timeZone": "Israel Standard Time"
                                },
                                "italynorth": {
                                  "abbreviation": "itn",
                                  "recoveryServicesGeo": "itn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "japaneast": {
                                  "abbreviation": "jpe",
                                  "recoveryServicesGeo": "jpe",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Tokyo Standard Time"
                                },
                                "japanwest": {
                                  "abbreviation": "jpw",
                                  "recoveryServicesGeo": "jpw",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Tokyo Standard Time"
                                },
                                "jioindiacentral": {
                                  "abbreviation": "injc",
                                  "recoveryServicesGeo": "jic",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "jioindiawest": {
                                  "abbreviation": "injw",
                                  "recoveryServicesGeo": "jiw",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "koreacentral": {
                                  "abbreviation": "krc",
                                  "recoveryServicesGeo": "krc",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Korea Standard Time"
                                },
                                "koreasouth": {
                                  "abbreviation": "krs",
                                  "recoveryServicesGeo": "krs",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Korea Standard Time"
                                },
                                "northcentralus": {
                                  "abbreviation": "usnc",
                                  "recoveryServicesGeo": "ncus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "northeurope": {
                                  "abbreviation": "eun",
                                  "recoveryServicesGeo": "ne",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "norwayeast": {
                                  "abbreviation": "noe",
                                  "recoveryServicesGeo": "nwe",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "norwaywest": {
                                  "abbreviation": "now",
                                  "recoveryServicesGeo": "nww",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "polandcentral": {
                                  "abbreviation": "plc",
                                  "recoveryServicesGeo": "plc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "qatarcentral": {
                                  "abbreviation": "qac",
                                  "recoveryServicesGeo": "qac",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "southafricanorth": {
                                  "abbreviation": "zan",
                                  "recoveryServicesGeo": "san",
                                  "timeDifference": "+2:00",
                                  "timeZone": "South Africa Standard Time"
                                },
                                "southafricawest": {
                                  "abbreviation": "zaw",
                                  "recoveryServicesGeo": "saw",
                                  "timeDifference": "+2:00",
                                  "timeZone": "South Africa Standard Time"
                                },
                                "southcentralus": {
                                  "abbreviation": "ussc",
                                  "recoveryServicesGeo": "scus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "southeastasia": {
                                  "abbreviation": "asse",
                                  "recoveryServicesGeo": "sea",
                                  "timeDifference": "+8:00",
                                  "timeZone": "Singapore Standard Time"
                                },
                                "southindia": {
                                  "abbreviation": "ins",
                                  "recoveryServicesGeo": "ins",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "swedencentral": {
                                  "abbreviation": "sec",
                                  "recoveryServicesGeo": "sdc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "switzerlandnorth": {
                                  "abbreviation": "chn",
                                  "recoveryServicesGeo": "szn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "switzerlandwest": {
                                  "abbreviation": "chw",
                                  "recoveryServicesGeo": "szw",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "uaecentral": {
                                  "abbreviation": "aec",
                                  "recoveryServicesGeo": "uac",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "uaenorth": {
                                  "abbreviation": "aen",
                                  "recoveryServicesGeo": "uan",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "uksouth": {
                                  "abbreviation": "uks",
                                  "recoveryServicesGeo": "uks",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "ukwest": {
                                  "abbreviation": "ukw",
                                  "recoveryServicesGeo": "ukw",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "westcentralus": {
                                  "abbreviation": "uswc",
                                  "recoveryServicesGeo": "wcus",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                },
                                "westeurope": {
                                  "abbreviation": "euw",
                                  "recoveryServicesGeo": "we",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "westindia": {
                                  "abbreviation": "inw",
                                  "recoveryServicesGeo": "inw",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "westus": {
                                  "abbreviation": "usw",
                                  "recoveryServicesGeo": "wus",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                },
                                "westus2": {
                                  "abbreviation": "usw2",
                                  "recoveryServicesGeo": "wus2",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                },
                                "westus3": {
                                  "abbreviation": "usw3",
                                  "recoveryServicesGeo": "wus3",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                }
                              },
                              "AzureUSGovernment": {
                                "usdodcentral": {
                                  "abbreviation": "dodc",
                                  "recoveryServicesGeo": "udc",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "usdodeast": {
                                  "abbreviation": "dode",
                                  "recoveryServicesGeo": "ude",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "usgovarizona": {
                                  "abbreviation": "az",
                                  "recoveryServicesGeo": "uga",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                },
                                "usgovtexas": {
                                  "abbreviation": "tx",
                                  "recoveryServicesGeo": "ugt",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "usgovvirginia": {
                                  "abbreviation": "va",
                                  "recoveryServicesGeo": "ugv",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                }
                              },
                              "USNat": {
                                "usnateast": {
                                  "abbreviation": "east",
                                  "recoveryServicesGeo": "exe",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "usnatwest": {
                                  "abbreviation": "west",
                                  "recoveryServicesGeo": "exw",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                }
                              },
                              "USSec": {
                                "usseceast": {
                                  "abbreviation": "east",
                                  "recoveryServicesGeo": "rxe",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "ussecwest": {
                                  "abbreviation": "west",
                                  "recoveryServicesGeo": "rxw",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                }
                              }
                            },
                            "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.azure.', ''), '/', '')]",
                            "locations": "[variables('$fxv#0')[environment().name]]",
                            "privateDnsZoneNames": "[union(createArray(format('privatelink.agentsvc.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudSuffix'))), format('privatelink.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudSuffix'))), format('privatelink.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudSuffix'))), format('privatelink-global.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudSuffix'))), format('privatelink.file.{0}', environment().suffixes.storage), format('privatelink.queue.{0}', environment().suffixes.storage), format('privatelink.table.{0}', environment().suffixes.storage), format('privatelink.blob.{0}', environment().suffixes.storage), replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore'), format('privatelink.monitor.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix'))), format('privatelink.ods.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix'))), format('privatelink.oms.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudSuffix')))), variables('privateDnsZoneNames_Backup'))]",
                            "privateDnsZoneSuffixes_AzureAutomation": {
                              "AzureCloud": "net",
                              "AzureUSGovernment": "us",
                              "USNat": null,
                              "USSec": null
                            },
                            "privateDnsZoneSuffixes_AzureVirtualDesktop": {
                              "AzureCloud": "microsoft.com",
                              "AzureUSGovernment": "azure.us",
                              "USNat": null,
                              "USSec": null
                            },
                            "privateDnsZoneSuffixes_Backup": {
                              "AzureCloud": "com",
                              "AzureUSGovernment": "us",
                              "USNat": null,
                              "USSec": null
                            },
                            "privateDnsZoneSuffixes_Monitor": {
                              "AzureCloud": "azure.com",
                              "AzureUSGovernment": "azure.us",
                              "USNat": null,
                              "USSec": null
                            },
                            "virtualNetworks": "[union(createArray(createObject('name', parameters('hubVirtualNetworkName'), 'resourceGroupName', parameters('hubVirtualNetworkResourceGroupName'), 'subscriptionId', parameters('hubVirtualNetworkSubscriptionId'))), if(parameters('deployIdentity'), createArray(createObject('name', parameters('identityVirtualNetworkName'), 'resourceGroupName', parameters('identityVirtualNetworkResourceGroupName'), 'subscriptionId', parameters('identityVirtualNetworkSubscriptionId'))), createArray()))]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "privateDnsZones",
                                "count": "[length(variables('privateDnsZoneNames'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2018-09-01",
                              "name": "[variables('privateDnsZoneNames')[copyIndex()]]",
                              "location": "global",
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "copy": {
                                "name": "virtualNetworkLinks",
                                "count": "[length(variables('virtualNetworks'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-virtual-network-links-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneNames": {
                                    "value": "[variables('privateDnsZoneNames')]"
                                  },
                                  "virtualNetworkName": {
                                    "value": "[variables('virtualNetworks')[copyIndex()].name]"
                                  },
                                  "virtualNetworkResourceGroupName": {
                                    "value": "[variables('virtualNetworks')[copyIndex()].resourceGroupName]"
                                  },
                                  "virtualNetworkSubscriptionId": {
                                    "value": "[variables('virtualNetworks')[copyIndex()].subscriptionId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "2646333648192036322"
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneNames": {
                                      "type": "array"
                                    },
                                    "virtualNetworkName": {
                                      "type": "string"
                                    },
                                    "virtualNetworkResourceGroupName": {
                                      "type": "string"
                                    },
                                    "virtualNetworkSubscriptionId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "virtualNetworkLinks",
                                        "count": "[length(parameters('privateDnsZoneNames'))]"
                                      },
                                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                      "apiVersion": "2018-09-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneNames')[copyIndex()], parameters('virtualNetworkName'))]",
                                      "location": "global",
                                      "properties": {
                                        "registrationEnabled": false,
                                        "virtualNetwork": {
                                          "id": "[resourceId(parameters('virtualNetworkSubscriptionId'), parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "privateDnsZones"
                              ]
                            }
                          ],
                          "outputs": {
                            "agentsvcPrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink.agentsvc.azure-automation')))[0])]"
                            },
                            "automationPrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink.azure-automation')))[0])]"
                            },
                            "avdGlobalPrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink-global.wvd')))[0])]"
                            },
                            "avdPrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink.wvd')))[0])]"
                            },
                            "backupPrivateDnsZoneIds": {
                              "type": "array",
                              "copy": {
                                "count": "[length(variables('privateDnsZoneNames_Backup'))]",
                                "input": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneNames_Backup')[copyIndex()])]"
                              }
                            },
                            "blobPrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink.blob')))[0])]"
                            },
                            "filePrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink.file')))[0])]"
                            },
                            "keyvaultDnsPrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink.vaultcore')))[0])]"
                            },
                            "monitorPrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink.monitor')))[0])]"
                            },
                            "odsPrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink.ods.opinsights')))[0])]"
                            },
                            "omsPrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink.oms.opinsights')))[0])]"
                            },
                            "queuePrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink.queue')))[0])]"
                            },
                            "tablePrivateDnsZoneId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', filter(variables('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'privatelink.table')))[0])]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix')))]",
                        "spokeNetworks"
                      ]
                    }
                  ],
                  "outputs": {
                    "azureFirewallResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.firewallResourceId.value]"
                    },
                    "bastionHostSubnetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.bastionHostSubnetResourceId.value]"
                    },
                    "hubSubnetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                    },
                    "hubNetworkSecurityGroupResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupResourceId.value]"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value]"
                    },
                    "identitySubnetResourceId": {
                      "type": "string",
                      "value": "[if(parameters('deployIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokes')[2].subscriptionId, variables('spokes')[2].resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[2].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value, '')]"
                    },
                    "operationsSubnetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokes')[0].subscriptionId, variables('spokes')[0].resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[0].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                    },
                    "privateDnsZoneResourceIds": {
                      "type": "object",
                      "value": {
                        "agentsvc": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.agentsvcPrivateDnsZoneId.value]",
                        "automation": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.automationPrivateDnsZoneId.value]",
                        "avdGlobal": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.avdGlobalPrivateDnsZoneId.value]",
                        "avd": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.avdPrivateDnsZoneId.value]",
                        "backups": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.backupPrivateDnsZoneIds.value]",
                        "blob": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.blobPrivateDnsZoneId.value]",
                        "file": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.filePrivateDnsZoneId.value]",
                        "keyvault": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyvaultDnsPrivateDnsZoneId.value]",
                        "monitor": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.monitorPrivateDnsZoneId.value]",
                        "ods": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.odsPrivateDnsZoneId.value]",
                        "oms": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.omsPrivateDnsZoneId.value]",
                        "queue": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.queuePrivateDnsZoneId.value]",
                        "table": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hub').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tablePrivateDnsZoneId.value]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZoneResourceIds.value.keyVault]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkProperties": {
                    "value": "[first(filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networks.value, lambda('network', equals(lambdaVariables('network').name, 'hub'))))]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubSubnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[variables('calculatedTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "3912836360709277206"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networkProperties": {
                      "type": "object"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networkProperties').subscriptionId]",
                      "resourceGroup": "[parameters('networkProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('networkProperties').keyVaultName]"
                          },
                          "keyVaultNetworkInterfaceName": {
                            "value": "[parameters('networkProperties').keyVaultNetworkInterfaceName]"
                          },
                          "keyVaultPrivateDnsZoneResourceId": {
                            "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                          },
                          "keyVaultPrivateEndpointName": {
                            "value": "[parameters('networkProperties').keyVaultPrivateEndpointName]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "17697959832977472677"
                            }
                          },
                          "parameters": {
                            "diskEncryptionKeyExpirationInDays": {
                              "type": "int",
                              "defaultValue": 30
                            },
                            "keyVaultName": {
                              "type": "string"
                            },
                            "keyVaultNetworkInterfaceName": {
                              "type": "string"
                            },
                            "keyVaultPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "keyVaultPrivateEndpointName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
                              "properties": {
                                "enabledForDeployment": false,
                                "enabledForDiskEncryption": true,
                                "enabledForTemplateDeployment": false,
                                "enablePurgeProtection": true,
                                "enableRbacAuthorization": true,
                                "enableSoftDelete": true,
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "defaultAction": "Deny",
                                  "ipRules": [],
                                  "virtualNetworkRules": []
                                },
                                "publicNetworkAccess": "Disabled",
                                "sku": {
                                  "family": "A",
                                  "name": "standard"
                                },
                                "softDeleteRetentionInDays": 7,
                                "tenantId": "[subscription().tenantId]"
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('keyVaultPrivateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('keyVaultNetworkInterfaceName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('keyVaultPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                                      "groupIds": [
                                        "vault"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultPrivateEndpointName'), parameters('keyVaultName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('keyVaultPrivateEndpointName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'DiskEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "keyUriWithVersion": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
                            },
                            "keyVaultResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                            },
                            "keyVaultName": {
                              "type": "string",
                              "value": "[parameters('keyVaultName')]"
                            },
                            "keyVaultUri": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri]"
                            },
                            "storageKeyName": {
                              "type": "string",
                              "value": "StorageEncryptionKey"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-disk-encryption-set_{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networkProperties').subscriptionId]",
                      "resourceGroup": "[parameters('networkProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "diskEncryptionSetName": {
                            "value": "[parameters('networkProperties').diskEncryptionSetName]"
                          },
                          "keyUrl": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyUriWithVersion.value]"
                          },
                          "keyVaultResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), createObject('value', parameters('tags')['Microsoft.Compute/diskEncryptionSets']), createObject('value', createObject()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "8720396217971176471"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "diskEncryptionSetName": {
                              "type": "string"
                            },
                            "keyUrl": {
                              "type": "string"
                            },
                            "keyVaultResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/diskEncryptionSets",
                              "apiVersion": "2023-04-02",
                              "name": "[parameters('diskEncryptionSetName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "activeKey": {
                                  "sourceVault": {
                                    "id": "[parameters('keyVaultResourceId')]"
                                  },
                                  "keyUrl": "[parameters('keyUrl')]"
                                },
                                "encryptionType": "EncryptionAtRestWithPlatformAndCustomerKeys",
                                "rotationToLatestKeyVersionEnabled": true
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('assign-role-disk-encryption-set-ops-{0}', parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')), '2023-04-02', 'full').identity.principalId]"
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceGroup().id]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "16166471121138690529"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-user-assigned-identity-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networkProperties').subscriptionId]",
                      "resourceGroup": "[parameters('networkProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('networkProperties').userAssignedIdentityName]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "9210810628290341713"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "roleAssignmentEncryption",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                                  },
                                  "principalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                                  },
                                  "targetResourceId": {
                                    "value": "[resourceGroup().id]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "16166471121138690529"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "diskEncryptionSetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-disk-encryption-set_{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "KeyVaultName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                    },
                    "keyVaultUri": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                    },
                    "keyVaultResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                    },
                    "storageKeyName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deploySentinel": {
                    "value": "[parameters('deploySentinel')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceCappingDailyQuotaGb": {
                    "value": "[parameters('logAnalyticsWorkspaceCappingDailyQuotaGb')]"
                  },
                  "logAnalyticsWorkspaceRetentionInDays": {
                    "value": "[variables('logAnalyticsWorkspaceRetentionInDays')]"
                  },
                  "logAnalyticsWorkspaceSkuName": {
                    "value": "[parameters('logAnalyticsWorkspaceSkuName')]"
                  },
                  "operationsProperties": {
                    "value": "[first(filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networks.value, lambda('network', equals(lambdaVariables('network').name, 'operations'))))]"
                  },
                  "privateDnsZoneResourceIds": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZoneResourceIds.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.operationsSubnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[variables('calculatedTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "12328361973188250046"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deploySentinel": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceCappingDailyQuotaGb": {
                      "type": "int"
                    },
                    "logAnalyticsWorkspaceRetentionInDays": {
                      "type": "int"
                    },
                    "logAnalyticsWorkspaceSkuName": {
                      "type": "string"
                    },
                    "operationsProperties": {
                      "type": "object"
                    },
                    "privateDnsZoneResourceIds": {
                      "type": "object"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-law-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('operationsProperties').subscriptionId]",
                      "resourceGroup": "[parameters('operationsProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploySentinel": {
                            "value": "[parameters('deploySentinel')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('operationsProperties').logAnalyticsWorkspaceName]"
                          },
                          "retentionInDays": {
                            "value": "[parameters('logAnalyticsWorkspaceRetentionInDays')]"
                          },
                          "skuName": {
                            "value": "[parameters('logAnalyticsWorkspaceSkuName')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "workspaceCappingDailyQuotaGb": {
                            "value": "[parameters('logAnalyticsWorkspaceCappingDailyQuotaGb')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "653212175555805634"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "retentionInDays": {
                              "type": "int",
                              "defaultValue": 30
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "PerGB2018"
                            },
                            "workspaceCappingDailyQuotaGb": {
                              "type": "int",
                              "defaultValue": -1
                            },
                            "deploySentinel": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Whether or not to deploy Sentinel solution to workspace."
                              }
                            }
                          },
                          "variables": {
                            "solutions": [
                              {
                                "deploy": true,
                                "name": "AzureActivity",
                                "product": "OMSGallery/AzureActivity",
                                "publisher": "Microsoft",
                                "promotionCode": ""
                              },
                              {
                                "deploy": "[parameters('deploySentinel')]",
                                "name": "SecurityInsights",
                                "product": "OMSGallery/SecurityInsights",
                                "publisher": "Microsoft",
                                "promotionCode": ""
                              },
                              {
                                "deploy": true,
                                "name": "VMInsights",
                                "product": "OMSGallery/VMInsights",
                                "publisher": "Microsoft",
                                "promotionCode": ""
                              },
                              {
                                "deploy": true,
                                "name": "Security",
                                "product": "OMSGallery/Security",
                                "publisher": "Microsoft",
                                "promotionCode": ""
                              },
                              {
                                "deploy": true,
                                "name": "ServiceMap",
                                "publisher": "Microsoft",
                                "product": "OMSGallery/ServiceMap",
                                "promotionCode": ""
                              },
                              {
                                "deploy": true,
                                "name": "ContainerInsights",
                                "publisher": "Microsoft",
                                "product": "OMSGallery/ContainerInsights",
                                "promotionCode": ""
                              },
                              {
                                "deploy": true,
                                "name": "KeyVaultAnalytics",
                                "publisher": "Microsoft",
                                "product": "OMSGallery/KeyVaultAnalytics",
                                "promotionCode": ""
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2021-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "retentionInDays": "[parameters('retentionInDays')]",
                                "sku": {
                                  "name": "[parameters('skuName')]"
                                },
                                "workspaceCapping": {
                                  "dailyQuotaGb": "[parameters('workspaceCappingDailyQuotaGb')]"
                                },
                                "publicNetworkAccessForIngestion": "Enabled",
                                "publicNetworkAccessForQuery": "Enabled"
                              }
                            },
                            {
                              "copy": {
                                "name": "logAnalyticsSolutions",
                                "count": "[length(variables('solutions'))]"
                              },
                              "condition": "[variables('solutions')[copyIndex()].deploy]",
                              "type": "Microsoft.OperationsManagement/solutions",
                              "apiVersion": "2015-11-01-preview",
                              "name": "[format('{0}({1})', variables('solutions')[copyIndex()].name, parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                              },
                              "plan": {
                                "name": "[format('{0}({1})', variables('solutions')[copyIndex()].name, parameters('name'))]",
                                "product": "[variables('solutions')[copyIndex()].product]",
                                "publisher": "[variables('solutions')[copyIndex()].publisher]",
                                "promotionCode": "[variables('solutions')[copyIndex()].promotionCode]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-private-link-scope-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('operationsProperties').subscriptionId]",
                      "resourceGroup": "[parameters('operationsProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('operationsProperties').subscriptionId, parameters('operationsProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-law-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                          },
                          "name": {
                            "value": "[parameters('operationsProperties').privateLinkScopeName]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "2580615270360595587"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/privateLinkScopes",
                              "apiVersion": "2021-09-01",
                              "name": "[parameters('name')]",
                              "location": "global",
                              "properties": {
                                "accessModeSettings": {
                                  "ingestionAccessMode": "Private",
                                  "queryAccessMode": "Private"
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-09-01",
                              "name": "[format('{0}/{1}', parameters('name'), split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]",
                              "properties": {
                                "linkedResourceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              },
                              "dependsOn": [
                                "[resourceId('microsoft.insights/privateLinkScopes', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('microsoft.insights/privateLinkScopes', parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('operationsProperties').subscriptionId, parameters('operationsProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-law-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-private-endpoint-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('operationsProperties').subscriptionId]",
                      "resourceGroup": "[parameters('operationsProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "groupIds": {
                            "value": [
                              "azuremonitor"
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('operationsProperties').privateLinkScopePrivateEndpointName]"
                          },
                          "networkInterfaceName": {
                            "value": "[parameters('operationsProperties').privateLinkScopeNetworkInterfaceName]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": [
                              {
                                "name": "monitor",
                                "properties": {
                                  "privateDnsZoneId": "[parameters('privateDnsZoneResourceIds').monitor]"
                                }
                              },
                              {
                                "name": "oms",
                                "properties": {
                                  "privateDnsZoneId": "[parameters('privateDnsZoneResourceIds').oms]"
                                }
                              },
                              {
                                "name": "ods",
                                "properties": {
                                  "privateDnsZoneId": "[parameters('privateDnsZoneResourceIds').ods]"
                                }
                              },
                              {
                                "name": "agentsvc",
                                "properties": {
                                  "privateDnsZoneId": "[parameters('privateDnsZoneResourceIds').agentsvc]"
                                }
                              }
                            ]
                          },
                          "privateLinkServiceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('operationsProperties').subscriptionId, parameters('operationsProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-link-scope-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "17334434587124887543"
                            }
                          },
                          "parameters": {
                            "groupIds": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "networkInterfaceName": {
                              "type": "string"
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array"
                            },
                            "privateLinkServiceId": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('networkInterfaceName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('name'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[parameters('privateDnsZoneConfigs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('operationsProperties').subscriptionId, parameters('operationsProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-private-link-scope-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('operationsProperties').subscriptionId, parameters('operationsProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-law-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('deployRemoteAccess')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-remote-access-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "bastionHostPublicIPAddressAllocationMethod": {
                    "value": "Static"
                  },
                  "bastionHostPublicIPAddressAvailabilityZones": {
                    "value": "[parameters('bastionHostPublicIPAddressAvailabilityZones')]"
                  },
                  "bastionHostPublicIPAddressSkuName": {
                    "value": "Standard"
                  },
                  "bastionHostSubnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.bastionHostSubnetResourceId.value]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
                  },
                  "hubNetworkSecurityGroupResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubNetworkSecurityGroupResourceId.value]"
                  },
                  "hubProperties": {
                    "value": "[first(filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networks.value, lambda('network', equals(lambdaVariables('network').name, 'hub'))))]"
                  },
                  "hubSubnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubSubnetResourceId.value]"
                  },
                  "hybridUseBenefit": {
                    "value": "[parameters('hybridUseBenefit')]"
                  },
                  "linuxNetworkInterfacePrivateIPAddressAllocationMethod": {
                    "value": "[parameters('linuxNetworkInterfacePrivateIPAddressAllocationMethod')]"
                  },
                  "linuxVmAdminPasswordOrKey": {
                    "value": "[parameters('linuxVmAdminPasswordOrKey')]"
                  },
                  "linuxVmAdminUsername": {
                    "value": "[parameters('linuxVmAdminUsername')]"
                  },
                  "linuxVmAuthenticationType": {
                    "value": "[parameters('linuxVmAuthenticationType')]"
                  },
                  "linuxVmImageOffer": {
                    "value": "[parameters('linuxVmImageOffer')]"
                  },
                  "linuxVmImagePublisher": {
                    "value": "[parameters('linuxVmImagePublisher')]"
                  },
                  "linuxVmImageSku": {
                    "value": "[parameters('linuxVmImageSku')]"
                  },
                  "linuxVmImageVersion": {
                    "value": "[parameters('linuxVmImageVersion')]"
                  },
                  "linuxVmOsDiskCreateOption": {
                    "value": "[parameters('linuxVmOsDiskCreateOption')]"
                  },
                  "linuxVmOsDiskType": {
                    "value": "[parameters('linuxVmOsDiskType')]"
                  },
                  "linuxVmSize": {
                    "value": "[parameters('linuxVmSize')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "windowsNetworkInterfacePrivateIPAddressAllocationMethod": {
                    "value": "[parameters('windowsNetworkInterfacePrivateIPAddressAllocationMethod')]"
                  },
                  "windowsVmAdminPassword": {
                    "value": "[parameters('windowsVmAdminPassword')]"
                  },
                  "windowsVmAdminUsername": {
                    "value": "[parameters('windowsVmAdminUsername')]"
                  },
                  "windowsVmCreateOption": {
                    "value": "[parameters('windowsVmCreateOption')]"
                  },
                  "windowsVmOffer": {
                    "value": "[parameters('windowsVmOffer')]"
                  },
                  "windowsVmPublisher": {
                    "value": "[parameters('windowsVmPublisher')]"
                  },
                  "windowsVmSize": {
                    "value": "[parameters('windowsVmSize')]"
                  },
                  "windowsVmSku": {
                    "value": "[parameters('windowsVmSku')]"
                  },
                  "windowsVmStorageAccountType": {
                    "value": "[parameters('windowsVmStorageAccountType')]"
                  },
                  "windowsVmVersion": {
                    "value": "[parameters('windowsVmVersion')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "16169845730142749981"
                    }
                  },
                  "parameters": {
                    "bastionHostPublicIPAddressAllocationMethod": {
                      "type": "string"
                    },
                    "bastionHostPublicIPAddressAvailabilityZones": {
                      "type": "array"
                    },
                    "bastionHostPublicIPAddressSkuName": {
                      "type": "string"
                    },
                    "bastionHostSubnetResourceId": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "hubNetworkSecurityGroupResourceId": {
                      "type": "string"
                    },
                    "hubProperties": {
                      "type": "object"
                    },
                    "hubSubnetResourceId": {
                      "type": "string"
                    },
                    "hybridUseBenefit": {
                      "type": "bool"
                    },
                    "linuxNetworkInterfacePrivateIPAddressAllocationMethod": {
                      "type": "string"
                    },
                    "linuxVmAdminPasswordOrKey": {
                      "type": "securestring",
                      "minLength": 12
                    },
                    "linuxVmAdminUsername": {
                      "type": "string"
                    },
                    "linuxVmAuthenticationType": {
                      "type": "string",
                      "allowedValues": [
                        "sshPublicKey",
                        "password"
                      ]
                    },
                    "linuxVmImageOffer": {
                      "type": "string"
                    },
                    "linuxVmImagePublisher": {
                      "type": "string"
                    },
                    "linuxVmImageSku": {
                      "type": "string"
                    },
                    "linuxVmImageVersion": {
                      "type": "string"
                    },
                    "linuxVmOsDiskCreateOption": {
                      "type": "string"
                    },
                    "linuxVmOsDiskType": {
                      "type": "string"
                    },
                    "linuxVmSize": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "windowsNetworkInterfacePrivateIPAddressAllocationMethod": {
                      "type": "string"
                    },
                    "windowsVmAdminPassword": {
                      "type": "securestring",
                      "minLength": 12
                    },
                    "windowsVmAdminUsername": {
                      "type": "string"
                    },
                    "windowsVmCreateOption": {
                      "type": "string"
                    },
                    "windowsVmOffer": {
                      "type": "string"
                    },
                    "windowsVmPublisher": {
                      "type": "string"
                    },
                    "windowsVmSize": {
                      "type": "string"
                    },
                    "windowsVmSku": {
                      "type": "string"
                    },
                    "windowsVmStorageAccountType": {
                      "type": "string"
                    },
                    "windowsVmVersion": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "remoteAccess-bastionHost",
                      "subscriptionId": "[parameters('hubProperties').subscriptionId]",
                      "resourceGroup": "[parameters('hubProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "bastionHostSubnetResourceId": {
                            "value": "[parameters('bastionHostSubnetResourceId')]"
                          },
                          "ipConfigurationName": {
                            "value": "[parameters('hubProperties').bastionHostIPConfigurationName]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('hubProperties').bastionHostName]"
                          },
                          "publicIPAddressAllocationMethod": {
                            "value": "[parameters('bastionHostPublicIPAddressAllocationMethod')]"
                          },
                          "publicIPAddressAvailabilityZones": {
                            "value": "[parameters('bastionHostPublicIPAddressAvailabilityZones')]"
                          },
                          "publicIPAddressName": {
                            "value": "[parameters('hubProperties').bastionHostPublicIPAddressName]"
                          },
                          "publicIPAddressSkuName": {
                            "value": "[parameters('bastionHostPublicIPAddressSkuName')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "1234518262680018356"
                            }
                          },
                          "parameters": {
                            "bastionHostSubnetResourceId": {
                              "type": "string"
                            },
                            "ipConfigurationName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "publicIPAddressAllocationMethod": {
                              "type": "string"
                            },
                            "publicIPAddressAvailabilityZones": {
                              "type": "array"
                            },
                            "publicIPAddressName": {
                              "type": "string"
                            },
                            "publicIPAddressSkuName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('publicIPAddressName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('publicIPAddressSkuName')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('publicIPAddressAllocationMethod')]"
                              },
                              "zones": "[parameters('publicIPAddressAvailabilityZones')]"
                            },
                            {
                              "type": "Microsoft.Network/bastionHosts",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "[parameters('ipConfigurationName')]",
                                    "properties": {
                                      "subnet": {
                                        "id": "[parameters('bastionHostSubnetResourceId')]"
                                      },
                                      "publicIPAddress": {
                                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                                      }
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "remoteAccess-linuxNetworkInterface",
                      "subscriptionId": "[parameters('hubProperties').subscriptionId]",
                      "resourceGroup": "[parameters('hubProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "ipConfigurationName": {
                            "value": "[parameters('hubProperties').linuxNetworkInterfaceIpConfigurationName]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('hubProperties').linuxNetworkInterfaceName]"
                          },
                          "networkSecurityGroupId": {
                            "value": "[parameters('hubNetworkSecurityGroupResourceId')]"
                          },
                          "privateIPAddressAllocationMethod": {
                            "value": "[parameters('linuxNetworkInterfacePrivateIPAddressAllocationMethod')]"
                          },
                          "subnetId": {
                            "value": "[parameters('hubSubnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "10828172865350023243"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "ipConfigurationName": {
                              "type": "string"
                            },
                            "subnetId": {
                              "type": "string"
                            },
                            "networkSecurityGroupId": {
                              "type": "string"
                            },
                            "privateIPAddressAllocationMethod": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "[parameters('ipConfigurationName')]",
                                    "properties": {
                                      "subnet": {
                                        "id": "[parameters('subnetId')]"
                                      },
                                      "privateIPAllocationMethod": "[parameters('privateIPAddressAllocationMethod')]"
                                    }
                                  }
                                ],
                                "networkSecurityGroup": {
                                  "id": "[parameters('networkSecurityGroupId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "remoteAccess-linuxVirtualMachine",
                      "subscriptionId": "[parameters('hubProperties').subscriptionId]",
                      "resourceGroup": "[parameters('hubProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "adminPasswordOrKey": {
                            "value": "[parameters('linuxVmAdminPasswordOrKey')]"
                          },
                          "adminUsername": {
                            "value": "[parameters('linuxVmAdminUsername')]"
                          },
                          "authenticationType": {
                            "value": "[parameters('linuxVmAuthenticationType')]"
                          },
                          "diskEncryptionSetResourceId": {
                            "value": "[parameters('diskEncryptionSetResourceId')]"
                          },
                          "diskName": {
                            "value": "[parameters('hubProperties').linuxDiskName]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceId')]"
                          },
                          "name": {
                            "value": "[parameters('hubProperties').linuxVmName]"
                          },
                          "networkInterfaceName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubProperties').subscriptionId, parameters('hubProperties').resourceGroupName), 'Microsoft.Resources/deployments', 'remoteAccess-linuxNetworkInterface'), '2022-09-01').outputs.name.value]"
                          },
                          "osDiskCreateOption": {
                            "value": "[parameters('linuxVmOsDiskCreateOption')]"
                          },
                          "osDiskType": {
                            "value": "[parameters('linuxVmOsDiskType')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "vmImageOffer": {
                            "value": "[parameters('linuxVmImageOffer')]"
                          },
                          "vmImagePublisher": {
                            "value": "[parameters('linuxVmImagePublisher')]"
                          },
                          "vmImageSku": {
                            "value": "[parameters('linuxVmImageSku')]"
                          },
                          "vmImageVersion": {
                            "value": "[parameters('linuxVmImageVersion')]"
                          },
                          "vmSize": {
                            "value": "[parameters('linuxVmSize')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "7442640059400837072"
                            }
                          },
                          "parameters": {
                            "adminPasswordOrKey": {
                              "type": "securestring",
                              "minLength": 12
                            },
                            "adminUsername": {
                              "type": "string"
                            },
                            "authenticationType": {
                              "type": "string",
                              "allowedValues": [
                                "sshPublicKey",
                                "password"
                              ]
                            },
                            "diskEncryptionSetResourceId": {
                              "type": "string"
                            },
                            "diskName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "networkInterfaceName": {
                              "type": "string"
                            },
                            "osDiskCreateOption": {
                              "type": "string"
                            },
                            "osDiskType": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "vmImageOffer": {
                              "type": "string"
                            },
                            "vmImagePublisher": {
                              "type": "string"
                            },
                            "vmImageSku": {
                              "type": "string"
                            },
                            "vmImageVersion": {
                              "type": "string"
                            },
                            "vmSize": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "linuxConfiguration": {
                              "disablePasswordAuthentication": true,
                              "ssh": {
                                "publicKeys": [
                                  {
                                    "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                                    "keyData": "[parameters('adminPasswordOrKey')]"
                                  }
                                ]
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2021-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": false
                                  }
                                },
                                "hardwareProfile": {
                                  "vmSize": "[parameters('vmSize')]"
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]",
                                      "properties": {
                                        "deleteOption": "Delete"
                                      }
                                    }
                                  ]
                                },
                                "osProfile": {
                                  "computerName": "[parameters('name')]",
                                  "adminUsername": "[parameters('adminUsername')]",
                                  "adminPassword": "[parameters('adminPasswordOrKey')]",
                                  "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]"
                                },
                                "securityProfile": {
                                  "uefiSettings": {
                                    "secureBootEnabled": true,
                                    "vTpmEnabled": true
                                  },
                                  "securityType": "trustedLaunch",
                                  "encryptionAtHost": true
                                },
                                "storageProfile": {
                                  "osDisk": {
                                    "caching": "ReadWrite",
                                    "createOption": "[parameters('osDiskCreateOption')]",
                                    "deleteOption": "Delete",
                                    "managedDisk": {
                                      "diskEncryptionSet": {
                                        "id": "[parameters('diskEncryptionSetResourceId')]"
                                      },
                                      "storageAccountType": "[parameters('osDiskType')]"
                                    },
                                    "name": "[parameters('diskName')]",
                                    "osType": "Linux"
                                  },
                                  "imageReference": {
                                    "publisher": "[parameters('vmImagePublisher')]",
                                    "offer": "[parameters('vmImageOffer')]",
                                    "sku": "[parameters('vmImageSku')]",
                                    "version": "[parameters('vmImageVersion')]"
                                  }
                                },
                                "licenseType": null
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'GuestAttestation')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.Security.LinuxAttestation",
                                "type": "GuestAttestation",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "AttestationConfig": {
                                    "MaaSettings": {
                                      "maaEndpoint": "",
                                      "maaTenantName": "GuestAttestation"
                                    },
                                    "AscSettings": {
                                      "ascReportingEndpoint": "",
                                      "ascReportingFrequency": ""
                                    },
                                    "useCustomToken": "false",
                                    "disableAlerts": "false"
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'AzurePolicyforLinux')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.GuestConfiguration",
                                "type": "ConfigurationforLinux",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true,
                                "enableAutomaticUpgrade": true
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'Microsoft.Azure.NetworkWatcher')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.NetworkWatcher",
                                "type": "NetworkWatcherAgentLinux",
                                "typeHandlerVersion": "1.4"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), 'AzurePolicyforLinux')]",
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'OMSExtension')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                                "type": "OmsAgentForLinux",
                                "typeHandlerVersion": "1.17",
                                "settings": {
                                  "workspaceId": "[reference(parameters('logAnalyticsWorkspaceId'), '2015-11-01-preview').customerId]",
                                  "stopOnMultipleConnections": true
                                },
                                "protectedSettings": {
                                  "workspaceKey": "[listKeys(parameters('logAnalyticsWorkspaceId'), '2015-11-01-preview').primarySharedKey]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), 'Microsoft.Azure.NetworkWatcher')]",
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'DependencyAgentLinux')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                                "type": "DependencyAgentLinux",
                                "typeHandlerVersion": "9.5",
                                "autoUpgradeMinorVersion": true
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), 'OMSExtension')]",
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "adminUsername": {
                              "type": "string",
                              "value": "[parameters('adminUsername')]"
                            },
                            "authenticationType": {
                              "type": "string",
                              "value": "[parameters('authenticationType')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubProperties').subscriptionId, parameters('hubProperties').resourceGroupName), 'Microsoft.Resources/deployments', 'remoteAccess-linuxNetworkInterface')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "remoteAccess-windowsNetworkInterface",
                      "subscriptionId": "[parameters('hubProperties').subscriptionId]",
                      "resourceGroup": "[parameters('hubProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "ipConfigurationName": {
                            "value": "[parameters('hubProperties').windowsNetworkInterfaceIpConfigurationName]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('hubProperties').windowsNetworkInterfaceName]"
                          },
                          "networkSecurityGroupId": {
                            "value": "[parameters('hubNetworkSecurityGroupResourceId')]"
                          },
                          "privateIPAddressAllocationMethod": {
                            "value": "[parameters('windowsNetworkInterfacePrivateIPAddressAllocationMethod')]"
                          },
                          "subnetId": {
                            "value": "[parameters('hubSubnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "10828172865350023243"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "ipConfigurationName": {
                              "type": "string"
                            },
                            "subnetId": {
                              "type": "string"
                            },
                            "networkSecurityGroupId": {
                              "type": "string"
                            },
                            "privateIPAddressAllocationMethod": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "[parameters('ipConfigurationName')]",
                                    "properties": {
                                      "subnet": {
                                        "id": "[parameters('subnetId')]"
                                      },
                                      "privateIPAllocationMethod": "[parameters('privateIPAddressAllocationMethod')]"
                                    }
                                  }
                                ],
                                "networkSecurityGroup": {
                                  "id": "[parameters('networkSecurityGroupId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "remoteAccess-windowsVirtualMachine",
                      "subscriptionId": "[parameters('hubProperties').subscriptionId]",
                      "resourceGroup": "[parameters('hubProperties').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "adminPassword": {
                            "value": "[parameters('windowsVmAdminPassword')]"
                          },
                          "adminUsername": {
                            "value": "[parameters('windowsVmAdminUsername')]"
                          },
                          "createOption": {
                            "value": "[parameters('windowsVmCreateOption')]"
                          },
                          "diskEncryptionSetResourceId": {
                            "value": "[parameters('diskEncryptionSetResourceId')]"
                          },
                          "diskName": {
                            "value": "[parameters('hubProperties').windowsDiskName]"
                          },
                          "hybridUseBenefit": {
                            "value": "[parameters('hybridUseBenefit')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceId')]"
                          },
                          "name": {
                            "value": "[parameters('hubProperties').windowsVmName]"
                          },
                          "networkInterfaceName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubProperties').subscriptionId, parameters('hubProperties').resourceGroupName), 'Microsoft.Resources/deployments', 'remoteAccess-windowsNetworkInterface'), '2022-09-01').outputs.name.value]"
                          },
                          "offer": {
                            "value": "[parameters('windowsVmOffer')]"
                          },
                          "publisher": {
                            "value": "[parameters('windowsVmPublisher')]"
                          },
                          "size": {
                            "value": "[parameters('windowsVmSize')]"
                          },
                          "sku": {
                            "value": "[parameters('windowsVmSku')]"
                          },
                          "storageAccountType": {
                            "value": "[parameters('windowsVmStorageAccountType')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "version": {
                            "value": "[parameters('windowsVmVersion')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "12555507350677928020"
                            }
                          },
                          "parameters": {
                            "adminPassword": {
                              "type": "securestring",
                              "minLength": 12
                            },
                            "adminUsername": {
                              "type": "string"
                            },
                            "createOption": {
                              "type": "string"
                            },
                            "dataDisks": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "diskEncryptionSetResourceId": {
                              "type": "string"
                            },
                            "diskName": {
                              "type": "string"
                            },
                            "hybridUseBenefit": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "networkInterfaceName": {
                              "type": "string"
                            },
                            "offer": {
                              "type": "string"
                            },
                            "publisher": {
                              "type": "string"
                            },
                            "size": {
                              "type": "string"
                            },
                            "sku": {
                              "type": "string"
                            },
                            "storageAccountType": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "version": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2021-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": false
                                  }
                                },
                                "hardwareProfile": {
                                  "vmSize": "[parameters('size')]"
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]",
                                      "properties": {
                                        "deleteOption": "Delete"
                                      }
                                    }
                                  ]
                                },
                                "osProfile": {
                                  "computerName": "[take(parameters('name'), 15)]",
                                  "adminUsername": "[parameters('adminUsername')]",
                                  "adminPassword": "[parameters('adminPassword')]"
                                },
                                "securityProfile": {
                                  "uefiSettings": {
                                    "secureBootEnabled": true,
                                    "vTpmEnabled": true
                                  },
                                  "securityType": "trustedLaunch",
                                  "encryptionAtHost": true
                                },
                                "storageProfile": {
                                  "imageReference": {
                                    "publisher": "[parameters('publisher')]",
                                    "offer": "[parameters('offer')]",
                                    "sku": "[parameters('sku')]",
                                    "version": "[parameters('version')]"
                                  },
                                  "osDisk": {
                                    "caching": "ReadWrite",
                                    "createOption": "[parameters('createOption')]",
                                    "deleteOption": "Delete",
                                    "managedDisk": {
                                      "diskEncryptionSet": {
                                        "id": "[parameters('diskEncryptionSetResourceId')]"
                                      },
                                      "storageAccountType": "[parameters('storageAccountType')]"
                                    },
                                    "name": "[parameters('diskName')]",
                                    "osType": "Windows"
                                  },
                                  "dataDisks": "[parameters('dataDisks')]"
                                },
                                "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'GuestAttestation')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                                "type": "GuestAttestation",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "AttestationConfig": {
                                    "MaaSettings": {
                                      "maaEndpoint": "",
                                      "maaTenantName": "GuestAttestation"
                                    },
                                    "AscSettings": {
                                      "ascReportingEndpoint": "",
                                      "ascReportingFrequency": ""
                                    },
                                    "useCustomToken": "false",
                                    "disableAlerts": "false"
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'DependencyAgentWindows')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                                "type": "DependencyAgentWindows",
                                "typeHandlerVersion": "9.5",
                                "autoUpgradeMinorVersion": true
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'AzurePolicyforWindows')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.GuestConfiguration",
                                "type": "ConfigurationforWindows",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true,
                                "enableAutomaticUpgrade": true
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'MMAExtension')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                                "type": "MicrosoftMonitoringAgent",
                                "typeHandlerVersion": "1.0",
                                "settings": {
                                  "workspaceId": "[reference(parameters('logAnalyticsWorkspaceId'), '2015-11-01-preview').customerId]",
                                  "stopOnMultipleConnections": true
                                },
                                "protectedSettings": {
                                  "workspaceKey": "[listKeys(parameters('logAnalyticsWorkspaceId'), '2015-11-01-preview').primarySharedKey]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'Microsoft.Azure.NetworkWatcher')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.NetworkWatcher",
                                "type": "NetworkWatcherAgentWindows",
                                "typeHandlerVersion": "1.4"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubProperties').subscriptionId, parameters('hubProperties').resourceGroupName), 'Microsoft.Resources/deployments', 'remoteAccess-windowsNetworkInterface')]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-log-storage-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "blobsPrivateDnsZoneResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZoneResourceIds.value.blob]"
                  },
                  "deployIdentity": {
                    "value": "[parameters('deployIdentity')]"
                  },
                  "keyVaultUri": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logStorageSkuName": {
                    "value": "[parameters('logStorageSkuName')]"
                  },
                  "networks": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networks.value]"
                  },
                  "serviceToken": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-convention-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubSubnetResourceId.value]"
                  },
                  "tablesPrivateDnsZoneResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZoneResourceIds.value.table]"
                  },
                  "tags": {
                    "value": "[variables('calculatedTags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "15215887488033870389"
                    }
                  },
                  "parameters": {
                    "blobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "deployIdentity": {
                      "type": "bool"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "logStorageSkuName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networks": {
                      "type": "array"
                    },
                    "serviceToken": {
                      "type": "string"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tablesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "storageAccount",
                        "count": "[length(parameters('networks'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "storage",
                      "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                      "resourceGroup": "[parameters('networks')[copyIndex()].resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "blobsPrivateDnsZoneResourceId": {
                            "value": "[parameters('blobsPrivateDnsZoneResourceId')]"
                          },
                          "keyVaultUri": {
                            "value": "[parameters('keyVaultUri')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "serviceToken": {
                            "value": "[parameters('serviceToken')]"
                          },
                          "skuName": {
                            "value": "[parameters('logStorageSkuName')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('networks')[copyIndex()].logStorageAccountName]"
                          },
                          "storageAccountNetworkInterfaceNamePrefix": {
                            "value": "[parameters('networks')[copyIndex()].logStorageAccountNetworkInterfaceNamePrefix]"
                          },
                          "storageAccountPrivateEndpointNamePrefix": {
                            "value": "[parameters('networks')[copyIndex()].logStorageAccountPrivateEndpointNamePrefix]"
                          },
                          "storageEncryptionKeyName": {
                            "value": "[parameters('storageEncryptionKeyName')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tablesPrivateDnsZoneResourceId": {
                            "value": "[parameters('tablesPrivateDnsZoneResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityResourceId": {
                            "value": "[parameters('userAssignedIdentityResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "6728136650948993728"
                            }
                          },
                          "parameters": {
                            "blobsPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "keyVaultUri": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "serviceToken": {
                              "type": "string"
                            },
                            "skuName": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "storageAccountNetworkInterfaceNamePrefix": {
                              "type": "string"
                            },
                            "storageAccountPrivateEndpointNamePrefix": {
                              "type": "string"
                            },
                            "storageEncryptionKeyName": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tablesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "zones": [
                              "[parameters('blobsPrivateDnsZoneResourceId')]",
                              "[parameters('tablesPrivateDnsZoneResourceId')]"
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('storageAccountName')]",
                              "location": "[parameters('location')]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "kind": "StorageV2",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "accessTier": "Hot",
                                "allowBlobPublicAccess": false,
                                "allowCrossTenantReplication": false,
                                "allowedCopyScope": "PrivateLink",
                                "allowSharedKeyAccess": true,
                                "defaultToOAuthAuthentication": false,
                                "dnsEndpointType": "Standard",
                                "encryption": {
                                  "identity": {
                                    "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId')]"
                                  },
                                  "keySource": "Microsoft.KeyVault",
                                  "keyvaultproperties": {
                                    "keyvaulturi": "[parameters('keyVaultUri')]",
                                    "keyname": "[parameters('storageEncryptionKeyName')]"
                                  },
                                  "requireInfrastructureEncryption": true,
                                  "services": {
                                    "blob": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "file": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "queue": {
                                      "keyType": "Account",
                                      "enabled": true
                                    },
                                    "table": {
                                      "keyType": "Account",
                                      "enabled": true
                                    }
                                  }
                                },
                                "minimumTlsVersion": "TLS1_2",
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "virtualNetworkRules": [],
                                  "ipRules": [],
                                  "defaultAction": "Deny"
                                },
                                "publicNetworkAccess": "Disabled",
                                "supportsHttpsTrafficOnly": true
                              }
                            },
                            {
                              "copy": {
                                "name": "privateEndpoints",
                                "count": "[length(variables('zones'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "customNetworkInterfaceName": "[replace(parameters('storageAccountNetworkInterfaceNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                                      "groupIds": [
                                        "[split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]]"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneGroups",
                                "count": "[length(variables('zones'))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]), parameters('storageAccountName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[variables('zones')[copyIndex()]]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "storageAccountResourceIds": {
                      "type": "array",
                      "value": "[union(createArray(resourceId(parameters('networks')[0].subscriptionId, parameters('networks')[0].resourceGroupName, 'Microsoft.Storage/storageAccounts', parameters('networks')[0].logStorageAccountName), resourceId(parameters('networks')[1].subscriptionId, parameters('networks')[1].resourceGroupName, 'Microsoft.Storage/storageAccounts', parameters('networks')[1].logStorageAccountName), resourceId(parameters('networks')[2].subscriptionId, parameters('networks')[2].resourceGroupName, 'Microsoft.Storage/storageAccounts', parameters('networks')[2].logStorageAccountName)), if(parameters('deployIdentity'), createArray(resourceId(parameters('networks')[3].subscriptionId, parameters('networks')[3].resourceGroupName, 'Microsoft.Storage/storageAccounts', parameters('networks')[3].logStorageAccountName)), createArray()))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-convention-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-remote-access-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-resource-diag-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "firewallDiagnosticsLogs": {
                    "value": "[parameters('firewallDiagnosticsLogs')]"
                  },
                  "firewallDiagnosticsMetrics": {
                    "value": "[parameters('firewallDiagnosticsMetrics')]"
                  },
                  "KeyVaultName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.KeyVaultName.value]"
                  },
                  "keyVaultDiagnosticLogs": {
                    "value": "[parameters('KeyVaultDiagnosticsLogs')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
                  },
                  "networks": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networks.value]"
                  },
                  "networkSecurityGroupDiagnosticsLogs": {
                    "value": "[parameters('hubNetworkSecurityGroupDiagnosticsLogs')]"
                  },
                  "networkSecurityGroupDiagnosticsMetrics": {
                    "value": "[parameters('hubNetworkSecurityGroupDiagnosticsMetrics')]"
                  },
                  "publicIPAddressDiagnosticsLogs": {
                    "value": "[parameters('publicIPAddressDiagnosticsLogs')]"
                  },
                  "publicIPAddressDiagnosticsMetrics": {
                    "value": "[parameters('publicIPAddressDiagnosticsMetrics')]"
                  },
                  "storageAccountResourceIds": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-log-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountResourceIds.value]"
                  },
                  "supportedClouds": {
                    "value": "[parameters('supportedClouds')]"
                  },
                  "virtualNetworkDiagnosticsLogs": {
                    "value": "[parameters('hubVirtualNetworkDiagnosticsLogs')]"
                  },
                  "virtualNetworkDiagnosticsMetrics": {
                    "value": "[parameters('hubVirtualNetworkDiagnosticsMetrics')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "49100111797787087"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "firewallDiagnosticsLogs": {
                      "type": "array"
                    },
                    "firewallDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "KeyVaultName": {
                      "type": "string"
                    },
                    "keyVaultDiagnosticLogs": {
                      "type": "array"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "networks": {
                      "type": "array"
                    },
                    "networkSecurityGroupDiagnosticsLogs": {
                      "type": "array"
                    },
                    "networkSecurityGroupDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "publicIPAddressDiagnosticsLogs": {
                      "type": "array"
                    },
                    "publicIPAddressDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "storageAccountResourceIds": {
                      "type": "array"
                    },
                    "supportedClouds": {
                      "type": "array"
                    },
                    "virtualNetworkDiagnosticsLogs": {
                      "type": "array"
                    },
                    "virtualNetworkDiagnosticsMetrics": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "hub": "[first(filter(parameters('networks'), lambda('network', equals(lambdaVariables('network').name, 'hub'))))]",
                    "hubResourceGroupName": "[variables('hub').resourceGroupName]",
                    "hubSubscriptionId": "[variables('hub').subscriptionId]",
                    "operations": "[first(filter(parameters('networks'), lambda('network', equals(lambdaVariables('network').name, 'operations'))))]",
                    "publicIPAddressNames": [
                      "[variables('hub').firewallClientPublicIPAddressName]",
                      "[variables('hub').firewallManagementPublicIPAddressName]"
                    ]
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "activityLogDiagnosticSettings",
                        "count": "[length(parameters('networks'))]"
                      },
                      "condition": "[parameters('networks')[copyIndex()].deployUniqueResources]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-activity-diags-{0}-{1}', parameters('networks')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "supportedClouds": {
                            "value": "[parameters('supportedClouds')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "14852926421482749735"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceId": {
                              "type": "string"
                            },
                            "supportedClouds": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[contains(parameters('supportedClouds'), environment().name)]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "name": "[format('diag-activity-log-{0}', subscription().subscriptionId)]",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "logs": [
                                  {
                                    "category": "Administrative",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Security",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ServiceHealth",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Alert",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Recommendation",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Policy",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Autoscale",
                                    "enabled": true
                                  },
                                  {
                                    "category": "ResourceHealth",
                                    "enabled": true
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-law-diag-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('operations').subscriptionId]",
                      "resourceGroup": "[variables('operations').resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "diagnosticStorageAccountName": {
                            "value": "[variables('operations').logStorageAccountName]"
                          },
                          "logAnalyticsWorkspaceName": {
                            "value": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]]"
                          },
                          "supportedClouds": {
                            "value": "[parameters('supportedClouds')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "7596701148342767595"
                            }
                          },
                          "parameters": {
                            "diagnosticStorageAccountName": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceName": {
                              "type": "string"
                            },
                            "supportedClouds": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[contains(parameters('supportedClouds'), environment().name)]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('logAnalyticsWorkspaceName'))]",
                              "name": "[format('diag-{0}', parameters('logAnalyticsWorkspaceName'))]",
                              "properties": {
                                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                                "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('diagnosticStorageAccountName'))]",
                                "logs": [
                                  {
                                    "category": "Audit",
                                    "enabled": true
                                  }
                                ],
                                "metrics": [
                                  {
                                    "category": "AllMetrics",
                                    "enabled": true
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "networkSecurityGroupDiagnostics",
                        "count": "[length(parameters('networks'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-nsg-diags-{0}-{1}', parameters('networks')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                      "resourceGroup": "[parameters('networks')[copyIndex()].resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                          },
                          "logStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceIds')[copyIndex()]]"
                          },
                          "metrics": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
                          },
                          "name": {
                            "value": "[parameters('networks')[copyIndex()].networkSecurityGroupName]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "14146627423781433804"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "logStorageAccountResourceId": {
                              "type": "string"
                            },
                            "metrics": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[format('{0}-diagnostics', parameters('name'))]",
                              "properties": {
                                "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "virtualNetworkDiagnostics",
                        "count": "[length(parameters('networks'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-vnet-diags-{0}-{1}', parameters('networks')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                      "resourceGroup": "[parameters('networks')[copyIndex()].resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                          },
                          "logStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceIds')[copyIndex()]]"
                          },
                          "metrics": {
                            "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                          },
                          "name": {
                            "value": "[parameters('networks')[copyIndex()].virtualNetworkName]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "17731844489242416935"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "logStorageAccountResourceId": {
                              "type": "string"
                            },
                            "metrics": {
                              "type": "array"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                              "name": "[format('{0}-diagnostics', parameters('name'))]",
                              "properties": {
                                "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "publicIpAddressDiagnostics",
                        "count": "[length(variables('publicIPAddressNames'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-pip-diags-{0}-{1}-{2}', split(variables('publicIPAddressNames')[copyIndex()], '-')[2], split(variables('publicIPAddressNames')[copyIndex()], '-')[3], parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('hubSubscriptionId')]",
                      "resourceGroup": "[variables('hubResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hubStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceIds')[0]]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "name": {
                            "value": "[variables('publicIPAddressNames')[copyIndex()]]"
                          },
                          "publicIPAddressDiagnosticsLogs": {
                            "value": "[parameters('publicIPAddressDiagnosticsLogs')]"
                          },
                          "publicIPAddressDiagnosticsMetrics": {
                            "value": "[parameters('publicIPAddressDiagnosticsMetrics')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "17767559360664239960"
                            }
                          },
                          "parameters": {
                            "hubStorageAccountResourceId": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "publicIPAddressDiagnosticsLogs": {
                              "type": "array"
                            },
                            "publicIPAddressDiagnosticsMetrics": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                              "name": "[format('{0}-diagnostics', parameters('name'))]",
                              "properties": {
                                "storageAccountId": "[parameters('hubStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('publicIPAddressDiagnosticsLogs')]",
                                "metrics": "[parameters('publicIPAddressDiagnosticsMetrics')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-afw-diags-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('hubSubscriptionId')]",
                      "resourceGroup": "[variables('hubResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('firewallDiagnosticsLogs')]"
                          },
                          "logStorageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceIds')[0]]"
                          },
                          "metrics": {
                            "value": "[parameters('firewallDiagnosticsMetrics')]"
                          },
                          "name": {
                            "value": "[variables('hub').firewallName]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "15968308489764733204"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "logStorageAccountResourceId": {
                              "type": "string"
                            },
                            "metrics": {
                              "type": "array"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('name'))]",
                              "name": "[format('{0}-diagnostics', parameters('name'))]",
                              "properties": {
                                "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]",
                                "metrics": "[parameters('metrics')]"
                              }
                            }
                          ],
                          "outputs": {
                            "privateIPAddress": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2021-02-01').ipConfigurations[0].properties.privateIPAddress]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-kv-diags-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('hubSubscriptionId')]",
                      "resourceGroup": "[variables('hubResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "logs": {
                            "value": "[parameters('keyVaultDiagnosticLogs')]"
                          },
                          "keyVaultstorageAccountId": {
                            "value": "[parameters('storageAccountResourceIds')[0]]"
                          },
                          "name": {
                            "value": "[parameters('KeyVaultName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "9848944155815832346"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "logs": {
                              "type": "array"
                            },
                            "name": {
                              "type": "string"
                            },
                            "keyVaultstorageAccountId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                              "name": "[format('{0}-diagnostics', parameters('name'))]",
                              "properties": {
                                "storageAccountId": "[parameters('keyVaultstorageAccountId')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                "logs": "[parameters('logs')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-log-storage-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('deployPolicy')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-policies-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
                  },
                  "networks": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networks.value]"
                  },
                  "policy": {
                    "value": "[parameters('policy')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "2594345850908952645"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "networks": {
                      "type": "array"
                    },
                    "policy": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "policyAssignment",
                        "count": "[length(parameters('networks'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('assign-policy-{0}-{1}', parameters('networks')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                      "resourceGroup": "[parameters('networks')[copyIndex()].resourceGroupName]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "builtInAssignment": {
                            "value": "[parameters('policy')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "14286124867588017135"
                            }
                          },
                          "parameters": {
                            "builtInAssignment": {
                              "type": "string",
                              "defaultValue": "NISTRev4",
                              "allowedValues": [
                                "NISTRev4",
                                "NISTRev5",
                                "IL5",
                                "CMMC"
                              ],
                              "metadata": {
                                "description": "[NISTRev4/NISTRev5/IL5/CMMC] Built-in policy assignments to assign, default is NISTRev4. IL5 is only available for AzureUsGovernment and will switch to NISTRev4 if tried in AzureCloud."
                              }
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "deployRemediation": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Starts a policy remediation for the VM Agent policies in hub RG. Set to false by default since this is time consuming in deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "The location of this resource"
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": "    {\r\n        \"listOfMembersToExcludeFromWindowsVMAdministratorsGroup\": \r\n        {\r\n        \"value\": \"admin\"\r\n        },\r\n        \"listOfMembersToIncludeInWindowsVMAdministratorsGroup\": \r\n        {\r\n        \"value\": \"azureuser\"\r\n        },\r\n        \"logAnalyticsWorkspaceIdforVMReporting\": \r\n        {\r\n        \"value\": \"<LAWORKSPACE>\"\r\n        },\r\n        \"IncludeArcMachines\": \r\n        {\r\n            \"value\": \"true\"\r\n        },\r\n        \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": \r\n        {\r\n            \"value\": \"1.2\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": \r\n        {\r\n            \"value\": \"Compliant\"\r\n        },\r\n        \"requiredRetentionDays\": \r\n        {\r\n            \"value\": \"365\"\r\n        },\r\n        \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": \r\n        {\r\n            \"value\": \"NetworkWatcherRG\"\r\n        }\r\n    }",
                            "$fxv#1": "    {\r\n        \"IncludeArcMachines\": \r\n        {\r\n            \"value\": \"true\"\r\n        },\r\n        \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": \r\n        {\r\n            \"value\": \"1.2\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": \r\n        {\r\n            \"value\": \"Compliant\"\r\n        },\r\n        \"requiredRetentionDays\": \r\n        {\r\n            \"value\": \"365\"\r\n        },\r\n        \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": \r\n        {\r\n            \"value\": \"NetworkWatcherRG\"\r\n        }\r\n    }",
                            "$fxv#2": "{\r\n    \"IncludeArcMachines\" : { \r\n        \"value\" : \"false\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\" : { \r\n        \"value\" : \"Compliant\"\r\n        },\r\n        \"MinimumTLSVersionForWindowsServers\" : { \r\n        \"value\" : \"1.2\"\r\n        },\r\n        \"requiredRetentionDays\" : { \r\n        \"value\" : \"365\"\r\n        },\r\n        \"effect-febd0533-8e55-448f-b837-bd0e06f16469\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"allowedContainerImagesRegex-febd0533-8e55-448f-b837-bd0e06f16469\" : { \r\n        \"value\" : \"^(.+){0}$\"\r\n        },\r\n        \"effect-95edb821-ddaf-4404-9732-666045e056b4\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-440b515e-a580-421e-abeb-b159a61ddcbc\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-233a2a17-77ca-4fb1-9b6b-69223d272a44\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"cpuLimit-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"0\"\r\n        },\r\n        \"memoryLimit-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"0\"\r\n        },\r\n        \"effect-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"runAsUserRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"MustRunAsNonRoot\"\r\n        },\r\n        \"runAsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"supplementalGroupsRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"fsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"effect-1c6e92c9-99f0-4e55-9cf2-0c234dc48f99\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-47a1ee2f-2a2a-4576-bf2a-e0e36709c2b8\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-df49d893-a74c-421d-bc95-c663042e5b80\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-c26596ff-4d70-4e6a-9a30-c2506bd2f80c\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-511f5417-5d12-434d-ab2e-816901e72a5e\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-82985f06-dc18-4a48-bc1c-b9f4f0098cfe\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-098fc59e-46c7-4d99-9b16-64990e543d75\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"NetworkWatcherResourceGroupName\" : { \r\n        \"value\" : \"NetworkWatcherRG\"\r\n        },\r\n        \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n        \"value\" : \"enabled\"\r\n        },\r\n        \"aadAuthenticationInServiceFabricMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-71ef260a-8f18-47b7-abcb-62d0673d94dc\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-862e97cf-49fc-4a5c-9de4-40d4e2e7c8eb\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-d9da03a1-f3c3-412a-9709-947156872263\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-b4ac1030-89c5-4697-8e00-28b5ba6a8811\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-ea0dfaed-95fb-448c-934e-d6e713ce393d\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-41425d9f-d1a5-499a-9932-f8ed8453932c\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-fc4d8e41-e223-45ea-9bf5-eada37891d87\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-86efb160-8de7-451d-bc08-5d475b0aadae\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-4ec52d6d-beb7-40c4-9a9e-fe753254690e\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-64d314f6-6062-4780-a861-c23e8951bee5\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1fd32ebd-e4c3-4e13-a54a-d7422d4d95f6\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-fa298e57-9444-42ba-bf04-86e8470e32c7\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1f905d99-2ab7-462c-a6b0-f709acca6c8f\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ba769a63-b8cc-4b2d-abf6-ac33c7204be8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0aa61e00-0a01-4a3c-9945-e93cffedf0e6\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-47031206-ce96-41f8-861b-6a915f3de284\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-51522a96-0869-4791-82f3-981000c2c67f\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-b5ec538c-daa0-4006-8596-35468b9148e8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-56a5ee18-2ae6-4810-86f7-18e39ce5629b\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-2e94d99a-8a36-4563-bc77-810d8893b671\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1fafeaf6-7927-4059-a50a-8eb2a7a6f2b5\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-99e9ccd8-3db9-4592-b0d1-14b1715a4d8a\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1f68a601-6e6d-4e42-babf-3f643a047ea2\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ca91455f-eace-4f96-be59-e6e2c35b4816\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-702dd420-7fcc-42c5-afe8-4026edd20fe0\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"diagnosticsLogsInRedisCacheMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"secureTransferToStorageAccountMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-7d092e0a-7acd-40d2-a975-dca21cae48c4\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-2a1a9cdf-e04d-429a-8416-3bfb72a1b26f\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"disableUnrestrictedNetworkToStorageAccountMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-55615ac9-af46-4a59-874e-391cc3dfb490\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1b8ca024-1d5c-4dec-8995-b1a932b41780\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-53503636-bcc9-4748-9663-5348217f160f\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-40cec1dd-a100-4920-b15b-3024fe8901ab\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-a049bf77-880b-470f-ba6d-9f21c530cf83\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ee980b6d-0eca-4501-8d54-f6290fd512c3\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1d84d5fb-01f6-4d12-ba4f-4a26081d403d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-37e0d2fe-28a5-43d6-a273-67d37d1f5606\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"identityDesignateMoreThanOneOwnerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"diskEncryptionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"emailNotificationToSubscriptionOwnerHighSeverityAlertsEnabledEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlDbEncryptionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vulnerabilityAssessmentOnManagedInstanceMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePHPVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"aadAuthenticationInSqlServerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vmssEndpointProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vmssOsVulnerabilitiesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"adaptiveApplicationControlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForPostgreSQLEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"ensureJavaVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityDesignateLessThanOwnersMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"securityContactEmailAddressForSubscriptionEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppRestrictCORSAccessMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithWritePermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithReadPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveDeprecatedAccountMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"ensurePythonVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePythonVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePHPVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePythonVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForMySQLEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"systemUpdatesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureJavaVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForWritePermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureJavaVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"nextGenerationFirewallMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"useRbacRulesMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"webAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"sqlServerAuditingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vnetEnableDDoSProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"endpointProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"jitNetworkAccessMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"geoRedundantStorageShouldBeEnabledForStorageAccountsEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"vmssSystemUpdatesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"longtermGeoRedundantBackupEnabledAzureSQLDatabasesEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"systemConfigurationsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForReadPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"containerBenchmarkMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveDeprecatedAccountWithOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vulnerabilityAssessmentOnServerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"kubernetesServiceVersionUpToDateMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"sqlDbVulnerabilityAssesmentMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"membersToIncludeInLocalAdministratorsGroup\" : { \r\n        \"value\" : \"\"\r\n        },\r\n        \"membersToExcludeInLocalAdministratorsGroup\" : { \r\n        \"value\" : \"\"\r\n        },\r\n        \"logAnalyticsWorkspaceIDForVMAgents\" : { \r\n        \"value\" : \"<LAWORKSPACE>\"\r\n        },\r\n        \"PHPLatestVersionForAppServices\" : { \r\n        \"value\" : \"7.4\"\r\n        },\r\n        \"JavaLatestVersionForAppServices\" : { \r\n        \"value\" : \"11\"\r\n        },\r\n        \"WindowsPythonLatestVersionForAppServices\" : { \r\n        \"value\" : \"3.6\"\r\n        },\r\n        \"LinuxPythonLatestVersionForAppServices\" : { \r\n        \"value\" : \"3.9\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityEmailsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"vulnerabilityAssessmentMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForWebAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityEmailsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"microsoftIaaSAntimalwareExtensionShouldBeDeployedOnWindowsServersEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"securityCenterStandardPricingTierShouldBeSelectedEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachinesEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensurePHPVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityEmailAdminsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"securityContactPhoneNumberShouldBeProvidedForSubscriptionEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"threatDetectionTypesOnManagedInstanceMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForAPIAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityEmailAdminsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"threatDetectionTypesOnServerMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachineScaleSetsEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        }\r\n}",
                            "$fxv#3": "{\r\n    \"logAnalyticsWorkspaceId-f47b5582-33ec-4c5c-87c0-b010a6b2e917\" : { \r\n        \"value\" : \"<LAWORKSPACE>\"\r\n    },\r\n    \"effect-09024ccc-0c5f-475e-9457-b7c0d9ed487b\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"MembersToExclude-69bf4abd-ca1e-4cf6-8b5a-762d42e61d4f\" :{\r\n        \"value\": \"\"\r\n    },\r\n    \"MembersToInclude-30f71ea1-ac77-4f26-9fc5-2d926bbd4ba7\": {\r\n        \"value\": \"\"\r\n    },\r\n    \"effect-0961003e-5a0a-4549-abde-af6a37f2724d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0b15565f-aa9e-48ba-8619-45960f2c314d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0e60b895-3786-45da-8377-9c6b4b6ac5f9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-17k78e20-9358-41c9-923c-fb736d382a12\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-1bc1795e-d44a-4d48-9b3b-6fff0fd5f9ba\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"PHPLatestVersion\" : { \r\n    \"value\" : \"7.3\"\r\n    },\r\n    \"effect-22bee202-a82f-4305-9a2a-6d7f44d4dedb\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-26a828e1-e88f-464e-bbb3-c134a282b9de\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-34c877ad-507e-4c82-993e-3452a6e0ad3c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-3c735d8a-a4ba-4a3a-b7cf-db7754cf57f4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-404c3081-a854-4457-ae30-26a93ef643f9\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-47a6b606-51aa-4496-8bb7-64b11cf66adc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-496223c3-ad65-4ecd-878a-bae78737e9ed\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"JavaLatestVersion\" : { \r\n    \"value\" : \"11\"\r\n    },\r\n    \"effect-4f11b553-d42e-4e3a-89be-32ca364cad4c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-4f4f78b8-e367-4b10-a341-d9a4ad5cf1c7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5c607a2e-c700-4744-8254-d77e7c9eb5e4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5f76cf89-fbf2-47fd-a3f4-b891fa780b60\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6b1cbf55-e8b6-442f-ba4c-7246b6381474\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6d555dd1-86f2-4f1c-8ed7-5abae7c6cbab\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-7008174a-fd10-4ef0-817e-fc820a951d73\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"LinuxPythonLatestVersion\" : { \r\n    \"value\" : \"3.8\"\r\n    },\r\n    \"effect-7238174a-fd10-4ef0-817e-fc820a951d73\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7261b898-8a84-4db8-9e04-18527132abb3\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-74c3584d-afae-46f7-a20a-6f8adba71a16\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-86b3d65f-7626-441e-b690-81a8b71cff60\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-88999f4c-376a-45c8-bcb3-4058f713cf39\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-8c122334-9d20-4eb8-89ea-ac9a705b74ae\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-8cb6aa8b-9e41-4f4e-aa25-089a7ac2581e\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9297c21d-2ed6-4474-b48f-163f75654ce3\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-991310cd-e9f3-47bc-b7b6-f57b557d07db\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9b597639-28e4-48eb-b506-56b05d366257\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9d0b6ea4-93e2-4578-bf2f-6bb17d22b4bc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9daedab3-fb2d-461e-b861-71790eead4f6\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-a4af4a39-4135-47fb-b175-47fbdf85311d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n    \"value\" : \"enabled\"\r\n    },\r\n    \"effect-a70ca396-0a34-413a-88e1-b956c1e683be\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-aa633080-8b72-40c4-a2d7-d00c03e80bed\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-abfb4388-5bf4-4ad7-ba82-2cd2f41ceae9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-abfb7388-5bf4-4ad7-ba99-2cd2f41cebb9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-af6cd1bd-1635-48cb-bde7-5b15693900b9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\" : { \r\n    \"value\" : \"NetworkWatcherRG\"\r\n    },\r\n    \"effect-b7ddfbdc-1260-477d-91fd-98bd9be789a6\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c3f317a7-a95c-4547-b7e7-11017ebdf2fe\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-cb510bfd-1cba-4d9f-a230-cb0976f4bb71\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e1e5fd5d-3e4c-4ce1-8661-7d1873ae6b15\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e2c1c086-2d84-4019-bff3-c44ccd95113c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e3576e28-8b17-4677-84c3-db2990658d64\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e8cbc669-f12d-49eb-93e7-9273119e9933\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e9c8d085-d9cc-4b17-9cdc-059f1f01f19e\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ebb62a0c-3560-49e1-89ed-27e074e9f8ad\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-efbde977-ba53-4479-b8e9-10b957924fbf\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f0e6e85b-9b9f-4a4b-b67b-f730d42f1b0b\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f6de0be7-9a8a-4b8a-b349-43cf02d22f7c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f8456c1c-aa66-4dfb-861a-25d127b775c9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f9d614c5-c173-4d56-95a7-b4437057d193\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-fb893a29-21bb-418c-a157-e99480ec364c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-feedbf84-6b99-488c-acc2-71c829aa5ffc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-3b980d31-7904-4bb7-8575-5665739a8052\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6e2593d9-add6-4083-9c9b-4b7d2188c899\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b607c5de-e7d9-4eee-9e5c-83f1bcee4fa0\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-12430be1-6cc8-4527-a9a8-e3d38f250096\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"modeRequirement-12430be1-6cc8-4527-a9a8-e3d38f250096\" : { \r\n    \"value\" : \"Detection\"\r\n    },\r\n    \"effect-425bea59-a659-4cbb-8d31-34499bd030b8\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"modeRequirement-425bea59-a659-4cbb-8d31-34499bd030b8\" : { \r\n    \"value\" : \"Detection\"\r\n    },\r\n    \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-013e242c-8828-4970-87b3-ab247555486d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-d38fc420-0735-4ef3-ac11-c806f651a570\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-a1181c5f-672a-477a-979a-7d58aa086233\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-308fbb08-4ab8-4e67-9b29-592e93fb94fa\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-4da35fc9-c9e7-4960-aec9-797fe7d9051d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-523b5cd1-3e23-492f-a539-13118b6d1e3a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7fe3b40f-802b-4cdd-8bd4-fd799c948cc2\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-c25d9a16-bc35-4e15-a7e5-9db606bf9ed4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b0f33259-77d7-4c9e-aac6-3aabcfae693c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-0820b7b9-23aa-4725-a1ce-ae4558f718e5\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fab\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-358c20a6-3f9e-4f0e-97ff-c6ce485e2aac\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5744710e-cc2f-4ee8-8809-3b11e89f4bc9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ac4a19c2-fa67-49b4-8ae5-0b2e78c49457\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c9d007d0-c057-4772-b18c-01e546713bcd\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-e372f825-a257-4fb8-9175-797a8a8627d6\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-d158790f-bfb0-486c-8631-2dc6b4e8e6af\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-e802a67a-daf5-4436-9ea6-f6d821dd0c5d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-a451c1ef-c6ca-483d-87ed-f49761e3ffb5\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftSql-servers-firewallRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-securityRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-securityRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ae89ebca-1c92-4898-ac2c-9f63decb045c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-d26f7642-7545-4e18-9b75-8c9bbdee3a9a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-1a4e592a-6a6e-44a5-9814-e36264ca96e7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7796937f-307b-4598-941c-67d3a05ebfe7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-c5447c04-a4d7-4ba8-a263-c9ee321a6858\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-41388f1c-2db0-4c25-95b2-35d7f5ccbfa9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b02aacc0-b073-424e-8298-42b22829ee0a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-057d6cfe-9c4f-4a6d-bc60-14420ea1f1a9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0ec47710-77ff-4a3d-9181-6aa50af424d0\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-48af4db5-9b8b-401c-8e74-076be876a430\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-82339799-d096-41ae-8538-b108becf0970\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1b7aa243-30e4-4c9e-bca8-d0d3022b634a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ef2a8f2a-b3d9-49cd-a8a8-9a3aaaf647d9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-bb91dfba-c30d-4263-9add-9c2384e659a6\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e71308d3-144b-4262-b144-efdc3cc90517\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2bdd0062-9d75-436e-89df-487dd8e4b3c7\" : { \r\n    \"value\" : \"Disabled\"\r\n    },\r\n    \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-6fac406b-40ca-413b-bf8e-0bf964659c25\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-048248b0-55cd-46da-b1ff-39efd52db260\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0d134df8-db83-46fb-ad72-fe0c9428c8dd\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fb2\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\" : { \r\n    \"value\" : \"audit\"\r\n    },\r\n    \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c43e4a30-77cb-48ab-a4dd-93f175c63b57\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1f314764-cb73-4fc9-b863-8eca98ac36e9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-123a3936-f020-408a-ba0c-47873faf1534\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    }\r\n}\r\n",
                            "modifiedAssignment": "[if(and(equals(toLower(environment().name), toLower('AzureCloud')), equals(toLower(parameters('builtInAssignment')), toLower('IL5'))), 'NISTRev4', parameters('builtInAssignment'))]",
                            "assignmentName": "[format('{0} {1}', variables('modifiedAssignment'), resourceGroup().name)]",
                            "agentVmssAssignmentName": "[format('Deploy VMSS Agents {0}', resourceGroup().name)]",
                            "agentVmAssignmentName": "[format('Deploy VM Agents {0}', resourceGroup().name)]",
                            "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                            "lawsReaderRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('assignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', json(replace(variables('$fxv#0'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', json(replace(variables('$fxv#2'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', json(replace(variables('$fxv#3'), '<LAWORKSPACE>', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId))))[variables('modifiedAssignment')].id]",
                                "parameters": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', json(replace(variables('$fxv#0'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', json(replace(variables('$fxv#2'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', json(replace(variables('$fxv#3'), '<LAWORKSPACE>', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId))))[variables('modifiedAssignment')].parameters]"
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmssAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '75714362-cae7-409e-9b99-a8e5075b7fad')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2020-09-01",
                              "name": "[variables('agentVmAssignmentName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '55f3eceb-5573-4f18-9695-226972c6d74a')]",
                                "parameters": {
                                  "logAnalytics_1": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  }
                                }
                              },
                              "identity": {
                                "type": "SystemAssigned"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('assignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[if(empty(variables('modifiedAssignment')), '', reference(resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName')), '2020-09-01', 'full').identity.principalId)]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmssAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmAssignmentName'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('deployRemediation')]",
                              "type": "Microsoft.PolicyInsights/remediations",
                              "apiVersion": "2019-07-01",
                              "name": "VM-Agent-Policy-Remediation",
                              "properties": {
                                "policyAssignmentId": "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]",
                                "resourceDiscoveryMode": "ReEvaluateCompliance"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Assign-Laws-Role-Policy-{0}', resourceGroup().name)]",
                              "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "targetResourceId": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[variables('lawsReaderRoleDefinitionId')]"
                                  },
                                  "principalId": {
                                    "value": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "16166471121138690529"
                                    }
                                  },
                                  "parameters": {
                                    "targetResourceId": {
                                      "type": "string"
                                    },
                                    "roleDefinitionId": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "ServicePrincipal",
                                      "allowedValues": [
                                        "ForeignGroup",
                                        "Group",
                                        "ServicePrincipal",
                                        "User"
                                      ]
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": ""
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "principalType": "[parameters('principalType')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "description": "[parameters('description')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('deployDefender')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-defender-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "defenderSkuTier": {
                    "value": "[parameters('defenderSkuTier')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "emailSecurityContact": {
                    "value": "[parameters('emailSecurityContact')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
                  },
                  "networks": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networks.value]"
                  },
                  "defenderPlans": {
                    "value": "[parameters('deployDefenderPlans')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "12295251709791687425"
                    }
                  },
                  "parameters": {
                    "defenderSkuTier": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "emailSecurityContact": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "networks": {
                      "type": "array"
                    },
                    "defenderPlans": {
                      "type": "array",
                      "defaultValue": [
                        "VirtualMachines"
                      ]
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "defenderForCloud",
                        "count": "[length(parameters('networks'))]"
                      },
                      "condition": "[parameters('networks')[copyIndex()].deployUniqueResources]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('set-defender-{0}-{1}', parameters('networks')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "emailSecurityContact": {
                            "value": "[parameters('emailSecurityContact')]"
                          },
                          "defenderSkuTier": {
                            "value": "[parameters('defenderSkuTier')]"
                          },
                          "defenderPlans": {
                            "value": "[parameters('defenderPlans')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "2376507858724004427"
                            }
                          },
                          "parameters": {
                            "defenderPlans": {
                              "type": "array",
                              "defaultValue": [
                                "VirtualMachines"
                              ],
                              "metadata": {
                                "description": "Defender Paid protection Plans. Even if a customer selects the free sku, at least 1 paid protection plan must be specified."
                              }
                            },
                            "enableAutoProvisioning": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Turn automatic deployment by Defender of the MMA (OMS VM extension) on or off"
                              }
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Specify the ID of your custom Log Analytics workspace to collect Defender data."
                              }
                            },
                            "emailSecurityContact": {
                              "type": "string",
                              "metadata": {
                                "description": "Email address of the contact, in the form of john@doe.com"
                              }
                            },
                            "policySetDescription": {
                              "type": "string",
                              "defaultValue": "The Microsoft Cloud Security Benchmark initiative represents the policies and controls implementing security recommendations defined in Microsoft Cloud Security Benchmark v2, see https://aka.ms/azsecbm. This also serves as the Microsoft Defender for Cloud default policy initiative. You can directly assign this initiative, or manage its policies and compliance results within Microsoft Defender.",
                              "metadata": {
                                "description": "Policy Initiative description field"
                              }
                            },
                            "defenderSkuTier": {
                              "type": "string",
                              "defaultValue": "Free",
                              "metadata": {
                                "description": "[Standard/Free] The SKU for Defender. It defaults to \"Free\"."
                              }
                            }
                          },
                          "variables": {
                            "autoProvisioning": "[if(parameters('enableAutoProvisioning'), 'On', 'Off')]",
                            "defenderPaidPlansSpecialHandlingAzurePublicList": [
                              "Api"
                            ],
                            "defenderPaidPlanConfig": {
                              "AzureCloud": {
                                "Api": {
                                  "subPlan": "P1"
                                }
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "defenderFreeAllClouds",
                                "count": "[length(parameters('defenderPlans'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[and(not(empty(parameters('defenderPlans'))), equals(parameters('defenderSkuTier'), 'Free'))]",
                              "type": "Microsoft.Security/pricings",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('defenderPlans')[copyIndex()]]",
                              "properties": {
                                "pricingTier": "[parameters('defenderSkuTier')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "defenderStandardNoSubplanNoExtensions",
                                "count": "[length(parameters('defenderPlans'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[and(and(not(empty(parameters('defenderPlans'))), equals(parameters('defenderSkuTier'), 'Standard')), not(contains(variables('defenderPaidPlansSpecialHandlingAzurePublicList'), parameters('defenderPlans')[copyIndex()])))]",
                              "type": "Microsoft.Security/pricings",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('defenderPlans')[copyIndex()]]",
                              "properties": {
                                "pricingTier": "[parameters('defenderSkuTier')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "defenderStandardSubplanExtensionsAzureCloud",
                                "count": "[length(parameters('defenderPlans'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[and(and(and(not(empty(parameters('defenderPlans'))), equals(parameters('defenderSkuTier'), 'Standard')), contains(variables('defenderPaidPlansSpecialHandlingAzurePublicList'), parameters('defenderPlans')[copyIndex()])), equals(environment().name, 'AzureCloud'))]",
                              "type": "Microsoft.Security/pricings",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('defenderPlans')[copyIndex()]]",
                              "properties": "[if(not(contains(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'subPlan')), createObject('pricingTier', parameters('defenderSkuTier')), createObject('pricingTier', parameters('defenderSkuTier'), 'subPlan', variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]].subPlan))]"
                            },
                            {
                              "type": "Microsoft.Security/autoProvisioningSettings",
                              "apiVersion": "2019-01-01",
                              "name": "default",
                              "properties": {
                                "autoProvision": "[variables('autoProvisioning')]"
                              }
                            },
                            {
                              "type": "Microsoft.Security/workspaceSettings",
                              "apiVersion": "2019-01-01",
                              "name": "default",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "scope": "[subscription().id]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('emailSecurityContact')))]",
                              "type": "Microsoft.Security/securityContacts",
                              "apiVersion": "2020-01-01-preview",
                              "name": "default",
                              "properties": {
                                "notificationsByRole": {
                                  "roles": [
                                    "AccountAdmin",
                                    "Contributor",
                                    "Owner",
                                    "ServiceAdmin"
                                  ],
                                  "state": "On"
                                },
                                "alertNotifications": {
                                  "state": "On"
                                },
                                "emails": "[parameters('emailSecurityContact')]"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2022-06-01",
                              "name": "Microsoft Cloud Security Benchmark",
                              "properties": {
                                "displayName": "Defender Default",
                                "description": "[parameters('policySetDescription')]",
                                "enforcementMode": "DoNotEnforce",
                                "parameters": {},
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '1f3afdf9-d0c9-4c3d-847f-89da613e70a8')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "azureFirewallResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.azureFirewallResourceId.value]"
            },
            "diskEncryptionSetResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
            },
            "hubSubnetResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubSubnetResourceId.value]"
            },
            "hubVirtualNetworkResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubVirtualNetworkResourceId.value]"
            },
            "identitySubnetResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.identitySubnetResourceId.value]"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
            },
            "networks": {
              "type": "array",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networks.value]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-entra-domain-services-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "resourceGroupName": {
            "value": "[first(filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networks.value, lambda('network', equals(lambdaVariables('network').name, 'identity')))).resourceGroupName]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.identitySubnetResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "13212518281279287862"
            }
          },
          "parameters": {
            "deploymentNameSuffix": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('domain-services-{0}', parameters('deploymentNameSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "8227079009844125640"
                    }
                  },
                  "parameters": {
                    "domainName": {
                      "type": "string",
                      "metadata": {
                        "description": "The domain name for the managed domain."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location of the managed domain."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the subnet for the managed domain."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.AAD/domainServices",
                      "apiVersion": "2022-12-01",
                      "name": "[parameters('domainName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "domainConfigurationType": "FullySynced",
                        "domainName": "[parameters('domainName')]",
                        "domainSecuritySettings": {
                          "kerberosRc4Encryption": "Disabled"
                        },
                        "filteredSync": "Disabled",
                        "notificationSettings": {
                          "notifyGlobalAdmins": "Enabled",
                          "notifyDcAdmins": "Enabled",
                          "additionalRecipients": []
                        },
                        "replicaSets": [
                          {
                            "subnetId": "[parameters('subnetResourceId')]",
                            "location": "[parameters('location')]"
                          }
                        ],
                        "sku": "Standard"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-image-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "arcGisProInstaller": {
            "value": "[parameters('arcGisProInstaller')]"
          },
          "azureFirewallResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.azureFirewallResourceId.value]"
          },
          "containerName": {
            "value": "[parameters('containerName')]"
          },
          "emailSecurityContact": {
            "value": "[parameters('emailSecurityContact')]"
          },
          "enableBuildAutomation": {
            "value": false
          },
          "environmentAbbreviation": {
            "value": "dev"
          },
          "hubVirtualNetworkResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubVirtualNetworkResourceId.value]"
          },
          "hybridUseBenefit": {
            "value": "[parameters('hybridUseBenefit')]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "imageDefinitionNamePrefix": {
            "value": "arcgis-pro"
          },
          "imageMajorVersion": {
            "value": 1
          },
          "imagePatchVersion": {
            "value": 0
          },
          "installAccess": {
            "value": false
          },
          "installArcGisPro": {
            "value": true
          },
          "installExcel": {
            "value": false
          },
          "installOneDrive": {
            "value": false
          },
          "installOneNote": {
            "value": false
          },
          "installOutlook": {
            "value": false
          },
          "installPowerPoint": {
            "value": false
          },
          "installProject": {
            "value": false
          },
          "installPublisher": {
            "value": false
          },
          "installSkypeForBusiness": {
            "value": false
          },
          "installTeams": {
            "value": false
          },
          "installVirtualDesktopOptimizationTool": {
            "value": false
          },
          "installVisio": {
            "value": false
          },
          "installWord": {
            "value": false
          },
          "localAdministratorPassword": {
            "value": "[parameters('localAdministratorPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[parameters('localAdministratorUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "replicaCount": {
            "value": 1
          },
          "sourceImageType": {
            "value": "AzureMarketplace"
          },
          "spokelogAnalyticsWorkspaceResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
          },
          "storageAccountResourceId": {
            "value": "[parameters('storageAccountResourceId')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "2257313557829752087"
            }
          },
          "parameters": {
            "arcGisProInstaller": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The file name of the ArcGIS Pro installer in Azure Blobs."
              }
            },
            "azureFirewallResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID for the Azure Firewall in the HUB."
              }
            },
            "computeGalleryImageResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource ID of the source compute gallery image."
              }
            },
            "containerName": {
              "type": "string",
              "metadata": {
                "description": "The name of the container in the storage account where the installer files are located."
              }
            },
            "customizations": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The array of customizations to apply to the image."
              }
            },
            "deployActivityLogDiagnosticSetting": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Choose whether to deploy a diagnostic setting for the Activity Log."
              }
            },
            "deployDefender": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Defender for Cloud enabled."
              }
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow('yyMMddHHs')]",
              "metadata": {
                "description": "The suffix to append to deployment names."
              }
            },
            "deployNetworkWatcher": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Choose whether to deploy a network watcher for deployment location."
              }
            },
            "deployPolicy": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Deploy Policy enabled."
              }
            },
            "distributionGroup": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The distribution group for email notifications."
              }
            },
            "domainJoinPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "The password for the domain join account."
              }
            },
            "domainJoinUserPrincipalName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The user principal name for the domain join account."
              }
            },
            "domainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The domain name to join."
              }
            },
            "emailSecurityContact": {
              "type": "string",
              "metadata": {
                "description": "The email address for the security contact."
              }
            },
            "enableBuildAutomation": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to enable build automation."
              }
            },
            "environmentAbbreviation": {
              "type": "string",
              "defaultValue": "dev",
              "allowedValues": [
                "dev",
                "prod",
                "test"
              ],
              "metadata": {
                "description": "The abbreviation for the environment."
              }
            },
            "excludeFromLatest": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Determines whether to exclude the image from the latest version."
              }
            },
            "exemptPolicyAssignmentIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The array of policy assignment IDs to exempt to prevent issues with the build process."
              }
            },
            "hubVirtualNetworkResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID for the hub virtual network."
              }
            },
            "hybridUseBenefit": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to use the hybrid use benefit."
              }
            },
            "identifier": {
              "type": "string",
              "metadata": {
                "description": "The identifier for the resource names. This value should represent the workload, project, or business unit."
              }
            },
            "imageDefinitionNamePrefix": {
              "type": "string",
              "metadata": {
                "description": "The name prefix for the image definition resource."
              }
            },
            "imageMajorVersion": {
              "type": "int",
              "metadata": {
                "description": "The major version for the name of the image version resource."
              }
            },
            "imagePatchVersion": {
              "type": "int",
              "metadata": {
                "description": "The patch version for the name of the image version resource."
              }
            },
            "installAccess": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install Access."
              }
            },
            "installArcGisPro": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install ArcGIS Pro."
              }
            },
            "installExcel": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install Excel."
              }
            },
            "installOneDrive": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install OneDrive."
              }
            },
            "installOneNote": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install OneNote."
              }
            },
            "installOutlook": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install Outlook."
              }
            },
            "installPowerPoint": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install PowerPoint."
              }
            },
            "installProject": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install Project."
              }
            },
            "installPublisher": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install Publisher."
              }
            },
            "installSkypeForBusiness": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install Skype for Business."
              }
            },
            "installTeams": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install Teams."
              }
            },
            "installUpdates": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Determines whether to install Microsoft/Windows Updates."
              }
            },
            "installVirtualDesktopOptimizationTool": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install the Virtual Desktop Optimization Tool."
              }
            },
            "installVisio": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install Visio."
              }
            },
            "installWord": {
              "type": "bool",
              "metadata": {
                "description": "Determines whether to install Word."
              }
            },
            "localAdministratorPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password for the local administrator account."
              }
            },
            "localAdministratorUsername": {
              "type": "string",
              "metadata": {
                "description": "The username for the local administrator account."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location for the resources."
              }
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource ID of the log analytics workspace if using build automation and desired."
              }
            },
            "logStorageSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
              }
            },
            "marketplaceImageOffer": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The marketplace image offer."
              }
            },
            "marketplaceImagePublisher": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The marketplace image publisher."
              }
            },
            "marketplaceImageSKU": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The marketplace image SKU."
              }
            },
            "msrdcwebrtcsvcInstaller": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The file name of the msrdcwebrtcsvc installer in Azure Blobs."
              }
            },
            "networkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                {
                  "category": "NetworkSecurityGroupEvent",
                  "enabled": true
                },
                {
                  "category": "NetworkSecurityGroupRuleCounter",
                  "enabled": true
                }
              ],
              "metadata": {
                "description": "The network security group diagnostics logs to apply to the subnet."
              }
            },
            "networkSecurityGroupDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The network security group diagnostics metrics to apply to the subnet."
              }
            },
            "networkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The network security group rules to apply to the subnet."
              }
            },
            "officeInstaller": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The file name of the Office installer in Azure Blobs."
              }
            },
            "oUPath": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The distinguished name of the organizational unit to join."
              }
            },
            "policy": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The policy name"
              }
            },
            "replicaCount": {
              "type": "int",
              "metadata": {
                "description": "The count of replicas for the image version resource."
              }
            },
            "sourceImageType": {
              "type": "string",
              "allowedValues": [
                "AzureComputeGallery",
                "AzureMarketplace"
              ],
              "metadata": {
                "description": "The type of source image."
              }
            },
            "spokelogAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the log analytics workspace if using build automation and desired."
              }
            },
            "storageAccountResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the storage account where the installers and scripts are stored in Azure Blobs."
              }
            },
            "subnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.134.0/24",
              "metadata": {
                "description": "The subnet address prefix."
              }
            },
            "supportedClouds": {
              "type": "array",
              "defaultValue": [
                "AzureCloud",
                "AzureUSGovernment"
              ],
              "metadata": {
                "description": "The array of supported clouds for specific deployments."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The key value pairs of meta data to apply to the resources."
              }
            },
            "teamsInstaller": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The file name of the Teams installer in Azure Blobs."
              }
            },
            "updateService": {
              "type": "string",
              "defaultValue": "MU",
              "allowedValues": [
                "WU",
                "MU",
                "WSUS",
                "DCAT",
                "STORE",
                "OTHER"
              ],
              "metadata": {
                "description": "Determines if the updates service. (Default: 'MU')"
              }
            },
            "vcRedistInstaller": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The file name of the vcRedist installer in Azure Blobs."
              }
            },
            "vDOTInstaller": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The file name of the vDOT installer in Azure Blobs."
              }
            },
            "virtualMachineSize": {
              "type": "string",
              "metadata": {
                "description": "The size of the image virtual machine."
              }
            },
            "virtualNetworkAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.134.0/24",
              "metadata": {
                "description": "The virtual network address prefix."
              }
            },
            "virtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The logs for the diagnostic setting on the virtual network."
              }
            },
            "virtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The metrics for the diagnostic setting on the virtual network."
              }
            },
            "workloadName": {
              "type": "string",
              "defaultValue": "imaging",
              "minLength": 1,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workload."
              }
            },
            "workloadShortName": {
              "type": "string",
              "defaultValue": "img",
              "minLength": 1,
              "maxLength": 3,
              "metadata": {
                "description": "The short name of the workload."
              }
            },
            "wsusServer": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The WSUS Server Url if WSUS is specified. (i.e., https://wsus.corp.contoso.com:8531)"
              }
            }
          },
          "variables": {
            "$fxv#0": {
              "AzureChina": {
                "chinaeast": {
                  "abbreviation": "cne",
                  "recoveryServicesGeo": "sha",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "chinaeast2": {
                  "abbreviation": "cne2",
                  "recoveryServicesGeo": "sha2",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "chinanorth": {
                  "abbreviation": "cnn",
                  "recoveryServicesGeo": "bjb",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "chinanorth2": {
                  "abbreviation": "cnn2",
                  "recoveryServicesGeo": "bjb2",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                }
              },
              "AzureCloud": {
                "australiacentral": {
                  "abbreviation": "auc",
                  "recoveryServicesGeo": "acl",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "australiacentral2": {
                  "abbreviation": "auc2",
                  "recoveryServicesGeo": "acl2",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "australiaeast": {
                  "abbreviation": "aue",
                  "recoveryServicesGeo": "ae",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "australiasoutheast": {
                  "abbreviation": "ause",
                  "recoveryServicesGeo": "ase",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "brazilsouth": {
                  "abbreviation": "brs",
                  "recoveryServicesGeo": "brs",
                  "timeDifference": "-3:00",
                  "timeZone": "E. South America Standard Time"
                },
                "brazilsoutheast": {
                  "abbreviation": "brse",
                  "recoveryServicesGeo": "bse",
                  "timeDifference": "-3:00",
                  "timeZone": "E. South America Standard Time"
                },
                "canadacentral": {
                  "abbreviation": "cac",
                  "recoveryServicesGeo": "cnc",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "canadaeast": {
                  "abbreviation": "cae",
                  "recoveryServicesGeo": "cne",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "centralindia": {
                  "abbreviation": "inc",
                  "recoveryServicesGeo": "inc",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "centralus": {
                  "abbreviation": "usc",
                  "recoveryServicesGeo": "cus",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "eastasia": {
                  "abbreviation": "ase",
                  "recoveryServicesGeo": "ea",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "eastus": {
                  "abbreviation": "use",
                  "recoveryServicesGeo": "eus",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "eastus2": {
                  "abbreviation": "use2",
                  "recoveryServicesGeo": "eus2",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "francecentral": {
                  "abbreviation": "frc",
                  "recoveryServicesGeo": "frc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "francesouth": {
                  "abbreviation": "frs",
                  "recoveryServicesGeo": "frs",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "germanynorth": {
                  "abbreviation": "den",
                  "recoveryServicesGeo": "gn",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "germanywestcentral": {
                  "abbreviation": "dewc",
                  "recoveryServicesGeo": "gwc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "israelcentral": {
                  "abbreviation": "ilc",
                  "recoveryServicesGeo": "ilc",
                  "timeDifference": "+2:00",
                  "timeZone": "Israel Standard Time"
                },
                "italynorth": {
                  "abbreviation": "itn",
                  "recoveryServicesGeo": "itn",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "japaneast": {
                  "abbreviation": "jpe",
                  "recoveryServicesGeo": "jpe",
                  "timeDifference": "+9:00",
                  "timeZone": "Tokyo Standard Time"
                },
                "japanwest": {
                  "abbreviation": "jpw",
                  "recoveryServicesGeo": "jpw",
                  "timeDifference": "+9:00",
                  "timeZone": "Tokyo Standard Time"
                },
                "jioindiacentral": {
                  "abbreviation": "injc",
                  "recoveryServicesGeo": "jic",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "jioindiawest": {
                  "abbreviation": "injw",
                  "recoveryServicesGeo": "jiw",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "koreacentral": {
                  "abbreviation": "krc",
                  "recoveryServicesGeo": "krc",
                  "timeDifference": "+9:00",
                  "timeZone": "Korea Standard Time"
                },
                "koreasouth": {
                  "abbreviation": "krs",
                  "recoveryServicesGeo": "krs",
                  "timeDifference": "+9:00",
                  "timeZone": "Korea Standard Time"
                },
                "northcentralus": {
                  "abbreviation": "usnc",
                  "recoveryServicesGeo": "ncus",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "northeurope": {
                  "abbreviation": "eun",
                  "recoveryServicesGeo": "ne",
                  "timeDifference": "0:00",
                  "timeZone": "GMT Standard Time"
                },
                "norwayeast": {
                  "abbreviation": "noe",
                  "recoveryServicesGeo": "nwe",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "norwaywest": {
                  "abbreviation": "now",
                  "recoveryServicesGeo": "nww",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "polandcentral": {
                  "abbreviation": "plc",
                  "recoveryServicesGeo": "plc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "qatarcentral": {
                  "abbreviation": "qac",
                  "recoveryServicesGeo": "qac",
                  "timeDifference": "+3:00",
                  "timeZone": "Arabian Standard Time"
                },
                "southafricanorth": {
                  "abbreviation": "zan",
                  "recoveryServicesGeo": "san",
                  "timeDifference": "+2:00",
                  "timeZone": "South Africa Standard Time"
                },
                "southafricawest": {
                  "abbreviation": "zaw",
                  "recoveryServicesGeo": "saw",
                  "timeDifference": "+2:00",
                  "timeZone": "South Africa Standard Time"
                },
                "southcentralus": {
                  "abbreviation": "ussc",
                  "recoveryServicesGeo": "scus",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "southeastasia": {
                  "abbreviation": "asse",
                  "recoveryServicesGeo": "sea",
                  "timeDifference": "+8:00",
                  "timeZone": "Singapore Standard Time"
                },
                "southindia": {
                  "abbreviation": "ins",
                  "recoveryServicesGeo": "ins",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "swedencentral": {
                  "abbreviation": "sec",
                  "recoveryServicesGeo": "sdc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "switzerlandnorth": {
                  "abbreviation": "chn",
                  "recoveryServicesGeo": "szn",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "switzerlandwest": {
                  "abbreviation": "chw",
                  "recoveryServicesGeo": "szw",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "uaecentral": {
                  "abbreviation": "aec",
                  "recoveryServicesGeo": "uac",
                  "timeDifference": "+3:00",
                  "timeZone": "Arabian Standard Time"
                },
                "uaenorth": {
                  "abbreviation": "aen",
                  "recoveryServicesGeo": "uan",
                  "timeDifference": "+3:00",
                  "timeZone": "Arabian Standard Time"
                },
                "uksouth": {
                  "abbreviation": "uks",
                  "recoveryServicesGeo": "uks",
                  "timeDifference": "0:00",
                  "timeZone": "GMT Standard Time"
                },
                "ukwest": {
                  "abbreviation": "ukw",
                  "recoveryServicesGeo": "ukw",
                  "timeDifference": "0:00",
                  "timeZone": "GMT Standard Time"
                },
                "westcentralus": {
                  "abbreviation": "uswc",
                  "recoveryServicesGeo": "wcus",
                  "timeDifference": "-7:00",
                  "timeZone": "Mountain Standard Time"
                },
                "westeurope": {
                  "abbreviation": "euw",
                  "recoveryServicesGeo": "we",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "westindia": {
                  "abbreviation": "inw",
                  "recoveryServicesGeo": "inw",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "westus": {
                  "abbreviation": "usw",
                  "recoveryServicesGeo": "wus",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                },
                "westus2": {
                  "abbreviation": "usw2",
                  "recoveryServicesGeo": "wus2",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                },
                "westus3": {
                  "abbreviation": "usw3",
                  "recoveryServicesGeo": "wus3",
                  "timeDifference": "-7:00",
                  "timeZone": "Mountain Standard Time"
                }
              },
              "AzureUSGovernment": {
                "usdodcentral": {
                  "abbreviation": "dodc",
                  "recoveryServicesGeo": "udc",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "usdodeast": {
                  "abbreviation": "dode",
                  "recoveryServicesGeo": "ude",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "usgovarizona": {
                  "abbreviation": "az",
                  "recoveryServicesGeo": "uga",
                  "timeDifference": "-7:00",
                  "timeZone": "Mountain Standard Time"
                },
                "usgovtexas": {
                  "abbreviation": "tx",
                  "recoveryServicesGeo": "ugt",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "usgovvirginia": {
                  "abbreviation": "va",
                  "recoveryServicesGeo": "ugv",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                }
              },
              "USNat": {
                "usnateast": {
                  "abbreviation": "east",
                  "recoveryServicesGeo": "exe",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "usnatwest": {
                  "abbreviation": "west",
                  "recoveryServicesGeo": "exw",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                }
              },
              "USSec": {
                "usseceast": {
                  "abbreviation": "east",
                  "recoveryServicesGeo": "rxe",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "ussecwest": {
                  "abbreviation": "west",
                  "recoveryServicesGeo": "rxw",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                }
              }
            },
            "automationAccountPrivateDnsZoneResourceId": "[resourceId(split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4], 'Microsoft.Network/privateDnsZones', format('privatelink.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudSuffix'))))]",
            "calculatedTags": "[union(parameters('tags'), variables('defaultTags'))]",
            "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.azure.', ''), '/', '')]",
            "defaultTags": {
              "DeploymentType": "MissionLandingZoneARM"
            },
            "keyVaultPrivateDnsZoneResourceId": "[resourceId(split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4], 'Microsoft.Network/privateDnsZones', replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore'))]",
            "imageDefinitionName": "[if(empty(parameters('computeGalleryImageResourceId')), format('{0}-{1}', parameters('imageDefinitionNamePrefix'), parameters('marketplaceImageSKU')), format('{0}-{1}', parameters('imageDefinitionNamePrefix'), split(parameters('computeGalleryImageResourceId'), '/')[10]))]",
            "privateDnsZoneSuffixes_AzureAutomation": {
              "AzureCloud": "net",
              "AzureUSGovernment": "us",
              "USNat": null,
              "USSec": null
            },
            "subscriptionId": "[subscription().subscriptionId]",
            "locations": "[variables('$fxv#0')[environment().name]]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('tier3-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deployActivityLogDiagnosticSetting": {
                    "value": "[parameters('deployActivityLogDiagnosticSetting')]"
                  },
                  "deployDefender": {
                    "value": "[parameters('deployDefender')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deployNetworkWatcher": {
                    "value": "[parameters('deployNetworkWatcher')]"
                  },
                  "deployPolicy": {
                    "value": "[parameters('deployPolicy')]"
                  },
                  "emailSecurityContact": {
                    "value": "[parameters('emailSecurityContact')]"
                  },
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "firewallResourceId": {
                    "value": "[parameters('azureFirewallResourceId')]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('spokelogAnalyticsWorkspaceResourceId')]"
                  },
                  "logStorageSkuName": {
                    "value": "[parameters('logStorageSkuName')]"
                  },
                  "networkSecurityGroupDiagnosticsLogs": {
                    "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                  },
                  "networkSecurityGroupDiagnosticsMetrics": {
                    "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
                  },
                  "networkSecurityGroupRules": {
                    "value": "[parameters('networkSecurityGroupRules')]"
                  },
                  "policy": {
                    "value": "[parameters('policy')]"
                  },
                  "resourcePrefix": {
                    "value": "[parameters('identifier')]"
                  },
                  "tags": {
                    "value": "[variables('calculatedTags')]"
                  },
                  "subnetAddressPrefix": {
                    "value": "[parameters('subnetAddressPrefix')]"
                  },
                  "supportedClouds": {
                    "value": "[parameters('supportedClouds')]"
                  },
                  "virtualNetworkAddressPrefix": {
                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                  },
                  "virtualNetworkDiagnosticsLogs": {
                    "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                  },
                  "virtualNetworkDiagnosticsMetrics": {
                    "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "6273770388343340114"
                    }
                  },
                  "parameters": {
                    "deployActivityLogDiagnosticSetting": {
                      "type": "bool",
                      "metadata": {
                        "description": "Choose whether to deploy a diagnostic setting for the Activity Log."
                      }
                    },
                    "deployDefender": {
                      "type": "bool",
                      "metadata": {
                        "description": "Choose whether to deploy Defender for Cloud."
                      }
                    },
                    "deploymentNameSuffix": {
                      "type": "string",
                      "defaultValue": "[utcNow()]",
                      "metadata": {
                        "description": "The suffix to append to the deployment name. It defaults to the current UTC date and time."
                      }
                    },
                    "deployNetworkWatcher": {
                      "type": "bool",
                      "metadata": {
                        "description": "Choose whether to deploy Network Watcher for the deployment location."
                      }
                    },
                    "deployPolicy": {
                      "type": "bool",
                      "metadata": {
                        "description": "Choose whether to deploy a policy assignment."
                      }
                    },
                    "emailSecurityContact": {
                      "type": "string",
                      "metadata": {
                        "description": "The email address to use for Defender for Cloud notifications."
                      }
                    },
                    "environmentAbbreviation": {
                      "type": "string",
                      "defaultValue": "dev",
                      "allowedValues": [
                        "dev",
                        "prod",
                        "test"
                      ],
                      "metadata": {
                        "description": "The abbreviation for the environment."
                      }
                    },
                    "firewallResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Azure Firewall in the HUB."
                      }
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the HUB Virtual Network."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "The location for the deployment. It defaults to the location of the deployment."
                      }
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Log Analytics Workspace to use for log storage."
                      }
                    },
                    "logStorageSkuName": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "metadata": {
                        "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
                      }
                    },
                    "networkSecurityGroupDiagnosticsLogs": {
                      "type": "array",
                      "defaultValue": [
                        {
                          "category": "NetworkSecurityGroupEvent",
                          "enabled": true
                        },
                        {
                          "category": "NetworkSecurityGroupRuleCounter",
                          "enabled": true
                        }
                      ],
                      "metadata": {
                        "description": "An array of Network Security Group diagnostic logs to apply to the workload Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
                      }
                    },
                    "networkSecurityGroupDiagnosticsMetrics": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The metrics to monitor for the Network Security Group."
                      }
                    },
                    "networkSecurityGroupRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The rules to apply to the Network Security Group."
                      }
                    },
                    "policy": {
                      "type": "string",
                      "metadata": {
                        "description": "The policy to assign to the workload."
                      }
                    },
                    "resourcePrefix": {
                      "type": "string",
                      "minLength": 3,
                      "maxLength": 10,
                      "metadata": {
                        "description": "A prefix, 3 to 10 characters in length, to append to resource names (e.g. \"dev\", \"test\", \"prod\", \"mlz\"). It defaults to \"mlz\"."
                      }
                    },
                    "subnetAddressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "The address prefix for the workload subnet."
                      }
                    },
                    "supportedClouds": {
                      "type": "array",
                      "defaultValue": [
                        "AzureCloud",
                        "AzureUSGovernment"
                      ],
                      "metadata": {
                        "description": "The supported clouds for the deployment. It defaults to \"AzureCloud\" and \"AzureUSGovernment\"."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The tags to apply to the resources."
                      }
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "The address prefix for the workload Virtual Network."
                      }
                    },
                    "virtualNetworkDiagnosticsLogs": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The diagnostic logs to apply to the workload Virtual Network."
                      }
                    },
                    "virtualNetworkDiagnosticsMetrics": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The metrics to monitor for the workload Virtual Network."
                      }
                    },
                    "workloadName": {
                      "type": "string",
                      "defaultValue": "tier3",
                      "minLength": 1,
                      "maxLength": 10,
                      "metadata": {
                        "description": "The name for the workload."
                      }
                    },
                    "workloadShortName": {
                      "type": "string",
                      "defaultValue": "t3",
                      "minLength": 1,
                      "maxLength": 3,
                      "metadata": {
                        "description": "The short name for the workload."
                      }
                    }
                  },
                  "variables": {
                    "calculatedTags": "[union(parameters('tags'), variables('defaultTags'))]",
                    "defaultTags": {
                      "DeploymentType": "MissionLandingZoneARM"
                    },
                    "hubResourceGroupName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
                    "hubSubscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
                    "subscriptionId": "[subscription().subscriptionId]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "environmentAbbreviation": {
                            "value": "[parameters('environmentAbbreviation')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "resourcePrefix": {
                            "value": "[parameters('resourcePrefix')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "16223515126777270114"
                            }
                          },
                          "parameters": {
                            "environmentAbbreviation": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "resourcePrefix": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "$fxv#0": {
                              "AzureChina": {
                                "chinaeast": {
                                  "abbreviation": "cne",
                                  "recoveryServicesGeo": "sha",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinaeast2": {
                                  "abbreviation": "cne2",
                                  "recoveryServicesGeo": "sha2",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinanorth": {
                                  "abbreviation": "cnn",
                                  "recoveryServicesGeo": "bjb",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "chinanorth2": {
                                  "abbreviation": "cnn2",
                                  "recoveryServicesGeo": "bjb2",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                }
                              },
                              "AzureCloud": {
                                "australiacentral": {
                                  "abbreviation": "auc",
                                  "recoveryServicesGeo": "acl",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiacentral2": {
                                  "abbreviation": "auc2",
                                  "recoveryServicesGeo": "acl2",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiaeast": {
                                  "abbreviation": "aue",
                                  "recoveryServicesGeo": "ae",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "australiasoutheast": {
                                  "abbreviation": "ause",
                                  "recoveryServicesGeo": "ase",
                                  "timeDifference": "+10:00",
                                  "timeZone": "AUS Eastern Standard Time"
                                },
                                "brazilsouth": {
                                  "abbreviation": "brs",
                                  "recoveryServicesGeo": "brs",
                                  "timeDifference": "-3:00",
                                  "timeZone": "E. South America Standard Time"
                                },
                                "brazilsoutheast": {
                                  "abbreviation": "brse",
                                  "recoveryServicesGeo": "bse",
                                  "timeDifference": "-3:00",
                                  "timeZone": "E. South America Standard Time"
                                },
                                "canadacentral": {
                                  "abbreviation": "cac",
                                  "recoveryServicesGeo": "cnc",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "canadaeast": {
                                  "abbreviation": "cae",
                                  "recoveryServicesGeo": "cne",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "centralindia": {
                                  "abbreviation": "inc",
                                  "recoveryServicesGeo": "inc",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "centralus": {
                                  "abbreviation": "usc",
                                  "recoveryServicesGeo": "cus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "eastasia": {
                                  "abbreviation": "ase",
                                  "recoveryServicesGeo": "ea",
                                  "timeDifference": "+8:00",
                                  "timeZone": "China Standard Time"
                                },
                                "eastus": {
                                  "abbreviation": "use",
                                  "recoveryServicesGeo": "eus",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "eastus2": {
                                  "abbreviation": "use2",
                                  "recoveryServicesGeo": "eus2",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "francecentral": {
                                  "abbreviation": "frc",
                                  "recoveryServicesGeo": "frc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "francesouth": {
                                  "abbreviation": "frs",
                                  "recoveryServicesGeo": "frs",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "germanynorth": {
                                  "abbreviation": "den",
                                  "recoveryServicesGeo": "gn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "germanywestcentral": {
                                  "abbreviation": "dewc",
                                  "recoveryServicesGeo": "gwc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "israelcentral": {
                                  "abbreviation": "ilc",
                                  "recoveryServicesGeo": "ilc",
                                  "timeDifference": "+2:00",
                                  "timeZone": "Israel Standard Time"
                                },
                                "italynorth": {
                                  "abbreviation": "itn",
                                  "recoveryServicesGeo": "itn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "japaneast": {
                                  "abbreviation": "jpe",
                                  "recoveryServicesGeo": "jpe",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Tokyo Standard Time"
                                },
                                "japanwest": {
                                  "abbreviation": "jpw",
                                  "recoveryServicesGeo": "jpw",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Tokyo Standard Time"
                                },
                                "jioindiacentral": {
                                  "abbreviation": "injc",
                                  "recoveryServicesGeo": "jic",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "jioindiawest": {
                                  "abbreviation": "injw",
                                  "recoveryServicesGeo": "jiw",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "koreacentral": {
                                  "abbreviation": "krc",
                                  "recoveryServicesGeo": "krc",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Korea Standard Time"
                                },
                                "koreasouth": {
                                  "abbreviation": "krs",
                                  "recoveryServicesGeo": "krs",
                                  "timeDifference": "+9:00",
                                  "timeZone": "Korea Standard Time"
                                },
                                "northcentralus": {
                                  "abbreviation": "usnc",
                                  "recoveryServicesGeo": "ncus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "northeurope": {
                                  "abbreviation": "eun",
                                  "recoveryServicesGeo": "ne",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "norwayeast": {
                                  "abbreviation": "noe",
                                  "recoveryServicesGeo": "nwe",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "norwaywest": {
                                  "abbreviation": "now",
                                  "recoveryServicesGeo": "nww",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "polandcentral": {
                                  "abbreviation": "plc",
                                  "recoveryServicesGeo": "plc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "qatarcentral": {
                                  "abbreviation": "qac",
                                  "recoveryServicesGeo": "qac",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "southafricanorth": {
                                  "abbreviation": "zan",
                                  "recoveryServicesGeo": "san",
                                  "timeDifference": "+2:00",
                                  "timeZone": "South Africa Standard Time"
                                },
                                "southafricawest": {
                                  "abbreviation": "zaw",
                                  "recoveryServicesGeo": "saw",
                                  "timeDifference": "+2:00",
                                  "timeZone": "South Africa Standard Time"
                                },
                                "southcentralus": {
                                  "abbreviation": "ussc",
                                  "recoveryServicesGeo": "scus",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "southeastasia": {
                                  "abbreviation": "asse",
                                  "recoveryServicesGeo": "sea",
                                  "timeDifference": "+8:00",
                                  "timeZone": "Singapore Standard Time"
                                },
                                "southindia": {
                                  "abbreviation": "ins",
                                  "recoveryServicesGeo": "ins",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "swedencentral": {
                                  "abbreviation": "sec",
                                  "recoveryServicesGeo": "sdc",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "switzerlandnorth": {
                                  "abbreviation": "chn",
                                  "recoveryServicesGeo": "szn",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "switzerlandwest": {
                                  "abbreviation": "chw",
                                  "recoveryServicesGeo": "szw",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "uaecentral": {
                                  "abbreviation": "aec",
                                  "recoveryServicesGeo": "uac",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "uaenorth": {
                                  "abbreviation": "aen",
                                  "recoveryServicesGeo": "uan",
                                  "timeDifference": "+3:00",
                                  "timeZone": "Arabian Standard Time"
                                },
                                "uksouth": {
                                  "abbreviation": "uks",
                                  "recoveryServicesGeo": "uks",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "ukwest": {
                                  "abbreviation": "ukw",
                                  "recoveryServicesGeo": "ukw",
                                  "timeDifference": "0:00",
                                  "timeZone": "GMT Standard Time"
                                },
                                "westcentralus": {
                                  "abbreviation": "uswc",
                                  "recoveryServicesGeo": "wcus",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                },
                                "westeurope": {
                                  "abbreviation": "euw",
                                  "recoveryServicesGeo": "we",
                                  "timeDifference": "+1:00",
                                  "timeZone": "Central Europe Standard Time"
                                },
                                "westindia": {
                                  "abbreviation": "inw",
                                  "recoveryServicesGeo": "inw",
                                  "timeDifference": "+5:30",
                                  "timeZone": "India Standard Time"
                                },
                                "westus": {
                                  "abbreviation": "usw",
                                  "recoveryServicesGeo": "wus",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                },
                                "westus2": {
                                  "abbreviation": "usw2",
                                  "recoveryServicesGeo": "wus2",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                },
                                "westus3": {
                                  "abbreviation": "usw3",
                                  "recoveryServicesGeo": "wus3",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                }
                              },
                              "AzureUSGovernment": {
                                "usdodcentral": {
                                  "abbreviation": "dodc",
                                  "recoveryServicesGeo": "udc",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "usdodeast": {
                                  "abbreviation": "dode",
                                  "recoveryServicesGeo": "ude",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "usgovarizona": {
                                  "abbreviation": "az",
                                  "recoveryServicesGeo": "uga",
                                  "timeDifference": "-7:00",
                                  "timeZone": "Mountain Standard Time"
                                },
                                "usgovtexas": {
                                  "abbreviation": "tx",
                                  "recoveryServicesGeo": "ugt",
                                  "timeDifference": "-6:00",
                                  "timeZone": "Central Standard Time"
                                },
                                "usgovvirginia": {
                                  "abbreviation": "va",
                                  "recoveryServicesGeo": "ugv",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                }
                              },
                              "USNat": {
                                "usnateast": {
                                  "abbreviation": "east",
                                  "recoveryServicesGeo": "exe",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "usnatwest": {
                                  "abbreviation": "west",
                                  "recoveryServicesGeo": "exw",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                }
                              },
                              "USSec": {
                                "usseceast": {
                                  "abbreviation": "east",
                                  "recoveryServicesGeo": "rxe",
                                  "timeDifference": "-5:00",
                                  "timeZone": "Eastern Standard Time"
                                },
                                "ussecwest": {
                                  "abbreviation": "west",
                                  "recoveryServicesGeo": "rxw",
                                  "timeDifference": "-8:00",
                                  "timeZone": "Pacific Standard Time"
                                }
                              }
                            },
                            "$fxv#1": {
                              "actionGroups": "ag",
                              "automationAccounts": "aa",
                              "availabilitySets": "avail",
                              "azureFirewalls": "afw",
                              "bastionHosts": "bas",
                              "computeGallieries": "cg",
                              "dataCollectionRuleAssociations": "dcra",
                              "dataCollectionRules": "dcr",
                              "desktopApplicationGroups": "vdag",
                              "diagnosticSettings": "diag",
                              "diskAccesses": "da",
                              "diskEncryptionSets": "des",
                              "disks": "disk",
                              "firewallPolicies": "afwp",
                              "hostPools": "vdpool",
                              "ipConfigurations": "ipconf",
                              "keyVaults": "kv",
                              "logAnalyticsWorkspaces": "log",
                              "netAppAccounts": "naa",
                              "netAppCapacityPools": "nacp",
                              "networkInterfaces": "nic",
                              "networkSecurityGroups": "nsg",
                              "networkWatchers": "nw",
                              "privateEndpoints": "pe",
                              "privateLinkScopes": "pls",
                              "publicIPAddresses": "pip",
                              "recoveryServicesVaults": "rsv",
                              "remoteApplicationGroups": "vdag",
                              "resourceGroups": "rg",
                              "routeTables": "rt",
                              "storageAccounts": "st",
                              "subnets": "snet",
                              "userAssignedIdentities": "id",
                              "virtualMachines": "vm",
                              "virtualNetworks": "vnet",
                              "workspaces": "vdws"
                            },
                            "locations": "[variables('$fxv#0')[environment().name]]",
                            "locationAbbreviation": "[variables('locations')[parameters('location')].abbreviation]",
                            "resourceAbbreviations": "[variables('$fxv#1')]",
                            "resourceToken": "resource_token",
                            "serviceToken": "service_token",
                            "networkToken": "network_token",
                            "namingConvention": "[format('{0}-{1}-{2}-{3}-{4}-{5}', toLower(parameters('resourcePrefix')), variables('resourceToken'), variables('serviceToken'), variables('networkToken'), parameters('environmentAbbreviation'), variables('locationAbbreviation'))]",
                            "actionGroupNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').actionGroups)]",
                            "automationAccountNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').automationAccounts)]",
                            "bastionHostNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').bastionHosts)]",
                            "computeGalleryNamingConvention": "[replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').computeGallieries), '-', '_')]",
                            "diskEncryptionSetNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').diskEncryptionSets)]",
                            "diskNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').disks)]",
                            "firewallNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').azureFirewalls)]",
                            "firewallPolicyNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').firewallPolicies)]",
                            "ipConfigurationNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').ipConfigurations)]",
                            "keyVaultNamingConvention": "[format('{0}unique_token', replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').keyVaults), '-', ''))]",
                            "logAnalyticsWorkspaceNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
                            "networkInterfaceNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').networkInterfaces)]",
                            "networkSecurityGroupNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').networkSecurityGroups)]",
                            "networkWatcherNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').networkWatchers)]",
                            "privateEndpointNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').privateEndpoints)]",
                            "privateLinkScopeName": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').privateLinkScopes)]",
                            "publicIpAddressNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').publicIPAddresses)]",
                            "resourceGroupNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').resourceGroups)]",
                            "routeTableNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').routeTables)]",
                            "storageAccountNamingConvention": "[toLower(format('{0}unique_token', replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').storageAccounts), '-', '')))]",
                            "subnetNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').subnets)]",
                            "userAssignedIdentityNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').userAssignedIdentities)]",
                            "virtualMachineNamingConvention": "[replace(replace(replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').virtualMachines), '-', ''), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation')))]",
                            "virtualNetworkNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), variables('resourceAbbreviations').virtualNetworks)]"
                          },
                          "resources": [],
                          "outputs": {
                            "resources": {
                              "type": "object",
                              "value": {
                                "actionGroup": "[variables('actionGroupNamingConvention')]",
                                "automationAccount": "[variables('automationAccountNamingConvention')]",
                                "bastionHost": "[variables('bastionHostNamingConvention')]",
                                "computeGallery": "[variables('computeGalleryNamingConvention')]",
                                "diskEncryptionSet": "[variables('diskEncryptionSetNamingConvention')]",
                                "disk": "[variables('diskNamingConvention')]",
                                "firewall": "[variables('firewallNamingConvention')]",
                                "firewallPolicy": "[variables('firewallPolicyNamingConvention')]",
                                "ipConfiguration": "[variables('ipConfigurationNamingConvention')]",
                                "keyVault": "[variables('keyVaultNamingConvention')]",
                                "logAnalyticsWorkspace": "[variables('logAnalyticsWorkspaceNamingConvention')]",
                                "networkInterface": "[variables('networkInterfaceNamingConvention')]",
                                "networkSecurityGroup": "[variables('networkSecurityGroupNamingConvention')]",
                                "networkWatcher": "[variables('networkWatcherNamingConvention')]",
                                "privateEndpoint": "[variables('privateEndpointNamingConvention')]",
                                "privateLinkScope": "[variables('privateLinkScopeName')]",
                                "publicIpAddress": "[variables('publicIpAddressNamingConvention')]",
                                "resourceGroup": "[variables('resourceGroupNamingConvention')]",
                                "routeTable": "[variables('routeTableNamingConvention')]",
                                "storageAccount": "[variables('storageAccountNamingConvention')]",
                                "subnet": "[variables('subnetNamingConvention')]",
                                "userAssignedIdentity": "[variables('userAssignedIdentityNamingConvention')]",
                                "virtualMachine": "[variables('virtualMachineNamingConvention')]",
                                "virtualNetwork": "[variables('virtualNetworkNamingConvention')]"
                              }
                            },
                            "tokens": {
                              "type": "object",
                              "value": {
                                "resource": "[variables('resourceToken')]",
                                "service": "[variables('serviceToken')]",
                                "network": "[variables('networkToken')]"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "environmentAbbreviation": {
                            "value": "[parameters('environmentAbbreviation')]"
                          },
                          "resourcePrefix": {
                            "value": "[parameters('resourcePrefix')]"
                          },
                          "resources": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resources.value]"
                          },
                          "subscriptionId": {
                            "value": "[variables('subscriptionId')]"
                          },
                          "tokens": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
                          },
                          "workloadName": {
                            "value": "[parameters('workloadName')]"
                          },
                          "workloadShortName": {
                            "value": "[parameters('workloadShortName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "6875432534491165308"
                            }
                          },
                          "parameters": {
                            "environmentAbbreviation": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            },
                            "resourcePrefix": {
                              "type": "string"
                            },
                            "resources": {
                              "type": "object"
                            },
                            "tokens": {
                              "type": "object"
                            },
                            "workloadName": {
                              "type": "string"
                            },
                            "workloadShortName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "network": {
                              "name": "[parameters('workloadName')]",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroupName": "[replace(replace(parameters('resources').resourceGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "deployUniqueResources": true,
                              "actionGroupName": "[replace(replace(parameters('resources').actionGroup, parameters('tokens').service, ''), parameters('tokens').network, parameters('workloadName'))]",
                              "automationAccountName": "[replace(replace(parameters('resources').automationAccount, parameters('tokens').service, ''), parameters('tokens').network, parameters('workloadName'))]",
                              "bastionHostIPConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'bas'), parameters('tokens').network, parameters('workloadName'))]",
                              "bastionHostName": "[replace(replace(parameters('resources').bastionHost, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "bastionHostPublicIPAddressName": "[replace(replace(parameters('resources').publicIpAddress, parameters('tokens').service, 'bas'), parameters('tokens').network, parameters('workloadName'))]",
                              "computeGalleryName": "[replace(replace(parameters('resources').computeGallery, format('_{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "diskEncryptionSetName": "[replace(replace(parameters('resources').diskEncryptionSet, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "firewallClientIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'client-afw'), parameters('tokens').network, parameters('workloadName'))]",
                              "firewallClientPublicIPAddressName": "[replace(replace(parameters('resources').publicIpAddress, parameters('tokens').service, 'client-afw'), parameters('tokens').network, parameters('workloadName'))]",
                              "firewallManagementIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'mgmt-afw'), parameters('tokens').network, parameters('workloadName'))]",
                              "firewallManagementPublicIPAddressName": "[replace(replace(parameters('resources').publicIpAddress, parameters('tokens').service, 'mgmt-afw'), parameters('tokens').network, parameters('workloadName'))]",
                              "firewallName": "[replace(replace(parameters('resources').firewall, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "firewallPolicyName": "[replace(replace(parameters('resources').firewallPolicy, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "keyVaultName": "[take(replace(replace(replace(parameters('resources').keyVault, parameters('tokens').service, ''), parameters('tokens').network, parameters('workloadShortName')), 'unique_token', uniqueString(parameters('resourcePrefix'), parameters('environmentAbbreviation'), parameters('subscriptionId'))), 24)]",
                              "keyVaultNetworkInterfaceName": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, 'kv'), parameters('tokens').network, parameters('workloadName'))]",
                              "keyVaultPrivateEndpointName": "[replace(replace(parameters('resources').privateEndpoint, parameters('tokens').service, 'kv'), parameters('tokens').network, parameters('workloadName'))]",
                              "linuxDiskName": "[replace(replace(parameters('resources').disk, parameters('tokens').service, 'linux'), parameters('tokens').network, parameters('workloadName'))]",
                              "linuxNetworkInterfaceIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'linux'), parameters('tokens').network, parameters('workloadName'))]",
                              "linuxNetworkInterfaceName": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, 'linux'), parameters('tokens').network, parameters('workloadName'))]",
                              "linuxVmName": "[replace(replace(parameters('resources').virtualMachine, parameters('tokens').service, format('l{0}', parameters('tokens').service)), parameters('tokens').network, parameters('workloadShortName'))]",
                              "logStorageAccountName": "[take(replace(replace(replace(parameters('resources').storageAccount, parameters('tokens').service, ''), parameters('tokens').network, parameters('workloadShortName')), 'unique_token', uniqueString(parameters('resourcePrefix'), parameters('environmentAbbreviation'), parameters('subscriptionId'))), 24)]",
                              "logStorageAccountNetworkInterfaceNamePrefix": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, parameters('workloadName'))]",
                              "logStorageAccountPrivateEndpointNamePrefix": "[replace(replace(parameters('resources').privateEndpoint, parameters('tokens').service, format('{0}-st', parameters('tokens').service)), parameters('tokens').network, parameters('workloadName'))]",
                              "networkSecurityGroupName": "[replace(replace(parameters('resources').networkSecurityGroup, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "networkWatcherName": "[replace(replace(parameters('resources').networkWatcher, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "routeTableName": "[replace(replace(parameters('resources').routeTable, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "subnetName": "[replace(replace(parameters('resources').subnet, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "userAssignedIdentityName": "[replace(replace(parameters('resources').userAssignedIdentity, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "virtualNetworkName": "[replace(replace(parameters('resources').virtualNetwork, format('-{0}', parameters('tokens').service), ''), parameters('tokens').network, parameters('workloadName'))]",
                              "windowsDiskName": "[replace(replace(parameters('resources').disk, parameters('tokens').service, 'windows'), parameters('tokens').network, parameters('workloadName'))]",
                              "windowsNetworkInterfaceIpConfigurationName": "[replace(replace(parameters('resources').ipConfiguration, parameters('tokens').service, 'windows'), parameters('tokens').network, parameters('workloadName'))]",
                              "windowsNetworkInterfaceName": "[replace(replace(parameters('resources').networkInterface, parameters('tokens').service, 'windows'), parameters('tokens').network, parameters('workloadName'))]",
                              "windowsVmName": "[replace(replace(parameters('resources').virtualMachine, parameters('tokens').service, format('w{0}', parameters('tokens').service)), parameters('tokens').network, parameters('workloadShortName'))]"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "network": {
                              "type": "object",
                              "value": "[variables('network')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.resourceGroupName]"
                          },
                          "tags": {
                            "value": "[variables('calculatedTags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "14258191516922489977"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/resourceGroups",
                              "apiVersion": "2019-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
                            },
                            "tags": {
                              "type": "object",
                              "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "deployNetworkWatcher": {
                            "value": "[parameters('deployNetworkWatcher')]"
                          },
                          "firewallSkuTier": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').sku.tier]"
                          },
                          "hubVirtualNetworkResourceId": {
                            "value": "[parameters('hubVirtualNetworkResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.networkSecurityGroupName]"
                          },
                          "networkSecurityGroupRules": {
                            "value": "[parameters('networkSecurityGroupRules')]"
                          },
                          "networkWatcherName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.networkWatcherName]"
                          },
                          "resourceGroupName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.resourceGroupName]"
                          },
                          "routeTableName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.routeTableName]"
                          },
                          "routeTableRouteNextHopIpAddress": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').ipConfigurations[0].properties.privateIPAddress]"
                          },
                          "subnetAddressPrefix": {
                            "value": "[parameters('subnetAddressPrefix')]"
                          },
                          "subnetName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.subnetName]"
                          },
                          "subscriptionId": {
                            "value": "[variables('subscriptionId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualNetworkAddressPrefix": {
                            "value": "[parameters('virtualNetworkAddressPrefix')]"
                          },
                          "virtualNetworkName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.virtualNetworkName]"
                          },
                          "vNetDnsServers": {
                            "value": [
                              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('firewallResourceId'), '/')[2], split(parameters('firewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('firewallResourceId'), '/')[8]), '2020-11-01').ipConfigurations[0].properties.privateIPAddress]"
                            ]
                          },
                          "workloadName": {
                            "value": "[parameters('workloadName')]"
                          },
                          "workloadShortName": {
                            "value": "[parameters('workloadShortName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "17369831668491029949"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "deployNetworkWatcher": {
                              "type": "bool"
                            },
                            "firewallSkuTier": {
                              "type": "string"
                            },
                            "hubVirtualNetworkResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            },
                            "networkSecurityGroupRules": {
                              "type": "array"
                            },
                            "networkWatcherName": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "routeTableName": {
                              "type": "string"
                            },
                            "routeTableRouteNextHopIpAddress": {
                              "type": "string"
                            },
                            "subnetAddressPrefix": {
                              "type": "string"
                            },
                            "subnetName": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "vNetDnsServers": {
                              "type": "array"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "workloadName": {
                              "type": "string"
                            },
                            "workloadShortName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "spokeNetwork",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "virtualNetworkName": {
                                    "value": "[parameters('virtualNetworkName')]"
                                  },
                                  "virtualNetworkAddressPrefix": {
                                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                                  },
                                  "vNetDnsServers": {
                                    "value": "[parameters('vNetDnsServers')]"
                                  },
                                  "networkSecurityGroupName": {
                                    "value": "[parameters('networkSecurityGroupName')]"
                                  },
                                  "networkSecurityGroupRules": {
                                    "value": "[parameters('networkSecurityGroupRules')]"
                                  },
                                  "subnetName": {
                                    "value": "[parameters('subnetName')]"
                                  },
                                  "subnetAddressPrefix": {
                                    "value": "[parameters('subnetAddressPrefix')]"
                                  },
                                  "subnetPrivateEndpointNetworkPolicies": {
                                    "value": "Disabled"
                                  },
                                  "subnetPrivateLinkServiceNetworkPolicies": {
                                    "value": "Disabled"
                                  },
                                  "deployNetworkWatcher": {
                                    "value": "[parameters('deployNetworkWatcher')]"
                                  },
                                  "firewallSkuTier": {
                                    "value": "[parameters('firewallSkuTier')]"
                                  },
                                  "networkWatcherName": {
                                    "value": "[parameters('networkWatcherName')]"
                                  },
                                  "routeTableName": {
                                    "value": "[parameters('routeTableName')]"
                                  },
                                  "routeTableRouteNextHopIpAddress": {
                                    "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "11944009476052352030"
                                    }
                                  },
                                  "parameters": {
                                    "deployNetworkWatcher": {
                                      "type": "bool"
                                    },
                                    "firewallSkuTier": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "networkSecurityGroupName": {
                                      "type": "string"
                                    },
                                    "networkSecurityGroupRules": {
                                      "type": "array"
                                    },
                                    "networkWatcherName": {
                                      "type": "string"
                                    },
                                    "routeTableName": {
                                      "type": "string"
                                    },
                                    "routeTableRouteName": {
                                      "type": "string",
                                      "defaultValue": "default_route"
                                    },
                                    "routeTableRouteAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "0.0.0.0/0"
                                    },
                                    "routeTableRouteNextHopIpAddress": {
                                      "type": "string"
                                    },
                                    "routeTableRouteNextHopType": {
                                      "type": "string",
                                      "defaultValue": "VirtualAppliance"
                                    },
                                    "subnetAddressPrefix": {
                                      "type": "string"
                                    },
                                    "subnetName": {
                                      "type": "string"
                                    },
                                    "subnetPrivateEndpointNetworkPolicies": {
                                      "type": "string"
                                    },
                                    "subnetPrivateLinkServiceNetworkPolicies": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "virtualNetworkAddressPrefix": {
                                      "type": "string"
                                    },
                                    "virtualNetworkName": {
                                      "type": "string"
                                    },
                                    "vNetDnsServers": {
                                      "type": "array"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "networkSecurityGroup",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "name": {
                                            "value": "[parameters('networkSecurityGroupName')]"
                                          },
                                          "securityRules": {
                                            "value": "[parameters('networkSecurityGroupRules')]"
                                          },
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "7780881015892644264"
                                            }
                                          },
                                          "parameters": {
                                            "location": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "securityRules": {
                                              "type": "array"
                                            },
                                            "tags": {
                                              "type": "object"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/networkSecurityGroups",
                                              "apiVersion": "2021-02-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "securityRules": "[parameters('securityRules')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "id": {
                                              "type": "string",
                                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "value": "[parameters('name')]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "routeTable",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "disableBgpRoutePropagation": {
                                            "value": true
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "name": {
                                            "value": "[parameters('routeTableName')]"
                                          },
                                          "routeAddressPrefix": {
                                            "value": "[parameters('routeTableRouteAddressPrefix')]"
                                          },
                                          "routeName": {
                                            "value": "[parameters('routeTableRouteName')]"
                                          },
                                          "routeNextHopIpAddress": {
                                            "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                                          },
                                          "routeNextHopType": {
                                            "value": "[parameters('routeTableRouteNextHopType')]"
                                          },
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "3452822322028754232"
                                            }
                                          },
                                          "parameters": {
                                            "disableBgpRoutePropagation": {
                                              "type": "bool"
                                            },
                                            "location": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "routeAddressPrefix": {
                                              "type": "string"
                                            },
                                            "routeName": {
                                              "type": "string"
                                            },
                                            "routeNextHopIpAddress": {
                                              "type": "string"
                                            },
                                            "routeNextHopType": {
                                              "type": "string"
                                            },
                                            "tags": {
                                              "type": "object"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/routeTables",
                                              "apiVersion": "2021-02-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                                "routes": [
                                                  {
                                                    "name": "[parameters('routeName')]",
                                                    "properties": {
                                                      "addressPrefix": "[parameters('routeAddressPrefix')]",
                                                      "nextHopIpAddress": "[parameters('routeNextHopIpAddress')]",
                                                      "nextHopType": "[parameters('routeNextHopType')]"
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "id": {
                                              "type": "string",
                                              "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "value": "[parameters('name')]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "condition": "[parameters('deployNetworkWatcher')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "networkWatcher",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "name": {
                                            "value": "[parameters('networkWatcherName')]"
                                          },
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "7600987290536274187"
                                            }
                                          },
                                          "parameters": {
                                            "location": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "tags": {
                                              "type": "object"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/networkWatchers",
                                              "apiVersion": "2021-02-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {}
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "virtualNetwork",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "addressPrefix": {
                                            "value": "[parameters('virtualNetworkAddressPrefix')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "name": {
                                            "value": "[parameters('virtualNetworkName')]"
                                          },
                                          "subnets": {
                                            "value": [
                                              {
                                                "name": "[parameters('subnetName')]",
                                                "properties": {
                                                  "addressPrefix": "[parameters('subnetAddressPrefix')]",
                                                  "networkSecurityGroup": {
                                                    "id": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                                                  },
                                                  "routeTable": {
                                                    "id": "[reference(resourceId('Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value]"
                                                  },
                                                  "privateEndpointNetworkPolicies": "[parameters('subnetPrivateEndpointNetworkPolicies')]",
                                                  "privateLinkServiceNetworkPolicies": "[parameters('subnetPrivateLinkServiceNetworkPolicies')]"
                                                }
                                              }
                                            ]
                                          },
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          },
                                          "vNetDnsServers": {
                                            "value": "[parameters('vNetDnsServers')]"
                                          },
                                          "firewallSkuTier": {
                                            "value": "[parameters('firewallSkuTier')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "10147997802991299261"
                                            }
                                          },
                                          "parameters": {
                                            "addressPrefix": {
                                              "type": "string"
                                            },
                                            "location": {
                                              "type": "string"
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "subnets": {
                                              "type": "array"
                                            },
                                            "tags": {
                                              "type": "object"
                                            },
                                            "vNetDnsServers": {
                                              "type": "array"
                                            },
                                            "firewallSkuTier": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/virtualNetworks",
                                              "apiVersion": "2021-02-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "addressSpace": {
                                                  "addressPrefixes": [
                                                    "[parameters('addressPrefix')]"
                                                  ]
                                                },
                                                "subnets": "[parameters('subnets')]",
                                                "dhcpOptions": "[if(and(not(equals(parameters('vNetDnsServers'), null())), or(equals(parameters('firewallSkuTier'), 'Premium'), equals(parameters('firewallSkuTier'), 'Standard'))), createObject('dnsServers', parameters('vNetDnsServers')), null())]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "value": "[parameters('name')]"
                                            },
                                            "id": {
                                              "type": "string",
                                              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                                            },
                                            "subnets": {
                                              "type": "array",
                                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').subnets]"
                                            },
                                            "addressPrefix": {
                                              "type": "string",
                                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').addressSpace.addressPrefixes[0]]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup')]",
                                        "[resourceId('Microsoft.Resources/deployments', 'networkWatcher')]",
                                        "[resourceId('Microsoft.Resources/deployments', 'routeTable')]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "virtualNetworkName": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.name.value]"
                                    },
                                    "virtualNetworkResourceId": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value]"
                                    },
                                    "virtualNetworkAddressPrefix": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.addressPrefix.value]"
                                    },
                                    "subnetName": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].name]"
                                    },
                                    "subnetAddressPrefix": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].properties.addressPrefix]"
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[0].id]"
                                    },
                                    "networkSecurityGroupName": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.name.value]"
                                    },
                                    "networkSecurityGroupResourceId": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-vnet-peering-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "spokeName": {
                                    "value": "[parameters('workloadName')]"
                                  },
                                  "spokeResourceGroupName": {
                                    "value": "[parameters('resourceGroupName')]"
                                  },
                                  "spokeVirtualNetworkName": {
                                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'spokeNetwork'), '2022-09-01').outputs.virtualNetworkName.value]"
                                  },
                                  "hubVirtualNetworkName": {
                                    "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]"
                                  },
                                  "hubVirtualNetworkResourceId": {
                                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "13987612441032900755"
                                    }
                                  },
                                  "parameters": {
                                    "spokeName": {
                                      "type": "string"
                                    },
                                    "spokeResourceGroupName": {
                                      "type": "string"
                                    },
                                    "spokeVirtualNetworkName": {
                                      "type": "string"
                                    },
                                    "hubVirtualNetworkName": {
                                      "type": "string"
                                    },
                                    "hubVirtualNetworkResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-to-hub-vnet-peering', parameters('spokeName'))]",
                                      "resourceGroup": "[parameters('spokeResourceGroupName')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[format('{0}/to-{1}', parameters('spokeVirtualNetworkName'), parameters('hubVirtualNetworkName'))]"
                                          },
                                          "remoteVirtualNetworkResourceId": {
                                            "value": "[parameters('hubVirtualNetworkResourceId')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "10509951780144584720"
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "remoteVirtualNetworkResourceId": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                              "apiVersion": "2021-02-01",
                                              "name": "[parameters('name')]",
                                              "properties": {
                                                "allowForwardedTraffic": true,
                                                "remoteVirtualNetwork": {
                                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'spokeNetwork')]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-vnet-peering-hub-{0}', parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "hubVirtualNetworkName": {
                                    "value": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]"
                                  },
                                  "spokes": {
                                    "value": [
                                      {
                                        "type": "[parameters('workloadName')]",
                                        "virtualNetworkName": "[parameters('virtualNetworkName')]",
                                        "virtualNetworkResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'spokeNetwork'), '2022-09-01').outputs.virtualNetworkResourceId.value]"
                                      }
                                    ]
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "11212369470578362410"
                                    }
                                  },
                                  "parameters": {
                                    "hubVirtualNetworkName": {
                                      "type": "string"
                                    },
                                    "spokes": {
                                      "type": "array"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "hubToSpokePeering",
                                        "count": "[length(parameters('spokes'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('hub-to-{0}-vnet-peering', parameters('spokes')[copyIndex()].type)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[format('{0}/to-{1}', parameters('hubVirtualNetworkName'), parameters('spokes')[copyIndex()].virtualNetworkName)]"
                                          },
                                          "remoteVirtualNetworkResourceId": {
                                            "value": "[parameters('spokes')[copyIndex()].virtualNetworkResourceId]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "10509951780144584720"
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string"
                                            },
                                            "remoteVirtualNetworkResourceId": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                              "apiVersion": "2021-02-01",
                                              "name": "[parameters('name')]",
                                              "properties": {
                                                "allowForwardedTraffic": true,
                                                "remoteVirtualNetwork": {
                                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'spokeNetwork')]"
                              ]
                            }
                          ],
                          "outputs": {
                            "subnetResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'spokeNetwork'), '2022-09-01').outputs.subnetResourceId.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "keyVaultPrivateDnsZoneResourceId": {
                            "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore'))]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "networkProperties": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value]"
                          },
                          "subnetResourceId": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                          },
                          "tags": {
                            "value": "[variables('calculatedTags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "3912836360709277206"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "keyVaultPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "networkProperties": {
                              "type": "object"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('networkProperties').subscriptionId]",
                              "resourceGroup": "[parameters('networkProperties').resourceGroupName]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "keyVaultName": {
                                    "value": "[parameters('networkProperties').keyVaultName]"
                                  },
                                  "keyVaultNetworkInterfaceName": {
                                    "value": "[parameters('networkProperties').keyVaultNetworkInterfaceName]"
                                  },
                                  "keyVaultPrivateDnsZoneResourceId": {
                                    "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                                  },
                                  "keyVaultPrivateEndpointName": {
                                    "value": "[parameters('networkProperties').keyVaultPrivateEndpointName]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "subnetResourceId": {
                                    "value": "[parameters('subnetResourceId')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "17697959832977472677"
                                    }
                                  },
                                  "parameters": {
                                    "diskEncryptionKeyExpirationInDays": {
                                      "type": "int",
                                      "defaultValue": 30
                                    },
                                    "keyVaultName": {
                                      "type": "string"
                                    },
                                    "keyVaultNetworkInterfaceName": {
                                      "type": "string"
                                    },
                                    "keyVaultPrivateDnsZoneResourceId": {
                                      "type": "string"
                                    },
                                    "keyVaultPrivateEndpointName": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "subnetResourceId": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('keyVaultName')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
                                      "properties": {
                                        "enabledForDeployment": false,
                                        "enabledForDiskEncryption": true,
                                        "enabledForTemplateDeployment": false,
                                        "enablePurgeProtection": true,
                                        "enableRbacAuthorization": true,
                                        "enableSoftDelete": true,
                                        "networkAcls": {
                                          "bypass": "AzureServices",
                                          "defaultAction": "Deny",
                                          "ipRules": [],
                                          "virtualNetworkRules": []
                                        },
                                        "publicNetworkAccess": "Disabled",
                                        "sku": {
                                          "family": "A",
                                          "name": "standard"
                                        },
                                        "softDeleteRetentionInDays": 7,
                                        "tenantId": "[subscription().tenantId]"
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('keyVaultPrivateEndpointName')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "customNetworkInterfaceName": "[parameters('keyVaultNetworkInterfaceName')]",
                                        "privateLinkServiceConnections": [
                                          {
                                            "name": "[parameters('keyVaultPrivateEndpointName')]",
                                            "properties": {
                                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                                              "groupIds": [
                                                "vault"
                                              ]
                                            }
                                          }
                                        ],
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2021-08-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultPrivateEndpointName'), parameters('keyVaultName'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('keyVaultPrivateEndpointName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.KeyVault/vaults/keys",
                                      "apiVersion": "2022-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'DiskEncryptionKey')]",
                                      "properties": {
                                        "attributes": {
                                          "enabled": true
                                        },
                                        "keySize": 4096,
                                        "kty": "RSA",
                                        "rotationPolicy": {
                                          "attributes": {
                                            "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                          },
                                          "lifetimeActions": [
                                            {
                                              "action": {
                                                "type": "Notify"
                                              },
                                              "trigger": {
                                                "timeBeforeExpiry": "P10D"
                                              }
                                            },
                                            {
                                              "action": {
                                                "type": "Rotate"
                                              },
                                              "trigger": {
                                                "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.KeyVault/vaults/keys",
                                      "apiVersion": "2022-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageEncryptionKey')]",
                                      "properties": {
                                        "attributes": {
                                          "enabled": true
                                        },
                                        "keySize": 4096,
                                        "kty": "RSA",
                                        "rotationPolicy": {
                                          "attributes": {
                                            "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                          },
                                          "lifetimeActions": [
                                            {
                                              "action": {
                                                "type": "Notify"
                                              },
                                              "trigger": {
                                                "timeBeforeExpiry": "P10D"
                                              }
                                            },
                                            {
                                              "action": {
                                                "type": "Rotate"
                                              },
                                              "trigger": {
                                                "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "keyUriWithVersion": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
                                    },
                                    "keyVaultResourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                                    },
                                    "keyVaultName": {
                                      "type": "string",
                                      "value": "[parameters('keyVaultName')]"
                                    },
                                    "keyVaultUri": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri]"
                                    },
                                    "storageKeyName": {
                                      "type": "string",
                                      "value": "StorageEncryptionKey"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-disk-encryption-set_{0}', parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('networkProperties').subscriptionId]",
                              "resourceGroup": "[parameters('networkProperties').resourceGroupName]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "deploymentNameSuffix": {
                                    "value": "[parameters('deploymentNameSuffix')]"
                                  },
                                  "diskEncryptionSetName": {
                                    "value": "[parameters('networkProperties').diskEncryptionSetName]"
                                  },
                                  "keyUrl": {
                                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyUriWithVersion.value]"
                                  },
                                  "keyVaultResourceId": {
                                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), createObject('value', parameters('tags')['Microsoft.Compute/diskEncryptionSets']), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "8720396217971176471"
                                    }
                                  },
                                  "parameters": {
                                    "deploymentNameSuffix": {
                                      "type": "string"
                                    },
                                    "diskEncryptionSetName": {
                                      "type": "string"
                                    },
                                    "keyUrl": {
                                      "type": "string"
                                    },
                                    "keyVaultResourceId": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Compute/diskEncryptionSets",
                                      "apiVersion": "2023-04-02",
                                      "name": "[parameters('diskEncryptionSetName')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "identity": {
                                        "type": "SystemAssigned"
                                      },
                                      "properties": {
                                        "activeKey": {
                                          "sourceVault": {
                                            "id": "[parameters('keyVaultResourceId')]"
                                          },
                                          "keyUrl": "[parameters('keyUrl')]"
                                        },
                                        "encryptionType": "EncryptionAtRestWithPlatformAndCustomerKeys",
                                        "rotationToLatestKeyVersionEnabled": true
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('assign-role-disk-encryption-set-ops-{0}', parameters('deploymentNameSuffix'))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "principalId": {
                                            "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')), '2023-04-02', 'full').identity.principalId]"
                                          },
                                          "principalType": {
                                            "value": "ServicePrincipal"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                                          },
                                          "targetResourceId": {
                                            "value": "[resourceGroup().id]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "16166471121138690529"
                                            }
                                          },
                                          "parameters": {
                                            "targetResourceId": {
                                              "type": "string"
                                            },
                                            "roleDefinitionId": {
                                              "type": "string"
                                            },
                                            "principalId": {
                                              "type": "string"
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "ServicePrincipal",
                                              "allowedValues": [
                                                "ForeignGroup",
                                                "Group",
                                                "ServicePrincipal",
                                                "User"
                                              ]
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": ""
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2020-04-01-preview",
                                              "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                              "properties": {
                                                "principalId": "[parameters('principalId')]",
                                                "principalType": "[parameters('principalType')]",
                                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                                "description": "[parameters('description')]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-user-assigned-identity-{0}', parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('networkProperties').subscriptionId]",
                              "resourceGroup": "[parameters('networkProperties').resourceGroupName]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('networkProperties').userAssignedIdentityName]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "9210810628290341713"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                                      "apiVersion": "2018-11-30",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]"
                                    },
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "roleAssignmentEncryption",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "principalId": {
                                            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                                          },
                                          "principalType": {
                                            "value": "ServicePrincipal"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                                          },
                                          "targetResourceId": {
                                            "value": "[resourceGroup().id]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "16166471121138690529"
                                            }
                                          },
                                          "parameters": {
                                            "targetResourceId": {
                                              "type": "string"
                                            },
                                            "roleDefinitionId": {
                                              "type": "string"
                                            },
                                            "principalId": {
                                              "type": "string"
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "ServicePrincipal",
                                              "allowedValues": [
                                                "ForeignGroup",
                                                "Group",
                                                "ServicePrincipal",
                                                "User"
                                              ]
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": ""
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2020-04-01-preview",
                                              "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                              "properties": {
                                                "principalId": "[parameters('principalId')]",
                                                "principalType": "[parameters('principalType')]",
                                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                                "description": "[parameters('description')]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "diskEncryptionSetResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-disk-encryption-set_{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                            },
                            "KeyVaultName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                            },
                            "keyVaultUri": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                            },
                            "keyVaultResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                            },
                            "storageKeyName": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('networkProperties').subscriptionId, parameters('networkProperties').resourceGroupName), 'Microsoft.Resources/deployments', format('deploy-user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "blobsPrivateDnsZoneResourceId": {
                            "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.blob.{0}', environment().suffixes.storage))]"
                          },
                          "keyVaultUri": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logStorageSkuName": {
                            "value": "[parameters('logStorageSkuName')]"
                          },
                          "network": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value]"
                          },
                          "serviceToken": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service]"
                          },
                          "storageEncryptionKeyName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                          },
                          "subnetResourceId": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                          },
                          "tablesPrivateDnsZoneResourceId": {
                            "value": "[resourceId(variables('hubSubscriptionId'), variables('hubResourceGroupName'), 'Microsoft.Network/privateDnsZones', format('privatelink.table.{0}', environment().suffixes.storage))]"
                          },
                          "tags": {
                            "value": "[variables('calculatedTags')]"
                          },
                          "userAssignedIdentityResourceId": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "8737645416670201102"
                            }
                          },
                          "parameters": {
                            "blobsPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "keyVaultUri": {
                              "type": "string"
                            },
                            "logStorageSkuName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "network": {
                              "type": "object"
                            },
                            "serviceToken": {
                              "type": "string"
                            },
                            "storageEncryptionKeyName": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tablesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "storage",
                              "subscriptionId": "[parameters('network').subscriptionId]",
                              "resourceGroup": "[parameters('network').resourceGroupName]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "blobsPrivateDnsZoneResourceId": {
                                    "value": "[parameters('blobsPrivateDnsZoneResourceId')]"
                                  },
                                  "keyVaultUri": {
                                    "value": "[parameters('keyVaultUri')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "serviceToken": {
                                    "value": "[parameters('serviceToken')]"
                                  },
                                  "skuName": {
                                    "value": "[parameters('logStorageSkuName')]"
                                  },
                                  "storageAccountName": {
                                    "value": "[parameters('network').logStorageAccountName]"
                                  },
                                  "storageAccountNetworkInterfaceNamePrefix": {
                                    "value": "[parameters('network').logStorageAccountNetworkInterfaceNamePrefix]"
                                  },
                                  "storageAccountPrivateEndpointNamePrefix": {
                                    "value": "[parameters('network').logStorageAccountPrivateEndpointNamePrefix]"
                                  },
                                  "storageEncryptionKeyName": {
                                    "value": "[parameters('storageEncryptionKeyName')]"
                                  },
                                  "subnetResourceId": {
                                    "value": "[parameters('subnetResourceId')]"
                                  },
                                  "tablesPrivateDnsZoneResourceId": {
                                    "value": "[parameters('tablesPrivateDnsZoneResourceId')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "userAssignedIdentityResourceId": {
                                    "value": "[parameters('userAssignedIdentityResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "6728136650948993728"
                                    }
                                  },
                                  "parameters": {
                                    "blobsPrivateDnsZoneResourceId": {
                                      "type": "string"
                                    },
                                    "keyVaultUri": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "serviceToken": {
                                      "type": "string"
                                    },
                                    "skuName": {
                                      "type": "string"
                                    },
                                    "storageAccountName": {
                                      "type": "string"
                                    },
                                    "storageAccountNetworkInterfaceNamePrefix": {
                                      "type": "string"
                                    },
                                    "storageAccountPrivateEndpointNamePrefix": {
                                      "type": "string"
                                    },
                                    "storageEncryptionKeyName": {
                                      "type": "string"
                                    },
                                    "subnetResourceId": {
                                      "type": "string"
                                    },
                                    "tablesPrivateDnsZoneResourceId": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "userAssignedIdentityResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "variables": {
                                    "zones": [
                                      "[parameters('blobsPrivateDnsZoneResourceId')]",
                                      "[parameters('tablesPrivateDnsZoneResourceId')]"
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2023-01-01",
                                      "name": "[parameters('storageAccountName')]",
                                      "location": "[parameters('location')]",
                                      "identity": {
                                        "type": "UserAssigned",
                                        "userAssignedIdentities": {
                                          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                        }
                                      },
                                      "kind": "StorageV2",
                                      "sku": {
                                        "name": "[parameters('skuName')]"
                                      },
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "accessTier": "Hot",
                                        "allowBlobPublicAccess": false,
                                        "allowCrossTenantReplication": false,
                                        "allowedCopyScope": "PrivateLink",
                                        "allowSharedKeyAccess": true,
                                        "defaultToOAuthAuthentication": false,
                                        "dnsEndpointType": "Standard",
                                        "encryption": {
                                          "identity": {
                                            "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId')]"
                                          },
                                          "keySource": "Microsoft.KeyVault",
                                          "keyvaultproperties": {
                                            "keyvaulturi": "[parameters('keyVaultUri')]",
                                            "keyname": "[parameters('storageEncryptionKeyName')]"
                                          },
                                          "requireInfrastructureEncryption": true,
                                          "services": {
                                            "blob": {
                                              "keyType": "Account",
                                              "enabled": true
                                            },
                                            "file": {
                                              "keyType": "Account",
                                              "enabled": true
                                            },
                                            "queue": {
                                              "keyType": "Account",
                                              "enabled": true
                                            },
                                            "table": {
                                              "keyType": "Account",
                                              "enabled": true
                                            }
                                          }
                                        },
                                        "minimumTlsVersion": "TLS1_2",
                                        "networkAcls": {
                                          "bypass": "AzureServices",
                                          "virtualNetworkRules": [],
                                          "ipRules": [],
                                          "defaultAction": "Deny"
                                        },
                                        "publicNetworkAccess": "Disabled",
                                        "supportsHttpsTrafficOnly": true
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "privateEndpoints",
                                        "count": "[length(variables('zones'))]"
                                      },
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-04-01",
                                      "name": "[replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "customNetworkInterfaceName": "[replace(parameters('storageAccountNetworkInterfaceNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                                        "privateLinkServiceConnections": [
                                          {
                                            "name": "[replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1])]",
                                            "properties": {
                                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                                              "groupIds": [
                                                "[split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]]"
                                              ]
                                            }
                                          }
                                        ],
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "privateDnsZoneGroups",
                                        "count": "[length(variables('zones'))]"
                                      },
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2021-08-01",
                                      "name": "[format('{0}/{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]), parameters('storageAccountName'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": [
                                          {
                                            "name": "ipconfig1",
                                            "properties": {
                                              "privateDnsZoneId": "[variables('zones')[copyIndex()]]"
                                            }
                                          }
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/privateEndpoints', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceToken'), split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "storageAccountResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('network').subscriptionId, parameters('network').resourceGroupName), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.id.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-diagnostics-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deployActivityLogDiagnosticSetting": {
                            "value": "[parameters('deployActivityLogDiagnosticSetting')]"
                          },
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "network": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value]"
                          },
                          "networkSecurityGroupDiagnosticsLogs": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                          },
                          "networkSecurityGroupDiagnosticsMetrics": {
                            "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
                          },
                          "storageAccountResourceId": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountResourceId.value]"
                          },
                          "supportedClouds": {
                            "value": "[parameters('supportedClouds')]"
                          },
                          "virtualNetworkDiagnosticsLogs": {
                            "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                          },
                          "virtualNetworkDiagnosticsMetrics": {
                            "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "4413878666182449542"
                            }
                          },
                          "parameters": {
                            "deployActivityLogDiagnosticSetting": {
                              "type": "bool"
                            },
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "network": {
                              "type": "object"
                            },
                            "networkSecurityGroupDiagnosticsLogs": {
                              "type": "array"
                            },
                            "networkSecurityGroupDiagnosticsMetrics": {
                              "type": "array"
                            },
                            "storageAccountResourceId": {
                              "type": "string"
                            },
                            "supportedClouds": {
                              "type": "array"
                            },
                            "virtualNetworkDiagnosticsLogs": {
                              "type": "array"
                            },
                            "virtualNetworkDiagnosticsMetrics": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('deployActivityLogDiagnosticSetting')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-activity-diags-{0}-{1}', parameters('network').name, parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('network').subscriptionId]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceId": {
                                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                  },
                                  "supportedClouds": {
                                    "value": "[parameters('supportedClouds')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "14852926421482749735"
                                    }
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceId": {
                                      "type": "string"
                                    },
                                    "supportedClouds": {
                                      "type": "array"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "condition": "[contains(parameters('supportedClouds'), environment().name)]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2017-05-01-preview",
                                      "name": "[format('diag-activity-log-{0}', subscription().subscriptionId)]",
                                      "properties": {
                                        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                        "logs": [
                                          {
                                            "category": "Administrative",
                                            "enabled": true
                                          },
                                          {
                                            "category": "Security",
                                            "enabled": true
                                          },
                                          {
                                            "category": "ServiceHealth",
                                            "enabled": true
                                          },
                                          {
                                            "category": "Alert",
                                            "enabled": true
                                          },
                                          {
                                            "category": "Recommendation",
                                            "enabled": true
                                          },
                                          {
                                            "category": "Policy",
                                            "enabled": true
                                          },
                                          {
                                            "category": "Autoscale",
                                            "enabled": true
                                          },
                                          {
                                            "category": "ResourceHealth",
                                            "enabled": true
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-nsg-diags-{0}-{1}', parameters('network').name, parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('network').subscriptionId]",
                              "resourceGroup": "[parameters('network').resourceGroupName]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceResourceId": {
                                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                  },
                                  "logs": {
                                    "value": "[parameters('networkSecurityGroupDiagnosticsLogs')]"
                                  },
                                  "logStorageAccountResourceId": {
                                    "value": "[parameters('storageAccountResourceId')]"
                                  },
                                  "metrics": {
                                    "value": "[parameters('networkSecurityGroupDiagnosticsMetrics')]"
                                  },
                                  "name": {
                                    "value": "[parameters('network').networkSecurityGroupName]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "14146627423781433804"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "logAnalyticsWorkspaceResourceId": {
                                      "type": "string"
                                    },
                                    "logs": {
                                      "type": "array"
                                    },
                                    "logStorageAccountResourceId": {
                                      "type": "string"
                                    },
                                    "metrics": {
                                      "type": "array"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2017-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                                      "name": "[format('{0}-diagnostics', parameters('name'))]",
                                      "properties": {
                                        "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                        "logs": "[parameters('logs')]",
                                        "metrics": "[parameters('metrics')]"
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('deploy-vnet-diags-{0}-{1}', parameters('network').name, parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('network').subscriptionId]",
                              "resourceGroup": "[parameters('network').resourceGroupName]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceResourceId": {
                                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                  },
                                  "logs": {
                                    "value": "[parameters('virtualNetworkDiagnosticsLogs')]"
                                  },
                                  "logStorageAccountResourceId": {
                                    "value": "[parameters('storageAccountResourceId')]"
                                  },
                                  "metrics": {
                                    "value": "[parameters('virtualNetworkDiagnosticsMetrics')]"
                                  },
                                  "name": {
                                    "value": "[parameters('network').virtualNetworkName]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "17731844489242416935"
                                    }
                                  },
                                  "parameters": {
                                    "logAnalyticsWorkspaceResourceId": {
                                      "type": "string"
                                    },
                                    "logs": {
                                      "type": "array"
                                    },
                                    "logStorageAccountResourceId": {
                                      "type": "string"
                                    },
                                    "metrics": {
                                      "type": "array"
                                    },
                                    "name": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2017-05-01-preview",
                                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                                      "name": "[format('{0}-diagnostics', parameters('name'))]",
                                      "properties": {
                                        "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                                        "logs": "[parameters('logs')]",
                                        "metrics": "[parameters('metrics')]"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-storage-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('deployPolicy')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('assign-policy-{0}-{1}', parameters('workloadName'), parameters('deploymentNameSuffix'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "networks": {
                            "value": [
                              "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value]"
                            ]
                          },
                          "policy": {
                            "value": "[parameters('policy')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "2594345850908952645"
                            }
                          },
                          "parameters": {
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "networks": {
                              "type": "array"
                            },
                            "policy": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "policyAssignment",
                                "count": "[length(parameters('networks'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('assign-policy-{0}-{1}', parameters('networks')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
                              "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                              "resourceGroup": "[parameters('networks')[copyIndex()].resourceGroupName]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "builtInAssignment": {
                                    "value": "[parameters('policy')]"
                                  },
                                  "logAnalyticsWorkspaceResourceId": {
                                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "14286124867588017135"
                                    }
                                  },
                                  "parameters": {
                                    "builtInAssignment": {
                                      "type": "string",
                                      "defaultValue": "NISTRev4",
                                      "allowedValues": [
                                        "NISTRev4",
                                        "NISTRev5",
                                        "IL5",
                                        "CMMC"
                                      ],
                                      "metadata": {
                                        "description": "[NISTRev4/NISTRev5/IL5/CMMC] Built-in policy assignments to assign, default is NISTRev4. IL5 is only available for AzureUsGovernment and will switch to NISTRev4 if tried in AzureCloud."
                                      }
                                    },
                                    "logAnalyticsWorkspaceResourceId": {
                                      "type": "string"
                                    },
                                    "deployRemediation": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Starts a policy remediation for the VM Agent policies in hub RG. Set to false by default since this is time consuming in deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "The location of this resource"
                                      }
                                    }
                                  },
                                  "variables": {
                                    "$fxv#0": "    {\r\n        \"listOfMembersToExcludeFromWindowsVMAdministratorsGroup\": \r\n        {\r\n        \"value\": \"admin\"\r\n        },\r\n        \"listOfMembersToIncludeInWindowsVMAdministratorsGroup\": \r\n        {\r\n        \"value\": \"azureuser\"\r\n        },\r\n        \"logAnalyticsWorkspaceIdforVMReporting\": \r\n        {\r\n        \"value\": \"<LAWORKSPACE>\"\r\n        },\r\n        \"IncludeArcMachines\": \r\n        {\r\n            \"value\": \"true\"\r\n        },\r\n        \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": \r\n        {\r\n            \"value\": \"1.2\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": \r\n        {\r\n            \"value\": \"Compliant\"\r\n        },\r\n        \"requiredRetentionDays\": \r\n        {\r\n            \"value\": \"365\"\r\n        },\r\n        \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": \r\n        {\r\n            \"value\": \"NetworkWatcherRG\"\r\n        }\r\n    }",
                                    "$fxv#1": "    {\r\n        \"IncludeArcMachines\": \r\n        {\r\n            \"value\": \"true\"\r\n        },\r\n        \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": \r\n        {\r\n            \"value\": \"1.2\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": \r\n        {\r\n            \"value\": \"Compliant\"\r\n        },\r\n        \"requiredRetentionDays\": \r\n        {\r\n            \"value\": \"365\"\r\n        },\r\n        \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": \r\n        {\r\n            \"value\": \"NetworkWatcherRG\"\r\n        }\r\n    }",
                                    "$fxv#2": "{\r\n    \"IncludeArcMachines\" : { \r\n        \"value\" : \"false\"\r\n        },\r\n        \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\" : { \r\n        \"value\" : \"Compliant\"\r\n        },\r\n        \"MinimumTLSVersionForWindowsServers\" : { \r\n        \"value\" : \"1.2\"\r\n        },\r\n        \"requiredRetentionDays\" : { \r\n        \"value\" : \"365\"\r\n        },\r\n        \"effect-febd0533-8e55-448f-b837-bd0e06f16469\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"allowedContainerImagesRegex-febd0533-8e55-448f-b837-bd0e06f16469\" : { \r\n        \"value\" : \"^(.+){0}$\"\r\n        },\r\n        \"effect-95edb821-ddaf-4404-9732-666045e056b4\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-440b515e-a580-421e-abeb-b159a61ddcbc\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-233a2a17-77ca-4fb1-9b6b-69223d272a44\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"cpuLimit-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"0\"\r\n        },\r\n        \"memoryLimit-e345eecc-fa47-480f-9e88-67dcc122b164\" : { \r\n        \"value\" : \"0\"\r\n        },\r\n        \"effect-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"runAsUserRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"MustRunAsNonRoot\"\r\n        },\r\n        \"runAsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"supplementalGroupsRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"fsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\" : { \r\n        \"value\" : \"RunAsAny\"\r\n        },\r\n        \"effect-1c6e92c9-99f0-4e55-9cf2-0c234dc48f99\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-47a1ee2f-2a2a-4576-bf2a-e0e36709c2b8\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-df49d893-a74c-421d-bc95-c663042e5b80\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-c26596ff-4d70-4e6a-9a30-c2506bd2f80c\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-511f5417-5d12-434d-ab2e-816901e72a5e\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-82985f06-dc18-4a48-bc1c-b9f4f0098cfe\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-098fc59e-46c7-4d99-9b16-64990e543d75\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"NetworkWatcherResourceGroupName\" : { \r\n        \"value\" : \"NetworkWatcherRG\"\r\n        },\r\n        \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n        \"value\" : \"enabled\"\r\n        },\r\n        \"aadAuthenticationInServiceFabricMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-71ef260a-8f18-47b7-abcb-62d0673d94dc\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-862e97cf-49fc-4a5c-9de4-40d4e2e7c8eb\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-d9da03a1-f3c3-412a-9709-947156872263\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-b4ac1030-89c5-4697-8e00-28b5ba6a8811\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-ea0dfaed-95fb-448c-934e-d6e713ce393d\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-41425d9f-d1a5-499a-9932-f8ed8453932c\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-fc4d8e41-e223-45ea-9bf5-eada37891d87\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-86efb160-8de7-451d-bc08-5d475b0aadae\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-4ec52d6d-beb7-40c4-9a9e-fe753254690e\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-64d314f6-6062-4780-a861-c23e8951bee5\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1fd32ebd-e4c3-4e13-a54a-d7422d4d95f6\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-fa298e57-9444-42ba-bf04-86e8470e32c7\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1f905d99-2ab7-462c-a6b0-f709acca6c8f\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ba769a63-b8cc-4b2d-abf6-ac33c7204be8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0aa61e00-0a01-4a3c-9945-e93cffedf0e6\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-47031206-ce96-41f8-861b-6a915f3de284\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-51522a96-0869-4791-82f3-981000c2c67f\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-b5ec538c-daa0-4006-8596-35468b9148e8\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-56a5ee18-2ae6-4810-86f7-18e39ce5629b\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-2e94d99a-8a36-4563-bc77-810d8893b671\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1fafeaf6-7927-4059-a50a-8eb2a7a6f2b5\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-99e9ccd8-3db9-4592-b0d1-14b1715a4d8a\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1f68a601-6e6d-4e42-babf-3f643a047ea2\" : { \r\n        \"value\" : \"audit\"\r\n        },\r\n        \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ca91455f-eace-4f96-be59-e6e2c35b4816\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-702dd420-7fcc-42c5-afe8-4026edd20fe0\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"diagnosticsLogsInRedisCacheMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"secureTransferToStorageAccountMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-7d092e0a-7acd-40d2-a975-dca21cae48c4\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-2a1a9cdf-e04d-429a-8416-3bfb72a1b26f\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"disableUnrestrictedNetworkToStorageAccountMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-55615ac9-af46-4a59-874e-391cc3dfb490\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1b8ca024-1d5c-4dec-8995-b1a932b41780\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-53503636-bcc9-4748-9663-5348217f160f\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-40cec1dd-a100-4920-b15b-3024fe8901ab\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-a049bf77-880b-470f-ba6d-9f21c530cf83\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-ee980b6d-0eca-4501-8d54-f6290fd512c3\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-1d84d5fb-01f6-4d12-ba4f-4a26081d403d\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"effect-37e0d2fe-28a5-43d6-a273-67d37d1f5606\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"identityDesignateMoreThanOneOwnerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"diskEncryptionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"emailNotificationToSubscriptionOwnerHighSeverityAlertsEnabledEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlDbEncryptionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vulnerabilityAssessmentOnManagedInstanceMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePHPVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"aadAuthenticationInSqlServerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vmssEndpointProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vmssOsVulnerabilitiesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"adaptiveApplicationControlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForPostgreSQLEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"ensureJavaVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityDesignateLessThanOwnersMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"securityContactEmailAddressForSubscriptionEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppRestrictCORSAccessMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithWritePermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithReadPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveDeprecatedAccountMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"ensurePythonVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePythonVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePHPVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensurePythonVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForMySQLEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"systemUpdatesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureJavaVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForWebAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForWritePermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForAPIAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureJavaVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"nextGenerationFirewallMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"useRbacRulesMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"webAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"sqlServerAuditingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vnetEnableDDoSProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"endpointProtectionMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"jitNetworkAccessMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppEnforceHttpsMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"geoRedundantStorageShouldBeEnabledForStorageAccountsEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"vmssSystemUpdatesMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"longtermGeoRedundantBackupEnabledAzureSQLDatabasesEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"systemConfigurationsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"ensureHTTPVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityEnableMFAForReadPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"containerBenchmarkMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"apiAppDisableRemoteDebuggingMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveDeprecatedAccountWithOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"vulnerabilityAssessmentOnServerMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"webAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"identityRemoveExternalAccountWithOwnerPermissionsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"functionAppRequireLatestTlsMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"kubernetesServiceVersionUpToDateMonitoringEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"sqlDbVulnerabilityAssesmentMonitoringEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        },\r\n        \"membersToIncludeInLocalAdministratorsGroup\" : { \r\n        \"value\" : \"\"\r\n        },\r\n        \"membersToExcludeInLocalAdministratorsGroup\" : { \r\n        \"value\" : \"\"\r\n        },\r\n        \"logAnalyticsWorkspaceIDForVMAgents\" : { \r\n        \"value\" : \"<LAWORKSPACE>\"\r\n        },\r\n        \"PHPLatestVersionForAppServices\" : { \r\n        \"value\" : \"7.4\"\r\n        },\r\n        \"JavaLatestVersionForAppServices\" : { \r\n        \"value\" : \"11\"\r\n        },\r\n        \"WindowsPythonLatestVersionForAppServices\" : { \r\n        \"value\" : \"3.6\"\r\n        },\r\n        \"LinuxPythonLatestVersionForAppServices\" : { \r\n        \"value\" : \"3.9\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityEmailsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"vulnerabilityAssessmentMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForWebAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityEmailsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"microsoftIaaSAntimalwareExtensionShouldBeDeployedOnWindowsServersEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"securityCenterStandardPricingTierShouldBeSelectedEffect\" : { \r\n        \"value\" : \"Audit\"\r\n        },\r\n        \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachinesEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensurePHPVersionLatestForFunctionAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlManagedInstanceAdvancedDataSecurityEmailAdminsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"securityContactPhoneNumberShouldBeProvidedForSubscriptionEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"threatDetectionTypesOnManagedInstanceMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"ensureDotNetFrameworkLatestForAPIAppEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"sqlServerAdvancedDataSecurityEmailAdminsMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"threatDetectionTypesOnServerMonitoringEffect\" : { \r\n        \"value\" : \"Disabled\"\r\n        },\r\n        \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachineScaleSetsEffect\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n        }\r\n}",
                                    "$fxv#3": "{\r\n    \"logAnalyticsWorkspaceId-f47b5582-33ec-4c5c-87c0-b010a6b2e917\" : { \r\n        \"value\" : \"<LAWORKSPACE>\"\r\n    },\r\n    \"effect-09024ccc-0c5f-475e-9457-b7c0d9ed487b\" : { \r\n        \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"MembersToExclude-69bf4abd-ca1e-4cf6-8b5a-762d42e61d4f\" :{\r\n        \"value\": \"\"\r\n    },\r\n    \"MembersToInclude-30f71ea1-ac77-4f26-9fc5-2d926bbd4ba7\": {\r\n        \"value\": \"\"\r\n    },\r\n    \"effect-0961003e-5a0a-4549-abde-af6a37f2724d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0b15565f-aa9e-48ba-8619-45960f2c314d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0e60b895-3786-45da-8377-9c6b4b6ac5f9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-17k78e20-9358-41c9-923c-fb736d382a12\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-1bc1795e-d44a-4d48-9b3b-6fff0fd5f9ba\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"PHPLatestVersion\" : { \r\n    \"value\" : \"7.3\"\r\n    },\r\n    \"effect-22bee202-a82f-4305-9a2a-6d7f44d4dedb\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-26a828e1-e88f-464e-bbb3-c134a282b9de\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-34c877ad-507e-4c82-993e-3452a6e0ad3c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-3c735d8a-a4ba-4a3a-b7cf-db7754cf57f4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-404c3081-a854-4457-ae30-26a93ef643f9\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-47a6b606-51aa-4496-8bb7-64b11cf66adc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-496223c3-ad65-4ecd-878a-bae78737e9ed\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"JavaLatestVersion\" : { \r\n    \"value\" : \"11\"\r\n    },\r\n    \"effect-4f11b553-d42e-4e3a-89be-32ca364cad4c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-4f4f78b8-e367-4b10-a341-d9a4ad5cf1c7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5c607a2e-c700-4744-8254-d77e7c9eb5e4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5f76cf89-fbf2-47fd-a3f4-b891fa780b60\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6b1cbf55-e8b6-442f-ba4c-7246b6381474\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6d555dd1-86f2-4f1c-8ed7-5abae7c6cbab\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-7008174a-fd10-4ef0-817e-fc820a951d73\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"LinuxPythonLatestVersion\" : { \r\n    \"value\" : \"3.8\"\r\n    },\r\n    \"effect-7238174a-fd10-4ef0-817e-fc820a951d73\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7261b898-8a84-4db8-9e04-18527132abb3\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-74c3584d-afae-46f7-a20a-6f8adba71a16\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-86b3d65f-7626-441e-b690-81a8b71cff60\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-88999f4c-376a-45c8-bcb3-4058f713cf39\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-8c122334-9d20-4eb8-89ea-ac9a705b74ae\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-8cb6aa8b-9e41-4f4e-aa25-089a7ac2581e\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9297c21d-2ed6-4474-b48f-163f75654ce3\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-991310cd-e9f3-47bc-b7b6-f57b557d07db\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9b597639-28e4-48eb-b506-56b05d366257\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9d0b6ea4-93e2-4578-bf2f-6bb17d22b4bc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-9daedab3-fb2d-461e-b861-71790eead4f6\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-a4af4a39-4135-47fb-b175-47fbdf85311d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\" : { \r\n    \"value\" : \"enabled\"\r\n    },\r\n    \"effect-a70ca396-0a34-413a-88e1-b956c1e683be\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-aa633080-8b72-40c4-a2d7-d00c03e80bed\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-abfb4388-5bf4-4ad7-ba82-2cd2f41ceae9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-abfb7388-5bf4-4ad7-ba99-2cd2f41cebb9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-af6cd1bd-1635-48cb-bde7-5b15693900b9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\" : { \r\n    \"value\" : \"NetworkWatcherRG\"\r\n    },\r\n    \"effect-b7ddfbdc-1260-477d-91fd-98bd9be789a6\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c3f317a7-a95c-4547-b7e7-11017ebdf2fe\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-cb510bfd-1cba-4d9f-a230-cb0976f4bb71\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e1e5fd5d-3e4c-4ce1-8661-7d1873ae6b15\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e2c1c086-2d84-4019-bff3-c44ccd95113c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e3576e28-8b17-4677-84c3-db2990658d64\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e8cbc669-f12d-49eb-93e7-9273119e9933\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e9c8d085-d9cc-4b17-9cdc-059f1f01f19e\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ebb62a0c-3560-49e1-89ed-27e074e9f8ad\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-efbde977-ba53-4479-b8e9-10b957924fbf\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f0e6e85b-9b9f-4a4b-b67b-f730d42f1b0b\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f6de0be7-9a8a-4b8a-b349-43cf02d22f7c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f8456c1c-aa66-4dfb-861a-25d127b775c9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-f9d614c5-c173-4d56-95a7-b4437057d193\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-fb893a29-21bb-418c-a157-e99480ec364c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-feedbf84-6b99-488c-acc2-71c829aa5ffc\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-3b980d31-7904-4bb7-8575-5665739a8052\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-6e2593d9-add6-4083-9c9b-4b7d2188c899\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b607c5de-e7d9-4eee-9e5c-83f1bcee4fa0\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-12430be1-6cc8-4527-a9a8-e3d38f250096\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"modeRequirement-12430be1-6cc8-4527-a9a8-e3d38f250096\" : { \r\n    \"value\" : \"Detection\"\r\n    },\r\n    \"effect-425bea59-a659-4cbb-8d31-34499bd030b8\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"modeRequirement-425bea59-a659-4cbb-8d31-34499bd030b8\" : { \r\n    \"value\" : \"Detection\"\r\n    },\r\n    \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-013e242c-8828-4970-87b3-ab247555486d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-d38fc420-0735-4ef3-ac11-c806f651a570\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-a1181c5f-672a-477a-979a-7d58aa086233\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-308fbb08-4ab8-4e67-9b29-592e93fb94fa\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-4da35fc9-c9e7-4960-aec9-797fe7d9051d\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-523b5cd1-3e23-492f-a539-13118b6d1e3a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7fe3b40f-802b-4cdd-8bd4-fd799c948cc2\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-c25d9a16-bc35-4e15-a7e5-9db606bf9ed4\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b0f33259-77d7-4c9e-aac6-3aabcfae693c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-0820b7b9-23aa-4725-a1ce-ae4558f718e5\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fab\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-358c20a6-3f9e-4f0e-97ff-c6ce485e2aac\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-5744710e-cc2f-4ee8-8809-3b11e89f4bc9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ac4a19c2-fa67-49b4-8ae5-0b2e78c49457\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c9d007d0-c057-4772-b18c-01e546713bcd\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-e372f825-a257-4fb8-9175-797a8a8627d6\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-d158790f-bfb0-486c-8631-2dc6b4e8e6af\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-e802a67a-daf5-4436-9ea6-f6d821dd0c5d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-a451c1ef-c6ca-483d-87ed-f49761e3ffb5\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftSql-servers-firewallRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-securityRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-securityRules-delete\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ae89ebca-1c92-4898-ac2c-9f63decb045c\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-d26f7642-7545-4e18-9b75-8c9bbdee3a9a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-1a4e592a-6a6e-44a5-9814-e36264ca96e7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-7796937f-307b-4598-941c-67d3a05ebfe7\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-c5447c04-a4d7-4ba8-a263-c9ee321a6858\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-41388f1c-2db0-4c25-95b2-35d7f5ccbfa9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-b02aacc0-b073-424e-8298-42b22829ee0a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-057d6cfe-9c4f-4a6d-bc60-14420ea1f1a9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0ec47710-77ff-4a3d-9181-6aa50af424d0\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-48af4db5-9b8b-401c-8e74-076be876a430\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-82339799-d096-41ae-8538-b108becf0970\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1b7aa243-30e4-4c9e-bca8-d0d3022b634a\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-ef2a8f2a-b3d9-49cd-a8a8-9a3aaaf647d9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-bb91dfba-c30d-4263-9add-9c2384e659a6\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-e71308d3-144b-4262-b144-efdc3cc90517\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2bdd0062-9d75-436e-89df-487dd8e4b3c7\" : { \r\n    \"value\" : \"Disabled\"\r\n    },\r\n    \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-6fac406b-40ca-413b-bf8e-0bf964659c25\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-048248b0-55cd-46da-b1ff-39efd52db260\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0d134df8-db83-46fb-ad72-fe0c9428c8dd\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fb2\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\" : { \r\n    \"value\" : \"audit\"\r\n    },\r\n    \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-c43e4a30-77cb-48ab-a4dd-93f175c63b57\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\" : { \r\n    \"value\" : \"Audit\"\r\n    },\r\n    \"effect-1f314764-cb73-4fc9-b863-8eca98ac36e9\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    },\r\n    \"effect-123a3936-f020-408a-ba0c-47873faf1534\" : { \r\n    \"value\" : \"AuditIfNotExists\"\r\n    }\r\n}\r\n",
                                    "modifiedAssignment": "[if(and(equals(toLower(environment().name), toLower('AzureCloud')), equals(toLower(parameters('builtInAssignment')), toLower('IL5'))), 'NISTRev4', parameters('builtInAssignment'))]",
                                    "assignmentName": "[format('{0} {1}', variables('modifiedAssignment'), resourceGroup().name)]",
                                    "agentVmssAssignmentName": "[format('Deploy VMSS Agents {0}', resourceGroup().name)]",
                                    "agentVmAssignmentName": "[format('Deploy VM Agents {0}', resourceGroup().name)]",
                                    "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                    "lawsReaderRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]"
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/policyAssignments",
                                      "apiVersion": "2020-09-01",
                                      "name": "[variables('assignmentName')]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "policyDefinitionId": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', json(replace(variables('$fxv#0'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', json(replace(variables('$fxv#2'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', json(replace(variables('$fxv#3'), '<LAWORKSPACE>', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId))))[variables('modifiedAssignment')].id]",
                                        "parameters": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', json(replace(variables('$fxv#0'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', json(replace(variables('$fxv#2'), '<LAWORKSPACE>', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', json(replace(variables('$fxv#3'), '<LAWORKSPACE>', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId))))[variables('modifiedAssignment')].parameters]"
                                      },
                                      "identity": {
                                        "type": "SystemAssigned"
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Authorization/policyAssignments",
                                      "apiVersion": "2020-09-01",
                                      "name": "[variables('agentVmssAssignmentName')]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '75714362-cae7-409e-9b99-a8e5075b7fad')]",
                                        "parameters": {
                                          "logAnalytics_1": {
                                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                          }
                                        }
                                      },
                                      "identity": {
                                        "type": "SystemAssigned"
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Authorization/policyAssignments",
                                      "apiVersion": "2020-09-01",
                                      "name": "[variables('agentVmAssignmentName')]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '55f3eceb-5573-4f18-9695-226972c6d74a')]",
                                        "parameters": {
                                          "logAnalytics_1": {
                                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                          }
                                        }
                                      },
                                      "identity": {
                                        "type": "SystemAssigned"
                                      }
                                    },
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(variables('contributorRoleDefinitionId'), variables('assignmentName'))]",
                                      "properties": {
                                        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                        "principalId": "[if(empty(variables('modifiedAssignment')), '', reference(resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName')), '2020-09-01', 'full').identity.principalId)]",
                                        "principalType": "ServicePrincipal"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmssAssignmentName'))]",
                                      "properties": {
                                        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                        "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                        "principalType": "ServicePrincipal"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2020-04-01-preview",
                                      "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmAssignmentName'))]",
                                      "properties": {
                                        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                                        "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                                        "principalType": "ServicePrincipal"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                                      ]
                                    },
                                    {
                                      "condition": "[parameters('deployRemediation')]",
                                      "type": "Microsoft.PolicyInsights/remediations",
                                      "apiVersion": "2019-07-01",
                                      "name": "VM-Agent-Policy-Remediation",
                                      "properties": {
                                        "policyAssignmentId": "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]",
                                        "resourceDiscoveryMode": "ReEvaluateCompliance"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('Assign-Laws-Role-Policy-{0}', resourceGroup().name)]",
                                      "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                                      "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "targetResourceId": {
                                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[variables('lawsReaderRoleDefinitionId')]"
                                          },
                                          "principalId": {
                                            "value": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "16166471121138690529"
                                            }
                                          },
                                          "parameters": {
                                            "targetResourceId": {
                                              "type": "string"
                                            },
                                            "roleDefinitionId": {
                                              "type": "string"
                                            },
                                            "principalId": {
                                              "type": "string"
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "ServicePrincipal",
                                              "allowedValues": [
                                                "ForeignGroup",
                                                "Group",
                                                "ServicePrincipal",
                                                "User"
                                              ]
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": ""
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2020-04-01-preview",
                                              "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                                              "properties": {
                                                "principalId": "[parameters('principalId')]",
                                                "principalType": "[parameters('principalType')]",
                                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                                "description": "[parameters('description')]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]",
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('deployDefender')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('set-{0}-sub-defender', parameters('workloadName'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "emailSecurityContact": {
                            "value": "[parameters('emailSecurityContact')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "2376507858724004427"
                            }
                          },
                          "parameters": {
                            "defenderPlans": {
                              "type": "array",
                              "defaultValue": [
                                "VirtualMachines"
                              ],
                              "metadata": {
                                "description": "Defender Paid protection Plans. Even if a customer selects the free sku, at least 1 paid protection plan must be specified."
                              }
                            },
                            "enableAutoProvisioning": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Turn automatic deployment by Defender of the MMA (OMS VM extension) on or off"
                              }
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Specify the ID of your custom Log Analytics workspace to collect Defender data."
                              }
                            },
                            "emailSecurityContact": {
                              "type": "string",
                              "metadata": {
                                "description": "Email address of the contact, in the form of john@doe.com"
                              }
                            },
                            "policySetDescription": {
                              "type": "string",
                              "defaultValue": "The Microsoft Cloud Security Benchmark initiative represents the policies and controls implementing security recommendations defined in Microsoft Cloud Security Benchmark v2, see https://aka.ms/azsecbm. This also serves as the Microsoft Defender for Cloud default policy initiative. You can directly assign this initiative, or manage its policies and compliance results within Microsoft Defender.",
                              "metadata": {
                                "description": "Policy Initiative description field"
                              }
                            },
                            "defenderSkuTier": {
                              "type": "string",
                              "defaultValue": "Free",
                              "metadata": {
                                "description": "[Standard/Free] The SKU for Defender. It defaults to \"Free\"."
                              }
                            }
                          },
                          "variables": {
                            "autoProvisioning": "[if(parameters('enableAutoProvisioning'), 'On', 'Off')]",
                            "defenderPaidPlansSpecialHandlingAzurePublicList": [
                              "Api"
                            ],
                            "defenderPaidPlanConfig": {
                              "AzureCloud": {
                                "Api": {
                                  "subPlan": "P1"
                                }
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "defenderFreeAllClouds",
                                "count": "[length(parameters('defenderPlans'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[and(not(empty(parameters('defenderPlans'))), equals(parameters('defenderSkuTier'), 'Free'))]",
                              "type": "Microsoft.Security/pricings",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('defenderPlans')[copyIndex()]]",
                              "properties": {
                                "pricingTier": "[parameters('defenderSkuTier')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "defenderStandardNoSubplanNoExtensions",
                                "count": "[length(parameters('defenderPlans'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[and(and(not(empty(parameters('defenderPlans'))), equals(parameters('defenderSkuTier'), 'Standard')), not(contains(variables('defenderPaidPlansSpecialHandlingAzurePublicList'), parameters('defenderPlans')[copyIndex()])))]",
                              "type": "Microsoft.Security/pricings",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('defenderPlans')[copyIndex()]]",
                              "properties": {
                                "pricingTier": "[parameters('defenderSkuTier')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "defenderStandardSubplanExtensionsAzureCloud",
                                "count": "[length(parameters('defenderPlans'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[and(and(and(not(empty(parameters('defenderPlans'))), equals(parameters('defenderSkuTier'), 'Standard')), contains(variables('defenderPaidPlansSpecialHandlingAzurePublicList'), parameters('defenderPlans')[copyIndex()])), equals(environment().name, 'AzureCloud'))]",
                              "type": "Microsoft.Security/pricings",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('defenderPlans')[copyIndex()]]",
                              "properties": "[if(not(contains(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'subPlan')), createObject('pricingTier', parameters('defenderSkuTier')), createObject('pricingTier', parameters('defenderSkuTier'), 'subPlan', variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]].subPlan))]"
                            },
                            {
                              "type": "Microsoft.Security/autoProvisioningSettings",
                              "apiVersion": "2019-01-01",
                              "name": "default",
                              "properties": {
                                "autoProvision": "[variables('autoProvisioning')]"
                              }
                            },
                            {
                              "type": "Microsoft.Security/workspaceSettings",
                              "apiVersion": "2019-01-01",
                              "name": "default",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "scope": "[subscription().id]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('emailSecurityContact')))]",
                              "type": "Microsoft.Security/securityContacts",
                              "apiVersion": "2020-01-01-preview",
                              "name": "default",
                              "properties": {
                                "notificationsByRole": {
                                  "roles": [
                                    "AccountAdmin",
                                    "Contributor",
                                    "Owner",
                                    "ServiceAdmin"
                                  ],
                                  "state": "On"
                                },
                                "alertNotifications": {
                                  "state": "On"
                                },
                                "emails": "[parameters('emailSecurityContact')]"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2022-06-01",
                              "name": "Microsoft Cloud Security Benchmark",
                              "properties": {
                                "displayName": "Defender Default",
                                "description": "[parameters('policySetDescription')]",
                                "enforcementMode": "DoNotEnforce",
                                "parameters": {},
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '1f3afdf9-d0c9-4c3d-847f-89da613e70a8')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "diskEncryptionSetResourceId": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
                    },
                    "network": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value]"
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                    },
                    "tokens": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-naming-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('baseline-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "computeGalleryName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.computeGalleryName]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
                  },
                  "enableBuildAutomation": {
                    "value": "[parameters('enableBuildAutomation')]"
                  },
                  "exemptPolicyAssignmentIds": {
                    "value": "[parameters('exemptPolicyAssignmentIds')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.resourceGroupName]"
                  },
                  "storageAccountResourceId": {
                    "value": "[parameters('storageAccountResourceId')]"
                  },
                  "subscriptionId": {
                    "value": "[variables('subscriptionId')]"
                  },
                  "tags": {
                    "value": "[variables('calculatedTags')]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.userAssignedIdentityName]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "12181921994224744670"
                    }
                  },
                  "parameters": {
                    "computeGalleryName": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "enableBuildAutomation": {
                      "type": "bool"
                    },
                    "exemptPolicyAssignmentIds": {
                      "type": "array"
                    },
                    "location": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[parameters('userAssignedIdentityName')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "3261785720771012004"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject())]"
                            }
                          ],
                          "outputs": {
                            "clientId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                            },
                            "principalId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('role-assignment-compute-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "6123420137652686226"
                            }
                          },
                          "parameters": {
                            "principalId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "roleDefinitionIds": [
                              "f353d9bd-d4a6-484e-a77a-8050b599b867",
                              "f1a07417-d97a-45cb-824c-7a7467783830",
                              "acdd72a7-3385-48ef-bd42-f606fba81ae7",
                              "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
                            ]
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(variables('roleDefinitionIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('principalId'), variables('roleDefinitionIds')[copyIndex()], resourceGroup().name)]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionIds')[copyIndex()])]",
                                "principalId": "[parameters('principalId')]",
                                "principalType": "ServicePrincipal"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('role-assignment-storage-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                          },
                          "storageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "4730086051603564055"
                            }
                          },
                          "parameters": {
                            "principalId": {
                              "type": "string"
                            },
                            "storageAccountResourceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', split(parameters('storageAccountResourceId'), '/')[8])]",
                              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('storageAccountResourceId'))]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                                "principalId": "[parameters('principalId')]",
                                "principalType": "ServicePrincipal"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('disk-encryption-set-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[split(parameters('diskEncryptionSetResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('diskEncryptionSetResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "diskEncryptionSetName": {
                            "value": "[split(parameters('diskEncryptionSetResourceId'), '/')[8]]"
                          },
                          "principalId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "1555328837128180474"
                            }
                          },
                          "parameters": {
                            "diskEncryptionSetName": {
                              "type": "string"
                            },
                            "principalId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "roleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Compute/diskEncryptionSets/{0}', parameters('diskEncryptionSetName'))]",
                              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')))]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                                "principalId": "[parameters('principalId')]",
                                "principalType": "ServicePrincipal"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('gallery-image-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "enableBuildAutomation": {
                            "value": "[parameters('enableBuildAutomation')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "computeGalleryName": {
                            "value": "[parameters('computeGalleryName')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityPrincipalId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "2894140398868893648"
                            }
                          },
                          "parameters": {
                            "computeGalleryName": {
                              "type": "string"
                            },
                            "enableBuildAutomation": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityPrincipalId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "roleDefinitionId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/galleries",
                              "apiVersion": "2022-01-03",
                              "name": "[parameters('computeGalleryName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject())]"
                            },
                            {
                              "condition": "[parameters('enableBuildAutomation')]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Compute/galleries/{0}', parameters('computeGalleryName'))]",
                              "name": "[guid(parameters('userAssignedIdentityPrincipalId'), variables('roleDefinitionId'), resourceId('Microsoft.Compute/galleries', parameters('computeGalleryName')))]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/galleries', parameters('computeGalleryName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "computeGalleryResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/galleries', parameters('computeGalleryName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "policyExemptions",
                        "count": "[length(range(0, length(parameters('exemptPolicyAssignmentIds'))))]"
                      },
                      "condition": "[not(empty(parameters('exemptPolicyAssignmentIds')[0]))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('PolicyExemption_{0}', range(0, length(parameters('exemptPolicyAssignmentIds')))[copyIndex()])]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "policyAssignmentId": {
                            "value": "[parameters('exemptPolicyAssignmentIds')[range(0, length(parameters('exemptPolicyAssignmentIds')))[copyIndex()]]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "13573162316169096662"
                            }
                          },
                          "parameters": {
                            "policyAssignmentId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyExemptions",
                              "apiVersion": "2022-07-01-preview",
                              "name": "exempt-imaging-resource-group",
                              "properties": {
                                "assignmentScopeValidation": "Default",
                                "description": "Exempts the imaging resource group to prevent issues with building images.",
                                "displayName": "Imaging resource group",
                                "exemptionCategory": "Mitigated",
                                "expiresOn": null,
                                "metadata": null,
                                "policyAssignmentId": "[parameters('policyAssignmentId')]",
                                "policyDefinitionReferenceIds": [],
                                "resourceSelectors": []
                              }
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "computeGalleryResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('gallery-image-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.computeGalleryResourceId.value]"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('user-assigned-identity-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('enableBuildAutomation')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('build-automation-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "actionGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.actionGroupName]"
                  },
                  "arcGisProInstaller": {
                    "value": "[parameters('arcGisProInstaller')]"
                  },
                  "automationAccountName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.automationAccountName]"
                  },
                  "automationAccountPrivateDnsZoneResourceId": {
                    "value": "[variables('automationAccountPrivateDnsZoneResourceId')]"
                  },
                  "computeGalleryImageResourceId": {
                    "value": "[parameters('computeGalleryImageResourceId')]"
                  },
                  "computeGalleryResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.computeGalleryResourceId.value]"
                  },
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "customizations": {
                    "value": "[parameters('customizations')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
                  },
                  "distributionGroup": {
                    "value": "[parameters('distributionGroup')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "enableBuildAutomation": {
                    "value": "[parameters('enableBuildAutomation')]"
                  },
                  "excludeFromLatest": {
                    "value": "[parameters('excludeFromLatest')]"
                  },
                  "hybridUseBenefit": {
                    "value": "[parameters('hybridUseBenefit')]"
                  },
                  "imageDefinitionName": {
                    "value": "[variables('imageDefinitionName')]"
                  },
                  "imageMajorVersion": {
                    "value": "[parameters('imageMajorVersion')]"
                  },
                  "imagePatchVersion": {
                    "value": "[parameters('imagePatchVersion')]"
                  },
                  "imageVirtualMachineName": {
                    "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.virtualMachineName, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'bd')]"
                  },
                  "installAccess": {
                    "value": "[parameters('installAccess')]"
                  },
                  "installArcGisPro": {
                    "value": "[parameters('installArcGisPro')]"
                  },
                  "installExcel": {
                    "value": "[parameters('installExcel')]"
                  },
                  "installOneDrive": {
                    "value": "[parameters('installOneDrive')]"
                  },
                  "installOneNote": {
                    "value": "[parameters('installOneNote')]"
                  },
                  "installOutlook": {
                    "value": "[parameters('installOutlook')]"
                  },
                  "installPowerPoint": {
                    "value": "[parameters('installPowerPoint')]"
                  },
                  "installProject": {
                    "value": "[parameters('installProject')]"
                  },
                  "installPublisher": {
                    "value": "[parameters('installPublisher')]"
                  },
                  "installSkypeForBusiness": {
                    "value": "[parameters('installSkypeForBusiness')]"
                  },
                  "installTeams": {
                    "value": "[parameters('installTeams')]"
                  },
                  "installUpdates": {
                    "value": "[parameters('installUpdates')]"
                  },
                  "installVirtualDesktopOptimizationTool": {
                    "value": "[parameters('installVirtualDesktopOptimizationTool')]"
                  },
                  "installVisio": {
                    "value": "[parameters('installVisio')]"
                  },
                  "installWord": {
                    "value": "[parameters('installWord')]"
                  },
                  "keyVaultName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.keyVaultName]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[variables('keyVaultPrivateDnsZoneResourceId')]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('localAdministratorPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('localAdministratorUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.virtualMachineName, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'mg')]"
                  },
                  "marketplaceImageOffer": {
                    "value": "[parameters('marketplaceImageOffer')]"
                  },
                  "marketplaceImagePublisher": {
                    "value": "[parameters('marketplaceImagePublisher')]"
                  },
                  "marketplaceImageSKU": {
                    "value": "[parameters('marketplaceImageSKU')]"
                  },
                  "msrdcwebrtcsvcInstaller": {
                    "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                  },
                  "officeInstaller": {
                    "value": "[parameters('officeInstaller')]"
                  },
                  "oUPath": {
                    "value": "[parameters('oUPath')]"
                  },
                  "replicaCount": {
                    "value": "[parameters('replicaCount')]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.resourceGroupName]"
                  },
                  "sourceImageType": {
                    "value": "[parameters('sourceImageType')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[parameters('storageAccountResourceId')]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "subscriptionId": {
                    "value": "[variables('subscriptionId')]"
                  },
                  "tags": {
                    "value": "[variables('calculatedTags')]"
                  },
                  "teamsInstaller": {
                    "value": "[parameters('teamsInstaller')]"
                  },
                  "timeZone": {
                    "value": "[variables('locations')[parameters('location')].timeZone]"
                  },
                  "updateService": {
                    "value": "[parameters('updateService')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityClientId.value]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
                  },
                  "vcRedistInstaller": {
                    "value": "[parameters('vcRedistInstaller')]"
                  },
                  "vDOTInstaller": {
                    "value": "[parameters('vDOTInstaller')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "wsusServer": {
                    "value": "[parameters('wsusServer')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "9040575151241198514"
                    }
                  },
                  "parameters": {
                    "actionGroupName": {
                      "type": "string"
                    },
                    "arcGisProInstaller": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "automationAccountPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "computeGalleryResourceId": {
                      "type": "string"
                    },
                    "containerName": {
                      "type": "string"
                    },
                    "customizations": {
                      "type": "array"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "distributionGroup": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "enableBuildAutomation": {
                      "type": "bool"
                    },
                    "excludeFromLatest": {
                      "type": "bool"
                    },
                    "hybridUseBenefit": {
                      "type": "bool"
                    },
                    "imageDefinitionName": {
                      "type": "string"
                    },
                    "imageMajorVersion": {
                      "type": "int"
                    },
                    "imagePatchVersion": {
                      "type": "int"
                    },
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "installAccess": {
                      "type": "bool"
                    },
                    "installArcGisPro": {
                      "type": "bool"
                    },
                    "installExcel": {
                      "type": "bool"
                    },
                    "installOneDrive": {
                      "type": "bool"
                    },
                    "installOneNote": {
                      "type": "bool"
                    },
                    "installOutlook": {
                      "type": "bool"
                    },
                    "installPowerPoint": {
                      "type": "bool"
                    },
                    "installProject": {
                      "type": "bool"
                    },
                    "installPublisher": {
                      "type": "bool"
                    },
                    "installSkypeForBusiness": {
                      "type": "bool"
                    },
                    "installTeams": {
                      "type": "bool"
                    },
                    "installUpdates": {
                      "type": "bool"
                    },
                    "installVirtualDesktopOptimizationTool": {
                      "type": "bool"
                    },
                    "installVisio": {
                      "type": "bool"
                    },
                    "installWord": {
                      "type": "bool"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "marketplaceImageOffer": {
                      "type": "string"
                    },
                    "marketplaceImagePublisher": {
                      "type": "string"
                    },
                    "marketplaceImageSKU": {
                      "type": "string"
                    },
                    "msrdcwebrtcsvcInstaller": {
                      "type": "string"
                    },
                    "officeInstaller": {
                      "type": "string"
                    },
                    "oUPath": {
                      "type": "string"
                    },
                    "replicaCount": {
                      "type": "int"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "computeGalleryImageResourceId": {
                      "type": "string"
                    },
                    "sourceImageType": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "teamsInstaller": {
                      "type": "string"
                    },
                    "timeZone": {
                      "type": "string"
                    },
                    "updateService": {
                      "type": "string"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "vcRedistInstaller": {
                      "type": "string"
                    },
                    "vDOTInstaller": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "wsusServer": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleDefinitions",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(subscription().id, 'KeyVaultDeployAction')]",
                      "properties": {
                        "roleName": "[format('KeyVaultDeployAction_{0}', subscription().subscriptionId)]",
                        "description": "Allows a principal to get but not view Key Vault secrets for ARM template deployments.",
                        "assignableScopes": [
                          "[subscription().id]"
                        ],
                        "permissions": [
                          {
                            "actions": [
                              "Microsoft.KeyVault/vaults/deploy/action"
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('virtual-network-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[split(parameters('subnetResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('subnetResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalId": {
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          },
                          "virtualNetworkName": {
                            "value": "[split(parameters('subnetResourceId'), '/')[8]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "3831662428877063007"
                            }
                          },
                          "parameters": {
                            "principalId": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "roleDefinitionId": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('virtualNetworkName'))]",
                              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')))]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                                "principalId": "[parameters('principalId')]",
                                "principalType": "ServicePrincipal"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('key-vault-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "domainJoinPassword": {
                            "value": "[parameters('domainJoinPassword')]"
                          },
                          "domainJoinUserPrincipalName": {
                            "value": "[parameters('domainJoinUserPrincipalName')]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "keyVaultPrivateDnsZoneResourceId": {
                            "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                          },
                          "localAdministratorPassword": {
                            "value": "[parameters('localAdministratorPassword')]"
                          },
                          "localAdministratorUsername": {
                            "value": "[parameters('localAdministratorUsername')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "roleDefinitionResourceId": {
                            "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(subscription().id, 'KeyVaultDeployAction'))]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityPrincipalId": {
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "1379414864345021329"
                            }
                          },
                          "parameters": {
                            "domainJoinPassword": {
                              "type": "securestring"
                            },
                            "domainJoinUserPrincipalName": {
                              "type": "securestring"
                            },
                            "keyVaultName": {
                              "type": "string"
                            },
                            "keyVaultPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "localAdministratorPassword": {
                              "type": "securestring"
                            },
                            "localAdministratorUsername": {
                              "type": "securestring"
                            },
                            "roleDefinitionResourceId": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityPrincipalId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "privateEndpointName": "[format('pe-{0}', parameters('keyVaultName'))]",
                            "Secrets": [
                              {
                                "name": "DomainJoinPassword",
                                "value": "[parameters('domainJoinPassword')]"
                              },
                              {
                                "name": "DomainJoinUserPrincipalName",
                                "value": "[parameters('domainJoinUserPrincipalName')]"
                              },
                              {
                                "name": "LocalAdministratorPassword",
                                "value": "[parameters('localAdministratorPassword')]"
                              },
                              {
                                "name": "LocalAdministratorUsername",
                                "value": "[parameters('localAdministratorUsername')]"
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2021-10-01",
                              "name": "[parameters('keyVaultName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
                              "properties": {
                                "tenantId": "[subscription().tenantId]",
                                "sku": {
                                  "family": "A",
                                  "name": "standard"
                                },
                                "enabledForDeployment": true,
                                "enabledForTemplateDeployment": true,
                                "enabledForDiskEncryption": false,
                                "enableRbacAuthorization": true,
                                "enableSoftDelete": false,
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "defaultAction": "Deny",
                                  "ipRules": [],
                                  "virtualNetworkRules": []
                                },
                                "publicNetworkAccess": "Disabled"
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-05-01",
                              "name": "[variables('privateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('privateEndpointName')]",
                                    "id": "[resourceId('Microsoft.Network/privateEndpoints/privateLinkServiceConnections', variables('privateEndpointName'), variables('privateEndpointName'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                                      "groupIds": [
                                        "vault"
                                      ]
                                    }
                                  }
                                ],
                                "customNetworkInterfaceName": "[format('nic-{0}', parameters('keyVaultName'))]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', variables('privateEndpointName'), 'default')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "privatelink-azure-automation-net",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "secrets",
                                "count": "[length(variables('Secrets'))]"
                              },
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2021-10-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('Secrets')[copyIndex()].name)]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
                              "properties": {
                                "value": "[variables('Secrets')[copyIndex()].value]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-10-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                              "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('roleDefinitionResourceId'), resourceGroup().id)]",
                              "properties": {
                                "roleDefinitionId": "[parameters('roleDefinitionResourceId')]",
                                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(subscription().id, 'KeyVaultDeployAction'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('template-spec-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "imageDefinitionName": {
                            "value": "[parameters('imageDefinitionName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "247100698972349712"
                            }
                          },
                          "parameters": {
                            "imageDefinitionName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "$fxv#0": {
                              "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "metadata": {
                                "_generator": {
                                  "name": "bicep",
                                  "version": "0.26.54.24096",
                                  "templateHash": "9174134663226790442"
                                }
                              },
                              "parameters": {
                                "arcGisProInstaller": {
                                  "type": "string",
                                  "defaultValue": ""
                                },
                                "computeGalleryImageResourceId": {
                                  "type": "string",
                                  "defaultValue": ""
                                },
                                "computeGalleryName": {
                                  "type": "string"
                                },
                                "containerName": {
                                  "type": "string"
                                },
                                "customizations": {
                                  "type": "array",
                                  "defaultValue": []
                                },
                                "deploymentNameSuffix": {
                                  "type": "string",
                                  "defaultValue": "[[utcNow('yyMMddHHs')]"
                                },
                                "diskEncryptionSetResourceId": {
                                  "type": "string"
                                },
                                "enableBuildAutomation": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "excludeFromLatest": {
                                  "type": "bool",
                                  "defaultValue": true
                                },
                                "hybridUseBenefit": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "imageDefinitionName": {
                                  "type": "string"
                                },
                                "imageMajorVersion": {
                                  "type": "int"
                                },
                                "imagePatchVersion": {
                                  "type": "int"
                                },
                                "imageVirtualMachineName": {
                                  "type": "string"
                                },
                                "installAccess": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installArcGisPro": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installExcel": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installOneDrive": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installOneNote": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installOutlook": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installPowerPoint": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installProject": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installPublisher": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installSkypeForBusiness": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installTeams": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installUpdates": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installVirtualDesktopOptimizationTool": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installVisio": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "installWord": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "keyVaultName": {
                                  "type": "string"
                                },
                                "localAdministratorPassword": {
                                  "type": "securestring",
                                  "defaultValue": ""
                                },
                                "localAdministratorUsername": {
                                  "type": "securestring",
                                  "defaultValue": ""
                                },
                                "location": {
                                  "type": "string",
                                  "defaultValue": "[[deployment().location]"
                                },
                                "managementVirtualMachineName": {
                                  "type": "string"
                                },
                                "marketplaceImageOffer": {
                                  "type": "string"
                                },
                                "marketplaceImagePublisher": {
                                  "type": "string"
                                },
                                "marketplaceImageSKU": {
                                  "type": "string"
                                },
                                "msrdcwebrtcsvcInstaller": {
                                  "type": "string",
                                  "defaultValue": ""
                                },
                                "officeInstaller": {
                                  "type": "string",
                                  "defaultValue": ""
                                },
                                "replicaCount": {
                                  "type": "int",
                                  "defaultValue": 1
                                },
                                "resourceGroupName": {
                                  "type": "string"
                                },
                                "runbookExecution": {
                                  "type": "bool",
                                  "defaultValue": false
                                },
                                "sourceImageType": {
                                  "type": "string",
                                  "defaultValue": "AzureMarketplace"
                                },
                                "storageAccountResourceId": {
                                  "type": "string"
                                },
                                "subnetResourceId": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object",
                                  "defaultValue": {}
                                },
                                "teamsInstaller": {
                                  "type": "string",
                                  "defaultValue": ""
                                },
                                "updateService": {
                                  "type": "string",
                                  "defaultValue": "MicrosoftUpdate"
                                },
                                "userAssignedIdentityClientId": {
                                  "type": "string"
                                },
                                "userAssignedIdentityPrincipalId": {
                                  "type": "string"
                                },
                                "userAssignedIdentityResourceId": {
                                  "type": "string"
                                },
                                "vcRedistInstaller": {
                                  "type": "string",
                                  "defaultValue": ""
                                },
                                "vDOTInstaller": {
                                  "type": "string",
                                  "defaultValue": ""
                                },
                                "virtualMachineSize": {
                                  "type": "string"
                                },
                                "wsusServer": {
                                  "type": "string",
                                  "defaultValue": ""
                                }
                              },
                              "variables": {
                                "autoImageVersion": "[[format('{0}.{1}.{2}', parameters('imageMajorVersion'), variables('imageSuffix'), parameters('imagePatchVersion'))]",
                                "imageSuffix": "[[take(parameters('deploymentNameSuffix'), 9)]",
                                "storageAccountName": "[[split(parameters('storageAccountResourceId'), '/')[8]]",
                                "storageEndpoint": "[[environment().suffixes.storage]",
                                "subscriptionId": "[[subscription().subscriptionId]"
                              },
                              "resources": [
                                {
                                  "condition": "[[not(parameters('enableBuildAutomation'))]",
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('management-vm-{0}', parameters('deploymentNameSuffix'))]",
                                  "subscriptionId": "[[variables('subscriptionId')]",
                                  "resourceGroup": "[[parameters('resourceGroupName')]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "containerName": {
                                        "value": "[[parameters('containerName')]"
                                      },
                                      "diskEncryptionSetResourceId": {
                                        "value": "[[parameters('diskEncryptionSetResourceId')]"
                                      },
                                      "hybridUseBenefit": {
                                        "value": "[[parameters('hybridUseBenefit')]"
                                      },
                                      "localAdministratorPassword": {
                                        "value": "[[parameters('localAdministratorPassword')]"
                                      },
                                      "localAdministratorUsername": {
                                        "value": "[[parameters('localAdministratorUsername')]"
                                      },
                                      "location": {
                                        "value": "[[parameters('location')]"
                                      },
                                      "storageAccountName": {
                                        "value": "[[split(parameters('storageAccountResourceId'), '/')[8]]"
                                      },
                                      "subnetResourceId": {
                                        "value": "[[parameters('subnetResourceId')]"
                                      },
                                      "tags": {
                                        "value": "[[parameters('tags')]"
                                      },
                                      "userAssignedIdentityPrincipalId": {
                                        "value": "[[parameters('userAssignedIdentityPrincipalId')]"
                                      },
                                      "userAssignedIdentityResourceId": {
                                        "value": "[[parameters('userAssignedIdentityResourceId')]"
                                      },
                                      "virtualMachineName": {
                                        "value": "[[parameters('managementVirtualMachineName')]"
                                      }
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.26.54.24096",
                                          "templateHash": "12968919444807468891"
                                        }
                                      },
                                      "parameters": {
                                        "containerName": {
                                          "type": "string"
                                        },
                                        "diskEncryptionSetResourceId": {
                                          "type": "string"
                                        },
                                        "hybridUseBenefit": {
                                          "type": "bool"
                                        },
                                        "localAdministratorPassword": {
                                          "type": "securestring"
                                        },
                                        "localAdministratorUsername": {
                                          "type": "securestring"
                                        },
                                        "location": {
                                          "type": "string"
                                        },
                                        "storageAccountName": {
                                          "type": "string"
                                        },
                                        "subnetResourceId": {
                                          "type": "string"
                                        },
                                        "tags": {
                                          "type": "object"
                                        },
                                        "userAssignedIdentityPrincipalId": {
                                          "type": "string"
                                        },
                                        "userAssignedIdentityResourceId": {
                                          "type": "string"
                                        },
                                        "virtualMachineName": {
                                          "type": "string"
                                        }
                                      },
                                      "resources": [
                                        {
                                          "type": "Microsoft.Network/networkInterfaces",
                                          "apiVersion": "2023-04-01",
                                          "name": "[[format('nic-{0}', parameters('virtualMachineName'))]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                                          "properties": {
                                            "ipConfigurations": [
                                              {
                                                "name": "ipconfig",
                                                "properties": {
                                                  "privateIPAllocationMethod": "Dynamic",
                                                  "subnet": {
                                                    "id": "[[parameters('subnetResourceId')]"
                                                  },
                                                  "primary": true,
                                                  "privateIPAddressVersion": "IPv4"
                                                }
                                              }
                                            ],
                                            "enableAcceleratedNetworking": true,
                                            "enableIPForwarding": false
                                          }
                                        },
                                        {
                                          "type": "Microsoft.Compute/virtualMachines",
                                          "apiVersion": "2022-03-01",
                                          "name": "[[parameters('virtualMachineName')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "identity": {
                                            "type": "UserAssigned",
                                            "userAssignedIdentities": {
                                              "[[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                            }
                                          },
                                          "properties": {
                                            "hardwareProfile": {
                                              "vmSize": "Standard_D2s_v3"
                                            },
                                            "osProfile": {
                                              "computerName": "[[parameters('virtualMachineName')]",
                                              "adminUsername": "[[parameters('localAdministratorUsername')]",
                                              "adminPassword": "[[parameters('localAdministratorPassword')]",
                                              "windowsConfiguration": {
                                                "provisionVMAgent": true,
                                                "enableAutomaticUpdates": true,
                                                "patchSettings": {
                                                  "patchMode": "AutomaticByOS",
                                                  "assessmentMode": "ImageDefault"
                                                }
                                              }
                                            },
                                            "storageProfile": {
                                              "imageReference": {
                                                "publisher": "MicrosoftWindowsServer",
                                                "offer": "WindowsServer",
                                                "sku": "2019-datacenter-core-g2",
                                                "version": "latest"
                                              },
                                              "osDisk": {
                                                "caching": "ReadWrite",
                                                "createOption": "FromImage",
                                                "deleteOption": "Delete",
                                                "managedDisk": {
                                                  "diskEncryptionSet": {
                                                    "id": "[[parameters('diskEncryptionSetResourceId')]"
                                                  },
                                                  "storageAccountType": "Premium_LRS"
                                                },
                                                "name": "[[format('disk-{0}', parameters('virtualMachineName'))]",
                                                "osType": "Windows"
                                              }
                                            },
                                            "networkProfile": {
                                              "networkInterfaces": [
                                                {
                                                  "id": "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                                                  "properties": {
                                                    "deleteOption": "Delete"
                                                  }
                                                }
                                              ]
                                            },
                                            "diagnosticsProfile": {
                                              "bootDiagnostics": {
                                                "enabled": false
                                              }
                                            },
                                            "securityProfile": {
                                              "encryptionAtHost": true,
                                              "uefiSettings": {
                                                "secureBootEnabled": true,
                                                "vTpmEnabled": true
                                              },
                                              "securityType": "TrustedLaunch"
                                            },
                                            "licenseType": "[[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                                          },
                                          "dependsOn": [
                                            "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                                          ]
                                        },
                                        {
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'appAzModules')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "properties": {
                                            "treatFailureAsDeploymentFailure": true,
                                            "asyncExecution": false,
                                            "parameters": [
                                              {
                                                "name": "ContainerName",
                                                "value": "[[parameters('containerName')]"
                                              },
                                              {
                                                "name": "StorageAccountName",
                                                "value": "[[parameters('storageAccountName')]"
                                              },
                                              {
                                                "name": "StorageEndpoint",
                                                "value": "[[environment().suffixes.storage]"
                                              },
                                              {
                                                "name": "UserAssignedIdentityObjectId",
                                                "value": "[[parameters('userAssignedIdentityPrincipalId')]"
                                              }
                                            ],
                                            "source": {
                                              "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.12.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                                            }
                                          },
                                          "dependsOn": [
                                            "[[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                                          ]
                                        }
                                      ],
                                      "outputs": {
                                        "name": {
                                          "type": "string",
                                          "value": "[[parameters('virtualMachineName')]"
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('image-vm-{0}', parameters('deploymentNameSuffix'))]",
                                  "subscriptionId": "[[variables('subscriptionId')]",
                                  "resourceGroup": "[[parameters('resourceGroupName')]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "localAdministratorPassword": "[[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorPassword')), createObject('value', parameters('localAdministratorPassword')))]",
                                      "localAdministratorUsername": "[[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorUsername')), createObject('value', parameters('localAdministratorUsername')))]",
                                      "location": {
                                        "value": "[[parameters('location')]"
                                      },
                                      "marketplaceImageOffer": {
                                        "value": "[[parameters('marketplaceImageOffer')]"
                                      },
                                      "marketplaceImagePublisher": {
                                        "value": "[[parameters('marketplaceImagePublisher')]"
                                      },
                                      "marketplaceImageSKU": {
                                        "value": "[[parameters('marketplaceImageSKU')]"
                                      },
                                      "computeGalleryImageResourceId": {
                                        "value": "[[parameters('computeGalleryImageResourceId')]"
                                      },
                                      "sourceImageType": {
                                        "value": "[[parameters('sourceImageType')]"
                                      },
                                      "subnetResourceId": {
                                        "value": "[[parameters('subnetResourceId')]"
                                      },
                                      "tags": {
                                        "value": "[[parameters('tags')]"
                                      },
                                      "userAssignedIdentityResourceId": {
                                        "value": "[[parameters('userAssignedIdentityResourceId')]"
                                      },
                                      "virtualMachineName": {
                                        "value": "[[parameters('imageVirtualMachineName')]"
                                      },
                                      "virtualMachineSize": {
                                        "value": "[[parameters('virtualMachineSize')]"
                                      }
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.26.54.24096",
                                          "templateHash": "3416440754020274895"
                                        }
                                      },
                                      "parameters": {
                                        "localAdministratorPassword": {
                                          "type": "securestring"
                                        },
                                        "localAdministratorUsername": {
                                          "type": "securestring"
                                        },
                                        "location": {
                                          "type": "string"
                                        },
                                        "marketplaceImageOffer": {
                                          "type": "string"
                                        },
                                        "marketplaceImagePublisher": {
                                          "type": "string"
                                        },
                                        "marketplaceImageSKU": {
                                          "type": "string"
                                        },
                                        "computeGalleryImageResourceId": {
                                          "type": "string"
                                        },
                                        "sourceImageType": {
                                          "type": "string"
                                        },
                                        "subnetResourceId": {
                                          "type": "string"
                                        },
                                        "tags": {
                                          "type": "object"
                                        },
                                        "userAssignedIdentityResourceId": {
                                          "type": "string"
                                        },
                                        "virtualMachineName": {
                                          "type": "string"
                                        },
                                        "virtualMachineSize": {
                                          "type": "string"
                                        }
                                      },
                                      "variables": {
                                        "imageReference": "[[if(equals(parameters('sourceImageType'), 'AzureComputeGallery'), createObject('id', parameters('computeGalleryImageResourceId')), createObject('publisher', parameters('marketplaceImagePublisher'), 'offer', parameters('marketplaceImageOffer'), 'sku', parameters('marketplaceImageSKU'), 'version', 'latest'))]"
                                      },
                                      "resources": [
                                        {
                                          "type": "Microsoft.Network/networkInterfaces",
                                          "apiVersion": "2022-05-01",
                                          "name": "[[format('nic-{0}', parameters('virtualMachineName'))]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                                          "properties": {
                                            "ipConfigurations": [
                                              {
                                                "name": "ipconfig1",
                                                "properties": {
                                                  "privateIPAllocationMethod": "Dynamic",
                                                  "subnet": {
                                                    "id": "[[parameters('subnetResourceId')]"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "Microsoft.Compute/virtualMachines",
                                          "apiVersion": "2022-03-01",
                                          "name": "[[parameters('virtualMachineName')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "identity": {
                                            "type": "UserAssigned",
                                            "userAssignedIdentities": {
                                              "[[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                            }
                                          },
                                          "properties": {
                                            "hardwareProfile": {
                                              "vmSize": "[[parameters('virtualMachineSize')]"
                                            },
                                            "osProfile": {
                                              "computerName": "[[parameters('virtualMachineName')]",
                                              "adminUsername": "[[parameters('localAdministratorUsername')]",
                                              "adminPassword": "[[parameters('localAdministratorPassword')]"
                                            },
                                            "storageProfile": {
                                              "imageReference": "[[variables('imageReference')]",
                                              "osDisk": {
                                                "createOption": "FromImage",
                                                "deleteOption": "Delete",
                                                "managedDisk": {
                                                  "storageAccountType": "StandardSSD_LRS"
                                                },
                                                "name": "[[format('disk-{0}', parameters('virtualMachineName'))]"
                                              }
                                            },
                                            "networkProfile": {
                                              "networkInterfaces": [
                                                {
                                                  "id": "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                                                  "properties": {
                                                    "deleteOption": "Delete"
                                                  }
                                                }
                                              ]
                                            },
                                            "diagnosticsProfile": {
                                              "bootDiagnostics": {
                                                "enabled": false
                                              }
                                            },
                                            "securityProfile": {
                                              "uefiSettings": {
                                                "secureBootEnabled": true,
                                                "vTpmEnabled": true
                                              },
                                              "securityType": "TrustedLaunch"
                                            }
                                          },
                                          "dependsOn": [
                                            "[[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                                          ]
                                        }
                                      ],
                                      "outputs": {
                                        "name": {
                                          "type": "string",
                                          "value": "[[parameters('virtualMachineName')]"
                                        },
                                        "resourceId": {
                                          "type": "string",
                                          "value": "[[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('customizations-{0}', parameters('deploymentNameSuffix'))]",
                                  "subscriptionId": "[[variables('subscriptionId')]",
                                  "resourceGroup": "[[parameters('resourceGroupName')]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "arcGisProInstaller": {
                                        "value": "[[parameters('arcGisProInstaller')]"
                                      },
                                      "containerName": {
                                        "value": "[[parameters('containerName')]"
                                      },
                                      "customizations": {
                                        "value": "[[parameters('customizations')]"
                                      },
                                      "installAccess": {
                                        "value": "[[parameters('installAccess')]"
                                      },
                                      "installArcGisPro": {
                                        "value": "[[parameters('installArcGisPro')]"
                                      },
                                      "installExcel": {
                                        "value": "[[parameters('installExcel')]"
                                      },
                                      "installOneDrive": {
                                        "value": "[[parameters('installOneDrive')]"
                                      },
                                      "installOneNote": {
                                        "value": "[[parameters('installOneNote')]"
                                      },
                                      "installOutlook": {
                                        "value": "[[parameters('installOutlook')]"
                                      },
                                      "installPowerPoint": {
                                        "value": "[[parameters('installPowerPoint')]"
                                      },
                                      "installProject": {
                                        "value": "[[parameters('installProject')]"
                                      },
                                      "installPublisher": {
                                        "value": "[[parameters('installPublisher')]"
                                      },
                                      "installSkypeForBusiness": {
                                        "value": "[[parameters('installSkypeForBusiness')]"
                                      },
                                      "installTeams": {
                                        "value": "[[parameters('installTeams')]"
                                      },
                                      "installVirtualDesktopOptimizationTool": {
                                        "value": "[[parameters('installVirtualDesktopOptimizationTool')]"
                                      },
                                      "installVisio": {
                                        "value": "[[parameters('installVisio')]"
                                      },
                                      "installWord": {
                                        "value": "[[parameters('installWord')]"
                                      },
                                      "location": {
                                        "value": "[[parameters('location')]"
                                      },
                                      "msrdcwebrtcsvcInstaller": {
                                        "value": "[[parameters('msrdcwebrtcsvcInstaller')]"
                                      },
                                      "officeInstaller": {
                                        "value": "[[parameters('officeInstaller')]"
                                      },
                                      "storageAccountName": {
                                        "value": "[[variables('storageAccountName')]"
                                      },
                                      "storageEndpoint": {
                                        "value": "[[variables('storageEndpoint')]"
                                      },
                                      "tags": {
                                        "value": "[[parameters('tags')]"
                                      },
                                      "teamsInstaller": {
                                        "value": "[[parameters('teamsInstaller')]"
                                      },
                                      "userAssignedIdentityObjectId": {
                                        "value": "[[parameters('userAssignedIdentityPrincipalId')]"
                                      },
                                      "vcRedistInstaller": {
                                        "value": "[[parameters('vcRedistInstaller')]"
                                      },
                                      "vDotInstaller": {
                                        "value": "[[parameters('vDOTInstaller')]"
                                      },
                                      "virtualMachineName": {
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                                      }
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.26.54.24096",
                                          "templateHash": "10008712211219806019"
                                        }
                                      },
                                      "parameters": {
                                        "arcGisProInstaller": {
                                          "type": "string"
                                        },
                                        "containerName": {
                                          "type": "string"
                                        },
                                        "customizations": {
                                          "type": "array"
                                        },
                                        "installAccess": {
                                          "type": "bool"
                                        },
                                        "installArcGisPro": {
                                          "type": "bool"
                                        },
                                        "installExcel": {
                                          "type": "bool"
                                        },
                                        "installOneDrive": {
                                          "type": "bool"
                                        },
                                        "installOneNote": {
                                          "type": "bool"
                                        },
                                        "installOutlook": {
                                          "type": "bool"
                                        },
                                        "installPowerPoint": {
                                          "type": "bool"
                                        },
                                        "installProject": {
                                          "type": "bool"
                                        },
                                        "installPublisher": {
                                          "type": "bool"
                                        },
                                        "installSkypeForBusiness": {
                                          "type": "bool"
                                        },
                                        "installTeams": {
                                          "type": "bool"
                                        },
                                        "installVirtualDesktopOptimizationTool": {
                                          "type": "bool"
                                        },
                                        "installVisio": {
                                          "type": "bool"
                                        },
                                        "installWord": {
                                          "type": "bool"
                                        },
                                        "location": {
                                          "type": "string"
                                        },
                                        "msrdcwebrtcsvcInstaller": {
                                          "type": "string"
                                        },
                                        "officeInstaller": {
                                          "type": "string"
                                        },
                                        "storageAccountName": {
                                          "type": "string"
                                        },
                                        "storageEndpoint": {
                                          "type": "string"
                                        },
                                        "tags": {
                                          "type": "object"
                                        },
                                        "teamsInstaller": {
                                          "type": "string"
                                        },
                                        "userAssignedIdentityObjectId": {
                                          "type": "string"
                                        },
                                        "vcRedistInstaller": {
                                          "type": "string"
                                        },
                                        "vDotInstaller": {
                                          "type": "string"
                                        },
                                        "virtualMachineName": {
                                          "type": "string"
                                        }
                                      },
                                      "variables": {
                                        "installAccessVar": "[[format('{0}installAccess', parameters('installAccess'))]",
                                        "installers": "[[parameters('customizations')]",
                                        "installExcelVar": "[[format('{0}installWord', parameters('installExcel'))]",
                                        "installOneDriveVar": "[[format('{0}installOneDrive', parameters('installOneDrive'))]",
                                        "installOneNoteVar": "[[format('{0}installOneNote', parameters('installOneNote'))]",
                                        "installOutlookVar": "[[format('{0}installOutlook', parameters('installOutlook'))]",
                                        "installPowerPointVar": "[[format('{0}installPowerPoint', parameters('installPowerPoint'))]",
                                        "installProjectVar": "[[format('{0}installProject', parameters('installProject'))]",
                                        "installPublisherVar": "[[format('{0}installPublisher', parameters('installPublisher'))]",
                                        "installSkypeForBusinessVar": "[[format('{0}installSkypeForBusiness', parameters('installSkypeForBusiness'))]",
                                        "installVisioVar": "[[format('{0}installVisio', parameters('installVisio'))]",
                                        "installWordVar": "[[format('{0}installWord', parameters('installWord'))]"
                                      },
                                      "resources": [
                                        {
                                          "[string('copy')]": {
                                            "name": "applications",
                                            "count": "[[length(variables('installers'))]",
                                            "mode": "serial",
                                            "batchSize": 1
                                          },
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), format('app-{0}', variables('installers')[copyIndex()].name))]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "properties": {
                                            "treatFailureAsDeploymentFailure": true,
                                            "asyncExecution": false,
                                            "parameters": [
                                              {
                                                "name": "UserAssignedIdentityObjectId",
                                                "value": "[[parameters('userAssignedIdentityObjectId')]"
                                              },
                                              {
                                                "name": "StorageAccountName",
                                                "value": "[[parameters('storageAccountName')]"
                                              },
                                              {
                                                "name": "ContainerName",
                                                "value": "[[parameters('containerName')]"
                                              },
                                              {
                                                "name": "StorageEndpoint",
                                                "value": "[[parameters('storageEndpoint')]"
                                              },
                                              {
                                                "name": "Blobname",
                                                "value": "[[variables('installers')[copyIndex()].blobName]"
                                              },
                                              {
                                                "name": "Installer",
                                                "value": "[[variables('installers')[copyIndex()].name]"
                                              },
                                              {
                                                "name": "Arguments",
                                                "value": "[[variables('installers')[copyIndex()].arguments]"
                                              }
                                            ],
                                            "source": {
                                              "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName,\r\n          [string]$Installer,\r\n          [string]$Arguments\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        New-Item -Path $env:windir\\temp -Name $Installer -ItemType \"directory\" -Force\r\n        New-Item -Path $env:windir\\temp\\$Installer -Name 'Files' -ItemType \"directory\" -Force\r\n        #Invoking WebClient to download blobs because it is more efficient than Invoke-WebRequest for large files.\r\n        $WebClient = New-Object System.Net.WebClient\r\n        $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n        $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n        $webClient.DownloadFile(\"$StorageAccountUrl$ContainerName/$BlobName\", \"$env:windir\\temp\\$Installer\\Files\\$Blobname\")\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\\$Installer\r\n        if($Blobname -like (\"*.exe\"))\r\n        {\r\n          Start-Process -FilePath $env:windir\\temp\\$Installer\\Files\\$Blobname -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.msi\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.bat\"))\r\n        {\r\n          Start-Process -FilePath cmd.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.ps1\"))\r\n        {\r\n          Start-Process -FilePath PowerShell.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.zip\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Expand-Archive -Path $env:windir\\temp\\$Installer\\Files\\$Blobname -DestinationPath $env:windir\\temp\\$Installer\\Files -Force\r\n          Remove-Item -Path .\\$Blobname -Force -Recurse\r\n        }\r\n        Write-Host \"Removing $Installer Files\"\r\n        Remove-item $env:windir\\temp\\$Installer -Force -Recurse -Confirm:$false\r\n       "
                                            }
                                          }
                                        },
                                        {
                                          "condition": "[[or(or(or(or(or(or(or(or(or(or(parameters('installAccess'), parameters('installExcel')), parameters('installOneDrive')), parameters('installOneNote')), parameters('installOutlook')), parameters('installPowerPoint')), parameters('installPublisher')), parameters('installSkypeForBusiness')), parameters('installWord')), parameters('installVisio')), parameters('installProject'))]",
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'office')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "properties": {
                                            "treatFailureAsDeploymentFailure": true,
                                            "asyncExecution": false,
                                            "parameters": [
                                              {
                                                "name": "InstallAccess",
                                                "value": "[[variables('installAccessVar')]"
                                              },
                                              {
                                                "name": "InstallWord",
                                                "value": "[[variables('installWordVar')]"
                                              },
                                              {
                                                "name": "InstallExcel",
                                                "value": "[[variables('installExcelVar')]"
                                              },
                                              {
                                                "name": "InstallOneDrive",
                                                "value": "[[variables('installOneDriveVar')]"
                                              },
                                              {
                                                "name": "InstallOneNote",
                                                "value": "[[variables('installOneNoteVar')]"
                                              },
                                              {
                                                "name": "InstallOutlook",
                                                "value": "[[variables('installOutlookVar')]"
                                              },
                                              {
                                                "name": "InstallPowerPoint",
                                                "value": "[[variables('installPowerPointVar')]"
                                              },
                                              {
                                                "name": "InstallProject",
                                                "value": "[[variables('installProjectVar')]"
                                              },
                                              {
                                                "name": "InstallPublisher",
                                                "value": "[[variables('installPublisherVar')]"
                                              },
                                              {
                                                "name": "InstallSkypeForBusiness",
                                                "value": "[[variables('installSkypeForBusinessVar')]"
                                              },
                                              {
                                                "name": "InstallVisio",
                                                "value": "[[variables('installVisioVar')]"
                                              },
                                              {
                                                "name": "UserAssignedIdentityObjectId",
                                                "value": "[[parameters('userAssignedIdentityObjectId')]"
                                              },
                                              {
                                                "name": "StorageAccountName",
                                                "value": "[[parameters('storageAccountName')]"
                                              },
                                              {
                                                "name": "ContainerName",
                                                "value": "[[parameters('containerName')]"
                                              },
                                              {
                                                "name": "StorageEndpoint",
                                                "value": "[[parameters('storageEndpoint')]"
                                              },
                                              {
                                                "name": "BlobName",
                                                "value": "[[parameters('officeInstaller')]"
                                              }
                                            ],
                                            "source": {
                                              "script": "      param(\r\n        [string]$InstallAccess,\r\n        [string]$InstallExcel,\r\n        [string]$InstallOneDrive,\r\n        [string]$InstallOutlook,\r\n        [string]$InstallProject,\r\n        [string]$InstallPublisher,\r\n        [string]$InstallSkypeForBusiness,\r\n        [string]$InstallVisio,\r\n        [string]$InstallWord,\r\n        [string]$InstallOneNote,\r\n        [string]$InstallPowerPoint,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      New-Item -Path \"$env:windir\\temp\\office\" -ItemType \"directory\" -Force\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $o365ConfigHeader = Set-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Configuration><Add OfficeClientEdition=\"64\" Channel=\"Current\">'\r\n      $o365OfficeHeader = Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"O365ProPlusRetail\"><Language ID=\"en-us\" /><ExcludeApp ID=\"Teams\"/>'\r\n      if($InstallAccess -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Access\" />'\r\n      }\r\n      if($InstallExcel -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Excel\" />'\r\n      }\r\n      if($InstallOneDrive -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"OneDrive\" />'\r\n      }\r\n      if($InstallOneNote -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"OneNote\" />'\r\n      }\r\n      if($InstallOutlook -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Outlook\" />'\r\n      }\r\n      if($InstallPowerPoint -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"PowerPoint\" />'\r\n      }\r\n      if($InstallPublisher -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Publisher\" />'\r\n      }\r\n      if($InstallSkypeForBusiness -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Lync\" />'\r\n      }\r\n      if($InstallWord -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Word\" />'\r\n      }\r\n      $addOfficefooter = Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Product>'\r\n      if($InstallProject -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"ProjectProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      if($InstallVisio -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"VisioProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Add><Updates Enabled=\"FALSE\" /><Display Level=\"None\" AcceptEULA=\"TRUE\" /><Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\"/>'\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Property Name=\"SharedComputerLicensing\" Value=\"1\"/>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Configuration>'\r\n      $Installer = \"$env:windir\\temp\\office\\office.exe\"\r\n      #$DownloadLinks = Invoke-WebRequest -Uri \"https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117\" -UseBasicParsing\r\n      #$URL = $DownloadLinks.Links.href | Where-Object {$_ -like \"https://download.microsoft.com/download/*officedeploymenttool*\"} | Select-Object -First 1\r\n      #Invoke-WebRequest -Uri $URL -OutFile $Installer -UseBasicParsing\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $Installer\r\n      Start-Process -FilePath $Installer -ArgumentList \"/extract:$env:windir\\temp\\office /quiet /passive /norestart\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Downloaded & extracted the Office 365 Deployment Toolkit\"\r\n      Start-Process -FilePath \"$env:windir\\temp\\office\\setup.exe\" -ArgumentList \"/configure $env:windir\\temp\\office\\office365x64.xml\" -Wait -PassThru -ErrorAction \"Stop\" | Out-Null\r\n      Write-Host \"Installed the selected Office365 applications\"\r\n      Write-Host \"Removing Office FIles\"\r\n      Remove-item -Path  \"$env:windir\\temp\\office\" -Force -Confirm:$false -Recurse\r\n      "
                                            }
                                          },
                                          "dependsOn": [
                                            "applications"
                                          ]
                                        },
                                        {
                                          "condition": "[[parameters('installVirtualDesktopOptimizationTool')]",
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'vdot')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "properties": {
                                            "treatFailureAsDeploymentFailure": true,
                                            "asyncExecution": false,
                                            "parameters": [
                                              {
                                                "name": "UserAssignedIdentityObjectId",
                                                "value": "[[parameters('userAssignedIdentityObjectId')]"
                                              },
                                              {
                                                "name": "StorageAccountName",
                                                "value": "[[parameters('storageAccountName')]"
                                              },
                                              {
                                                "name": "ContainerName",
                                                "value": "[[parameters('containerName')]"
                                              },
                                              {
                                                "name": "StorageEndpoint",
                                                "value": "[[parameters('storageEndpoint')]"
                                              },
                                              {
                                                "name": "BlobName",
                                                "value": "[[parameters('vDotInstaller')]"
                                              }
                                            ],
                                            "source": {
                                              "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $ZIP = \"$env:windir\\temp\\VDOT.zip\"\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\r\n        Unblock-File -Path $ZIP\r\n        Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\" -Force\r\n        $Path = (Get-ChildItem -Path \"$env:windir\\temp\" -Recurse | Where-Object {$_.Name -eq \"Windows_VDOT.ps1\"}).FullName\r\n        $Script = Get-Content -Path $Path\r\n        $ScriptUpdate = $Script.Replace(\"Set-NetAdapterAdvancedProperty\",\"#Set-NetAdapterAdvancedProperty\")\r\n        $ScriptUpdate | Set-Content -Path $Path\r\n        & $Path -Optimizations @(\"AppxPackages\",\"Autologgers\",\"DefaultUserSettings\",\"LGPO\";\"NetworkOptimizations\",\"ScheduledTasks\",\"Services\",\"WindowsMediaPlayer\") -AdvancedOptimizations \"All\" -AcceptEULA\r\n        Write-Host \"Removing VDOT Files\"\r\n        # Expecting this format for vDot ZIP, update if using a different ZIP format for folder structure\r\n        Remove-Item -Path $env:windir\\temp\\Virtual-Desktop-Optimization-Tool-main -Force -Recurse -Confirm:$false\r\n        "
                                            },
                                            "timeoutInSeconds": 640
                                          },
                                          "dependsOn": [
                                            "applications",
                                            "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]",
                                            "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'teams')]"
                                          ]
                                        },
                                        {
                                          "condition": "[[parameters('installTeams')]",
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'teams')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "properties": {
                                            "treatFailureAsDeploymentFailure": true,
                                            "asyncExecution": false,
                                            "parameters": [
                                              {
                                                "name": "UserAssignedIdentityObjectId",
                                                "value": "[[parameters('userAssignedIdentityObjectId')]"
                                              },
                                              {
                                                "name": "StorageAccountName",
                                                "value": "[[parameters('storageAccountName')]"
                                              },
                                              {
                                                "name": "ContainerName",
                                                "value": "[[parameters('containerName')]"
                                              },
                                              {
                                                "name": "StorageEndpoint",
                                                "value": "[[parameters('storageEndpoint')]"
                                              },
                                              {
                                                "name": "BlobName",
                                                "value": "[[parameters('teamsInstaller')]"
                                              },
                                              {
                                                "name": "BlobName2",
                                                "value": "[[parameters('vcRedistInstaller')]"
                                              },
                                              {
                                                "name": "BlobName3",
                                                "value": "[[parameters('msrdcwebrtcsvcInstaller')]"
                                              }
                                            ],
                                            "source": {
                                              "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$BlobName2,\r\n        [string]$BlobName3\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $vcRedistFile = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      $webSocketFile = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      $teamsFile = \"$env:windir\\temp\\teams.msi\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $teamsFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName2\" -OutFile $vcRedistFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName3\" -OutFile  $webSocketFile\r\n\r\n      # Enable media optimizations for Team\r\n      Start-Process \"reg\" -ArgumentList \"add HKLM\\SOFTWARE\\Microsoft\\Teams /v IsWVDEnvironment /t REG_DWORD /d 1 /f\" -Wait -PassThru -ErrorAction \"Stop\"\r\n      Write-Host \"Enabled media optimizations for Teams\"\r\n      # Download & install the latest version of Microsoft Visual C++ Redistributable\r\n      #$File = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/vs/16/release/vc_redist.x64.exe\" -OutFile $File\r\n      Start-Process -FilePath  $vcRedistFile -Args \"/install /quiet /norestart /log vcdist.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the latest version of Microsoft Visual C++ Redistributable\"\r\n      # Download & install the Remote Desktop WebRTC Redirector Service\r\n      #$File = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/msrdcwebrtcsvc/msi\" -OutFile $File\r\n      Start-Process -FilePath msiexec.exe -Args \"/i  $webSocketFile /quiet /qn /norestart /passive /log webSocket.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the Remote Desktop WebRTC Redirector Service\"\r\n      # Install Teams\r\n      #$File = \"$env:windir\\temp\\teams.msi\"\r\n      #Write-host $($TeamsUrl)\r\n      #Invoke-WebRequest -Uri \"$TeamsUrl\" -OutFile $File\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\"ALLUSER=1\"}else{\"\"}\r\n      Start-Process -FilePath msiexec.exe -Args \"/i $teamsFile /quiet /qn /norestart /passive /log teams.log $PerMachineConfiguration ALLUSERS=1\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed Teams\"\r\n      Write-Host \"Removing Teams Files\"\r\n      Remove-Item \"$teamsFile\" -Force -Confirm:$false\r\n      Remove-Item \"$vcRedistFile\" -Force -Confirm:$false\r\n      Remove-Item \"$webSocketFile\" -Force -Confirm:$false\r\n      "
                                            }
                                          },
                                          "dependsOn": [
                                            "applications",
                                            "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]"
                                          ]
                                        },
                                        {
                                          "condition": "[[parameters('installArcGisPro')]",
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'arcGisPro')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "properties": {
                                            "treatFailureAsDeploymentFailure": true,
                                            "asyncExecution": false,
                                            "parameters": [
                                              {
                                                "name": "UserAssignedIdentityObjectId",
                                                "value": "[[parameters('userAssignedIdentityObjectId')]"
                                              },
                                              {
                                                "name": "StorageAccountName",
                                                "value": "[[parameters('storageAccountName')]"
                                              },
                                              {
                                                "name": "ContainerName",
                                                "value": "[[parameters('containerName')]"
                                              },
                                              {
                                                "name": "StorageEndpoint",
                                                "value": "[[parameters('storageEndpoint')]"
                                              },
                                              {
                                                "name": "BlobName",
                                                "value": "[[parameters('arcGisProInstaller')]"
                                              }
                                            ],
                                            "source": {
                                              "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      # Retrieve Files\r\n      New-Item -Path $env:windir\\temp -Name arcgis -ItemType \"directory\" -Force\r\n      $ZIP = \"$env:windir\\temp\\arcgispro.zip\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n      Start-Sleep -Seconds 30\r\n      Set-Location -Path $env:windir\\temp\r\n      Unblock-File -Path $ZIP\r\n      Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\\arcgis\" -Force\r\n\r\n      # Install Arcgis\r\n      $arcGisProMsi = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -eq \"ArcGisPro.msi\"})\r\n      $arcGisProMsp = (Get-ChildItem \"$env:windir\\temp\\arcgis\" -Recurse | where {$_.Extension -eq \".msp\"})\r\n      $winDesktopRuntime = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -like \"windowsdesktop-runtime-*\"})\r\n\r\n      # If found Install Windows Desktop Runtime Pre-Req\r\n      try {\r\n        if ($winDesktopRuntime ){\r\n            Start-Process -FilePath \"$($winDesktopRuntime.Directory.FullName)\\$winDesktopRuntime\" -ArgumentList \"/install /quiet /norestart\" -Wait -NoNewWindow -PassThru\r\n        }\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n        # Install ArcGis Pro\r\n        $arcGisProArguments = \"/i $($arcGisProMsi.Directory.FullName)\\$arcGisProMsi ALLUSERS=1 ACCEPTEULA=yes ENABLEEUEI=0 SOFTWARE_CLASS=Professional AUTHORIZATION_TYPE=NAMED_USER LOCK_AUTH_SETTINGS=False ArcGIS_Connection=TRUE /qn /norestart\"\r\n        Start-Process \"msiexec.exe\" -ArgumentList $arcGisProArguments  -Wait -NoNewWindow -PassThru\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n      # If MSP is found, patch ArcGisPro with MSP file\r\n      if($arcGisProMsp){\r\n          Start-Process \"msiexec.exe\" -ArgumentList \"/p $($arcGisProMsp.Directory.FullName)\\$arcGisProMsp /qn\" -Wait -NoNewWindow -PassThru\r\n      }\r\n    }\r\n    catch {\r\n      Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n    }\r\n    Write-Host \"Removing ArcGis Files\"\r\n    Remove-Item $ZIP -Force -Confirm:$false -Recurse\r\n    Remove-item -Path  \"$env:windir\\temp\\arcgis\" -Force -Confirm:$false -Recurse\r\n    "
                                            }
                                          },
                                          "dependsOn": [
                                            "applications",
                                            "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]",
                                            "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'teams')]",
                                            "[[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'vdot')]"
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "dependsOn": [
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                                  ]
                                },
                                {
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('restart-vm-1-{0}', parameters('deploymentNameSuffix'))]",
                                  "subscriptionId": "[[variables('subscriptionId')]",
                                  "resourceGroup": "[[parameters('resourceGroupName')]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "imageVirtualMachineName": {
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                                      },
                                      "resourceGroupName": {
                                        "value": "[[parameters('resourceGroupName')]"
                                      },
                                      "location": {
                                        "value": "[[parameters('location')]"
                                      },
                                      "tags": {
                                        "value": "[[parameters('tags')]"
                                      },
                                      "userAssignedIdentityClientId": {
                                        "value": "[[parameters('userAssignedIdentityClientId')]"
                                      },
                                      "virtualMachineName": "[[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.26.54.24096",
                                          "templateHash": "10420021406848674052"
                                        }
                                      },
                                      "parameters": {
                                        "imageVirtualMachineName": {
                                          "type": "string"
                                        },
                                        "resourceGroupName": {
                                          "type": "string"
                                        },
                                        "location": {
                                          "type": "string"
                                        },
                                        "tags": {
                                          "type": "object"
                                        },
                                        "userAssignedIdentityClientId": {
                                          "type": "string"
                                        },
                                        "virtualMachineName": {
                                          "type": "string"
                                        }
                                      },
                                      "resources": [
                                        {
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'restartVirtualMachine')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "properties": {
                                            "treatFailureAsDeploymentFailure": true,
                                            "asyncExecution": false,
                                            "parameters": [
                                              {
                                                "name": "Environment",
                                                "value": "[[environment().name]"
                                              },
                                              {
                                                "name": "ResourceGroupName",
                                                "value": "[[parameters('resourceGroupName')]"
                                              },
                                              {
                                                "name": "SubscriptionId",
                                                "value": "[[subscription().subscriptionId]"
                                              },
                                              {
                                                "name": "TenantId",
                                                "value": "[[tenant().tenantId]"
                                              },
                                              {
                                                "name": "UserAssignedIdentityClientId",
                                                "value": "[[parameters('userAssignedIdentityClientId')]"
                                              },
                                              {
                                                "name": "VirtualMachineName",
                                                "value": "[[parameters('imageVirtualMachineName')]"
                                              }
                                            ],
                                            "source": {
                                              "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Restart-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName\r\n        $AgentStatus = $Null\r\n        while ($Null -eq $AgentStatus) \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $AgentStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).VMAgent\r\n        }\r\n      "
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "dependsOn": [
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('customizations-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                                  ]
                                },
                                {
                                  "condition": "[[parameters('installUpdates')]",
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('microsoft-updates-{0}', parameters('deploymentNameSuffix'))]",
                                  "subscriptionId": "[[variables('subscriptionId')]",
                                  "resourceGroup": "[[parameters('resourceGroupName')]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "imageVirtualMachineName": {
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                                      },
                                      "location": {
                                        "value": "[[parameters('location')]"
                                      },
                                      "tags": {
                                        "value": "[[parameters('tags')]"
                                      },
                                      "updateService": {
                                        "value": "[[parameters('updateService')]"
                                      },
                                      "wsusServer": {
                                        "value": "[[parameters('wsusServer')]"
                                      }
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.26.54.24096",
                                          "templateHash": "12095172867813258567"
                                        }
                                      },
                                      "parameters": {
                                        "location": {
                                          "type": "string"
                                        },
                                        "imageVirtualMachineName": {
                                          "type": "string"
                                        },
                                        "tags": {
                                          "type": "object"
                                        },
                                        "updateService": {
                                          "type": "string"
                                        },
                                        "wsusServer": {
                                          "type": "string"
                                        }
                                      },
                                      "resources": [
                                        {
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('imageVirtualMachineName'), 'install-microsoft-updates')]",
                                          "location": "[[parameters('location')]",
                                          "properties": {
                                            "asyncExecution": false,
                                            "parameters": "[[if(equals(parameters('updateService'), 'WSUS'), createArray(createObject('name', 'Service', 'value', parameters('updateService')), createObject('name', 'WSUSServer', 'value', parameters('wsusServer'))), createArray(createObject('name', 'Service', 'value', parameters('updateService'))))]",
                                            "source": {
                                              "script": "        param (\r\n          # The App Name to pass to the WUA API as the calling application.\r\n          [Parameter()]\r\n          [String]$AppName = \"Windows Update API Script\",\r\n          # The search criteria to be used.\r\n          [Parameter()]\r\n          [String]$Criteria = \"IsInstalled=0 and Type='Software' and IsHidden=0\",\r\n          [Parameter()]\r\n          [bool]$ExcludePreviewUpdates = $true,\r\n          # Default service (WSUS if machine is configured to use it, or MU if opted in, or WU otherwise.)\r\n          [Parameter()]\r\n          [ValidateSet(\"WU\",\"MU\",\"WSUS\",\"DCAT\",\"STORE\",\"OTHER\")]\r\n          [string]$Service = 'MU',\r\n          # The http/https fqdn for the Windows Server Update Server\r\n          [Parameter()]\r\n          [string]$WSUSServer\r\n        )\r\n        \r\n        Function ConvertFrom-InstallationResult {\r\n        [CmdletBinding()]\r\n            param (\r\n                [Parameter()]\r\n                [int]$Result\r\n            )        \r\n            switch ($Result) {\r\n                2 { $Text = 'Succeeded' }\r\n                3 { $Text = 'Succeeded with errors' }\r\n                4 { $Text = 'Failed' }\r\n                5 { $Text = 'Cancelled' }\r\n                Default { $Text = \"Unexpected ($Result)\"}\r\n            }        \r\n            Return $Text\r\n        }\r\n        Start-Transcript -Path \"$env:SystemRoot\\Logs\\ImageBuild\\Install-Updates.log\"\r\n        Switch ($Service.ToUpper()) {\r\n            'WU' { $ServerSelection = 2 }\r\n            'MU' { $ServerSelection = 3; $ServiceId = \"7971f918-a847-4430-9279-4a52d1efe18d\" }\r\n            'WSUS' { $ServerSelection = 1 }\r\n            'DCAT' { $ServerSelection = 3; $ServiceId = \"855E8A7C-ECB4-4CA3-B045-1DFA50104289\" }\r\n            'STORE' { $serverSelection = 3; $ServiceId = \"117cab2d-82b1-4b5a-a08c-4d62dbee7782\" }\r\n            'OTHER' { $ServerSelection = 3; $ServiceId = $Service }\r\n        }        \r\n        If ($Service -eq 'MU') {\r\n            $UpdateServiceManager = New-Object -ComObject Microsoft.Update.ServiceManager\r\n            $UpdateServiceManager.ClientApplicationID = $AppName\r\n            $UpdateServiceManager.AddService2(\"7971f918-a847-4430-9279-4a52d1efe18d\", 7, \"\")\r\n            $null = cmd /c reg.exe ADD \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /t REG_DWORD /d 1 /f '2>&1'\r\n            Write-Output \"Added Registry entry to configure Microsoft Update. Exit Code: [$LastExitCode]\"\r\n        } Elseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n            $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n            $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n            Write-Output \"Added Registry entry to configure WSUS Server. Exit Code: [$LastExitCode]\"\r\n        }        \r\n        $UpdateSession = New-Object -ComObject Microsoft.Update.Session\r\n        $updateSession.ClientApplicationID = $AppName   \r\n        $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()\r\n        $UpdateSearcher.ServerSelection = $ServerSelection\r\n        If ($ServerSelection -eq 3) {\r\n            $UpdateSearcher.ServiceId = $ServiceId\r\n        }\r\n        Write-Output \"Searching for Updates...\"\r\n        $SearchResult = $UpdateSearcher.Search($Criteria)\r\n        If ($SearchResult.Updates.Count -eq 0) {\r\n            Write-Output \"There are no applicable updates.\"\r\n            Write-Output \"Now Exiting\"\r\n            Exit $ExitCode\r\n        }\r\n        Write-Output \"List of applicable items found for this computer:\"\r\n        For ($i = 0; $i -lt $SearchResult.Updates.Count; $i++) {\r\n            $Update = $SearchResult.Updates[$i]\r\n            Write-Output \"$($i + 1) > $($update.Title)\"\r\n        }\r\n        $AtLeastOneAdded = $false\r\n        $ExclusiveAdded = $false   \r\n        $UpdatesToDownload = New-Object -ComObject Microsoft.Update.UpdateColl\r\n        Write-Output \"Checking search results:\"\r\n        For ($i = 0; $i -lt $SearchResult.Updates.Count; $i++) {\r\n            $Update = $SearchResult.Updates[$i]\r\n            $AddThisUpdate = $false        \r\n            If ($ExclusiveAdded) {\r\n                Write-Output \"$($i + 1) > skipping: '$($update.Title)' because an exclusive update has already been selected.\"\r\n            } Else {\r\n                $AddThisUpdate = $true\r\n            }        \r\n            if ($ExcludePreviewUpdates -and $update.Title -like '*Preview*') {\r\n                Write-Output \"$($i + 1) > Skipping: '$($update.Title)' because it is a preview update.\"\r\n                $AddThisUpdate = $false\r\n            }        \r\n            If ($AddThisUpdate) {\r\n                $PropertyTest = 0\r\n                $ErrorActionPreference = 'SilentlyContinue'\r\n                $PropertyTest = $Update.InstallationBehavior.Impact\r\n                $ErrorActionPreference = 'Stop'\r\n                If ($PropertyTest -eq 2) {\r\n                    If ($AtLeastOneAdded) {\r\n                        Write-Output \"$($i + 1) > skipping: '$($update.Title)' because it is exclusive and other updates are being installed first.\"\r\n                        $AddThisUpdate = $false\r\n                    }\r\n                }\r\n            }\r\n            If ($AddThisUpdate) {\r\n                Write-Output \"$($i + 1) > adding: '$($update.Title)'\"\r\n                $UpdatesToDownload.Add($Update) | out-null\r\n                $AtLeastOneAdded = $true\r\n                $ErrorActionPreference = 'SilentlyContinue'\r\n                $PropertyTest = $Update.InstallationBehavior.Impact\r\n                $ErrorActionPreference = 'Stop'\r\n                If ($PropertyTest -eq 2) {\r\n                    Write-Output \"This update is exclusive; skipping remaining updates\"\r\n                    $ExclusiveAdded = $true\r\n                }\r\n            }\r\n        }        \r\n        $UpdatesToInstall = New-Object -ComObject Microsoft.Update.UpdateColl\r\n        Write-Output \"Downloading updates...\"\r\n        $Downloader = $UpdateSession.CreateUpdateDownloader()\r\n        $Downloader.Updates = $UpdatesToDownload\r\n        $Downloader.Download()\r\n        Write-Output \"Successfully downloaded updates:\"        \r\n        For ($i = 0; $i -lt $UpdatesToDownload.Count; $i++) {\r\n            $Update = $UpdatesToDownload[$i]\r\n            If ($Update.IsDownloaded -eq $true) {\r\n                Write-Output \"$($i + 1) > $($update.title)\"\r\n                $UpdatesToInstall.Add($Update) | out-null\r\n            }\r\n        }        \r\n        If ($UpdatesToInstall.Count -gt 0) {\r\n            Write-Output \"Now installing updates...\"\r\n            $Installer = $UpdateSession.CreateUpdateInstaller()\r\n            $Installer.Updates = $UpdatesToInstall\r\n            $InstallationResult = $Installer.Install()\r\n            $Text = ConvertFrom-InstallationResult -Result $InstallationResult.ResultCode\r\n            Write-Output \"Installation Result: $($Text)\"        \r\n            If ($InstallationResult.RebootRequired) {\r\n                Write-Output \"Atleast one update requires a reboot to complete the installation.\"\r\n            }\r\n        }\r\n        If ($service -eq 'MU') {\r\n            Reg.exe DELETE \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /f\r\n        } Elseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n            reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /f\r\n            reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /f\r\n        }\r\n        Stop-Transcript\r\n      "
                                            },
                                            "treatFailureAsDeploymentFailure": true
                                          },
                                          "tags": "[[parameters('tags')]"
                                        }
                                      ]
                                    }
                                  },
                                  "dependsOn": [
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-1-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                                  ]
                                },
                                {
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('restart-vm-2-{0}', parameters('deploymentNameSuffix'))]",
                                  "subscriptionId": "[[variables('subscriptionId')]",
                                  "resourceGroup": "[[parameters('resourceGroupName')]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "imageVirtualMachineName": {
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                                      },
                                      "resourceGroupName": {
                                        "value": "[[parameters('resourceGroupName')]"
                                      },
                                      "location": {
                                        "value": "[[parameters('location')]"
                                      },
                                      "tags": {
                                        "value": "[[parameters('tags')]"
                                      },
                                      "userAssignedIdentityClientId": {
                                        "value": "[[parameters('userAssignedIdentityClientId')]"
                                      },
                                      "virtualMachineName": "[[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.26.54.24096",
                                          "templateHash": "10420021406848674052"
                                        }
                                      },
                                      "parameters": {
                                        "imageVirtualMachineName": {
                                          "type": "string"
                                        },
                                        "resourceGroupName": {
                                          "type": "string"
                                        },
                                        "location": {
                                          "type": "string"
                                        },
                                        "tags": {
                                          "type": "object"
                                        },
                                        "userAssignedIdentityClientId": {
                                          "type": "string"
                                        },
                                        "virtualMachineName": {
                                          "type": "string"
                                        }
                                      },
                                      "resources": [
                                        {
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'restartVirtualMachine')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "properties": {
                                            "treatFailureAsDeploymentFailure": true,
                                            "asyncExecution": false,
                                            "parameters": [
                                              {
                                                "name": "Environment",
                                                "value": "[[environment().name]"
                                              },
                                              {
                                                "name": "ResourceGroupName",
                                                "value": "[[parameters('resourceGroupName')]"
                                              },
                                              {
                                                "name": "SubscriptionId",
                                                "value": "[[subscription().subscriptionId]"
                                              },
                                              {
                                                "name": "TenantId",
                                                "value": "[[tenant().tenantId]"
                                              },
                                              {
                                                "name": "UserAssignedIdentityClientId",
                                                "value": "[[parameters('userAssignedIdentityClientId')]"
                                              },
                                              {
                                                "name": "VirtualMachineName",
                                                "value": "[[parameters('imageVirtualMachineName')]"
                                              }
                                            ],
                                            "source": {
                                              "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Restart-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName\r\n        $AgentStatus = $Null\r\n        while ($Null -eq $AgentStatus) \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $AgentStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).VMAgent\r\n        }\r\n      "
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "dependsOn": [
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('microsoft-updates-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                                  ]
                                },
                                {
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('sysprep-vm-{0}', parameters('deploymentNameSuffix'))]",
                                  "subscriptionId": "[[variables('subscriptionId')]",
                                  "resourceGroup": "[[parameters('resourceGroupName')]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "location": {
                                        "value": "[[parameters('location')]"
                                      },
                                      "tags": {
                                        "value": "[[parameters('tags')]"
                                      },
                                      "virtualMachineName": {
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                                      }
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.26.54.24096",
                                          "templateHash": "13855748863144258342"
                                        }
                                      },
                                      "parameters": {
                                        "location": {
                                          "type": "string"
                                        },
                                        "tags": {
                                          "type": "object"
                                        },
                                        "virtualMachineName": {
                                          "type": "string"
                                        }
                                      },
                                      "resources": [
                                        {
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'sysprepVirtualMachine')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "properties": {
                                            "treatFailureAsDeploymentFailure": false,
                                            "asyncExecution": true,
                                            "parameters": [],
                                            "source": {
                                              "script": "        Start-Sleep -Seconds 30\r\n        Remove-Item -LiteralPath 'C:\\Windows\\Panther' -Force -Recurse -ErrorAction SilentlyContinue\r\n        Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\cdrom' -Name 'Start' -Value 1\r\n        Start-Process -File 'C:\\Windows\\System32\\Sysprep\\Sysprep.exe' -ArgumentList '/generalize /oobe /shutdown /mode:vm'\r\n      "
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "dependsOn": [
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-1-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-2-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                                  ]
                                },
                                {
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('generalize-vm-{0}', parameters('deploymentNameSuffix'))]",
                                  "subscriptionId": "[[variables('subscriptionId')]",
                                  "resourceGroup": "[[parameters('resourceGroupName')]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "imageVirtualMachineName": {
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                                      },
                                      "resourceGroupName": {
                                        "value": "[[parameters('resourceGroupName')]"
                                      },
                                      "location": {
                                        "value": "[[parameters('location')]"
                                      },
                                      "tags": {
                                        "value": "[[parameters('tags')]"
                                      },
                                      "userAssignedIdentityClientId": {
                                        "value": "[[parameters('userAssignedIdentityClientId')]"
                                      },
                                      "virtualMachineName": "[[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.26.54.24096",
                                          "templateHash": "1408076597272275810"
                                        }
                                      },
                                      "parameters": {
                                        "imageVirtualMachineName": {
                                          "type": "string"
                                        },
                                        "resourceGroupName": {
                                          "type": "string"
                                        },
                                        "location": {
                                          "type": "string",
                                          "defaultValue": "[[resourceGroup().location]"
                                        },
                                        "tags": {
                                          "type": "object"
                                        },
                                        "userAssignedIdentityClientId": {
                                          "type": "string"
                                        },
                                        "virtualMachineName": {
                                          "type": "string"
                                        }
                                      },
                                      "resources": [
                                        {
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'generalizeVirtualMachine')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "properties": {
                                            "treatFailureAsDeploymentFailure": true,
                                            "asyncExecution": false,
                                            "parameters": [
                                              {
                                                "name": "Environment",
                                                "value": "[[environment().name]"
                                              },
                                              {
                                                "name": "ResourceGroupName",
                                                "value": "[[parameters('resourceGroupName')]"
                                              },
                                              {
                                                "name": "SubscriptionId",
                                                "value": "[[subscription().subscriptionId]"
                                              },
                                              {
                                                "name": "TenantId",
                                                "value": "[[tenant().tenantId]"
                                              },
                                              {
                                                "name": "UserAssignedIdentityClientId",
                                                "value": "[[parameters('userAssignedIdentityClientId')]"
                                              },
                                              {
                                                "name": "VirtualMachineName",
                                                "value": "[[parameters('imageVirtualMachineName')]"
                                              }
                                            ],
                                            "source": {
                                              "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        $PowerStatus = ''\r\n        while ($PowerStatus -ne 'VM stopped') \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $PowerStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).Statuses[1].DisplayStatus\r\n        }\r\n        Set-AzVm -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Generalized\r\n        Start-Sleep -Seconds 30\r\n      "
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "dependsOn": [
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                                  ]
                                },
                                {
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('image-version-{0}', parameters('deploymentNameSuffix'))]",
                                  "subscriptionId": "[[variables('subscriptionId')]",
                                  "resourceGroup": "[[parameters('resourceGroupName')]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "computeGalleryImageResourceId": {
                                        "value": "[[parameters('computeGalleryImageResourceId')]"
                                      },
                                      "computeGalleryName": {
                                        "value": "[[parameters('computeGalleryName')]"
                                      },
                                      "excludeFromLatest": {
                                        "value": "[[parameters('excludeFromLatest')]"
                                      },
                                      "imageDefinitionName": {
                                        "value": "[[parameters('imageDefinitionName')]"
                                      },
                                      "imageVersionNumber": {
                                        "value": "[[variables('autoImageVersion')]"
                                      },
                                      "imageVirtualMachineResourceId": {
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                                      },
                                      "location": {
                                        "value": "[[parameters('location')]"
                                      },
                                      "marketplaceImageOffer": {
                                        "value": "[[parameters('marketplaceImageOffer')]"
                                      },
                                      "marketplaceImagePublisher": {
                                        "value": "[[parameters('marketplaceImagePublisher')]"
                                      },
                                      "replicaCount": {
                                        "value": "[[parameters('replicaCount')]"
                                      },
                                      "tags": {
                                        "value": "[[parameters('tags')]"
                                      }
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.26.54.24096",
                                          "templateHash": "5850341894374079914"
                                        }
                                      },
                                      "parameters": {
                                        "allowDeletionOfReplicatedLocations": {
                                          "type": "bool",
                                          "defaultValue": true
                                        },
                                        "computeGalleryName": {
                                          "type": "string"
                                        },
                                        "computeGalleryImageResourceId": {
                                          "type": "string"
                                        },
                                        "excludeFromLatest": {
                                          "type": "bool"
                                        },
                                        "imageDefinitionName": {
                                          "type": "string"
                                        },
                                        "imageVersionNumber": {
                                          "type": "string"
                                        },
                                        "imageVirtualMachineResourceId": {
                                          "type": "string"
                                        },
                                        "location": {
                                          "type": "string"
                                        },
                                        "marketplaceImageOffer": {
                                          "type": "string"
                                        },
                                        "marketplaceImagePublisher": {
                                          "type": "string"
                                        },
                                        "replicaCount": {
                                          "type": "int"
                                        },
                                        "tags": {
                                          "type": "object"
                                        }
                                      },
                                      "resources": [
                                        {
                                          "type": "Microsoft.Compute/galleries/images",
                                          "apiVersion": "2022-03-03",
                                          "name": "[[format('{0}/{1}', parameters('computeGalleryName'), parameters('imageDefinitionName'))]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject())]",
                                          "properties": {
                                            "architecture": "x64",
                                            "features": [
                                              {
                                                "name": "SecurityType",
                                                "value": "TrustedLaunch"
                                              }
                                            ],
                                            "hyperVGeneration": "V2",
                                            "identifier": {
                                              "offer": "[[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImageOffer'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.offer)]",
                                              "publisher": "[[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImagePublisher'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.publisher)]",
                                              "sku": "[[parameters('imageDefinitionName')]"
                                            },
                                            "osState": "Generalized",
                                            "osType": "Windows"
                                          }
                                        },
                                        {
                                          "type": "Microsoft.Compute/galleries/images/versions",
                                          "apiVersion": "2022-03-03",
                                          "name": "[[format('{0}/{1}/{2}', parameters('computeGalleryName'), parameters('imageDefinitionName'), parameters('imageVersionNumber'))]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject())]",
                                          "properties": {
                                            "publishingProfile": {
                                              "excludeFromLatest": "[[parameters('excludeFromLatest')]",
                                              "replicaCount": "[[parameters('replicaCount')]",
                                              "replicationMode": "Full",
                                              "storageAccountType": "Standard_LRS",
                                              "targetRegions": [
                                                {
                                                  "name": "[[parameters('location')]",
                                                  "regionalReplicaCount": "[[parameters('replicaCount')]",
                                                  "storageAccountType": "Standard_LRS"
                                                }
                                              ]
                                            },
                                            "safetyProfile": {
                                              "allowDeletionOfReplicatedLocations": "[[parameters('allowDeletionOfReplicatedLocations')]"
                                            },
                                            "storageProfile": {
                                              "source": {
                                                "id": "[[parameters('imageVirtualMachineResourceId')]"
                                              }
                                            }
                                          },
                                          "dependsOn": [
                                            "[[resourceId('Microsoft.Compute/galleries/images', parameters('computeGalleryName'), parameters('imageDefinitionName'))]"
                                          ]
                                        }
                                      ],
                                      "outputs": {
                                        "imageDefinitionResourceId": {
                                          "type": "string",
                                          "value": "[[resourceId('Microsoft.Compute/galleries/images', parameters('computeGalleryName'), parameters('imageDefinitionName'))]"
                                        }
                                      }
                                    }
                                  },
                                  "dependsOn": [
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('generalize-vm-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                                  ]
                                },
                                {
                                  "type": "Microsoft.Resources/deployments",
                                  "apiVersion": "2022-09-01",
                                  "name": "[[format('remove-vm-{0}', parameters('deploymentNameSuffix'))]",
                                  "subscriptionId": "[[variables('subscriptionId')]",
                                  "resourceGroup": "[[parameters('resourceGroupName')]",
                                  "properties": {
                                    "expressionEvaluationOptions": {
                                      "scope": "inner"
                                    },
                                    "mode": "Incremental",
                                    "parameters": {
                                      "enableBuildAutomation": {
                                        "value": "[[parameters('enableBuildAutomation')]"
                                      },
                                      "imageVirtualMachineName": {
                                        "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                                      },
                                      "location": {
                                        "value": "[[parameters('location')]"
                                      },
                                      "tags": {
                                        "value": "[[parameters('tags')]"
                                      },
                                      "userAssignedIdentityClientId": {
                                        "value": "[[parameters('userAssignedIdentityClientId')]"
                                      },
                                      "virtualMachineName": "[[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                                    },
                                    "template": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "metadata": {
                                        "_generator": {
                                          "name": "bicep",
                                          "version": "0.26.54.24096",
                                          "templateHash": "2352439563696964014"
                                        }
                                      },
                                      "parameters": {
                                        "enableBuildAutomation": {
                                          "type": "bool"
                                        },
                                        "imageVirtualMachineName": {
                                          "type": "string"
                                        },
                                        "location": {
                                          "type": "string",
                                          "defaultValue": "[[resourceGroup().location]"
                                        },
                                        "tags": {
                                          "type": "object"
                                        },
                                        "userAssignedIdentityClientId": {
                                          "type": "string"
                                        },
                                        "virtualMachineName": {
                                          "type": "string"
                                        }
                                      },
                                      "resources": [
                                        {
                                          "type": "Microsoft.Compute/virtualMachines/runCommands",
                                          "apiVersion": "2023-03-01",
                                          "name": "[[format('{0}/{1}', parameters('virtualMachineName'), 'removeVirtualMachine')]",
                                          "location": "[[parameters('location')]",
                                          "tags": "[[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                                          "properties": {
                                            "treatFailureAsDeploymentFailure": true,
                                            "asyncExecution": "[[if(parameters('enableBuildAutomation'), false(), true())]",
                                            "parameters": [
                                              {
                                                "name": "EnableBuildAutomation",
                                                "value": "[[string(parameters('enableBuildAutomation'))]"
                                              },
                                              {
                                                "name": "Environment",
                                                "value": "[[environment().name]"
                                              },
                                              {
                                                "name": "ImageVmName",
                                                "value": "[[parameters('imageVirtualMachineName')]"
                                              },
                                              {
                                                "name": "ManagementVmName",
                                                "value": "[[parameters('virtualMachineName')]"
                                              },
                                              {
                                                "name": "ResourceGroupName",
                                                "value": "[[resourceGroup().name]"
                                              },
                                              {
                                                "name": "SubscriptionId",
                                                "value": "[[subscription().subscriptionId]"
                                              },
                                              {
                                                "name": "TenantId",
                                                "value": "[[tenant().tenantId]"
                                              },
                                              {
                                                "name": "UserAssignedIdentityClientId",
                                                "value": "[[parameters('userAssignedIdentityClientId')]"
                                              }
                                            ],
                                            "source": {
                                              "script": "        param(\r\n          [string]$EnableBuildAutomation,\r\n          [string]$Environment,\r\n          [string]$ImageVmName,\r\n          [string]$ManagementVmName,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ImageVmName -Force\r\n        if($EnableBuildAutomation -eq 'false')\r\n        {\r\n          Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ManagementVmName -NoWait -Force -AsJob\r\n        }\r\n      "
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "dependsOn": [
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-version-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                                    "[[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                                  ]
                                }
                              ],
                              "outputs": {
                                "imageDefinitionResourceId": {
                                  "type": "string",
                                  "value": "[[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-version-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.imageDefinitionResourceId.value]"
                                }
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/templateSpecs",
                              "apiVersion": "2022-02-01",
                              "name": "[format('ts-{0}', parameters('imageDefinitionName'))]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Resources/templateSpecs'), parameters('tags')['Microsoft.Resources/templateSpecs'], createObject())]",
                              "properties": {
                                "description": "[format('An automation runbook deploys a new image version for the \"{0}\" image definition from this template spec.', parameters('imageDefinitionName'))]",
                                "displayName": "[format('Zero Trust Image Build Automation: {0}', parameters('imageDefinitionName'))]"
                              }
                            },
                            {
                              "type": "Microsoft.Resources/templateSpecs/versions",
                              "apiVersion": "2022-02-01",
                              "name": "[format('{0}/{1}', format('ts-{0}', parameters('imageDefinitionName')), '1.0')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Resources/templateSpecs'), parameters('tags')['Microsoft.Resources/templateSpecs'], createObject())]",
                              "properties": {
                                "mainTemplate": "[variables('$fxv#0')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/templateSpecs', format('ts-{0}', parameters('imageDefinitionName')))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Resources/templateSpecs/versions', format('ts-{0}', parameters('imageDefinitionName')), '1.0')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('management-vm-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "containerName": {
                            "value": "[parameters('containerName')]"
                          },
                          "diskEncryptionSetResourceId": {
                            "value": "[parameters('diskEncryptionSetResourceId')]"
                          },
                          "hybridUseBenefit": {
                            "value": "[parameters('hybridUseBenefit')]"
                          },
                          "localAdministratorPassword": {
                            "value": "[parameters('localAdministratorPassword')]"
                          },
                          "localAdministratorUsername": {
                            "value": "[parameters('localAdministratorUsername')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "storageAccountName": {
                            "value": "[split(parameters('storageAccountResourceId'), '/')[8]]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityPrincipalId": {
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          },
                          "userAssignedIdentityResourceId": {
                            "value": "[parameters('userAssignedIdentityResourceId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "12968919444807468891"
                            }
                          },
                          "parameters": {
                            "containerName": {
                              "type": "string"
                            },
                            "diskEncryptionSetResourceId": {
                              "type": "string"
                            },
                            "hybridUseBenefit": {
                              "type": "bool"
                            },
                            "localAdministratorPassword": {
                              "type": "securestring"
                            },
                            "localAdministratorUsername": {
                              "type": "securestring"
                            },
                            "location": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityPrincipalId": {
                              "type": "string"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2023-04-01",
                              "name": "[format('nic-{0}', parameters('virtualMachineName'))]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig",
                                    "properties": {
                                      "privateIPAllocationMethod": "Dynamic",
                                      "subnet": {
                                        "id": "[parameters('subnetResourceId')]"
                                      },
                                      "primary": true,
                                      "privateIPAddressVersion": "IPv4"
                                    }
                                  }
                                ],
                                "enableAcceleratedNetworking": true,
                                "enableIPForwarding": false
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2022-03-01",
                              "name": "[parameters('virtualMachineName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "Standard_D2s_v3"
                                },
                                "osProfile": {
                                  "computerName": "[parameters('virtualMachineName')]",
                                  "adminUsername": "[parameters('localAdministratorUsername')]",
                                  "adminPassword": "[parameters('localAdministratorPassword')]",
                                  "windowsConfiguration": {
                                    "provisionVMAgent": true,
                                    "enableAutomaticUpdates": true,
                                    "patchSettings": {
                                      "patchMode": "AutomaticByOS",
                                      "assessmentMode": "ImageDefault"
                                    }
                                  }
                                },
                                "storageProfile": {
                                  "imageReference": {
                                    "publisher": "MicrosoftWindowsServer",
                                    "offer": "WindowsServer",
                                    "sku": "2019-datacenter-core-g2",
                                    "version": "latest"
                                  },
                                  "osDisk": {
                                    "caching": "ReadWrite",
                                    "createOption": "FromImage",
                                    "deleteOption": "Delete",
                                    "managedDisk": {
                                      "diskEncryptionSet": {
                                        "id": "[parameters('diskEncryptionSetResourceId')]"
                                      },
                                      "storageAccountType": "Premium_LRS"
                                    },
                                    "name": "[format('disk-{0}', parameters('virtualMachineName'))]",
                                    "osType": "Windows"
                                  }
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                                      "properties": {
                                        "deleteOption": "Delete"
                                      }
                                    }
                                  ]
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": false
                                  }
                                },
                                "securityProfile": {
                                  "encryptionAtHost": true,
                                  "uefiSettings": {
                                    "secureBootEnabled": true,
                                    "vTpmEnabled": true
                                  },
                                  "securityType": "TrustedLaunch"
                                },
                                "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'appAzModules')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "ContainerName",
                                    "value": "[parameters('containerName')]"
                                  },
                                  {
                                    "name": "StorageAccountName",
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  {
                                    "name": "StorageEndpoint",
                                    "value": "[environment().suffixes.storage]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityObjectId",
                                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                                  }
                                ],
                                "source": {
                                  "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.12.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('virtualMachineName')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('automation-account-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "arcGisProInstaller": {
                            "value": "[parameters('arcGisProInstaller')]"
                          },
                          "actionGroupName": {
                            "value": "[parameters('actionGroupName')]"
                          },
                          "automationAccountName": {
                            "value": "[parameters('automationAccountName')]"
                          },
                          "automationAccountPrivateDnsZoneResourceId": {
                            "value": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
                          },
                          "computeGalleryImageResourceId": {
                            "value": "[parameters('computeGalleryImageResourceId')]"
                          },
                          "computeGalleryResourceId": {
                            "value": "[parameters('computeGalleryResourceId')]"
                          },
                          "containerName": {
                            "value": "[parameters('containerName')]"
                          },
                          "customizations": {
                            "value": "[parameters('customizations')]"
                          },
                          "deploymentNameSuffix": {
                            "value": "[parameters('deploymentNameSuffix')]"
                          },
                          "diskEncryptionSetResourceId": {
                            "value": "[parameters('diskEncryptionSetResourceId')]"
                          },
                          "distributionGroup": {
                            "value": "[parameters('distributionGroup')]"
                          },
                          "domainJoinPassword": {
                            "value": "[parameters('domainJoinPassword')]"
                          },
                          "domainJoinUserPrincipalName": {
                            "value": "[parameters('domainJoinUserPrincipalName')]"
                          },
                          "domainName": {
                            "value": "[parameters('domainName')]"
                          },
                          "enableBuildAutomation": {
                            "value": "[parameters('enableBuildAutomation')]"
                          },
                          "excludeFromLatest": {
                            "value": "[parameters('excludeFromLatest')]"
                          },
                          "hybridUseBenefit": {
                            "value": "[parameters('hybridUseBenefit')]"
                          },
                          "imageDefinitionName": {
                            "value": "[parameters('imageDefinitionName')]"
                          },
                          "imageMajorVersion": {
                            "value": "[parameters('imageMajorVersion')]"
                          },
                          "imagePatchVersion": {
                            "value": "[parameters('imagePatchVersion')]"
                          },
                          "imageVirtualMachineName": {
                            "value": "[parameters('imageVirtualMachineName')]"
                          },
                          "installAccess": {
                            "value": "[parameters('installAccess')]"
                          },
                          "installArcGisPro": {
                            "value": "[parameters('installArcGisPro')]"
                          },
                          "installExcel": {
                            "value": "[parameters('installExcel')]"
                          },
                          "installOneDrive": {
                            "value": "[parameters('installOneDrive')]"
                          },
                          "installOneNote": {
                            "value": "[parameters('installOneNote')]"
                          },
                          "installOutlook": {
                            "value": "[parameters('installOutlook')]"
                          },
                          "installPowerPoint": {
                            "value": "[parameters('installPowerPoint')]"
                          },
                          "installProject": {
                            "value": "[parameters('installProject')]"
                          },
                          "installPublisher": {
                            "value": "[parameters('installPublisher')]"
                          },
                          "installSkypeForBusiness": {
                            "value": "[parameters('installSkypeForBusiness')]"
                          },
                          "installTeams": {
                            "value": "[parameters('installTeams')]"
                          },
                          "installUpdates": {
                            "value": "[parameters('installUpdates')]"
                          },
                          "installVirtualDesktopOptimizationTool": {
                            "value": "[parameters('installVirtualDesktopOptimizationTool')]"
                          },
                          "installVisio": {
                            "value": "[parameters('installVisio')]"
                          },
                          "installWord": {
                            "value": "[parameters('installWord')]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "managementVirtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                          },
                          "marketplaceImageOffer": {
                            "value": "[parameters('marketplaceImageOffer')]"
                          },
                          "marketplaceImagePublisher": {
                            "value": "[parameters('marketplaceImagePublisher')]"
                          },
                          "marketplaceImageSKU": {
                            "value": "[parameters('marketplaceImageSKU')]"
                          },
                          "msrdcwebrtcsvcInstaller": {
                            "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                          },
                          "officeInstaller": {
                            "value": "[parameters('officeInstaller')]"
                          },
                          "oUPath": {
                            "value": "[parameters('oUPath')]"
                          },
                          "replicaCount": {
                            "value": "[parameters('replicaCount')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "sourceImageType": {
                            "value": "[parameters('sourceImageType')]"
                          },
                          "storageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "teamsInstaller": {
                            "value": "[parameters('teamsInstaller')]"
                          },
                          "templateSpecResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('template-spec-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                          },
                          "timeZone": {
                            "value": "[parameters('timeZone')]"
                          },
                          "updateService": {
                            "value": "[parameters('updateService')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          "userAssignedIdentityPrincipalId": {
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          },
                          "userAssignedIdentityResourceId": {
                            "value": "[parameters('userAssignedIdentityResourceId')]"
                          },
                          "vcRedistInstaller": {
                            "value": "[parameters('vcRedistInstaller')]"
                          },
                          "vDOTInstaller": {
                            "value": "[parameters('vDOTInstaller')]"
                          },
                          "virtualMachineSize": {
                            "value": "[parameters('virtualMachineSize')]"
                          },
                          "wsusServer": {
                            "value": "[parameters('wsusServer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "1975706033396141500"
                            }
                          },
                          "parameters": {
                            "arcGisProInstaller": {
                              "type": "string"
                            },
                            "actionGroupName": {
                              "type": "string"
                            },
                            "automationAccountName": {
                              "type": "string"
                            },
                            "automationAccountPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "computeGalleryImageResourceId": {
                              "type": "string"
                            },
                            "computeGalleryResourceId": {
                              "type": "string"
                            },
                            "containerName": {
                              "type": "string"
                            },
                            "customizations": {
                              "type": "array"
                            },
                            "deploymentNameSuffix": {
                              "type": "string"
                            },
                            "diskEncryptionSetResourceId": {
                              "type": "string"
                            },
                            "distributionGroup": {
                              "type": "string"
                            },
                            "domainJoinPassword": {
                              "type": "securestring"
                            },
                            "domainJoinUserPrincipalName": {
                              "type": "string"
                            },
                            "domainName": {
                              "type": "string"
                            },
                            "enableBuildAutomation": {
                              "type": "bool"
                            },
                            "excludeFromLatest": {
                              "type": "bool"
                            },
                            "hybridUseBenefit": {
                              "type": "bool"
                            },
                            "imageDefinitionName": {
                              "type": "string"
                            },
                            "imageMajorVersion": {
                              "type": "int"
                            },
                            "imagePatchVersion": {
                              "type": "int"
                            },
                            "imageVirtualMachineName": {
                              "type": "string"
                            },
                            "installAccess": {
                              "type": "bool"
                            },
                            "installArcGisPro": {
                              "type": "bool"
                            },
                            "installExcel": {
                              "type": "bool"
                            },
                            "installOneDrive": {
                              "type": "bool"
                            },
                            "installOneNote": {
                              "type": "bool"
                            },
                            "installOutlook": {
                              "type": "bool"
                            },
                            "installPowerPoint": {
                              "type": "bool"
                            },
                            "installProject": {
                              "type": "bool"
                            },
                            "installPublisher": {
                              "type": "bool"
                            },
                            "installSkypeForBusiness": {
                              "type": "bool"
                            },
                            "installTeams": {
                              "type": "bool"
                            },
                            "installUpdates": {
                              "type": "bool"
                            },
                            "installVirtualDesktopOptimizationTool": {
                              "type": "bool"
                            },
                            "installVisio": {
                              "type": "bool"
                            },
                            "installWord": {
                              "type": "bool"
                            },
                            "keyVaultName": {
                              "type": "string"
                            },
                            "jobScheduleName": {
                              "type": "string",
                              "defaultValue": "[newGuid()]"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "managementVirtualMachineName": {
                              "type": "string"
                            },
                            "marketplaceImageOffer": {
                              "type": "string"
                            },
                            "marketplaceImagePublisher": {
                              "type": "string"
                            },
                            "marketplaceImageSKU": {
                              "type": "string"
                            },
                            "msrdcwebrtcsvcInstaller": {
                              "type": "string"
                            },
                            "officeInstaller": {
                              "type": "string"
                            },
                            "oUPath": {
                              "type": "string"
                            },
                            "replicaCount": {
                              "type": "int"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "sourceImageType": {
                              "type": "string"
                            },
                            "storageAccountResourceId": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "teamsInstaller": {
                              "type": "string"
                            },
                            "templateSpecResourceId": {
                              "type": "string"
                            },
                            "time": {
                              "type": "string",
                              "defaultValue": "[utcNow()]"
                            },
                            "timeZone": {
                              "type": "string"
                            },
                            "updateService": {
                              "type": "string"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "userAssignedIdentityPrincipalId": {
                              "type": "string"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string"
                            },
                            "vcRedistInstaller": {
                              "type": "string"
                            },
                            "vDOTInstaller": {
                              "type": "string"
                            },
                            "virtualMachineSize": {
                              "type": "string"
                            },
                            "wsusServer": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "parameters": {
                              "arcGisProInstaller": "[parameters('arcGisProInstaller')]",
                              "computeGalleryResourceId": "[parameters('computeGalleryResourceId')]",
                              "containerName": "[parameters('containerName')]",
                              "customizations": "[string(parameters('customizations'))]",
                              "diskEncryptionSetResourceId": "[parameters('diskEncryptionSetResourceId')]",
                              "enableBuildAutomation": "[string(parameters('enableBuildAutomation'))]",
                              "environmentName": "[environment().name]",
                              "excludeFromLatest": "[parameters('excludeFromLatest')]",
                              "hybridUseBenefit": "[parameters('hybridUseBenefit')]",
                              "imageDefinitionName": "[parameters('imageDefinitionName')]",
                              "imageMajorVersion": "[string(parameters('imageMajorVersion'))]",
                              "imagePatchVersion": "[string(parameters('imagePatchVersion'))]",
                              "imageVirtualMachineName": "[parameters('imageVirtualMachineName')]",
                              "installAccess": "[string(parameters('installAccess'))]",
                              "installArcGisPro": "[string(parameters('installArcGisPro'))]",
                              "installExcel": "[string(parameters('installExcel'))]",
                              "InstallOneDrive": "[string(parameters('installOneDrive'))]",
                              "installOneNote": "[string(parameters('installOneNote'))]",
                              "installOutlook": "[string(parameters('installOutlook'))]",
                              "installPowerPoint": "[string(parameters('installPowerPoint'))]",
                              "installProject": "[string(parameters('installProject'))]",
                              "installPublisher": "[string(parameters('installPublisher'))]",
                              "installSkypeForBusiness": "[string(parameters('installSkypeForBusiness'))]",
                              "installTeams": "[string(parameters('installTeams'))]",
                              "installUpdates": "[string(parameters('installUpdates'))]",
                              "installVirtualDesktopOptimizationTool": "[string(parameters('installVirtualDesktopOptimizationTool'))]",
                              "installVisio": "[string(parameters('installVisio'))]",
                              "installWord": "[string(parameters('installWord'))]",
                              "keyVaultName": "[parameters('keyVaultName')]",
                              "location": "[parameters('location')]",
                              "managementVirtualMachineName": "[parameters('managementVirtualMachineName')]",
                              "marketplaceImageOffer": "[parameters('marketplaceImageOffer')]",
                              "marketplaceImagePublisher": "[parameters('marketplaceImagePublisher')]",
                              "marketplaceImageSKU": "[parameters('marketplaceImageSKU')]",
                              "msrdcwebrtcsvcInstaller": "[parameters('msrdcwebrtcsvcInstaller')]",
                              "officeInstaller": "[parameters('officeInstaller')]",
                              "replicaCount": "[string(parameters('replicaCount'))]",
                              "resourceGroupName": "[parameters('resourceGroupName')]",
                              "computeGalleryImageResourceId": "[parameters('computeGalleryImageResourceId')]",
                              "sourceImageType": "[parameters('sourceImageType')]",
                              "storageAccountResourceId": "[parameters('storageAccountResourceId')]",
                              "subnetResourceId": "[parameters('subnetResourceId')]",
                              "subscriptionId": "[variables('subscriptionId')]",
                              "tags": "[string(parameters('tags'))]",
                              "teamsInstaller": "[parameters('teamsInstaller')]",
                              "templateSpecResourceId": "[parameters('templateSpecResourceId')]",
                              "tenantId": "[variables('tenantId')]",
                              "updateService": "[parameters('updateService')]",
                              "userAssignedIdentityClientId": "[parameters('userAssignedIdentityClientId')]",
                              "userAssignedIdentityPrincipalId": "[parameters('userAssignedIdentityPrincipalId')]",
                              "userAssignedIdentityResourceId": "[parameters('userAssignedIdentityResourceId')]",
                              "vcRedistInstaller": "[parameters('vcRedistInstaller')]",
                              "vDOTInstaller": "[parameters('vDOTInstaller')]",
                              "virtualMachineSize": "[parameters('virtualMachineSize')]",
                              "wsusServer": "[parameters('wsusServer')]"
                            },
                            "privateEndpointName": "[format('pe-{0}', parameters('automationAccountName'))]",
                            "runbookName": "New-AzureZeroTrustImageBuild",
                            "storageEndpoint": "[environment().suffixes.storage]",
                            "subscriptionId": "[subscription().subscriptionId]",
                            "tenantId": "[subscription().tenantId]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Automation/automationAccounts",
                              "apiVersion": "2022-08-08",
                              "name": "[parameters('automationAccountName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject())]",
                              "properties": {
                                "disableLocalAuth": false,
                                "publicNetworkAccess": false,
                                "sku": {
                                  "name": "Basic"
                                },
                                "encryption": {
                                  "keySource": "Microsoft.Automation",
                                  "identity": {}
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-05-01",
                              "name": "[variables('privateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[variables('privateEndpointName')]",
                                    "id": "[resourceId('Microsoft.Network/privateEndpoints/privateLinkServiceConnections', variables('privateEndpointName'), variables('privateEndpointName'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                                      "groupIds": [
                                        "DSCAndHybridWorker"
                                      ]
                                    }
                                  }
                                ],
                                "customNetworkInterfaceName": "[format('nic-{0}', parameters('automationAccountName'))]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', variables('privateEndpointName'), 'default')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "privatelink-azure-automation-net",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-07-01",
                              "name": "[format('{0}/{1}', parameters('managementVirtualMachineName'), 'runbook')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "AutomationAccountName",
                                    "value": "[parameters('automationAccountName')]"
                                  },
                                  {
                                    "name": "ContainerName",
                                    "value": "[parameters('containerName')]"
                                  },
                                  {
                                    "name": "Environment",
                                    "value": "[environment().name]"
                                  },
                                  {
                                    "name": "ResourceGroupName",
                                    "value": "[resourceGroup().name]"
                                  },
                                  {
                                    "name": "RunbookName",
                                    "value": "[variables('runbookName')]"
                                  },
                                  {
                                    "name": "StorageAccountName",
                                    "value": "[split(parameters('storageAccountResourceId'), '/')[8]]"
                                  },
                                  {
                                    "name": "StorageEndpoint",
                                    "value": "[variables('storageEndpoint')]"
                                  },
                                  {
                                    "name": "SubscriptionId",
                                    "value": "[subscription().subscriptionId]"
                                  },
                                  {
                                    "name": "TenantId",
                                    "value": "[tenant().tenantId]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityClientId",
                                    "value": "[parameters('userAssignedIdentityClientId')]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityObjectId",
                                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                                  }
                                ],
                                "source": {
                                  "script": "        param (\r\n          [string]$AutomationAccountName,\r\n          [string]$ContainerName,\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$RunbookName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $BlobName = 'New-AzureZeroTrustImageBuild.ps1'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $File = \"$env:windir\\temp\\$BlobName\"\r\n        do\r\n        {\r\n            try\r\n            {\r\n                Write-Output \"Download Attempt $i\"\r\n                Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $File\r\n            }\r\n            catch [System.Net.WebException]\r\n            {\r\n                Start-Sleep -Seconds 60\r\n                $i++\r\n                if($i -gt 10){throw}\r\n                continue\r\n            }\r\n            catch\r\n            {\r\n                $Output = $_ | select *\r\n                Write-Output $Output\r\n                throw\r\n            }\r\n        }\r\n        until(Test-Path -Path $File)\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Import-AzAutomationRunbook -Name $RunbookName -Path $File -Type PowerShell -AutomationAccountName $AutomationAccountName -ResourceGroupName $ResourceGroupName -Published -Force | Out-Null\r\n      "
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Automation/automationAccounts/schedules",
                              "apiVersion": "2022-08-08",
                              "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('imageDefinitionName'))]",
                              "properties": {
                                "frequency": "Day",
                                "interval": 1,
                                "startTime": "[dateTimeAdd(parameters('time'), 'P1D')]",
                                "timeZone": "[parameters('timeZone')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                              "apiVersion": "2022-08-08",
                              "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('jobScheduleName'))]",
                              "properties": {
                                "parameters": {
                                  "parameters": "[replace(string(variables('parameters')), '\"', '\\\"')]"
                                },
                                "runbook": {
                                  "name": "[variables('runbookName')]"
                                },
                                "runOn": "Zero Trust Image Build Automation",
                                "schedule": {
                                  "name": "[parameters('imageDefinitionName')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                                "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]",
                                "[resourceId('Microsoft.Automation/automationAccounts/schedules', parameters('automationAccountName'), parameters('imageDefinitionName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups",
                              "apiVersion": "2022-08-08",
                              "name": "[format('{0}/{1}', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups/hybridRunbookWorkers",
                              "apiVersion": "2022-08-08",
                              "name": "[format('{0}/{1}/{2}', parameters('automationAccountName'), 'Zero Trust Image Build Automation', guid(resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')))]",
                              "properties": {
                                "vmResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('managementVirtualMachineName'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Zero Trust Image Build Automation')]",
                                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/{1}', parameters('managementVirtualMachineName'), 'HybridWorkerForWindows')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "publisher": "Microsoft.Azure.Automation.HybridWorker",
                                "type": "HybridWorkerForWindows",
                                "typeHandlerVersion": "1.1",
                                "autoUpgradeMinorVersion": true,
                                "enableAutomaticUpgrade": true,
                                "settings": {
                                  "AutomationAccountURL": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2022-08-08').automationHybridServiceUrl]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]"
                              ]
                            },
                            {
                              "condition": "[and(and(not(empty(parameters('domainJoinUserPrincipalName'))), not(empty(parameters('domainName')))), not(empty(parameters('oUPath'))))]",
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('managementVirtualMachineName'), 'JsonADDomainExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "forceUpdateTag": "[parameters('time')]",
                                "publisher": "Microsoft.Compute",
                                "type": "JsonADDomainExtension",
                                "typeHandlerVersion": "1.3",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "Name": "[parameters('domainName')]",
                                  "User": "[parameters('domainJoinUserPrincipalName')]",
                                  "Restart": "true",
                                  "Options": "3",
                                  "OUPath": "[parameters('oUPath')]"
                                },
                                "protectedSettings": {
                                  "Password": "[parameters('domainJoinPassword')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('managementVirtualMachineName'), 'HybridWorkerForWindows')]",
                                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('managementVirtualMachineName'), 'runbook')]"
                              ]
                            },
                            {
                              "condition": "[and(and(not(empty(parameters('logAnalyticsWorkspaceResourceId'))), not(empty(parameters('distributionGroup')))), not(empty(parameters('actionGroupName'))))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('monitoring-{0}', parameters('deploymentNameSuffix'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "actionGroupName": {
                                    "value": "[parameters('actionGroupName')]"
                                  },
                                  "automationAccountName": {
                                    "value": "[parameters('automationAccountName')]"
                                  },
                                  "distributionGroup": {
                                    "value": "[parameters('distributionGroup')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "logAnalyticsWorkspaceResourceId": {
                                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "2083337980389295324"
                                    }
                                  },
                                  "parameters": {
                                    "actionGroupName": {
                                      "type": "string"
                                    },
                                    "automationAccountName": {
                                      "type": "string"
                                    },
                                    "distributionGroup": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "logAnalyticsWorkspaceResourceId": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "variables": {
                                    "alerts": [
                                      {
                                        "name": "[format('Zero Trust Image Build - Failure ({0})', parameters('automationAccountName'))]",
                                        "description": "Sends an error alert when the runbook build fails.",
                                        "severity": 0,
                                        "evaluationFrequency": "PT5M",
                                        "windowSize": "PT5M",
                                        "criteria": {
                                          "allOf": [
                                            {
                                              "query": "AzureDiagnostics\n| where ResourceProvider == \"MICROSOFT.AUTOMATION\"\n| where Category  == \"JobStreams\"\n| where ResultDescription has \"Image build failed\"",
                                              "timeAggregation": "Count",
                                              "dimensions": [
                                                {
                                                  "name": "ResultDescription",
                                                  "operator": "Include",
                                                  "values": [
                                                    "*"
                                                  ]
                                                }
                                              ],
                                              "operator": "GreaterThanOrEqual",
                                              "threshold": 1,
                                              "failingPeriods": {
                                                "numberOfEvaluationPeriods": 1,
                                                "minFailingPeriodsToAlert": 1
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "name": "[format('Zero Trust Image Build - Success ({0})', parameters('automationAccountName'))]",
                                        "description": "Sends an informational alert when the runbook build succeeds.",
                                        "severity": 3,
                                        "evaluationFrequency": "PT5M",
                                        "windowSize": "PT5M",
                                        "criteria": {
                                          "allOf": [
                                            {
                                              "query": "AzureDiagnostics\n| where ResourceProvider == \"MICROSOFT.AUTOMATION\"\n| where Category  == \"JobStreams\"\n| where ResultDescription has \"Image build succeeded\"",
                                              "timeAggregation": "Count",
                                              "dimensions": [
                                                {
                                                  "name": "ResultDescription",
                                                  "operator": "Include",
                                                  "values": [
                                                    "*"
                                                  ]
                                                }
                                              ],
                                              "operator": "GreaterThanOrEqual",
                                              "threshold": 1,
                                              "failingPeriods": {
                                                "numberOfEvaluationPeriods": 1,
                                                "minFailingPeriodsToAlert": 1
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2017-05-01-preview",
                                      "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('automationAccountName'))]",
                                      "name": "[format('diag-{0}', parameters('automationAccountName'))]",
                                      "properties": {
                                        "logs": [
                                          {
                                            "category": "JobLogs",
                                            "enabled": true
                                          },
                                          {
                                            "category": "JobStreams",
                                            "enabled": true
                                          }
                                        ],
                                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                      }
                                    },
                                    {
                                      "condition": "[and(not(empty(parameters('actionGroupName'))), not(empty(parameters('distributionGroup'))))]",
                                      "type": "Microsoft.Insights/actionGroups",
                                      "apiVersion": "2022-06-01",
                                      "name": "[parameters('actionGroupName')]",
                                      "location": "global",
                                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Insights/actionGroups'), parameters('tags')['Microsoft.Insights/actionGroups'], createObject())]",
                                      "properties": {
                                        "emailReceivers": [
                                          {
                                            "emailAddress": "[parameters('distributionGroup')]",
                                            "name": "[parameters('distributionGroup')]",
                                            "useCommonAlertSchema": true
                                          }
                                        ],
                                        "enabled": true,
                                        "groupShortName": "Image Builds"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "scheduledQueryRules",
                                        "count": "[length(range(0, length(variables('alerts'))))]"
                                      },
                                      "condition": "[and(not(empty(parameters('actionGroupName'))), not(empty(parameters('logAnalyticsWorkspaceResourceId'))))]",
                                      "type": "Microsoft.Insights/scheduledQueryRules",
                                      "apiVersion": "2022-06-15",
                                      "name": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].name]",
                                      "location": "[parameters('location')]",
                                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Insights/scheduledQueryRules'), parameters('tags')['Microsoft.Insights/scheduledQueryRules'], createObject())]",
                                      "kind": "LogAlert",
                                      "properties": {
                                        "actions": {
                                          "actionGroups": [
                                            "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]"
                                          ]
                                        },
                                        "autoMitigate": false,
                                        "skipQueryValidation": false,
                                        "criteria": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].criteria]",
                                        "description": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].description]",
                                        "displayName": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].name]",
                                        "enabled": true,
                                        "evaluationFrequency": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].evaluationFrequency]",
                                        "severity": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].severity]",
                                        "windowSize": "[variables('alerts')[range(0, length(variables('alerts')))[copyIndex()]].windowSize]",
                                        "scopes": [
                                          "[parameters('logAnalyticsWorkspaceResourceId')]"
                                        ]
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Insights/actionGroups', parameters('actionGroupName'))]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('template-spec-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('image-build-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "arcGisProInstaller": {
                    "value": "[parameters('arcGisProInstaller')]"
                  },
                  "computeGalleryImageResourceId": {
                    "value": "[parameters('computeGalleryImageResourceId')]"
                  },
                  "computeGalleryName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.computeGalleryName]"
                  },
                  "containerName": {
                    "value": "[parameters('containerName')]"
                  },
                  "customizations": {
                    "value": "[parameters('customizations')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
                  },
                  "enableBuildAutomation": {
                    "value": "[parameters('enableBuildAutomation')]"
                  },
                  "excludeFromLatest": {
                    "value": "[parameters('excludeFromLatest')]"
                  },
                  "hybridUseBenefit": {
                    "value": "[parameters('hybridUseBenefit')]"
                  },
                  "imageDefinitionName": {
                    "value": "[variables('imageDefinitionName')]"
                  },
                  "imageMajorVersion": {
                    "value": "[parameters('imageMajorVersion')]"
                  },
                  "imagePatchVersion": {
                    "value": "[parameters('imagePatchVersion')]"
                  },
                  "imageVirtualMachineName": {
                    "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.windowsVmName, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'bd')]"
                  },
                  "installAccess": {
                    "value": "[parameters('installAccess')]"
                  },
                  "installArcGisPro": {
                    "value": "[parameters('installArcGisPro')]"
                  },
                  "installExcel": {
                    "value": "[parameters('installExcel')]"
                  },
                  "installOneDrive": {
                    "value": "[parameters('installOneDrive')]"
                  },
                  "installOneNote": {
                    "value": "[parameters('installOneNote')]"
                  },
                  "installOutlook": {
                    "value": "[parameters('installOutlook')]"
                  },
                  "installPowerPoint": {
                    "value": "[parameters('installPowerPoint')]"
                  },
                  "installProject": {
                    "value": "[parameters('installProject')]"
                  },
                  "installPublisher": {
                    "value": "[parameters('installPublisher')]"
                  },
                  "installSkypeForBusiness": {
                    "value": "[parameters('installSkypeForBusiness')]"
                  },
                  "installTeams": {
                    "value": "[parameters('installTeams')]"
                  },
                  "installUpdates": {
                    "value": "[parameters('installUpdates')]"
                  },
                  "installVirtualDesktopOptimizationTool": {
                    "value": "[parameters('installVirtualDesktopOptimizationTool')]"
                  },
                  "installVisio": {
                    "value": "[parameters('installVisio')]"
                  },
                  "installWord": {
                    "value": "[parameters('installWord')]"
                  },
                  "keyVaultName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.keyVaultName]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('localAdministratorPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('localAdministratorUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[replace(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.windowsVmName, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tokens.value.service, 'mg')]"
                  },
                  "marketplaceImageOffer": {
                    "value": "[parameters('marketplaceImageOffer')]"
                  },
                  "marketplaceImagePublisher": {
                    "value": "[parameters('marketplaceImagePublisher')]"
                  },
                  "marketplaceImageSKU": {
                    "value": "[parameters('marketplaceImageSKU')]"
                  },
                  "msrdcwebrtcsvcInstaller": {
                    "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                  },
                  "officeInstaller": {
                    "value": "[parameters('officeInstaller')]"
                  },
                  "replicaCount": {
                    "value": "[parameters('replicaCount')]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.network.value.resourceGroupName]"
                  },
                  "sourceImageType": {
                    "value": "[parameters('sourceImageType')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[parameters('storageAccountResourceId')]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[variables('calculatedTags')]"
                  },
                  "teamsInstaller": {
                    "value": "[parameters('teamsInstaller')]"
                  },
                  "updateService": {
                    "value": "[parameters('updateService')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityClientId.value]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
                  },
                  "vcRedistInstaller": {
                    "value": "[parameters('vcRedistInstaller')]"
                  },
                  "vDOTInstaller": {
                    "value": "[parameters('vDOTInstaller')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "wsusServer": {
                    "value": "[parameters('wsusServer')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "9174134663226790442"
                    }
                  },
                  "parameters": {
                    "arcGisProInstaller": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "computeGalleryImageResourceId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "computeGalleryName": {
                      "type": "string"
                    },
                    "containerName": {
                      "type": "string"
                    },
                    "customizations": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "deploymentNameSuffix": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyMMddHHs')]"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "enableBuildAutomation": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "excludeFromLatest": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "hybridUseBenefit": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "imageDefinitionName": {
                      "type": "string"
                    },
                    "imageMajorVersion": {
                      "type": "int"
                    },
                    "imagePatchVersion": {
                      "type": "int"
                    },
                    "imageVirtualMachineName": {
                      "type": "string"
                    },
                    "installAccess": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installArcGisPro": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installExcel": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installOneDrive": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installOneNote": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installOutlook": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installPowerPoint": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installProject": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installPublisher": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installSkypeForBusiness": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installTeams": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installUpdates": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installVirtualDesktopOptimizationTool": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installVisio": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "installWord": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring",
                      "defaultValue": ""
                    },
                    "localAdministratorUsername": {
                      "type": "securestring",
                      "defaultValue": ""
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "marketplaceImageOffer": {
                      "type": "string"
                    },
                    "marketplaceImagePublisher": {
                      "type": "string"
                    },
                    "marketplaceImageSKU": {
                      "type": "string"
                    },
                    "msrdcwebrtcsvcInstaller": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "officeInstaller": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "replicaCount": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "runbookExecution": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "sourceImageType": {
                      "type": "string",
                      "defaultValue": "AzureMarketplace"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "teamsInstaller": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "updateService": {
                      "type": "string",
                      "defaultValue": "MicrosoftUpdate"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "vcRedistInstaller": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "vDOTInstaller": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "wsusServer": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "autoImageVersion": "[format('{0}.{1}.{2}', parameters('imageMajorVersion'), variables('imageSuffix'), parameters('imagePatchVersion'))]",
                    "imageSuffix": "[take(parameters('deploymentNameSuffix'), 9)]",
                    "storageAccountName": "[split(parameters('storageAccountResourceId'), '/')[8]]",
                    "storageEndpoint": "[environment().suffixes.storage]",
                    "subscriptionId": "[subscription().subscriptionId]"
                  },
                  "resources": [
                    {
                      "condition": "[not(parameters('enableBuildAutomation'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('management-vm-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "containerName": {
                            "value": "[parameters('containerName')]"
                          },
                          "diskEncryptionSetResourceId": {
                            "value": "[parameters('diskEncryptionSetResourceId')]"
                          },
                          "hybridUseBenefit": {
                            "value": "[parameters('hybridUseBenefit')]"
                          },
                          "localAdministratorPassword": {
                            "value": "[parameters('localAdministratorPassword')]"
                          },
                          "localAdministratorUsername": {
                            "value": "[parameters('localAdministratorUsername')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "storageAccountName": {
                            "value": "[split(parameters('storageAccountResourceId'), '/')[8]]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityPrincipalId": {
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          },
                          "userAssignedIdentityResourceId": {
                            "value": "[parameters('userAssignedIdentityResourceId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "12968919444807468891"
                            }
                          },
                          "parameters": {
                            "containerName": {
                              "type": "string"
                            },
                            "diskEncryptionSetResourceId": {
                              "type": "string"
                            },
                            "hybridUseBenefit": {
                              "type": "bool"
                            },
                            "localAdministratorPassword": {
                              "type": "securestring"
                            },
                            "localAdministratorUsername": {
                              "type": "securestring"
                            },
                            "location": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityPrincipalId": {
                              "type": "string"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2023-04-01",
                              "name": "[format('nic-{0}', parameters('virtualMachineName'))]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig",
                                    "properties": {
                                      "privateIPAllocationMethod": "Dynamic",
                                      "subnet": {
                                        "id": "[parameters('subnetResourceId')]"
                                      },
                                      "primary": true,
                                      "privateIPAddressVersion": "IPv4"
                                    }
                                  }
                                ],
                                "enableAcceleratedNetworking": true,
                                "enableIPForwarding": false
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2022-03-01",
                              "name": "[parameters('virtualMachineName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "Standard_D2s_v3"
                                },
                                "osProfile": {
                                  "computerName": "[parameters('virtualMachineName')]",
                                  "adminUsername": "[parameters('localAdministratorUsername')]",
                                  "adminPassword": "[parameters('localAdministratorPassword')]",
                                  "windowsConfiguration": {
                                    "provisionVMAgent": true,
                                    "enableAutomaticUpdates": true,
                                    "patchSettings": {
                                      "patchMode": "AutomaticByOS",
                                      "assessmentMode": "ImageDefault"
                                    }
                                  }
                                },
                                "storageProfile": {
                                  "imageReference": {
                                    "publisher": "MicrosoftWindowsServer",
                                    "offer": "WindowsServer",
                                    "sku": "2019-datacenter-core-g2",
                                    "version": "latest"
                                  },
                                  "osDisk": {
                                    "caching": "ReadWrite",
                                    "createOption": "FromImage",
                                    "deleteOption": "Delete",
                                    "managedDisk": {
                                      "diskEncryptionSet": {
                                        "id": "[parameters('diskEncryptionSetResourceId')]"
                                      },
                                      "storageAccountType": "Premium_LRS"
                                    },
                                    "name": "[format('disk-{0}', parameters('virtualMachineName'))]",
                                    "osType": "Windows"
                                  }
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                                      "properties": {
                                        "deleteOption": "Delete"
                                      }
                                    }
                                  ]
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": false
                                  }
                                },
                                "securityProfile": {
                                  "encryptionAtHost": true,
                                  "uefiSettings": {
                                    "secureBootEnabled": true,
                                    "vTpmEnabled": true
                                  },
                                  "securityType": "TrustedLaunch"
                                },
                                "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'appAzModules')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "ContainerName",
                                    "value": "[parameters('containerName')]"
                                  },
                                  {
                                    "name": "StorageAccountName",
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  {
                                    "name": "StorageEndpoint",
                                    "value": "[environment().suffixes.storage]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityObjectId",
                                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                                  }
                                ],
                                "source": {
                                  "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.12.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('virtualMachineName')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('image-vm-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localAdministratorPassword": "[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorPassword')), createObject('value', parameters('localAdministratorPassword')))]",
                          "localAdministratorUsername": "[if(parameters('runbookExecution'), createObject('reference', createObject('keyVault', createObject('id', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))), 'secretName', 'LocalAdministratorUsername')), createObject('value', parameters('localAdministratorUsername')))]",
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "marketplaceImageOffer": {
                            "value": "[parameters('marketplaceImageOffer')]"
                          },
                          "marketplaceImagePublisher": {
                            "value": "[parameters('marketplaceImagePublisher')]"
                          },
                          "marketplaceImageSKU": {
                            "value": "[parameters('marketplaceImageSKU')]"
                          },
                          "computeGalleryImageResourceId": {
                            "value": "[parameters('computeGalleryImageResourceId')]"
                          },
                          "sourceImageType": {
                            "value": "[parameters('sourceImageType')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityResourceId": {
                            "value": "[parameters('userAssignedIdentityResourceId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('imageVirtualMachineName')]"
                          },
                          "virtualMachineSize": {
                            "value": "[parameters('virtualMachineSize')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "3416440754020274895"
                            }
                          },
                          "parameters": {
                            "localAdministratorPassword": {
                              "type": "securestring"
                            },
                            "localAdministratorUsername": {
                              "type": "securestring"
                            },
                            "location": {
                              "type": "string"
                            },
                            "marketplaceImageOffer": {
                              "type": "string"
                            },
                            "marketplaceImagePublisher": {
                              "type": "string"
                            },
                            "marketplaceImageSKU": {
                              "type": "string"
                            },
                            "computeGalleryImageResourceId": {
                              "type": "string"
                            },
                            "sourceImageType": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            },
                            "virtualMachineSize": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "imageReference": "[if(equals(parameters('sourceImageType'), 'AzureComputeGallery'), createObject('id', parameters('computeGalleryImageResourceId')), createObject('publisher', parameters('marketplaceImagePublisher'), 'offer', parameters('marketplaceImageOffer'), 'sku', parameters('marketplaceImageSKU'), 'version', 'latest'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2022-05-01",
                              "name": "[format('nic-{0}', parameters('virtualMachineName'))]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateIPAllocationMethod": "Dynamic",
                                      "subnet": {
                                        "id": "[parameters('subnetResourceId')]"
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2022-03-01",
                              "name": "[parameters('virtualMachineName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "[parameters('virtualMachineSize')]"
                                },
                                "osProfile": {
                                  "computerName": "[parameters('virtualMachineName')]",
                                  "adminUsername": "[parameters('localAdministratorUsername')]",
                                  "adminPassword": "[parameters('localAdministratorPassword')]"
                                },
                                "storageProfile": {
                                  "imageReference": "[variables('imageReference')]",
                                  "osDisk": {
                                    "createOption": "FromImage",
                                    "deleteOption": "Delete",
                                    "managedDisk": {
                                      "storageAccountType": "StandardSSD_LRS"
                                    },
                                    "name": "[format('disk-{0}', parameters('virtualMachineName'))]"
                                  }
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]",
                                      "properties": {
                                        "deleteOption": "Delete"
                                      }
                                    }
                                  ]
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": false
                                  }
                                },
                                "securityProfile": {
                                  "uefiSettings": {
                                    "secureBootEnabled": true,
                                    "vTpmEnabled": true
                                  },
                                  "securityType": "TrustedLaunch"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', format('nic-{0}', parameters('virtualMachineName')))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('virtualMachineName')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('customizations-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "arcGisProInstaller": {
                            "value": "[parameters('arcGisProInstaller')]"
                          },
                          "containerName": {
                            "value": "[parameters('containerName')]"
                          },
                          "customizations": {
                            "value": "[parameters('customizations')]"
                          },
                          "installAccess": {
                            "value": "[parameters('installAccess')]"
                          },
                          "installArcGisPro": {
                            "value": "[parameters('installArcGisPro')]"
                          },
                          "installExcel": {
                            "value": "[parameters('installExcel')]"
                          },
                          "installOneDrive": {
                            "value": "[parameters('installOneDrive')]"
                          },
                          "installOneNote": {
                            "value": "[parameters('installOneNote')]"
                          },
                          "installOutlook": {
                            "value": "[parameters('installOutlook')]"
                          },
                          "installPowerPoint": {
                            "value": "[parameters('installPowerPoint')]"
                          },
                          "installProject": {
                            "value": "[parameters('installProject')]"
                          },
                          "installPublisher": {
                            "value": "[parameters('installPublisher')]"
                          },
                          "installSkypeForBusiness": {
                            "value": "[parameters('installSkypeForBusiness')]"
                          },
                          "installTeams": {
                            "value": "[parameters('installTeams')]"
                          },
                          "installVirtualDesktopOptimizationTool": {
                            "value": "[parameters('installVirtualDesktopOptimizationTool')]"
                          },
                          "installVisio": {
                            "value": "[parameters('installVisio')]"
                          },
                          "installWord": {
                            "value": "[parameters('installWord')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "msrdcwebrtcsvcInstaller": {
                            "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                          },
                          "officeInstaller": {
                            "value": "[parameters('officeInstaller')]"
                          },
                          "storageAccountName": {
                            "value": "[variables('storageAccountName')]"
                          },
                          "storageEndpoint": {
                            "value": "[variables('storageEndpoint')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "teamsInstaller": {
                            "value": "[parameters('teamsInstaller')]"
                          },
                          "userAssignedIdentityObjectId": {
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          },
                          "vcRedistInstaller": {
                            "value": "[parameters('vcRedistInstaller')]"
                          },
                          "vDotInstaller": {
                            "value": "[parameters('vDOTInstaller')]"
                          },
                          "virtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "10008712211219806019"
                            }
                          },
                          "parameters": {
                            "arcGisProInstaller": {
                              "type": "string"
                            },
                            "containerName": {
                              "type": "string"
                            },
                            "customizations": {
                              "type": "array"
                            },
                            "installAccess": {
                              "type": "bool"
                            },
                            "installArcGisPro": {
                              "type": "bool"
                            },
                            "installExcel": {
                              "type": "bool"
                            },
                            "installOneDrive": {
                              "type": "bool"
                            },
                            "installOneNote": {
                              "type": "bool"
                            },
                            "installOutlook": {
                              "type": "bool"
                            },
                            "installPowerPoint": {
                              "type": "bool"
                            },
                            "installProject": {
                              "type": "bool"
                            },
                            "installPublisher": {
                              "type": "bool"
                            },
                            "installSkypeForBusiness": {
                              "type": "bool"
                            },
                            "installTeams": {
                              "type": "bool"
                            },
                            "installVirtualDesktopOptimizationTool": {
                              "type": "bool"
                            },
                            "installVisio": {
                              "type": "bool"
                            },
                            "installWord": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "msrdcwebrtcsvcInstaller": {
                              "type": "string"
                            },
                            "officeInstaller": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "storageEndpoint": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "teamsInstaller": {
                              "type": "string"
                            },
                            "userAssignedIdentityObjectId": {
                              "type": "string"
                            },
                            "vcRedistInstaller": {
                              "type": "string"
                            },
                            "vDotInstaller": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "installAccessVar": "[format('{0}installAccess', parameters('installAccess'))]",
                            "installers": "[parameters('customizations')]",
                            "installExcelVar": "[format('{0}installWord', parameters('installExcel'))]",
                            "installOneDriveVar": "[format('{0}installOneDrive', parameters('installOneDrive'))]",
                            "installOneNoteVar": "[format('{0}installOneNote', parameters('installOneNote'))]",
                            "installOutlookVar": "[format('{0}installOutlook', parameters('installOutlook'))]",
                            "installPowerPointVar": "[format('{0}installPowerPoint', parameters('installPowerPoint'))]",
                            "installProjectVar": "[format('{0}installProject', parameters('installProject'))]",
                            "installPublisherVar": "[format('{0}installPublisher', parameters('installPublisher'))]",
                            "installSkypeForBusinessVar": "[format('{0}installSkypeForBusiness', parameters('installSkypeForBusiness'))]",
                            "installVisioVar": "[format('{0}installVisio', parameters('installVisio'))]",
                            "installWordVar": "[format('{0}installWord', parameters('installWord'))]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "applications",
                                "count": "[length(variables('installers'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), format('app-{0}', variables('installers')[copyIndex()].name))]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "UserAssignedIdentityObjectId",
                                    "value": "[parameters('userAssignedIdentityObjectId')]"
                                  },
                                  {
                                    "name": "StorageAccountName",
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  {
                                    "name": "ContainerName",
                                    "value": "[parameters('containerName')]"
                                  },
                                  {
                                    "name": "StorageEndpoint",
                                    "value": "[parameters('storageEndpoint')]"
                                  },
                                  {
                                    "name": "Blobname",
                                    "value": "[variables('installers')[copyIndex()].blobName]"
                                  },
                                  {
                                    "name": "Installer",
                                    "value": "[variables('installers')[copyIndex()].name]"
                                  },
                                  {
                                    "name": "Arguments",
                                    "value": "[variables('installers')[copyIndex()].arguments]"
                                  }
                                ],
                                "source": {
                                  "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName,\r\n          [string]$Installer,\r\n          [string]$Arguments\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        New-Item -Path $env:windir\\temp -Name $Installer -ItemType \"directory\" -Force\r\n        New-Item -Path $env:windir\\temp\\$Installer -Name 'Files' -ItemType \"directory\" -Force\r\n        #Invoking WebClient to download blobs because it is more efficient than Invoke-WebRequest for large files.\r\n        $WebClient = New-Object System.Net.WebClient\r\n        $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n        $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n        $webClient.DownloadFile(\"$StorageAccountUrl$ContainerName/$BlobName\", \"$env:windir\\temp\\$Installer\\Files\\$Blobname\")\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\\$Installer\r\n        if($Blobname -like (\"*.exe\"))\r\n        {\r\n          Start-Process -FilePath $env:windir\\temp\\$Installer\\Files\\$Blobname -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.msi\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait\r\n          $status = Get-WmiObject -Class Win32_Product | Where-Object Name -like \"*$($installer)*\"\r\n          if($status)\r\n          {\r\n            Write-Host $status.Name \"is installed\"\r\n          }\r\n          else\r\n          {\r\n            Write-host $Installer \"did not install properly, please check arguments\"\r\n          }\r\n        }\r\n        if($Blobname -like (\"*.bat\"))\r\n        {\r\n          Start-Process -FilePath cmd.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.ps1\"))\r\n        {\r\n          Start-Process -FilePath PowerShell.exe -ArgumentList $env:windir\\temp\\$Installer\\Files\\$Arguments -Wait\r\n        }\r\n        if($Blobname -like (\"*.zip\"))\r\n        {\r\n          Set-Location -Path $env:windir\\temp\\$Installer\\Files\r\n          Expand-Archive -Path $env:windir\\temp\\$Installer\\Files\\$Blobname -DestinationPath $env:windir\\temp\\$Installer\\Files -Force\r\n          Remove-Item -Path .\\$Blobname -Force -Recurse\r\n        }\r\n        Write-Host \"Removing $Installer Files\"\r\n        Remove-item $env:windir\\temp\\$Installer -Force -Recurse -Confirm:$false\r\n       "
                                }
                              }
                            },
                            {
                              "condition": "[or(or(or(or(or(or(or(or(or(or(parameters('installAccess'), parameters('installExcel')), parameters('installOneDrive')), parameters('installOneNote')), parameters('installOutlook')), parameters('installPowerPoint')), parameters('installPublisher')), parameters('installSkypeForBusiness')), parameters('installWord')), parameters('installVisio')), parameters('installProject'))]",
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'office')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "InstallAccess",
                                    "value": "[variables('installAccessVar')]"
                                  },
                                  {
                                    "name": "InstallWord",
                                    "value": "[variables('installWordVar')]"
                                  },
                                  {
                                    "name": "InstallExcel",
                                    "value": "[variables('installExcelVar')]"
                                  },
                                  {
                                    "name": "InstallOneDrive",
                                    "value": "[variables('installOneDriveVar')]"
                                  },
                                  {
                                    "name": "InstallOneNote",
                                    "value": "[variables('installOneNoteVar')]"
                                  },
                                  {
                                    "name": "InstallOutlook",
                                    "value": "[variables('installOutlookVar')]"
                                  },
                                  {
                                    "name": "InstallPowerPoint",
                                    "value": "[variables('installPowerPointVar')]"
                                  },
                                  {
                                    "name": "InstallProject",
                                    "value": "[variables('installProjectVar')]"
                                  },
                                  {
                                    "name": "InstallPublisher",
                                    "value": "[variables('installPublisherVar')]"
                                  },
                                  {
                                    "name": "InstallSkypeForBusiness",
                                    "value": "[variables('installSkypeForBusinessVar')]"
                                  },
                                  {
                                    "name": "InstallVisio",
                                    "value": "[variables('installVisioVar')]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityObjectId",
                                    "value": "[parameters('userAssignedIdentityObjectId')]"
                                  },
                                  {
                                    "name": "StorageAccountName",
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  {
                                    "name": "ContainerName",
                                    "value": "[parameters('containerName')]"
                                  },
                                  {
                                    "name": "StorageEndpoint",
                                    "value": "[parameters('storageEndpoint')]"
                                  },
                                  {
                                    "name": "BlobName",
                                    "value": "[parameters('officeInstaller')]"
                                  }
                                ],
                                "source": {
                                  "script": "      param(\r\n        [string]$InstallAccess,\r\n        [string]$InstallExcel,\r\n        [string]$InstallOneDrive,\r\n        [string]$InstallOutlook,\r\n        [string]$InstallProject,\r\n        [string]$InstallPublisher,\r\n        [string]$InstallSkypeForBusiness,\r\n        [string]$InstallVisio,\r\n        [string]$InstallWord,\r\n        [string]$InstallOneNote,\r\n        [string]$InstallPowerPoint,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      New-Item -Path \"$env:windir\\temp\\office\" -ItemType \"directory\" -Force\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $o365ConfigHeader = Set-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Configuration><Add OfficeClientEdition=\"64\" Channel=\"Current\">'\r\n      $o365OfficeHeader = Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"O365ProPlusRetail\"><Language ID=\"en-us\" /><ExcludeApp ID=\"Teams\"/>'\r\n      if($InstallAccess -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Access\" />'\r\n      }\r\n      if($InstallExcel -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Excel\" />'\r\n      }\r\n      if($InstallOneDrive -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"OneDrive\" />'\r\n      }\r\n      if($InstallOneNote -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"OneNote\" />'\r\n      }\r\n      if($InstallOutlook -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Outlook\" />'\r\n      }\r\n      if($InstallPowerPoint -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"PowerPoint\" />'\r\n      }\r\n      if($InstallPublisher -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Publisher\" />'\r\n      }\r\n      if($InstallSkypeForBusiness -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Lync\" />'\r\n      }\r\n      if($InstallWord -notlike '*true*'){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<ExcludeApp ID=\"Word\" />'\r\n      }\r\n      $addOfficefooter = Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Product>'\r\n      if($InstallProject -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"ProjectProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      if($InstallVisio -like '*true*'){\r\n        Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Product ID=\"VisioProRetail\"><Language ID=\"en-us\" /></Product>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Add><Updates Enabled=\"FALSE\" /><Display Level=\"None\" AcceptEULA=\"TRUE\" /><Property Name=\"FORCEAPPSHUTDOWN\" Value=\"TRUE\"/>'\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\r\n          Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '<Property Name=\"SharedComputerLicensing\" Value=\"1\"/>'\r\n      }\r\n      Add-Content \"$env:windir\\temp\\office\\office365x64.xml\" '</Configuration>'\r\n      $Installer = \"$env:windir\\temp\\office\\office.exe\"\r\n      #$DownloadLinks = Invoke-WebRequest -Uri \"https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117\" -UseBasicParsing\r\n      #$URL = $DownloadLinks.Links.href | Where-Object {$_ -like \"https://download.microsoft.com/download/*officedeploymenttool*\"} | Select-Object -First 1\r\n      #Invoke-WebRequest -Uri $URL -OutFile $Installer -UseBasicParsing\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $Installer\r\n      Start-Process -FilePath $Installer -ArgumentList \"/extract:$env:windir\\temp\\office /quiet /passive /norestart\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Downloaded & extracted the Office 365 Deployment Toolkit\"\r\n      Start-Process -FilePath \"$env:windir\\temp\\office\\setup.exe\" -ArgumentList \"/configure $env:windir\\temp\\office\\office365x64.xml\" -Wait -PassThru -ErrorAction \"Stop\" | Out-Null\r\n      Write-Host \"Installed the selected Office365 applications\"\r\n      Write-Host \"Removing Office FIles\"\r\n      Remove-item -Path  \"$env:windir\\temp\\office\" -Force -Confirm:$false -Recurse\r\n      "
                                }
                              },
                              "dependsOn": [
                                "applications"
                              ]
                            },
                            {
                              "condition": "[parameters('installVirtualDesktopOptimizationTool')]",
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'vdot')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "UserAssignedIdentityObjectId",
                                    "value": "[parameters('userAssignedIdentityObjectId')]"
                                  },
                                  {
                                    "name": "StorageAccountName",
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  {
                                    "name": "ContainerName",
                                    "value": "[parameters('containerName')]"
                                  },
                                  {
                                    "name": "StorageEndpoint",
                                    "value": "[parameters('storageEndpoint')]"
                                  },
                                  {
                                    "name": "BlobName",
                                    "value": "[parameters('vDotInstaller')]"
                                  }
                                ],
                                "source": {
                                  "script": "        param(\r\n          [string]$UserAssignedIdentityObjectId,\r\n          [string]$StorageAccountName,\r\n          [string]$ContainerName,\r\n          [string]$StorageEndpoint,\r\n          [string]$BlobName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        $WarningPreference = 'SilentlyContinue'\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $ZIP = \"$env:windir\\temp\\VDOT.zip\"\r\n        Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n        Start-Sleep -Seconds 30\r\n        Set-Location -Path $env:windir\\temp\r\n        Unblock-File -Path $ZIP\r\n        Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\" -Force\r\n        $Path = (Get-ChildItem -Path \"$env:windir\\temp\" -Recurse | Where-Object {$_.Name -eq \"Windows_VDOT.ps1\"}).FullName\r\n        $Script = Get-Content -Path $Path\r\n        $ScriptUpdate = $Script.Replace(\"Set-NetAdapterAdvancedProperty\",\"#Set-NetAdapterAdvancedProperty\")\r\n        $ScriptUpdate | Set-Content -Path $Path\r\n        & $Path -Optimizations @(\"AppxPackages\",\"Autologgers\",\"DefaultUserSettings\",\"LGPO\";\"NetworkOptimizations\",\"ScheduledTasks\",\"Services\",\"WindowsMediaPlayer\") -AdvancedOptimizations \"All\" -AcceptEULA\r\n        Write-Host \"Removing VDOT Files\"\r\n        # Expecting this format for vDot ZIP, update if using a different ZIP format for folder structure\r\n        Remove-Item -Path $env:windir\\temp\\Virtual-Desktop-Optimization-Tool-main -Force -Recurse -Confirm:$false\r\n        "
                                },
                                "timeoutInSeconds": 640
                              },
                              "dependsOn": [
                                "applications",
                                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]",
                                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'teams')]"
                              ]
                            },
                            {
                              "condition": "[parameters('installTeams')]",
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'teams')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "UserAssignedIdentityObjectId",
                                    "value": "[parameters('userAssignedIdentityObjectId')]"
                                  },
                                  {
                                    "name": "StorageAccountName",
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  {
                                    "name": "ContainerName",
                                    "value": "[parameters('containerName')]"
                                  },
                                  {
                                    "name": "StorageEndpoint",
                                    "value": "[parameters('storageEndpoint')]"
                                  },
                                  {
                                    "name": "BlobName",
                                    "value": "[parameters('teamsInstaller')]"
                                  },
                                  {
                                    "name": "BlobName2",
                                    "value": "[parameters('vcRedistInstaller')]"
                                  },
                                  {
                                    "name": "BlobName3",
                                    "value": "[parameters('msrdcwebrtcsvcInstaller')]"
                                  }
                                ],
                                "source": {
                                  "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName,\r\n        [string]$BlobName2,\r\n        [string]$BlobName3\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $vcRedistFile = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      $webSocketFile = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      $teamsFile = \"$env:windir\\temp\\teams.msi\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $teamsFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName2\" -OutFile $vcRedistFile\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName3\" -OutFile  $webSocketFile\r\n\r\n      # Enable media optimizations for Team\r\n      Start-Process \"reg\" -ArgumentList \"add HKLM\\SOFTWARE\\Microsoft\\Teams /v IsWVDEnvironment /t REG_DWORD /d 1 /f\" -Wait -PassThru -ErrorAction \"Stop\"\r\n      Write-Host \"Enabled media optimizations for Teams\"\r\n      # Download & install the latest version of Microsoft Visual C++ Redistributable\r\n      #$File = \"$env:windir\\temp\\vc_redist.x64.exe\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/vs/16/release/vc_redist.x64.exe\" -OutFile $File\r\n      Start-Process -FilePath  $vcRedistFile -Args \"/install /quiet /norestart /log vcdist.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the latest version of Microsoft Visual C++ Redistributable\"\r\n      # Download & install the Remote Desktop WebRTC Redirector Service\r\n      #$File = \"$env:windir\\temp\\webSocketSvc.msi\"\r\n      #Invoke-WebRequest -Uri \"https://aka.ms/msrdcwebrtcsvc/msi\" -OutFile $File\r\n      Start-Process -FilePath msiexec.exe -Args \"/i  $webSocketFile /quiet /qn /norestart /passive /log webSocket.log\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed the Remote Desktop WebRTC Redirector Service\"\r\n      # Install Teams\r\n      #$File = \"$env:windir\\temp\\teams.msi\"\r\n      #Write-host $($TeamsUrl)\r\n      #Invoke-WebRequest -Uri \"$TeamsUrl\" -OutFile $File\r\n      $sku = (Get-ComputerInfo).OsName\r\n      $PerMachineConfiguration = if(($Sku).Contains(\"multi\") -eq \"true\"){\"ALLUSER=1\"}else{\"\"}\r\n      Start-Process -FilePath msiexec.exe -Args \"/i $teamsFile /quiet /qn /norestart /passive /log teams.log $PerMachineConfiguration ALLUSERS=1\" -Wait -PassThru | Out-Null\r\n      Write-Host \"Installed Teams\"\r\n      Write-Host \"Removing Teams Files\"\r\n      Remove-Item \"$teamsFile\" -Force -Confirm:$false\r\n      Remove-Item \"$vcRedistFile\" -Force -Confirm:$false\r\n      Remove-Item \"$webSocketFile\" -Force -Confirm:$false\r\n      "
                                }
                              },
                              "dependsOn": [
                                "applications",
                                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]"
                              ]
                            },
                            {
                              "condition": "[parameters('installArcGisPro')]",
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'arcGisPro')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "UserAssignedIdentityObjectId",
                                    "value": "[parameters('userAssignedIdentityObjectId')]"
                                  },
                                  {
                                    "name": "StorageAccountName",
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  {
                                    "name": "ContainerName",
                                    "value": "[parameters('containerName')]"
                                  },
                                  {
                                    "name": "StorageEndpoint",
                                    "value": "[parameters('storageEndpoint')]"
                                  },
                                  {
                                    "name": "BlobName",
                                    "value": "[parameters('arcGisProInstaller')]"
                                  }
                                ],
                                "source": {
                                  "script": "      param(\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$StorageAccountName,\r\n        [string]$ContainerName,\r\n        [string]$StorageEndpoint,\r\n        [string]$BlobName\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      # Retrieve Files\r\n      New-Item -Path $env:windir\\temp -Name arcgis -ItemType \"directory\" -Force\r\n      $ZIP = \"$env:windir\\temp\\arcgispro.zip\"\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile $ZIP\r\n      Start-Sleep -Seconds 30\r\n      Set-Location -Path $env:windir\\temp\r\n      Unblock-File -Path $ZIP\r\n      Expand-Archive -LiteralPath $ZIP -DestinationPath \"$env:windir\\temp\\arcgis\" -Force\r\n\r\n      # Install Arcgis\r\n      $arcGisProMsi = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -eq \"ArcGisPro.msi\"})\r\n      $arcGisProMsp = (Get-ChildItem \"$env:windir\\temp\\arcgis\" -Recurse | where {$_.Extension -eq \".msp\"})\r\n      $winDesktopRuntime = (Get-ChildItem \"$env:windir\\temp\\arcgis\\\" -Recurse | where {$_.Name -like \"windowsdesktop-runtime-*\"})\r\n\r\n      # If found Install Windows Desktop Runtime Pre-Req\r\n      try {\r\n        if ($winDesktopRuntime ){\r\n            Start-Process -FilePath \"$($winDesktopRuntime.Directory.FullName)\\$winDesktopRuntime\" -ArgumentList \"/install /quiet /norestart\" -Wait -NoNewWindow -PassThru\r\n        }\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n        # Install ArcGis Pro\r\n        $arcGisProArguments = \"/i $($arcGisProMsi.Directory.FullName)\\$arcGisProMsi ALLUSERS=1 ACCEPTEULA=yes ENABLEEUEI=0 SOFTWARE_CLASS=Professional AUTHORIZATION_TYPE=NAMED_USER LOCK_AUTH_SETTINGS=False ArcGIS_Connection=TRUE /qn /norestart\"\r\n        Start-Process \"msiexec.exe\" -ArgumentList $arcGisProArguments  -Wait -NoNewWindow -PassThru\r\n      }\r\n      catch {\r\n        Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n      }\r\n\r\n      try {\r\n      # If MSP is found, patch ArcGisPro with MSP file\r\n      if($arcGisProMsp){\r\n          Start-Process \"msiexec.exe\" -ArgumentList \"/p $($arcGisProMsp.Directory.FullName)\\$arcGisProMsp /qn\" -Wait -NoNewWindow -PassThru\r\n      }\r\n    }\r\n    catch {\r\n      Write-Output \"Please validate all software requirements are included with the ArcGIS Pro Zip\"\r\n    }\r\n    Write-Host \"Removing ArcGis Files\"\r\n    Remove-Item $ZIP -Force -Confirm:$false -Recurse\r\n    Remove-item -Path  \"$env:windir\\temp\\arcgis\" -Force -Confirm:$false -Recurse\r\n    "
                                }
                              },
                              "dependsOn": [
                                "applications",
                                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'office')]",
                                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'teams')]",
                                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'vdot')]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('restart-vm-1-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "imageVirtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": "[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "10420021406848674052"
                            }
                          },
                          "parameters": {
                            "imageVirtualMachineName": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'restartVirtualMachine')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "Environment",
                                    "value": "[environment().name]"
                                  },
                                  {
                                    "name": "ResourceGroupName",
                                    "value": "[parameters('resourceGroupName')]"
                                  },
                                  {
                                    "name": "SubscriptionId",
                                    "value": "[subscription().subscriptionId]"
                                  },
                                  {
                                    "name": "TenantId",
                                    "value": "[tenant().tenantId]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityClientId",
                                    "value": "[parameters('userAssignedIdentityClientId')]"
                                  },
                                  {
                                    "name": "VirtualMachineName",
                                    "value": "[parameters('imageVirtualMachineName')]"
                                  }
                                ],
                                "source": {
                                  "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Restart-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName\r\n        $AgentStatus = $Null\r\n        while ($Null -eq $AgentStatus) \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $AgentStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).VMAgent\r\n        }\r\n      "
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('customizations-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('installUpdates')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('microsoft-updates-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "imageVirtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "updateService": {
                            "value": "[parameters('updateService')]"
                          },
                          "wsusServer": {
                            "value": "[parameters('wsusServer')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "12095172867813258567"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "imageVirtualMachineName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "updateService": {
                              "type": "string"
                            },
                            "wsusServer": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('imageVirtualMachineName'), 'install-microsoft-updates')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "asyncExecution": false,
                                "parameters": "[if(equals(parameters('updateService'), 'WSUS'), createArray(createObject('name', 'Service', 'value', parameters('updateService')), createObject('name', 'WSUSServer', 'value', parameters('wsusServer'))), createArray(createObject('name', 'Service', 'value', parameters('updateService'))))]",
                                "source": {
                                  "script": "        param (\r\n          # The App Name to pass to the WUA API as the calling application.\r\n          [Parameter()]\r\n          [String]$AppName = \"Windows Update API Script\",\r\n          # The search criteria to be used.\r\n          [Parameter()]\r\n          [String]$Criteria = \"IsInstalled=0 and Type='Software' and IsHidden=0\",\r\n          [Parameter()]\r\n          [bool]$ExcludePreviewUpdates = $true,\r\n          # Default service (WSUS if machine is configured to use it, or MU if opted in, or WU otherwise.)\r\n          [Parameter()]\r\n          [ValidateSet(\"WU\",\"MU\",\"WSUS\",\"DCAT\",\"STORE\",\"OTHER\")]\r\n          [string]$Service = 'MU',\r\n          # The http/https fqdn for the Windows Server Update Server\r\n          [Parameter()]\r\n          [string]$WSUSServer\r\n        )\r\n        \r\n        Function ConvertFrom-InstallationResult {\r\n        [CmdletBinding()]\r\n            param (\r\n                [Parameter()]\r\n                [int]$Result\r\n            )        \r\n            switch ($Result) {\r\n                2 { $Text = 'Succeeded' }\r\n                3 { $Text = 'Succeeded with errors' }\r\n                4 { $Text = 'Failed' }\r\n                5 { $Text = 'Cancelled' }\r\n                Default { $Text = \"Unexpected ($Result)\"}\r\n            }        \r\n            Return $Text\r\n        }\r\n        Start-Transcript -Path \"$env:SystemRoot\\Logs\\ImageBuild\\Install-Updates.log\"\r\n        Switch ($Service.ToUpper()) {\r\n            'WU' { $ServerSelection = 2 }\r\n            'MU' { $ServerSelection = 3; $ServiceId = \"7971f918-a847-4430-9279-4a52d1efe18d\" }\r\n            'WSUS' { $ServerSelection = 1 }\r\n            'DCAT' { $ServerSelection = 3; $ServiceId = \"855E8A7C-ECB4-4CA3-B045-1DFA50104289\" }\r\n            'STORE' { $serverSelection = 3; $ServiceId = \"117cab2d-82b1-4b5a-a08c-4d62dbee7782\" }\r\n            'OTHER' { $ServerSelection = 3; $ServiceId = $Service }\r\n        }        \r\n        If ($Service -eq 'MU') {\r\n            $UpdateServiceManager = New-Object -ComObject Microsoft.Update.ServiceManager\r\n            $UpdateServiceManager.ClientApplicationID = $AppName\r\n            $UpdateServiceManager.AddService2(\"7971f918-a847-4430-9279-4a52d1efe18d\", 7, \"\")\r\n            $null = cmd /c reg.exe ADD \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /t REG_DWORD /d 1 /f '2>&1'\r\n            Write-Output \"Added Registry entry to configure Microsoft Update. Exit Code: [$LastExitCode]\"\r\n        } Elseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n            $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n            $null = cmd /c reg.exe ADD \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /t REG_SZ /d $WSUSServer /f '2>&1'\r\n            Write-Output \"Added Registry entry to configure WSUS Server. Exit Code: [$LastExitCode]\"\r\n        }        \r\n        $UpdateSession = New-Object -ComObject Microsoft.Update.Session\r\n        $updateSession.ClientApplicationID = $AppName   \r\n        $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()\r\n        $UpdateSearcher.ServerSelection = $ServerSelection\r\n        If ($ServerSelection -eq 3) {\r\n            $UpdateSearcher.ServiceId = $ServiceId\r\n        }\r\n        Write-Output \"Searching for Updates...\"\r\n        $SearchResult = $UpdateSearcher.Search($Criteria)\r\n        If ($SearchResult.Updates.Count -eq 0) {\r\n            Write-Output \"There are no applicable updates.\"\r\n            Write-Output \"Now Exiting\"\r\n            Exit $ExitCode\r\n        }\r\n        Write-Output \"List of applicable items found for this computer:\"\r\n        For ($i = 0; $i -lt $SearchResult.Updates.Count; $i++) {\r\n            $Update = $SearchResult.Updates[$i]\r\n            Write-Output \"$($i + 1) > $($update.Title)\"\r\n        }\r\n        $AtLeastOneAdded = $false\r\n        $ExclusiveAdded = $false   \r\n        $UpdatesToDownload = New-Object -ComObject Microsoft.Update.UpdateColl\r\n        Write-Output \"Checking search results:\"\r\n        For ($i = 0; $i -lt $SearchResult.Updates.Count; $i++) {\r\n            $Update = $SearchResult.Updates[$i]\r\n            $AddThisUpdate = $false        \r\n            If ($ExclusiveAdded) {\r\n                Write-Output \"$($i + 1) > skipping: '$($update.Title)' because an exclusive update has already been selected.\"\r\n            } Else {\r\n                $AddThisUpdate = $true\r\n            }        \r\n            if ($ExcludePreviewUpdates -and $update.Title -like '*Preview*') {\r\n                Write-Output \"$($i + 1) > Skipping: '$($update.Title)' because it is a preview update.\"\r\n                $AddThisUpdate = $false\r\n            }        \r\n            If ($AddThisUpdate) {\r\n                $PropertyTest = 0\r\n                $ErrorActionPreference = 'SilentlyContinue'\r\n                $PropertyTest = $Update.InstallationBehavior.Impact\r\n                $ErrorActionPreference = 'Stop'\r\n                If ($PropertyTest -eq 2) {\r\n                    If ($AtLeastOneAdded) {\r\n                        Write-Output \"$($i + 1) > skipping: '$($update.Title)' because it is exclusive and other updates are being installed first.\"\r\n                        $AddThisUpdate = $false\r\n                    }\r\n                }\r\n            }\r\n            If ($AddThisUpdate) {\r\n                Write-Output \"$($i + 1) > adding: '$($update.Title)'\"\r\n                $UpdatesToDownload.Add($Update) | out-null\r\n                $AtLeastOneAdded = $true\r\n                $ErrorActionPreference = 'SilentlyContinue'\r\n                $PropertyTest = $Update.InstallationBehavior.Impact\r\n                $ErrorActionPreference = 'Stop'\r\n                If ($PropertyTest -eq 2) {\r\n                    Write-Output \"This update is exclusive; skipping remaining updates\"\r\n                    $ExclusiveAdded = $true\r\n                }\r\n            }\r\n        }        \r\n        $UpdatesToInstall = New-Object -ComObject Microsoft.Update.UpdateColl\r\n        Write-Output \"Downloading updates...\"\r\n        $Downloader = $UpdateSession.CreateUpdateDownloader()\r\n        $Downloader.Updates = $UpdatesToDownload\r\n        $Downloader.Download()\r\n        Write-Output \"Successfully downloaded updates:\"        \r\n        For ($i = 0; $i -lt $UpdatesToDownload.Count; $i++) {\r\n            $Update = $UpdatesToDownload[$i]\r\n            If ($Update.IsDownloaded -eq $true) {\r\n                Write-Output \"$($i + 1) > $($update.title)\"\r\n                $UpdatesToInstall.Add($Update) | out-null\r\n            }\r\n        }        \r\n        If ($UpdatesToInstall.Count -gt 0) {\r\n            Write-Output \"Now installing updates...\"\r\n            $Installer = $UpdateSession.CreateUpdateInstaller()\r\n            $Installer.Updates = $UpdatesToInstall\r\n            $InstallationResult = $Installer.Install()\r\n            $Text = ConvertFrom-InstallationResult -Result $InstallationResult.ResultCode\r\n            Write-Output \"Installation Result: $($Text)\"        \r\n            If ($InstallationResult.RebootRequired) {\r\n                Write-Output \"Atleast one update requires a reboot to complete the installation.\"\r\n            }\r\n        }\r\n        If ($service -eq 'MU') {\r\n            Reg.exe DELETE \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v AllowMUUpdateService /f\r\n        } Elseif ($Service -eq 'WSUS' -and $WSUSServer) {\r\n            reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUServer /f\r\n            reg.exe DELETE \"HKLM\\Software\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v WUStatusServer /f\r\n        }\r\n        Stop-Transcript\r\n      "
                                },
                                "treatFailureAsDeploymentFailure": true
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-1-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('restart-vm-2-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "imageVirtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": "[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "10420021406848674052"
                            }
                          },
                          "parameters": {
                            "imageVirtualMachineName": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'restartVirtualMachine')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "Environment",
                                    "value": "[environment().name]"
                                  },
                                  {
                                    "name": "ResourceGroupName",
                                    "value": "[parameters('resourceGroupName')]"
                                  },
                                  {
                                    "name": "SubscriptionId",
                                    "value": "[subscription().subscriptionId]"
                                  },
                                  {
                                    "name": "TenantId",
                                    "value": "[tenant().tenantId]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityClientId",
                                    "value": "[parameters('userAssignedIdentityClientId')]"
                                  },
                                  {
                                    "name": "VirtualMachineName",
                                    "value": "[parameters('imageVirtualMachineName')]"
                                  }
                                ],
                                "source": {
                                  "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Restart-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName\r\n        $AgentStatus = $Null\r\n        while ($Null -eq $AgentStatus) \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $AgentStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).VMAgent\r\n        }\r\n      "
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('microsoft-updates-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('sysprep-vm-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "13855748863144258342"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'sysprepVirtualMachine')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": false,
                                "asyncExecution": true,
                                "parameters": [],
                                "source": {
                                  "script": "        Start-Sleep -Seconds 30\r\n        Remove-Item -LiteralPath 'C:\\Windows\\Panther' -Force -Recurse -ErrorAction SilentlyContinue\r\n        Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\cdrom' -Name 'Start' -Value 1\r\n        Start-Process -File 'C:\\Windows\\System32\\Sysprep\\Sysprep.exe' -ArgumentList '/generalize /oobe /shutdown /mode:vm'\r\n      "
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-1-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('restart-vm-2-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('generalize-vm-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "imageVirtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": "[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "1408076597272275810"
                            }
                          },
                          "parameters": {
                            "imageVirtualMachineName": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'generalizeVirtualMachine')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": false,
                                "parameters": [
                                  {
                                    "name": "Environment",
                                    "value": "[environment().name]"
                                  },
                                  {
                                    "name": "ResourceGroupName",
                                    "value": "[parameters('resourceGroupName')]"
                                  },
                                  {
                                    "name": "SubscriptionId",
                                    "value": "[subscription().subscriptionId]"
                                  },
                                  {
                                    "name": "TenantId",
                                    "value": "[tenant().tenantId]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityClientId",
                                    "value": "[parameters('userAssignedIdentityClientId')]"
                                  },
                                  {
                                    "name": "VirtualMachineName",
                                    "value": "[parameters('imageVirtualMachineName')]"
                                  }
                                ],
                                "source": {
                                  "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        $PowerStatus = ''\r\n        while ($PowerStatus -ne 'VM stopped') \r\n        {\r\n            Start-Sleep -Seconds 5\r\n            $PowerStatus = (Get-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Status).Statuses[1].DisplayStatus\r\n        }\r\n        Set-AzVm -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -Generalized\r\n        Start-Sleep -Seconds 30\r\n      "
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('sysprep-vm-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('image-version-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "computeGalleryImageResourceId": {
                            "value": "[parameters('computeGalleryImageResourceId')]"
                          },
                          "computeGalleryName": {
                            "value": "[parameters('computeGalleryName')]"
                          },
                          "excludeFromLatest": {
                            "value": "[parameters('excludeFromLatest')]"
                          },
                          "imageDefinitionName": {
                            "value": "[parameters('imageDefinitionName')]"
                          },
                          "imageVersionNumber": {
                            "value": "[variables('autoImageVersion')]"
                          },
                          "imageVirtualMachineResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "marketplaceImageOffer": {
                            "value": "[parameters('marketplaceImageOffer')]"
                          },
                          "marketplaceImagePublisher": {
                            "value": "[parameters('marketplaceImagePublisher')]"
                          },
                          "replicaCount": {
                            "value": "[parameters('replicaCount')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "5850341894374079914"
                            }
                          },
                          "parameters": {
                            "allowDeletionOfReplicatedLocations": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "computeGalleryName": {
                              "type": "string"
                            },
                            "computeGalleryImageResourceId": {
                              "type": "string"
                            },
                            "excludeFromLatest": {
                              "type": "bool"
                            },
                            "imageDefinitionName": {
                              "type": "string"
                            },
                            "imageVersionNumber": {
                              "type": "string"
                            },
                            "imageVirtualMachineResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "marketplaceImageOffer": {
                              "type": "string"
                            },
                            "marketplaceImagePublisher": {
                              "type": "string"
                            },
                            "replicaCount": {
                              "type": "int"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/galleries/images",
                              "apiVersion": "2022-03-03",
                              "name": "[format('{0}/{1}', parameters('computeGalleryName'), parameters('imageDefinitionName'))]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject())]",
                              "properties": {
                                "architecture": "x64",
                                "features": [
                                  {
                                    "name": "SecurityType",
                                    "value": "TrustedLaunch"
                                  }
                                ],
                                "hyperVGeneration": "V2",
                                "identifier": {
                                  "offer": "[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImageOffer'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.offer)]",
                                  "publisher": "[if(empty(parameters('computeGalleryImageResourceId')), parameters('marketplaceImagePublisher'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('computeGalleryImageResourceId'), '/')[2], split(parameters('computeGalleryImageResourceId'), '/')[4]), 'Microsoft.Compute/galleries/images', split(parameters('computeGalleryImageResourceId'), '/')[8], split(parameters('computeGalleryImageResourceId'), '/')[10]), '2022-03-03').identifier.publisher)]",
                                  "sku": "[parameters('imageDefinitionName')]"
                                },
                                "osState": "Generalized",
                                "osType": "Windows"
                              }
                            },
                            {
                              "type": "Microsoft.Compute/galleries/images/versions",
                              "apiVersion": "2022-03-03",
                              "name": "[format('{0}/{1}/{2}', parameters('computeGalleryName'), parameters('imageDefinitionName'), parameters('imageVersionNumber'))]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/galleries'), parameters('tags')['Microsoft.Compute/galleries'], createObject())]",
                              "properties": {
                                "publishingProfile": {
                                  "excludeFromLatest": "[parameters('excludeFromLatest')]",
                                  "replicaCount": "[parameters('replicaCount')]",
                                  "replicationMode": "Full",
                                  "storageAccountType": "Standard_LRS",
                                  "targetRegions": [
                                    {
                                      "name": "[parameters('location')]",
                                      "regionalReplicaCount": "[parameters('replicaCount')]",
                                      "storageAccountType": "Standard_LRS"
                                    }
                                  ]
                                },
                                "safetyProfile": {
                                  "allowDeletionOfReplicatedLocations": "[parameters('allowDeletionOfReplicatedLocations')]"
                                },
                                "storageProfile": {
                                  "source": {
                                    "id": "[parameters('imageVirtualMachineResourceId')]"
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/galleries/images', parameters('computeGalleryName'), parameters('imageDefinitionName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "imageDefinitionResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/galleries/images', parameters('computeGalleryName'), parameters('imageDefinitionName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('generalize-vm-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('remove-vm-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[variables('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "enableBuildAutomation": {
                            "value": "[parameters('enableBuildAutomation')]"
                          },
                          "imageVirtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": "[if(parameters('enableBuildAutomation'), createObject('value', parameters('managementVirtualMachineName')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "2352439563696964014"
                            }
                          },
                          "parameters": {
                            "enableBuildAutomation": {
                              "type": "bool"
                            },
                            "imageVirtualMachineName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'removeVirtualMachine')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": "[if(parameters('enableBuildAutomation'), false(), true())]",
                                "parameters": [
                                  {
                                    "name": "EnableBuildAutomation",
                                    "value": "[string(parameters('enableBuildAutomation'))]"
                                  },
                                  {
                                    "name": "Environment",
                                    "value": "[environment().name]"
                                  },
                                  {
                                    "name": "ImageVmName",
                                    "value": "[parameters('imageVirtualMachineName')]"
                                  },
                                  {
                                    "name": "ManagementVmName",
                                    "value": "[parameters('virtualMachineName')]"
                                  },
                                  {
                                    "name": "ResourceGroupName",
                                    "value": "[resourceGroup().name]"
                                  },
                                  {
                                    "name": "SubscriptionId",
                                    "value": "[subscription().subscriptionId]"
                                  },
                                  {
                                    "name": "TenantId",
                                    "value": "[tenant().tenantId]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityClientId",
                                    "value": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                ],
                                "source": {
                                  "script": "        param(\r\n          [string]$EnableBuildAutomation,\r\n          [string]$Environment,\r\n          [string]$ImageVmName,\r\n          [string]$ManagementVmName,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId\r\n        )\r\n        $ErrorActionPreference = 'Stop'\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n        Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ImageVmName -Force\r\n        if($EnableBuildAutomation -eq 'false')\r\n        {\r\n          Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $ManagementVmName -NoWait -Force -AsJob\r\n        }\r\n      "
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-version-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('management-vm-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-vm-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "imageDefinitionResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('image-version-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.imageDefinitionResourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('baseline-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('build-automation-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "imageDefinitionResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('image-build-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.imageDefinitionResourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-azure-virtual-desktop-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectorySolution": {
            "value": "MicrosoftEntraDomainServices"
          },
          "artifactsContainerName": {
            "value": "[parameters('containerName')]"
          },
          "artifactsStorageAccountResourceId": {
            "value": "[parameters('storageAccountResourceId')]"
          },
          "availability": {
            "value": "None"
          },
          "avdAgentBootLoaderMsiName": {
            "value": "[parameters('avdAgentBootLoaderMsiName')]"
          },
          "avdAgentMsiName": {
            "value": "[parameters('avdAgentMsiName')]"
          },
          "avdObjectId": {
            "value": "[parameters('avdObjectId')]"
          },
          "azureNetAppFilesSubnetAddressPrefix": {
            "value": "10.0.140.128/25"
          },
          "azurePowerShellModuleMsiName": {
            "value": "[parameters('azurePowerShellModuleMsiName')]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[format('{0}@{1}', parameters('domainJoinUsername'), parameters('domainName'))]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "environmentAbbreviation": {
            "value": "dev"
          },
          "fslogixStorageService": {
            "value": "AzureNetAppFiles Premium"
          },
          "hostPoolPublicNetworkAccess": {
            "value": "Enabled"
          },
          "hubAzureFirewallResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.azureFirewallResourceId.value]"
          },
          "hubSubnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubSubnetResourceId.value]"
          },
          "hubVirtualNetworkResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubVirtualNetworkResourceId.value]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "imageDefinitionResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-image-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.imageDefinitionResourceId.value]"
          },
          "locationControlPlane": {
            "value": "[parameters('location')]"
          },
          "locationVirtualMachines": {
            "value": "[parameters('location')]"
          },
          "organizationalUnitPath": {
            "value": "[format('OU=AADDC Computers,DC={0}', replace(parameters('domainName'), '.', ',DC='))]"
          },
          "securityPrincipals": {
            "value": "[parameters('securityPrincipals')]"
          },
          "subnetAddressPrefixes": {
            "value": [
              "10.0.140.0/25"
            ]
          },
          "virtualMachinePassword": {
            "value": "[parameters('localAdministratorPassword')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "virtualMachineUsername": {
            "value": "[parameters('localAdministratorUsername')]"
          },
          "virtualMachineVirtualCpuCount": {
            "value": "[int(replace(replace(parameters('virtualMachineSize'), 'Standard_NV', ''), 'as_v4', ''))]"
          },
          "virtualNetworkAddressPrefixes": {
            "value": [
              "10.0.140.0/24"
            ]
          },
          "workspacePublicNetworkAccess": {
            "value": "Enabled"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "10433674774053335579"
            }
          },
          "parameters": {
            "activeDirectorySolution": {
              "type": "string",
              "allowedValues": [
                "ActiveDirectoryDomainServices",
                "MicrosoftEntraDomainServices",
                "MicrosoftEntraId",
                "MicrosoftEntraIdIntuneEnrollment"
              ],
              "metadata": {
                "description": "The service providing domain services for Azure Virtual Desktop.  This is needed to properly configure the session hosts and if applicable, the Azure Storage Account."
              }
            },
            "artifactsContainerName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Blobs container hosting the required artifacts."
              }
            },
            "artifactsStorageAccountResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID for the storage account hosting the artifacts in Blob storage."
              }
            },
            "availability": {
              "type": "string",
              "defaultValue": "AvailabilityZones",
              "allowedValues": [
                "AvailabilitySets",
                "AvailabilityZones",
                "None"
              ],
              "metadata": {
                "description": "The desired availability option when deploying a pooled host pool. The best practice is to deploy to availability zones for the highest resilency and service level agreement."
              }
            },
            "avdAgentMsiName": {
              "type": "string",
              "metadata": {
                "description": "The blob name of the MSI file for the AVD Agent installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
              }
            },
            "avdAgentBootLoaderMsiName": {
              "type": "string",
              "metadata": {
                "description": "The blob name of the MSI file for the AVD Agent Boot Loader installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
              }
            },
            "avdObjectId": {
              "type": "string",
              "metadata": {
                "description": "The object ID for the Azure Virtual Desktop enterprise application in Microsoft Entra ID.  The object ID can found by selecting Microsoft Applications using the Application type filter in the Enterprise Applications blade of Microsoft Entra ID."
              }
            },
            "azureNetAppFilesSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The subnet address prefix for the Azure NetApp Files delegated subnet."
              }
            },
            "azurePowerShellModuleMsiName": {
              "type": "string",
              "metadata": {
                "description": "The blob name of the MSI file for the  Azure PowerShell Module installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
              }
            },
            "customRdpProperty": {
              "type": "string",
              "defaultValue": "audiocapturemode:i:1;camerastoredirect:s:*;use multimon:i:0;drivestoredirect:s:;encode redirected video capture:i:1;redirected video capture encoding quality:i:1;audiomode:i:0;devicestoredirect:s:;redirectclipboard:i:0;redirectcomports:i:0;redirectlocation:i:1;redirectprinters:i:0;redirectsmartcards:i:1;redirectwebauthn:i:1;usbdevicestoredirect:s:;keyboardhook:i:2;",
              "metadata": {
                "description": "The RDP properties to add or remove RDP functionality on the AVD host pool. The string must end with a semi-colon. Settings reference: https://learn.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files"
              }
            },
            "desktopFriendlyName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The friendly name for the SessionDesktop application in the desktop application group."
              }
            },
            "disableBgpRoutePropagation": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Disabling BGP route propagation is a route table configuration that prevents the propagation of on-premises routes to network interfaces in the associated subnets."
              }
            },
            "diskSku": {
              "type": "string",
              "defaultValue": "Premium_LRS",
              "allowedValues": [
                "Standard_LRS",
                "StandardSSD_LRS",
                "Premium_LRS"
              ],
              "metadata": {
                "description": "The storage SKU for the managed disks on the AVD session hosts. Production deployments should use Premium_LRS."
              }
            },
            "domainJoinPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "The password for the account to domain join the AVD session hosts."
              }
            },
            "domainJoinUserPrincipalName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The user principal name for the account to domain join the AVD session hosts."
              }
            },
            "domainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The name of the domain that provides ADDS to the AVD session hosts."
              }
            },
            "drainMode": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "The drain mode option enables drain mode for the sessions hosts in this deployment to prevent users from accessing the hosts until they have been validated."
              }
            },
            "environmentAbbreviation": {
              "type": "string",
              "defaultValue": "dev",
              "allowedValues": [
                "dev",
                "prod",
                "test"
              ],
              "metadata": {
                "description": "The abbreviation for the target environment."
              }
            },
            "fslogixShareSizeInGB": {
              "type": "int",
              "defaultValue": 100,
              "metadata": {
                "description": "The file share size(s) in GB for the Fslogix storage solution."
              }
            },
            "fslogixContainerType": {
              "type": "string",
              "defaultValue": "ProfileContainer",
              "allowedValues": [
                "CloudCacheProfileContainer",
                "CloudCacheProfileOfficeContainer",
                "ProfileContainer",
                "ProfileOfficeContainer"
              ],
              "metadata": {
                "description": "If deploying FSLogix, select the desired type of container for user profiles. https://learn.microsoft.com/en-us/fslogix/concepts-container-types"
              }
            },
            "fslogixStorageService": {
              "type": "string",
              "defaultValue": "AzureFiles Standard",
              "allowedValues": [
                "AzureNetAppFiles Premium",
                "AzureNetAppFiles Standard",
                "AzureFiles Premium",
                "AzureFiles Standard",
                "None"
              ],
              "metadata": {
                "description": "Enable an Fslogix storage option to manage user profiles for the AVD session hosts. The selected service & SKU should provide sufficient IOPS for all of your users. https://docs.microsoft.com/en-us/azure/architecture/example-scenario/wvd/windows-virtual-desktop-fslogix#performance-requirements"
              }
            },
            "hostPoolPublicNetworkAccess": {
              "type": "string",
              "allowedValues": [
                "Disabled",
                "Enabled",
                "EnabledForClientsOnly",
                "EnabledForSessionHostsOnly"
              ],
              "metadata": {
                "description": "The type of public network access for the host pool."
              }
            },
            "hostPoolType": {
              "type": "string",
              "defaultValue": "Pooled DepthFirst",
              "allowedValues": [
                "Pooled DepthFirst",
                "Pooled BreadthFirst",
                "Personal Automatic",
                "Personal Direct"
              ],
              "metadata": {
                "description": "These options specify the host pool type and depending on the type provides the load balancing options and assignment types."
              }
            },
            "hubAzureFirewallResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID for the Azure Firewall in the HUB subscription"
              }
            },
            "hubSubnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID for the subnet in the Shared Services subscription. This is required for the private endpoint on the AVD Global Workspace."
              }
            },
            "hubVirtualNetworkResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID for the Azure Virtual Network in the HUB subscription."
              }
            },
            "identifier": {
              "type": "string",
              "defaultValue": "avd",
              "maxLength": 3,
              "metadata": {
                "description": "The unique identifier between each business unit or project supporting AVD in your tenant. This is the unique naming component between each AVD stamp."
              }
            },
            "imageDefinitionResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource ID for the Compute Gallery Image Version. Do not set this value if using a marketplace image."
              }
            },
            "imageOffer": {
              "type": "string",
              "defaultValue": "office-365",
              "metadata": {
                "description": "Offer for the virtual machine image"
              }
            },
            "imagePublisher": {
              "type": "string",
              "defaultValue": "MicrosoftWindowsDesktop",
              "metadata": {
                "description": "Publisher for the virtual machine image"
              }
            },
            "imageSku": {
              "type": "string",
              "defaultValue": "win11-22h2-avd-m365",
              "metadata": {
                "description": "SKU for the virtual machine image"
              }
            },
            "locationControlPlane": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The deployment location for the AVD management resources."
              }
            },
            "locationVirtualMachines": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The deployment location for the AVD sessions hosts."
              }
            },
            "logAnalyticsWorkspaceRetention": {
              "type": "int",
              "defaultValue": 30,
              "minValue": 30,
              "maxValue": 730,
              "metadata": {
                "description": "The retention for the Log Analytics Workspace to setup the AVD monitoring solution"
              }
            },
            "logAnalyticsWorkspaceSku": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "Free",
                "Standard",
                "Premium",
                "PerNode",
                "PerGB2018",
                "Standalone",
                "CapacityReservation"
              ],
              "metadata": {
                "description": "The SKU for the Log Analytics Workspace to setup the AVD monitoring solution"
              }
            },
            "monitoring": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Deploys the required monitoring resources to enable AVD Insights and monitor features in the automation account."
              }
            },
            "organizationalUnitPath": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The distinguished name for the target Organization Unit in Active Directory Domain Services."
              }
            },
            "recoveryServices": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable backups to an Azure Recovery Services vault.  For a pooled host pool this will enable backups on the Azure file share.  For a personal host pool this will enable backups on the AVD sessions hosts."
              }
            },
            "scalingBeginPeakTime": {
              "type": "string",
              "defaultValue": "9:00",
              "metadata": {
                "description": "The time when session hosts will scale up and continue to stay on to support peak demand; Format 24 hours e.g. 9:00 for 9am"
              }
            },
            "scalingEndPeakTime": {
              "type": "string",
              "defaultValue": "17:00",
              "metadata": {
                "description": "The time when session hosts will scale down and stay off to support low demand; Format 24 hours e.g. 17:00 for 5pm"
              }
            },
            "scalingLimitSecondsToForceLogOffUser": {
              "type": "string",
              "defaultValue": "0",
              "metadata": {
                "description": "The number of seconds to wait before automatically signing out users. If set to 0 any session host that has user sessions will be left untouched"
              }
            },
            "scalingMinimumNumberOfRdsh": {
              "type": "string",
              "defaultValue": "0",
              "metadata": {
                "description": "The minimum number of session host VMs to keep running during off-peak hours. The scaling tool will not work if all virtual machines are turned off and the Start VM On Connect solution is not enabled."
              }
            },
            "scalingSessionThresholdPerCPU": {
              "type": "string",
              "defaultValue": "1",
              "metadata": {
                "description": "The maximum number of sessions per CPU that will be used as a threshold to determine when new session host VMs need to be started during peak hours"
              }
            },
            "scalingTool": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Deploys the required resources for the Scaling Tool. https://docs.microsoft.com/en-us/azure/virtual-desktop/scaling-automation-logic-apps"
              }
            },
            "securityLogAnalyticsWorkspaceResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource ID of the log analytics workspace used for Azure Sentinel and / or Defender for Cloud. When using the Microsoft monitoring Agent, this allows you to multihome the agent to reduce unnecessary log collection and reduce cost."
              }
            },
            "securityPrincipals": {
              "type": "array",
              "metadata": {
                "description": "The array of Security Principals with their object IDs and display names to assign to the AVD Application Group and FSLogix Storage."
              }
            },
            "sessionHostCount": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 0,
              "maxValue": 5000,
              "metadata": {
                "description": "The number of session hosts to deploy in the host pool. Ensure you have the approved quota to deploy the desired count."
              }
            },
            "sessionHostIndex": {
              "type": "int",
              "defaultValue": 0,
              "minValue": 0,
              "maxValue": 4999,
              "metadata": {
                "description": "The starting number for the session hosts. This is important when adding virtual machines to ensure an update deployment is not performed on an existing, active session host."
              }
            },
            "stampIndex": {
              "type": "int",
              "defaultValue": 0,
              "minValue": 0,
              "maxValue": 9,
              "metadata": {
                "description": "The stamp index allows for multiple AVD stamps with the same business unit or project to support different use cases. For example, \"0\" could be used for an office workers host pool and \"1\" could be used for a developers host pool within the \"finance\" business unit."
              }
            },
            "storageCount": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 0,
              "maxValue": 100,
              "metadata": {
                "description": "The number of storage accounts to deploy to support sharding across multiple storage accounts. https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding"
              }
            },
            "storageIndex": {
              "type": "int",
              "defaultValue": 0,
              "minValue": 0,
              "maxValue": 99,
              "metadata": {
                "description": "The starting number for the names of the storage accounts to support sharding across multiple storage accounts. https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding"
              }
            },
            "subnetAddressPrefixes": {
              "type": "array",
              "defaultValue": [
                "10.0.140.0/24"
              ],
              "minLength": 1,
              "maxLength": 2,
              "metadata": {
                "description": "The address prefix(es) for the new subnet(s) that will be created in the spoke virtual network(s). Specify only one address prefix in the array if the session hosts location and the control plan location are the same. If different locations are specified, add a second address prefix for the hosts virtual network."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The Key / value pairs of metadata for the Azure resource groups and resources."
              }
            },
            "timestamp": {
              "type": "string",
              "defaultValue": "[utcNow('yyyyMMddhhmmss')]",
              "metadata": {
                "description": "DO NOT MODIFY THIS VALUE! The timestamp is needed to differentiate deployments for certain Azure resources and must be set using a parameter."
              }
            },
            "usersPerCore": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "The number of users per core is used to determine the maximum number of users per session host."
              }
            },
            "validationEnvironment": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "The validation environment setting on the AVD host pool determines whether the hostpool should receive AVD preview features for testing."
              }
            },
            "virtualMachineVirtualCpuCount": {
              "type": "int",
              "metadata": {
                "description": "The number of virtual CPUs per virtual machine for the selected virtual machine size."
              }
            },
            "virtualMachineMonitoringAgent": {
              "type": "string",
              "defaultValue": "LogAnalyticsAgent",
              "allowedValues": [
                "AzureMonitorAgent",
                "LogAnalyticsAgent"
              ],
              "metadata": {
                "description": "Input the desired monitoring agent to send events and performance counters to a log analytics workspace."
              }
            },
            "virtualMachinePassword": {
              "type": "securestring",
              "metadata": {
                "description": "The local administrator password for the AVD session hosts"
              }
            },
            "virtualMachineSize": {
              "type": "string",
              "defaultValue": "Standard_D4ads_v5",
              "metadata": {
                "description": "The virtual machine SKU for the AVD session hosts."
              }
            },
            "virtualMachineUsername": {
              "type": "string",
              "metadata": {
                "description": "The local administrator username for the AVD session hosts"
              }
            },
            "virtualNetworkAddressPrefixes": {
              "type": "array",
              "defaultValue": [
                "10.0.140.0/24"
              ],
              "minLength": 1,
              "maxLength": 2,
              "metadata": {
                "description": "The address prefix for the new spoke virtual network(s). Specify only one address prefix in the array if the session hosts location and the control plan location are the same. If different locations are specified, add a second address prefix for the hosts virtual network."
              }
            },
            "workspaceFriendlyName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The friendly name for the AVD workspace that is displayed in the end-user client."
              }
            },
            "workspacePublicNetworkAccess": {
              "type": "string",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "The public network access setting on the AVD workspace either disables public network access or allows both public and private network access."
              }
            }
          },
          "variables": {
            "artifactsUri": "[format('https://{0}.blob.{1}/{2}/', variables('artifactsStorageAccountName'), environment().suffixes.storage, parameters('artifactsContainerName'))]",
            "artifactsStorageAccountName": "[split(parameters('artifactsStorageAccountResourceId'), '/')[8]]",
            "privateDnsZoneResourceIdPrefix": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4])]",
            "deploymentLocations": "[union(createArray(parameters('locationControlPlane')), createArray(parameters('locationVirtualMachines')))]",
            "resourceGroupsCount": "[add(add(4, length(variables('deploymentLocations'))), if(equals(parameters('fslogixStorageService'), 'None'), 0, 1))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Names_{0}', parameters('timestamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "identifier": {
                    "value": "[parameters('identifier')]"
                  },
                  "locationControlPlane": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "locationVirtualMachines": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "stampIndex": {
                    "value": "[parameters('stampIndex')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "13248824573115289793"
                    }
                  },
                  "parameters": {
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "identifier": {
                      "type": "string"
                    },
                    "locationControlPlane": {
                      "type": "string"
                    },
                    "locationVirtualMachines": {
                      "type": "string"
                    },
                    "stampIndex": {
                      "type": "int"
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "AzureChina": {
                        "chinaeast": {
                          "abbreviation": "cne",
                          "recoveryServicesGeo": "sha",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinaeast2": {
                          "abbreviation": "cne2",
                          "recoveryServicesGeo": "sha2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth": {
                          "abbreviation": "cnn",
                          "recoveryServicesGeo": "bjb",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth2": {
                          "abbreviation": "cnn2",
                          "recoveryServicesGeo": "bjb2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        }
                      },
                      "AzureCloud": {
                        "australiacentral": {
                          "abbreviation": "auc",
                          "recoveryServicesGeo": "acl",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiacentral2": {
                          "abbreviation": "auc2",
                          "recoveryServicesGeo": "acl2",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiaeast": {
                          "abbreviation": "aue",
                          "recoveryServicesGeo": "ae",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiasoutheast": {
                          "abbreviation": "ause",
                          "recoveryServicesGeo": "ase",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "brazilsouth": {
                          "abbreviation": "brs",
                          "recoveryServicesGeo": "brs",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "brazilsoutheast": {
                          "abbreviation": "brse",
                          "recoveryServicesGeo": "bse",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "canadacentral": {
                          "abbreviation": "cac",
                          "recoveryServicesGeo": "cnc",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "canadaeast": {
                          "abbreviation": "cae",
                          "recoveryServicesGeo": "cne",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "centralindia": {
                          "abbreviation": "inc",
                          "recoveryServicesGeo": "inc",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "centralus": {
                          "abbreviation": "usc",
                          "recoveryServicesGeo": "cus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "eastasia": {
                          "abbreviation": "ase",
                          "recoveryServicesGeo": "ea",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "eastus": {
                          "abbreviation": "use",
                          "recoveryServicesGeo": "eus",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "eastus2": {
                          "abbreviation": "use2",
                          "recoveryServicesGeo": "eus2",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "francecentral": {
                          "abbreviation": "frc",
                          "recoveryServicesGeo": "frc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "francesouth": {
                          "abbreviation": "frs",
                          "recoveryServicesGeo": "frs",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanynorth": {
                          "abbreviation": "den",
                          "recoveryServicesGeo": "gn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanywestcentral": {
                          "abbreviation": "dewc",
                          "recoveryServicesGeo": "gwc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "israelcentral": {
                          "abbreviation": "ilc",
                          "recoveryServicesGeo": "ilc",
                          "timeDifference": "+2:00",
                          "timeZone": "Israel Standard Time"
                        },
                        "italynorth": {
                          "abbreviation": "itn",
                          "recoveryServicesGeo": "itn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "japaneast": {
                          "abbreviation": "jpe",
                          "recoveryServicesGeo": "jpe",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "japanwest": {
                          "abbreviation": "jpw",
                          "recoveryServicesGeo": "jpw",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "jioindiacentral": {
                          "abbreviation": "injc",
                          "recoveryServicesGeo": "jic",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "jioindiawest": {
                          "abbreviation": "injw",
                          "recoveryServicesGeo": "jiw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "koreacentral": {
                          "abbreviation": "krc",
                          "recoveryServicesGeo": "krc",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "koreasouth": {
                          "abbreviation": "krs",
                          "recoveryServicesGeo": "krs",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "northcentralus": {
                          "abbreviation": "usnc",
                          "recoveryServicesGeo": "ncus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "northeurope": {
                          "abbreviation": "eun",
                          "recoveryServicesGeo": "ne",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "norwayeast": {
                          "abbreviation": "noe",
                          "recoveryServicesGeo": "nwe",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "norwaywest": {
                          "abbreviation": "now",
                          "recoveryServicesGeo": "nww",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "polandcentral": {
                          "abbreviation": "plc",
                          "recoveryServicesGeo": "plc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "qatarcentral": {
                          "abbreviation": "qac",
                          "recoveryServicesGeo": "qac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "southafricanorth": {
                          "abbreviation": "zan",
                          "recoveryServicesGeo": "san",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southafricawest": {
                          "abbreviation": "zaw",
                          "recoveryServicesGeo": "saw",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southcentralus": {
                          "abbreviation": "ussc",
                          "recoveryServicesGeo": "scus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "southeastasia": {
                          "abbreviation": "asse",
                          "recoveryServicesGeo": "sea",
                          "timeDifference": "+8:00",
                          "timeZone": "Singapore Standard Time"
                        },
                        "southindia": {
                          "abbreviation": "ins",
                          "recoveryServicesGeo": "ins",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "swedencentral": {
                          "abbreviation": "sec",
                          "recoveryServicesGeo": "sdc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandnorth": {
                          "abbreviation": "chn",
                          "recoveryServicesGeo": "szn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandwest": {
                          "abbreviation": "chw",
                          "recoveryServicesGeo": "szw",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "uaecentral": {
                          "abbreviation": "aec",
                          "recoveryServicesGeo": "uac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uaenorth": {
                          "abbreviation": "aen",
                          "recoveryServicesGeo": "uan",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uksouth": {
                          "abbreviation": "uks",
                          "recoveryServicesGeo": "uks",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "ukwest": {
                          "abbreviation": "ukw",
                          "recoveryServicesGeo": "ukw",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "westcentralus": {
                          "abbreviation": "uswc",
                          "recoveryServicesGeo": "wcus",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "westeurope": {
                          "abbreviation": "euw",
                          "recoveryServicesGeo": "we",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "westindia": {
                          "abbreviation": "inw",
                          "recoveryServicesGeo": "inw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "westus": {
                          "abbreviation": "usw",
                          "recoveryServicesGeo": "wus",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus2": {
                          "abbreviation": "usw2",
                          "recoveryServicesGeo": "wus2",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus3": {
                          "abbreviation": "usw3",
                          "recoveryServicesGeo": "wus3",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        }
                      },
                      "AzureUSGovernment": {
                        "usdodcentral": {
                          "abbreviation": "dodc",
                          "recoveryServicesGeo": "udc",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usdodeast": {
                          "abbreviation": "dode",
                          "recoveryServicesGeo": "ude",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usgovarizona": {
                          "abbreviation": "az",
                          "recoveryServicesGeo": "uga",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "usgovtexas": {
                          "abbreviation": "tx",
                          "recoveryServicesGeo": "ugt",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usgovvirginia": {
                          "abbreviation": "va",
                          "recoveryServicesGeo": "ugv",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        }
                      },
                      "USNat": {
                        "usnateast": {
                          "abbreviation": "east",
                          "recoveryServicesGeo": "exe",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usnatwest": {
                          "abbreviation": "west",
                          "recoveryServicesGeo": "exw",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        }
                      },
                      "USSec": {
                        "usseceast": {
                          "abbreviation": "east",
                          "recoveryServicesGeo": "rxe",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "ussecwest": {
                          "abbreviation": "west",
                          "recoveryServicesGeo": "rxw",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        }
                      }
                    },
                    "$fxv#1": {
                      "actionGroups": "ag",
                      "automationAccounts": "aa",
                      "availabilitySets": "avail",
                      "azureFirewalls": "afw",
                      "bastionHosts": "bas",
                      "computeGallieries": "cg",
                      "dataCollectionRuleAssociations": "dcra",
                      "dataCollectionRules": "dcr",
                      "desktopApplicationGroups": "vdag",
                      "diagnosticSettings": "diag",
                      "diskAccesses": "da",
                      "diskEncryptionSets": "des",
                      "disks": "disk",
                      "firewallPolicies": "afwp",
                      "hostPools": "vdpool",
                      "ipConfigurations": "ipconf",
                      "keyVaults": "kv",
                      "logAnalyticsWorkspaces": "log",
                      "netAppAccounts": "naa",
                      "netAppCapacityPools": "nacp",
                      "networkInterfaces": "nic",
                      "networkSecurityGroups": "nsg",
                      "networkWatchers": "nw",
                      "privateEndpoints": "pe",
                      "privateLinkScopes": "pls",
                      "publicIPAddresses": "pip",
                      "recoveryServicesVaults": "rsv",
                      "remoteApplicationGroups": "vdag",
                      "resourceGroups": "rg",
                      "routeTables": "rt",
                      "storageAccounts": "st",
                      "subnets": "snet",
                      "userAssignedIdentities": "id",
                      "virtualMachines": "vm",
                      "virtualNetworks": "vnet",
                      "workspaces": "vdws"
                    },
                    "resourceAbbreviation": "resourceAbbreviation",
                    "serviceName": "serviceName",
                    "networkName": "avd",
                    "locationAbbreviation": "locationAbbreviation",
                    "namingConvention": "[format('{0}-{1}-{2}-{3}-{4}-{5}-{6}', parameters('identifier'), parameters('stampIndex'), variables('resourceAbbreviation'), variables('serviceName'), variables('networkName'), parameters('environmentAbbreviation'), variables('locationAbbreviation'))]",
                    "namingConvention_Global": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceAbbreviation'), variables('serviceName'), variables('networkName'), parameters('environmentAbbreviation'), variables('locationAbbreviation'))]",
                    "namingConvention_Shared": "[format('{0}-{1}-{2}-{3}-{4}-{5}', parameters('identifier'), variables('resourceAbbreviation'), variables('serviceName'), variables('networkName'), parameters('environmentAbbreviation'), variables('locationAbbreviation'))]",
                    "cloudEndpointSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]",
                    "privateDnsZoneSuffixes_AzureAutomation": {
                      "AzureCloud": "net",
                      "AzureUSGovernment": "us"
                    },
                    "privateDnsZoneSuffixes_AzureVirtualDesktop": {
                      "AzureCloud": "microsoft.com",
                      "AzureUSGovernment": "azure.us"
                    },
                    "privateDnsZoneSuffixes_Backup": {
                      "AzureCloud": "windowsazure.com",
                      "AzureUSGovernment": "windowsazure.us"
                    },
                    "privateDnsZoneSuffixes_Monitor": {
                      "AzureCloud": "azure.com",
                      "AzureUSGovernment": "azure.us"
                    },
                    "locations": "[variables('$fxv#0')[environment().name]]",
                    "resourceAbbreviations": "[variables('$fxv#1')]",
                    "resources": {
                      "agentSvcPrivateDnsZoneName": "[format('privatelink.agentsvc.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudEndpointSuffix')))]",
                      "automationAccountDiagnosticSettingName": "[replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').diagnosticSettings), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "automationAccountName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').automationAccounts), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "automationAccountNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), format('DSCAndHybridWorker-{0}', variables('resourceAbbreviations').automationAccounts)), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "automationAccountPrivateEndpointName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), format('DSCAndHybridWorker-{0}', variables('resourceAbbreviations').automationAccounts)), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "availabilitySetNamePrefix": "[format('{0}-', replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').availabilitySets), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation))]",
                      "avdGlobalPrivateDnsZoneName": "[format('privatelink-global.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudEndpointSuffix')))]",
                      "avdPrivateDnsZoneName": "[format('privatelink.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudEndpointSuffix')))]",
                      "azureAutomationPrivateDnsZoneName": "[format('privatelink.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudEndpointSuffix')))]",
                      "backupPrivateDnsZoneName": "[format('privatelink.{0}.backup.{1}', variables('locations')[parameters('locationVirtualMachines')].recoveryServicesGeo, coalesce(variables('privateDnsZoneSuffixes_Backup')[environment().name], variables('cloudEndpointSuffix')))]",
                      "blobPrivateDnsZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
                      "dataCollectionRuleAssociationName": "[format('{0}-avdi', replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').dataCollectionRuleAssociations), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation))]",
                      "dataCollectionRuleName": "[format('microsoft-avdi-{0}', variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "desktopApplicationGroupName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').desktopApplicationGroups), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "diskAccessName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').diskAccesses), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "diskEncryptionSetName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').diskEncryptionSets), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "diskNamePrefix": "[replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').disks), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "filePrivateDnsZoneName": "[format('privatelink.file.{0}', environment().suffixes.storage)]",
                      "fileShareNames": {
                        "CloudCacheProfileContainer": [
                          "profile-containers"
                        ],
                        "CloudCacheProfileOfficeContainer": [
                          "office-containers",
                          "profile-containers"
                        ],
                        "ProfileContainer": [
                          "profile-containers"
                        ],
                        "ProfileOfficeContainer": [
                          "office-containers",
                          "profile-containers"
                        ]
                      },
                      "hostPoolDiagnosticSettingName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').diagnosticSettings), variables('serviceName'), variables('resourceAbbreviations').hostPools), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "hostPoolName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').hostPools), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "hostPoolNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), variables('resourceAbbreviations').hostPools), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "hostPoolPrivateEndpointName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), variables('resourceAbbreviations').hostPools), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "keyVaultName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').keyVaults), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "keyVaultNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), variables('resourceAbbreviations').keyVaults), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "keyVaultPrivateDnsZoneName": "[replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore')]",
                      "keyVaultPrivateEndpointName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), variables('resourceAbbreviations').keyVaults), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "logAnalyticsWorkspaceName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').logAnalyticsWorkspaces), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "netAppAccountName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').netAppAccounts), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "netAppCapacityPoolName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').netAppCapacityPools), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "networkInterfaceNamePrefix": "[replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "networkSecurityGroupNames": [
                        "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkSecurityGroups), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                        "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkSecurityGroups), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]"
                      ],
                      "monitorPrivateDnsZoneName": "[format('privatelink.monitor.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudEndpointSuffix')))]",
                      "odsOpinsightsPrivateDnsZoneName": "[format('privatelink.ods.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudEndpointSuffix')))]",
                      "omsOpinsightsPrivateDnsZoneName": "[format('privatelink.oms.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudEndpointSuffix')))]",
                      "queuePrivateDnsZoneName": "[format('privatelink.queue.{0}', environment().suffixes.storage)]",
                      "recoveryServicesVaultName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').recoveryServicesVaults), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "recoveryServicesVaultNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), variables('resourceAbbreviations').recoveryServicesVaults), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "recoveryServicesVaultPrivateEndpointName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), variables('resourceAbbreviations').recoveryServicesVaults), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "resourceGroupControlPlane": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'controlPlane'), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "resourceGroupFeedWorkspace": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'feedWorkspace'), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "resourceGroupGlobalWorkspace": "[replace(replace(replace(variables('namingConvention_Global'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'globalWorkspace'), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "resourceGroupHosts": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'sessionHosts'), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "resourceGroupManagement": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'management'), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "resourceGroupsNetwork": [
                        "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'network'), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                        "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'network'), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]"
                      ],
                      "resourceGroupStorage": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'profileStorage'), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "routeTableNames": [
                        "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').routeTables), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                        "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').routeTables), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]"
                      ],
                      "storageAccountNamePrefix": "[replace(replace(replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').storageAccounts), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), '-', '')]",
                      "storageAccountNetworkInterfaceNamePrefix": "[replace(replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), variables('resourceAbbreviations').storageAccounts), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation')))]",
                      "storageAccountPrivateEndpointNamePrefix": "[replace(replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), variables('resourceAbbreviations').storageAccounts), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation')))]",
                      "userAssignedIdentityNamePrefix": "[replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').userAssignedIdentities), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
                      "virtualMachineNamePrefix": "[replace(replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').virtualMachines), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), '-', '')]",
                      "virtualNetworkNames": [
                        "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').virtualNetworks), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                        "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').virtualNetworks), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]"
                      ],
                      "workspaceFeedDiagnosticSettingName": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), variables('resourceAbbreviations').diagnosticSettings), variables('serviceName'), format('feed-{0}', variables('resourceAbbreviations').workspaces)), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "workspaceFeedName": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), format('feed-{0}', variables('resourceAbbreviations').workspaces)), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "workspaceFeedNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), format('feed-{0}', variables('resourceAbbreviations').workspaces)), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "workspaceFeedPrivateEndpointName": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), format('feed-{0}', variables('resourceAbbreviations').workspaces)), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "workspaceFriendlyName": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), variables('resourceAbbreviations').workspaces), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "workspaceGlobalName": "[replace(replace(replace(variables('namingConvention_Global'), variables('resourceAbbreviation'), format('global-{0}', variables('resourceAbbreviations').workspaces)), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "workspaceGlobalNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention_Global'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), format('global-{0}', variables('resourceAbbreviations').workspaces)), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                      "workspaceGlobalPrivateEndpointName": "[replace(replace(replace(variables('namingConvention_Global'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), format('global-{0}', variables('resourceAbbreviations').workspaces)), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "locations": {
                      "type": "object",
                      "value": "[variables('locations')]"
                    },
                    "networkName": {
                      "type": "string",
                      "value": "[variables('networkName')]"
                    },
                    "resources": {
                      "type": "object",
                      "value": "[variables('resources')]"
                    },
                    "serviceName": {
                      "type": "string",
                      "value": "[variables('serviceName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Logic_{0}', parameters('timestamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "deploymentLocations": {
                    "value": "[variables('deploymentLocations')]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "fileShareNames": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.fileShareNames]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "fslogixStorageService": {
                    "value": "[parameters('fslogixStorageService')]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "imageOffer": {
                    "value": "[parameters('imageOffer')]"
                  },
                  "imagePublisher": {
                    "value": "[parameters('imagePublisher')]"
                  },
                  "imageSku": {
                    "value": "[parameters('imageSku')]"
                  },
                  "locations": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.locations.value]"
                  },
                  "locationVirtualMachines": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupControlPlane]"
                  },
                  "resourceGroupFeedWorkspace": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupFeedWorkspace]"
                  },
                  "resourceGroupHosts": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupHosts]"
                  },
                  "resourceGroupManagement": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
                  },
                  "resourceGroupsNetwork": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupsNetwork]"
                  },
                  "resourceGroupStorage": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupStorage]"
                  },
                  "securityPrincipals": {
                    "value": "[parameters('securityPrincipals')]"
                  },
                  "sessionHostCount": {
                    "value": "[parameters('sessionHostCount')]"
                  },
                  "sessionHostIndex": {
                    "value": "[parameters('sessionHostIndex')]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.virtualMachineNamePrefix]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "6260587950048763741"
                    }
                  },
                  "parameters": {
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "deploymentLocations": {
                      "type": "array"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "fileShareNames": {
                      "type": "object"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "fslogixStorageService": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "imageOffer": {
                      "type": "string"
                    },
                    "imagePublisher": {
                      "type": "string"
                    },
                    "imageSku": {
                      "type": "string"
                    },
                    "locations": {
                      "type": "object"
                    },
                    "locationVirtualMachines": {
                      "type": "string"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "resourceGroupFeedWorkspace": {
                      "type": "string"
                    },
                    "resourceGroupHosts": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "resourceGroupsNetwork": {
                      "type": "array"
                    },
                    "resourceGroupStorage": {
                      "type": "string"
                    },
                    "securityPrincipals": {
                      "type": "array"
                    },
                    "sessionHostCount": {
                      "type": "int"
                    },
                    "sessionHostIndex": {
                      "type": "int"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "maxResourcesPerTemplateDeployment": 88,
                    "divisionValue": "[div(parameters('sessionHostCount'), variables('maxResourcesPerTemplateDeployment'))]",
                    "divisionRemainderValue": "[mod(parameters('sessionHostCount'), variables('maxResourcesPerTemplateDeployment'))]",
                    "sessionHostBatchCount": "[if(greater(variables('divisionRemainderValue'), 0), add(variables('divisionValue'), 1), variables('divisionValue'))]",
                    "maxAvSetMembers": 200,
                    "beginAvSetRange": "[div(parameters('sessionHostIndex'), variables('maxAvSetMembers'))]",
                    "endAvSetRange": "[div(add(parameters('sessionHostCount'), parameters('sessionHostIndex')), variables('maxAvSetMembers'))]",
                    "availabilitySetsCount": "[length(range(variables('beginAvSetRange'), add(sub(variables('endAvSetRange'), variables('beginAvSetRange')), 1)))]",
                    "fileShares": "[parameters('fileShareNames')[parameters('fslogixContainerType')]]",
                    "fslogix": "[if(or(equals(parameters('fslogixStorageService'), 'None'), not(contains(parameters('activeDirectorySolution'), 'DomainServices'))), false(), true())]",
                    "netbios": "[split(parameters('domainName'), '.')[0]]",
                    "pooledHostPool": "[if(equals(split(parameters('hostPoolType'), ' ')[0], 'Pooled'), true(), false())]",
                    "resourceGroups": "[union(variables('resourceGroupsCommon'), variables('resourceGroupsNetworking'), variables('resourceGroupsStorage'))]",
                    "resourceGroupsCommon": [
                      "[parameters('resourceGroupControlPlane')]",
                      "[parameters('resourceGroupFeedWorkspace')]",
                      "[parameters('resourceGroupHosts')]",
                      "[parameters('resourceGroupManagement')]"
                    ],
                    "resourceGroupsNetworking": "[if(equals(length(parameters('deploymentLocations')), 2), parameters('resourceGroupsNetwork'), createArray(parameters('resourceGroupsNetwork')[0]))]",
                    "resourceGroupsStorage": "[if(variables('fslogix'), createArray(parameters('resourceGroupStorage')), createArray())]",
                    "roleDefinitions": {
                      "DesktopVirtualizationPowerOnContributor": "489581de-a3bd-480d-9518-53dea7416b33",
                      "DesktopVirtualizationUser": "1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
                      "Reader": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
                      "VirtualMachineUserLogin": "fb879df8-f326-4884-b1cf-06f3ad86be52"
                    },
                    "securityPrincipalsCount": "[length(parameters('securityPrincipals'))]",
                    "smbServerLocation": "[parameters('locations')[parameters('locationVirtualMachines')].abbreviation]",
                    "storageSku": "[if(equals(parameters('fslogixStorageService'), 'None'), 'None', split(parameters('fslogixStorageService'), ' ')[1])]",
                    "storageService": "[split(parameters('fslogixStorageService'), ' ')[0]]",
                    "storageSuffix": "[environment().suffixes.storage]",
                    "timeDifference": "[parameters('locations')[parameters('locationVirtualMachines')].timeDifference]",
                    "timeZone": "[parameters('locations')[parameters('locationVirtualMachines')].timeZone]",
                    "vmTemplate": "[format('{{\"domain\":\"{0}\",\"galleryImageOffer\":\"{1}\",\"galleryImagePublisher\":\"{2}\",\"galleryImageSKU\":\"{3}\",\"imageType\":\"Gallery\",\"imageUri\":null,\"customImageId\":null,\"namePrefix\":\"{4}\",\"osDiskType\":\"{5}\",\"useManagedDisks\":true,\"VirtualMachineSize\":{{\"id\":\"{6}\",\"cores\":null,\"ram\":null}},\"galleryItemId\":\"{7}.{8}{9}\"}}', parameters('domainName'), parameters('imageOffer'), parameters('imagePublisher'), parameters('imageSku'), parameters('virtualMachineNamePrefix'), parameters('diskSku'), parameters('virtualMachineSize'), parameters('imagePublisher'), parameters('imageOffer'), parameters('imageSku'))]"
                  },
                  "resources": [],
                  "outputs": {
                    "availabilitySetsCount": {
                      "type": "int",
                      "value": "[variables('availabilitySetsCount')]"
                    },
                    "beginAvSetRange": {
                      "type": "int",
                      "value": "[variables('beginAvSetRange')]"
                    },
                    "divisionRemainderValue": {
                      "type": "int",
                      "value": "[variables('divisionRemainderValue')]"
                    },
                    "fileShares": {
                      "type": "array",
                      "value": "[variables('fileShares')]"
                    },
                    "fslogix": {
                      "type": "bool",
                      "value": "[variables('fslogix')]"
                    },
                    "maxResourcesPerTemplateDeployment": {
                      "type": "int",
                      "value": "[variables('maxResourcesPerTemplateDeployment')]"
                    },
                    "netbios": {
                      "type": "string",
                      "value": "[variables('netbios')]"
                    },
                    "pooledHostPool": {
                      "type": "bool",
                      "value": "[variables('pooledHostPool')]"
                    },
                    "resourceGroups": {
                      "type": "array",
                      "value": "[variables('resourceGroups')]"
                    },
                    "roleDefinitions": {
                      "type": "object",
                      "value": "[variables('roleDefinitions')]"
                    },
                    "sessionHostBatchCount": {
                      "type": "int",
                      "value": "[variables('sessionHostBatchCount')]"
                    },
                    "securityPrincipalsCount": {
                      "type": "int",
                      "value": "[variables('securityPrincipalsCount')]"
                    },
                    "smbServerLocation": {
                      "type": "string",
                      "value": "[variables('smbServerLocation')]"
                    },
                    "storageSku": {
                      "type": "string",
                      "value": "[variables('storageSku')]"
                    },
                    "storageService": {
                      "type": "string",
                      "value": "[variables('storageService')]"
                    },
                    "storageSuffix": {
                      "type": "string",
                      "value": "[variables('storageSuffix')]"
                    },
                    "timeDifference": {
                      "type": "string",
                      "value": "[variables('timeDifference')]"
                    },
                    "timeZone": {
                      "type": "string",
                      "value": "[variables('timeZone')]"
                    },
                    "vmTemplate": {
                      "type": "string",
                      "value": "[variables('vmTemplate')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "copy": {
                "name": "rgs",
                "count": "[length(range(0, variables('resourceGroupsCount')))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('ResourceGroup_{0}_{1}', range(0, variables('resourceGroupsCount'))[copyIndex()], parameters('timestamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": "[if(or(contains(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceGroups.value[range(0, variables('resourceGroupsCount'))[copyIndex()]], 'controlPlane'), contains(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceGroups.value[range(0, variables('resourceGroupsCount'))[copyIndex()]], 'feedWorkspace')), createObject('value', parameters('locationControlPlane')), createObject('value', parameters('locationVirtualMachines')))]",
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceGroups.value[range(0, variables('resourceGroupsCount'))[copyIndex()]]]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "14500695625135566681"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('resourceGroupName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Resources/resourceGroups'), parameters('tags')['Microsoft.Resources/resourceGroups'], createObject())]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Network_ControlPlane_{0}', parameters('timestamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureNetAppFilesSubnetAddressPrefix": "[if(and(not(empty(parameters('azureNetAppFilesSubnetAddressPrefix'))), equals(length(variables('deploymentLocations')), 1)), createObject('value', parameters('azureNetAppFilesSubnetAddressPrefix')), createObject('value', ''))]",
                  "disableBgpRoutePropagation": {
                    "value": "[parameters('disableBgpRoutePropagation')]"
                  },
                  "hubAzureFirewallResourceId": {
                    "value": "[parameters('hubAzureFirewallResourceId')]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                  },
                  "index": {
                    "value": 0
                  },
                  "location": {
                    "value": "[variables('deploymentLocations')[0]]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.networkSecurityGroupNames[0]]"
                  },
                  "resourceGroupNetwork": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupsNetwork[0]]"
                  },
                  "routeTableName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.routeTableNames[0]]"
                  },
                  "subnetAddressPrefixes": {
                    "value": "[parameters('subnetAddressPrefixes')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "virtualNetworkAddressPrefixes": {
                    "value": "[parameters('virtualNetworkAddressPrefixes')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.virtualNetworkNames[0]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "4854107194195472449"
                    }
                  },
                  "parameters": {
                    "azureNetAppFilesSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "disableBgpRoutePropagation": {
                      "type": "bool"
                    },
                    "hubAzureFirewallResourceId": {
                      "type": "string"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "index": {
                      "type": "int"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "subnetAddressPrefixes": {
                      "type": "array"
                    },
                    "resourceGroupNetwork": {
                      "type": "string"
                    },
                    "routeTableName": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "virtualNetworkAddressPrefixes": {
                      "type": "array"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "hubSubscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
                    "hubVirtualNetworkName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]",
                    "hubVirtualNetworkResourceGroupName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
                    "networkSecurityGroupSecurityRules": [],
                    "spokeResourceGroup": "[parameters('resourceGroupNetwork')]",
                    "spokeSubscriptionId": "[subscription().subscriptionId]",
                    "subnets": "[union(variables('subnetWorkload'), variables('subnetAnf'))]",
                    "subnetAnf": "[if(empty(parameters('azureNetAppFilesSubnetAddressPrefix')), createArray(), createArray(createObject('name', 'AzureNetAppFiles', 'addressPrefix', parameters('azureNetAppFilesSubnetAddressPrefix'), 'delegations', createArray(createObject('name', 'Microsoft.Netapp.volumes', 'id', format('{0}/delegations/Microsoft.Netapp.volumes', resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'AzureNetAppFiles')), 'properties', createObject('serviceName', 'Microsoft.Netapp/volumes'), 'type', 'Microsoft.Network/virtualNetworks/subnets/delegations')), 'privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled', 'networkSecurityGroupName', parameters('networkSecurityGroupName'))))]",
                    "subnetWorkload": [
                      {
                        "name": "AzureVirtualDesktop",
                        "addressPrefix": "[parameters('subnetAddressPrefixes')[parameters('index')]]",
                        "delegations": [],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Disabled",
                        "networkSecurityGroupName": "[parameters('networkSecurityGroupName')]"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp'))]",
                      "subscriptionId": "[variables('spokeSubscriptionId')]",
                      "resourceGroup": "[variables('spokeResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "azureFirewallIpAddress": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubAzureFirewallResourceId'), '/')[2], split(parameters('hubAzureFirewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('hubAzureFirewallResourceId'), '/')[8]), '2023-05-01').ipConfigurations[0].properties.privateIPAddress]"
                          },
                          "disableBgpRoutePropagation": {
                            "value": "[parameters('disableBgpRoutePropagation')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "udrName": {
                            "value": "[parameters('routeTableName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "4935757515139091083"
                            }
                          },
                          "parameters": {
                            "azureFirewallIpAddress": {
                              "type": "string"
                            },
                            "disableBgpRoutePropagation": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "udrName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/routeTables",
                              "apiVersion": "2021-05-01",
                              "name": "[parameters('udrName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                "routes": [
                                  {
                                    "name": "default",
                                    "properties": {
                                      "addressPrefix": "0.0.0.0/0",
                                      "hasBgpOverride": false,
                                      "nextHopIpAddress": "[parameters('azureFirewallIpAddress')]",
                                      "nextHopType": "VirtualAppliance"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('udrName')]"
                            },
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/routeTables', parameters('udrName'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('NetworkSecurityGroup_{0}_{1}', parameters('index'), parameters('timestamp'))]",
                      "subscriptionId": "[variables('spokeSubscriptionId')]",
                      "resourceGroup": "[variables('spokeResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          },
                          "networkSecurityGroupSecurityRules": {
                            "value": "[variables('networkSecurityGroupSecurityRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "5292228865068295142"
                            }
                          },
                          "parameters": {
                            "networkSecurityGroupSecurityRules": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2020-11-01",
                              "name": "[parameters('networkSecurityGroupName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "securityRules",
                                    "count": "[length(parameters('networkSecurityGroupSecurityRules'))]",
                                    "input": {
                                      "name": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].name]",
                                      "properties": {
                                        "access": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.access]",
                                        "destinationAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                                        "destinationAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes)]",
                                        "destinationPortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges)]",
                                        "destinationPortRange": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange)]",
                                        "direction": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.direction]",
                                        "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                                        "protocol": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.protocol]",
                                        "sourceAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                                        "sourcePortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges)]",
                                        "sourcePortRange": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRange]"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))]",
                      "subscriptionId": "[variables('spokeSubscriptionId')]",
                      "resourceGroup": "[variables('spokeResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "dnsServers": "[if(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubVirtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVirtualNetworkName')), '2023-05-01'), 'dhcpOptions'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubVirtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVirtualNetworkName')), '2023-05-01').dhcpOptions.dnsServers), createObject('value', createArray()))]",
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "subnets": {
                            "value": "[variables('subnets')]"
                          },
                          "udrName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.name.value]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "vNetAddressPrefixes": {
                            "value": [
                              "[parameters('virtualNetworkAddressPrefixes')[parameters('index')]]"
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "916118672509994488"
                            }
                          },
                          "parameters": {
                            "dnsServers": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "subnets": {
                              "type": "array"
                            },
                            "udrName": {
                              "type": "string"
                            },
                            "vNetAddressPrefixes": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2020-11-01",
                              "name": "[parameters('virtualNetworkName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "subnets",
                                    "count": "[length(parameters('subnets'))]",
                                    "input": {
                                      "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                                      "properties": {
                                        "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                        "delegations": "[parameters('subnets')[copyIndex('subnets')].delegations]",
                                        "networkSecurityGroup": "[if(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), null(), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName))))]",
                                        "privateEndpointNetworkPolicies": "[parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies]",
                                        "privateLinkServiceNetworkPolicies": "[parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies]",
                                        "routeTable": {
                                          "id": "[resourceId('Microsoft.Network/routeTables', parameters('udrName'))]"
                                        }
                                      }
                                    }
                                  }
                                ],
                                "addressSpace": {
                                  "addressPrefixes": "[parameters('vNetAddressPrefixes')]"
                                },
                                "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "virtualNetworkName": {
                              "type": "string",
                              "value": "[parameters('virtualNetworkName')]"
                            },
                            "virtualNetworkResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2020-11-01').subnets[0].id]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('VirtualNetworkPeer_Hub_{0}_{1}', parameters('index'), parameters('timestamp'))]",
                      "subscriptionId": "[variables('spokeSubscriptionId')]",
                      "resourceGroup": "[variables('spokeResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "existingLocalVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "existingRemoteVirtualNetworkName": {
                            "value": "[variables('hubVirtualNetworkName')]"
                          },
                          "existingRemoteVirtualNetworkResourceGroupName": {
                            "value": "[variables('hubVirtualNetworkResourceGroupName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "179497505162655304"
                            }
                          },
                          "parameters": {
                            "existingLocalVirtualNetworkName": {
                              "type": "string"
                            },
                            "existingRemoteVirtualNetworkName": {
                              "type": "string"
                            },
                            "existingRemoteVirtualNetworkResourceGroupName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', parameters('existingLocalVirtualNetworkName'), parameters('existingRemoteVirtualNetworkName'))]",
                              "properties": {
                                "allowVirtualNetworkAccess": true,
                                "allowForwardedTraffic": true,
                                "allowGatewayTransit": false,
                                "useRemoteGateways": false,
                                "remoteVirtualNetwork": {
                                  "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('VirtualNetworkPeer_Spoke_{0}_{1}', parameters('index'), parameters('timestamp'))]",
                      "subscriptionId": "[variables('hubSubscriptionId')]",
                      "resourceGroup": "[variables('hubVirtualNetworkResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "existingLocalVirtualNetworkName": {
                            "value": "[variables('hubVirtualNetworkName')]"
                          },
                          "existingRemoteVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "existingRemoteVirtualNetworkResourceGroupName": {
                            "value": "[variables('spokeResourceGroup')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "179497505162655304"
                            }
                          },
                          "parameters": {
                            "existingLocalVirtualNetworkName": {
                              "type": "string"
                            },
                            "existingRemoteVirtualNetworkName": {
                              "type": "string"
                            },
                            "existingRemoteVirtualNetworkResourceGroupName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', parameters('existingLocalVirtualNetworkName'), parameters('existingRemoteVirtualNetworkName'))]",
                              "properties": {
                                "allowVirtualNetworkAccess": true,
                                "allowForwardedTraffic": true,
                                "allowGatewayTransit": false,
                                "useRemoteGateways": false,
                                "remoteVirtualNetwork": {
                                  "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetworkPeer_Hub_{0}_{1}', parameters('index'), parameters('timestamp')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
                "rgs"
              ]
            },
            {
              "condition": "[equals(length(variables('deploymentLocations')), 2)]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Network_Hosts_{0}', parameters('timestamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureNetAppFilesSubnetAddressPrefix": "[if(and(not(empty(parameters('azureNetAppFilesSubnetAddressPrefix'))), equals(length(variables('deploymentLocations')), 2)), createObject('value', parameters('azureNetAppFilesSubnetAddressPrefix')), createObject('value', ''))]",
                  "disableBgpRoutePropagation": {
                    "value": "[parameters('disableBgpRoutePropagation')]"
                  },
                  "hubAzureFirewallResourceId": {
                    "value": "[parameters('hubAzureFirewallResourceId')]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                  },
                  "index": {
                    "value": 1
                  },
                  "location": {
                    "value": "[variables('deploymentLocations')[1]]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.networkSecurityGroupNames[1]]"
                  },
                  "resourceGroupNetwork": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupsNetwork[0]), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupsNetwork[1]))]",
                  "routeTableName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.routeTableNames[1]]"
                  },
                  "subnetAddressPrefixes": {
                    "value": "[parameters('subnetAddressPrefixes')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "virtualNetworkAddressPrefixes": {
                    "value": "[parameters('virtualNetworkAddressPrefixes')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.virtualNetworkNames[1]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "4854107194195472449"
                    }
                  },
                  "parameters": {
                    "azureNetAppFilesSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "disableBgpRoutePropagation": {
                      "type": "bool"
                    },
                    "hubAzureFirewallResourceId": {
                      "type": "string"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "index": {
                      "type": "int"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "subnetAddressPrefixes": {
                      "type": "array"
                    },
                    "resourceGroupNetwork": {
                      "type": "string"
                    },
                    "routeTableName": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "virtualNetworkAddressPrefixes": {
                      "type": "array"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "hubSubscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
                    "hubVirtualNetworkName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]",
                    "hubVirtualNetworkResourceGroupName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
                    "networkSecurityGroupSecurityRules": [],
                    "spokeResourceGroup": "[parameters('resourceGroupNetwork')]",
                    "spokeSubscriptionId": "[subscription().subscriptionId]",
                    "subnets": "[union(variables('subnetWorkload'), variables('subnetAnf'))]",
                    "subnetAnf": "[if(empty(parameters('azureNetAppFilesSubnetAddressPrefix')), createArray(), createArray(createObject('name', 'AzureNetAppFiles', 'addressPrefix', parameters('azureNetAppFilesSubnetAddressPrefix'), 'delegations', createArray(createObject('name', 'Microsoft.Netapp.volumes', 'id', format('{0}/delegations/Microsoft.Netapp.volumes', resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'AzureNetAppFiles')), 'properties', createObject('serviceName', 'Microsoft.Netapp/volumes'), 'type', 'Microsoft.Network/virtualNetworks/subnets/delegations')), 'privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled', 'networkSecurityGroupName', parameters('networkSecurityGroupName'))))]",
                    "subnetWorkload": [
                      {
                        "name": "AzureVirtualDesktop",
                        "addressPrefix": "[parameters('subnetAddressPrefixes')[parameters('index')]]",
                        "delegations": [],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Disabled",
                        "networkSecurityGroupName": "[parameters('networkSecurityGroupName')]"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp'))]",
                      "subscriptionId": "[variables('spokeSubscriptionId')]",
                      "resourceGroup": "[variables('spokeResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "azureFirewallIpAddress": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubAzureFirewallResourceId'), '/')[2], split(parameters('hubAzureFirewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('hubAzureFirewallResourceId'), '/')[8]), '2023-05-01').ipConfigurations[0].properties.privateIPAddress]"
                          },
                          "disableBgpRoutePropagation": {
                            "value": "[parameters('disableBgpRoutePropagation')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "udrName": {
                            "value": "[parameters('routeTableName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "4935757515139091083"
                            }
                          },
                          "parameters": {
                            "azureFirewallIpAddress": {
                              "type": "string"
                            },
                            "disableBgpRoutePropagation": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "udrName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/routeTables",
                              "apiVersion": "2021-05-01",
                              "name": "[parameters('udrName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                "routes": [
                                  {
                                    "name": "default",
                                    "properties": {
                                      "addressPrefix": "0.0.0.0/0",
                                      "hasBgpOverride": false,
                                      "nextHopIpAddress": "[parameters('azureFirewallIpAddress')]",
                                      "nextHopType": "VirtualAppliance"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('udrName')]"
                            },
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/routeTables', parameters('udrName'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('NetworkSecurityGroup_{0}_{1}', parameters('index'), parameters('timestamp'))]",
                      "subscriptionId": "[variables('spokeSubscriptionId')]",
                      "resourceGroup": "[variables('spokeResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          },
                          "networkSecurityGroupSecurityRules": {
                            "value": "[variables('networkSecurityGroupSecurityRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "5292228865068295142"
                            }
                          },
                          "parameters": {
                            "networkSecurityGroupSecurityRules": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "networkSecurityGroupName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2020-11-01",
                              "name": "[parameters('networkSecurityGroupName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "securityRules",
                                    "count": "[length(parameters('networkSecurityGroupSecurityRules'))]",
                                    "input": {
                                      "name": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].name]",
                                      "properties": {
                                        "access": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.access]",
                                        "destinationAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                                        "destinationAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes)]",
                                        "destinationPortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges)]",
                                        "destinationPortRange": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange)]",
                                        "direction": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.direction]",
                                        "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                                        "protocol": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.protocol]",
                                        "sourceAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                                        "sourcePortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges)]",
                                        "sourcePortRange": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRange]"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))]",
                      "subscriptionId": "[variables('spokeSubscriptionId')]",
                      "resourceGroup": "[variables('spokeResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "dnsServers": "[if(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubVirtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVirtualNetworkName')), '2023-05-01'), 'dhcpOptions'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubVirtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVirtualNetworkName')), '2023-05-01').dhcpOptions.dnsServers), createObject('value', createArray()))]",
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "subnets": {
                            "value": "[variables('subnets')]"
                          },
                          "udrName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.name.value]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "vNetAddressPrefixes": {
                            "value": [
                              "[parameters('virtualNetworkAddressPrefixes')[parameters('index')]]"
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "916118672509994488"
                            }
                          },
                          "parameters": {
                            "dnsServers": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "subnets": {
                              "type": "array"
                            },
                            "udrName": {
                              "type": "string"
                            },
                            "vNetAddressPrefixes": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2020-11-01",
                              "name": "[parameters('virtualNetworkName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "subnets",
                                    "count": "[length(parameters('subnets'))]",
                                    "input": {
                                      "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                                      "properties": {
                                        "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                        "delegations": "[parameters('subnets')[copyIndex('subnets')].delegations]",
                                        "networkSecurityGroup": "[if(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), null(), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName))))]",
                                        "privateEndpointNetworkPolicies": "[parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies]",
                                        "privateLinkServiceNetworkPolicies": "[parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies]",
                                        "routeTable": {
                                          "id": "[resourceId('Microsoft.Network/routeTables', parameters('udrName'))]"
                                        }
                                      }
                                    }
                                  }
                                ],
                                "addressSpace": {
                                  "addressPrefixes": "[parameters('vNetAddressPrefixes')]"
                                },
                                "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "virtualNetworkName": {
                              "type": "string",
                              "value": "[parameters('virtualNetworkName')]"
                            },
                            "virtualNetworkResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2020-11-01').subnets[0].id]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('VirtualNetworkPeer_Hub_{0}_{1}', parameters('index'), parameters('timestamp'))]",
                      "subscriptionId": "[variables('spokeSubscriptionId')]",
                      "resourceGroup": "[variables('spokeResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "existingLocalVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "existingRemoteVirtualNetworkName": {
                            "value": "[variables('hubVirtualNetworkName')]"
                          },
                          "existingRemoteVirtualNetworkResourceGroupName": {
                            "value": "[variables('hubVirtualNetworkResourceGroupName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "179497505162655304"
                            }
                          },
                          "parameters": {
                            "existingLocalVirtualNetworkName": {
                              "type": "string"
                            },
                            "existingRemoteVirtualNetworkName": {
                              "type": "string"
                            },
                            "existingRemoteVirtualNetworkResourceGroupName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', parameters('existingLocalVirtualNetworkName'), parameters('existingRemoteVirtualNetworkName'))]",
                              "properties": {
                                "allowVirtualNetworkAccess": true,
                                "allowForwardedTraffic": true,
                                "allowGatewayTransit": false,
                                "useRemoteGateways": false,
                                "remoteVirtualNetwork": {
                                  "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('VirtualNetworkPeer_Spoke_{0}_{1}', parameters('index'), parameters('timestamp'))]",
                      "subscriptionId": "[variables('hubSubscriptionId')]",
                      "resourceGroup": "[variables('hubVirtualNetworkResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "existingLocalVirtualNetworkName": {
                            "value": "[variables('hubVirtualNetworkName')]"
                          },
                          "existingRemoteVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.virtualNetworkName.value]"
                          },
                          "existingRemoteVirtualNetworkResourceGroupName": {
                            "value": "[variables('spokeResourceGroup')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "179497505162655304"
                            }
                          },
                          "parameters": {
                            "existingLocalVirtualNetworkName": {
                              "type": "string"
                            },
                            "existingRemoteVirtualNetworkName": {
                              "type": "string"
                            },
                            "existingRemoteVirtualNetworkResourceGroupName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', parameters('existingLocalVirtualNetworkName'), parameters('existingRemoteVirtualNetworkName'))]",
                              "properties": {
                                "allowVirtualNetworkAccess": true,
                                "allowForwardedTraffic": true,
                                "allowGatewayTransit": false,
                                "useRemoteGateways": false,
                                "remoteVirtualNetwork": {
                                  "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetworkPeer_Hub_{0}_{1}', parameters('index'), parameters('timestamp')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
                "rgs"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Management_{0}', parameters('timestamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "artifactsStorageAccountResourceId": {
                    "value": "[parameters('artifactsStorageAccountResourceId')]"
                  },
                  "artifactsUri": {
                    "value": "[variables('artifactsUri')]"
                  },
                  "automationAccountDiagnosticSettingName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountDiagnosticSettingName]"
                  },
                  "automationAccountName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountName]"
                  },
                  "automationAccountNetworkInterfaceName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountNetworkInterfaceName]"
                  },
                  "automationAccountPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.azureAutomationPrivateDnsZoneName)]"
                  },
                  "automationAccountPrivateEndpointName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountPrivateEndpointName]"
                  },
                  "availability": {
                    "value": "[parameters('availability')]"
                  },
                  "avdObjectId": {
                    "value": "[parameters('avdObjectId')]"
                  },
                  "azureBlobsPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.blobPrivateDnsZoneName)]"
                  },
                  "azurePowerShellModuleMsiName": {
                    "value": "[parameters('azurePowerShellModuleMsiName')]"
                  },
                  "azureQueueStoragePrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.queuePrivateDnsZoneName)]"
                  },
                  "dataCollectionRuleName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.dataCollectionRuleName]"
                  },
                  "diskEncryptionSetName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.diskEncryptionSetName]"
                  },
                  "diskNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.diskNamePrefix]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "enableMonitoring": {
                    "value": "[parameters('monitoring')]"
                  },
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "fslogix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.fslogix.value]"
                  },
                  "fslogixStorageService": {
                    "value": "[parameters('fslogixStorageService')]"
                  },
                  "hostPoolName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolName]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "imageDefinitionResourceId": {
                    "value": "[parameters('imageDefinitionResourceId')]"
                  },
                  "keyVaultName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.keyVaultName]"
                  },
                  "keyVaultNetworkInterfaceName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.keyVaultNetworkInterfaceName]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.keyVaultPrivateDnsZoneName)]"
                  },
                  "keyVaultPrivateEndpointName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.keyVaultPrivateEndpointName]"
                  },
                  "locationVirtualMachines": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.logAnalyticsWorkspaceName]"
                  },
                  "logAnalyticsWorkspaceRetention": {
                    "value": "[parameters('logAnalyticsWorkspaceRetention')]"
                  },
                  "logAnalyticsWorkspaceSku": {
                    "value": "[parameters('logAnalyticsWorkspaceSku')]"
                  },
                  "networkInterfaceNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.networkInterfaceNamePrefix]"
                  },
                  "networkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.networkName.value]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "recoveryServices": {
                    "value": "[parameters('recoveryServices')]"
                  },
                  "recoveryServicesPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.backupPrivateDnsZoneName)]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.recoveryServicesVaultName]"
                  },
                  "recoveryServicesVaultNetworkInterfaceName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.recoveryServicesVaultNetworkInterfaceName]"
                  },
                  "recoveryServicesVaultPrivateEndpointName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.recoveryServicesVaultPrivateEndpointName]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupControlPlane]"
                  },
                  "resourceGroupFeedWorkspace": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupFeedWorkspace]"
                  },
                  "resourceGroupHosts": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupHosts]"
                  },
                  "resourceGroupManagement": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
                  },
                  "resourceGroupStorage": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupStorage]"
                  },
                  "roleDefinitions": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.roleDefinitions.value]"
                  },
                  "scalingTool": {
                    "value": "[parameters('scalingTool')]"
                  },
                  "securityLogAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('securityLogAnalyticsWorkspaceResourceId')]"
                  },
                  "serviceName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.serviceName.value]"
                  },
                  "sessionHostCount": {
                    "value": "[parameters('sessionHostCount')]"
                  },
                  "storageService": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageService.value]"
                  },
                  "subnetResourceId": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value))]",
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "timeZone": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.timeZone.value]"
                  },
                  "userAssignedIdentityNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.userAssignedIdentityNamePrefix]"
                  },
                  "virtualMachineMonitoringAgent": {
                    "value": "[parameters('virtualMachineMonitoringAgent')]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.virtualMachineNamePrefix]"
                  },
                  "virtualMachinePassword": {
                    "value": "[parameters('virtualMachinePassword')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "virtualMachineUsername": {
                    "value": "[parameters('virtualMachineUsername')]"
                  },
                  "workspaceFeedName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFeedName]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "6022508601857380127"
                    }
                  },
                  "parameters": {
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "artifactsUri": {
                      "type": "string"
                    },
                    "artifactsStorageAccountResourceId": {
                      "type": "string"
                    },
                    "automationAccountDiagnosticSettingName": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "automationAccountNetworkInterfaceName": {
                      "type": "string"
                    },
                    "automationAccountPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "automationAccountPrivateEndpointName": {
                      "type": "string"
                    },
                    "availability": {
                      "type": "string"
                    },
                    "avdObjectId": {
                      "type": "string"
                    },
                    "azureBlobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "azurePowerShellModuleMsiName": {
                      "type": "string"
                    },
                    "azureQueueStoragePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "dataCollectionRuleName": {
                      "type": "string"
                    },
                    "diskNamePrefix": {
                      "type": "string"
                    },
                    "diskEncryptionSetName": {
                      "type": "string"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "fslogix": {
                      "type": "bool"
                    },
                    "fslogixStorageService": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "imageDefinitionResourceId": {
                      "type": "string"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "keyVaultNetworkInterfaceName": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "keyVaultPrivateEndpointName": {
                      "type": "string"
                    },
                    "locationVirtualMachines": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceRetention": {
                      "type": "int"
                    },
                    "logAnalyticsWorkspaceSku": {
                      "type": "string"
                    },
                    "networkInterfaceNamePrefix": {
                      "type": "string"
                    },
                    "networkName": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "recoveryServices": {
                      "type": "bool"
                    },
                    "recoveryServicesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "recoveryServicesVaultNetworkInterfaceName": {
                      "type": "string"
                    },
                    "recoveryServicesVaultPrivateEndpointName": {
                      "type": "string"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "resourceGroupFeedWorkspace": {
                      "type": "string"
                    },
                    "resourceGroupHosts": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "resourceGroupStorage": {
                      "type": "string"
                    },
                    "roleDefinitions": {
                      "type": "object"
                    },
                    "scalingTool": {
                      "type": "bool"
                    },
                    "securityLogAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "serviceName": {
                      "type": "string"
                    },
                    "sessionHostCount": {
                      "type": "int"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "timeZone": {
                      "type": "string"
                    },
                    "userAssignedIdentityNamePrefix": {
                      "type": "string"
                    },
                    "virtualMachineMonitoringAgent": {
                      "type": "string"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    },
                    "virtualMachinePassword": {
                      "type": "securestring"
                    },
                    "virtualMachineUsername": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "workspaceFeedName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "CpuCountMax": "[if(contains(parameters('hostPoolType'), 'Pooled'), 32, 128)]",
                    "CpuCountMin": "[if(contains(parameters('hostPoolType'), 'Pooled'), 4, 2)]",
                    "roleAssignments": "[union(variables('roleAssignmentsCommon'), variables('roleAssignmentStorage'))]",
                    "roleAssignmentsCommon": [
                      {
                        "roleDefinitionId": "f353d9bd-d4a6-484e-a77a-8050b599b867",
                        "resourceGroup": "[parameters('resourceGroupManagement')]",
                        "subscription": "[subscription().subscriptionId]"
                      },
                      {
                        "roleDefinitionId": "86240b0e-9422-4c43-887b-b61143f32ba8",
                        "resourceGroup": "[parameters('resourceGroupControlPlane')]",
                        "subscription": "[subscription().subscriptionId]"
                      },
                      {
                        "roleDefinitionId": "2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                        "resourceGroup": "[parameters('resourceGroupControlPlane')]",
                        "subscription": "[subscription().subscriptionId]"
                      },
                      {
                        "roleDefinitionId": "a959dbd1-f747-45e3-8ba6-dd80f235f97c",
                        "resourceGroup": "[parameters('resourceGroupManagement')]",
                        "subscription": "[subscription().subscriptionId]"
                      },
                      {
                        "roleDefinitionId": "21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                        "resourceGroup": "[parameters('resourceGroupFeedWorkspace')]",
                        "subscription": "[subscription().subscriptionId]"
                      },
                      {
                        "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                        "resourceGroup": "[split(parameters('artifactsStorageAccountResourceId'), '/')[4]]",
                        "subscription": "[split(parameters('artifactsStorageAccountResourceId'), '/')[2]]"
                      }
                    ],
                    "roleAssignmentStorage": "[if(parameters('fslogix'), createArray(createObject('roleDefinitionId', '17d1049b-9a84-46fb-8f53-869881c3d3ab', 'resourceGroup', parameters('resourceGroupStorage'), 'subscription', subscription().subscriptionId)), createArray())]",
                    "VirtualNetworkName": "[split(parameters('subnetResourceId'), '/')[8]]",
                    "VirtualNetworkResourceGroupName": "[split(parameters('subnetResourceId'), '/')[4]]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(format('{0}-deployment', parameters('userAssignedIdentityNamePrefix')), parameters('roleDefinitions').Reader, subscription().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitions').Reader)]",
                        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('avdObjectId'), parameters('roleDefinitions').DesktopVirtualizationPowerOnContributor, subscription().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitions').DesktopVirtualizationPowerOnContributor)]",
                        "principalId": "[parameters('avdObjectId')]"
                      }
                    },
                    {
                      "condition": "[and(contains(parameters('hostPoolType'), 'Pooled'), parameters('recoveryServices'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Policy_{0}', parameters('timestamp'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupHosts')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "5228143118731605715"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyDefinitions",
                              "apiVersion": "2021-06-01",
                              "name": "DiskNetworkAccess",
                              "properties": {
                                "description": "[format('Disable network access to managed disks in the {0} resource group', parameters('resourceGroupName'))]",
                                "displayName": "[format('Disable Disk Access ({0})', parameters('resourceGroupName'))]",
                                "mode": "All",
                                "parameters": {},
                                "policyRule": {
                                  "if": {
                                    "field": "type",
                                    "equals": "Microsoft.Compute/disks"
                                  },
                                  "then": {
                                    "effect": "modify",
                                    "details": {
                                      "roleDefinitionIds": [
                                        "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840"
                                      ],
                                      "operations": [
                                        {
                                          "operation": "addOrReplace",
                                          "field": "Microsoft.Compute/disks/networkAccessPolicy",
                                          "value": "DenyAll"
                                        },
                                        {
                                          "operation": "addOrReplace",
                                          "field": "Microsoft.Compute/disks/publicNetworkAccess",
                                          "value": "Disabled"
                                        }
                                      ]
                                    }
                                  }
                                },
                                "policyType": "Custom"
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "DiskNetworkAccess",
                              "resourceGroup": "[parameters('resourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "policyDefinitionId": {
                                    "value": "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess')]"
                                  },
                                  "policyDisplayName": {
                                    "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess'), '2021-06-01').displayName]"
                                  },
                                  "policyName": {
                                    "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess'), '2021-06-01').displayName]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "18059007592692951032"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "policyDefinitionId": {
                                      "type": "string"
                                    },
                                    "policyDisplayName": {
                                      "type": "string"
                                    },
                                    "policyName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/policyAssignments",
                                      "apiVersion": "2022-06-01",
                                      "name": "[parameters('policyName')]",
                                      "location": "[parameters('location')]",
                                      "identity": {
                                        "type": "SystemAssigned"
                                      },
                                      "properties": {
                                        "displayName": "[parameters('policyDisplayName')]",
                                        "policyDefinitionId": "[parameters('policyDefinitionId')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess')]"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('UserAssignedIdentity_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "name": {
                            "value": "[replace(parameters('userAssignedIdentityNamePrefix'), parameters('serviceName'), 'deployment')]"
                          },
                          "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject('value', parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities']), createObject('value', createObject()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "16458244474307002592"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "clientId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "principalId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "roleAssignments_deployment",
                        "count": "[length(range(0, length(variables('roleAssignments'))))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RoleAssignment_{0}_{1}', range(0, length(variables('roleAssignments')))[copyIndex()], parameters('timestamp'))]",
                      "subscriptionId": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].subscription]",
                      "resourceGroup": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].resourceGroup]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrincipalId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]"
                          },
                          "PrincipalType": {
                            "value": "ServicePrincipal"
                          },
                          "RoleDefinitionId": {
                            "value": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].roleDefinitionId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "12785629321959268271"
                            }
                          },
                          "parameters": {
                            "PrincipalId": {
                              "type": "string"
                            },
                            "PrincipalType": {
                              "type": "string"
                            },
                            "RoleDefinitionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                                "principalId": "[parameters('PrincipalId')]",
                                "principalType": "[parameters('PrincipalType')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Artifacts_{0}', parameters('timestamp'))]",
                      "subscriptionId": "[split(parameters('artifactsStorageAccountResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('artifactsStorageAccountResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "resourceGroupManagement": {
                            "value": "[parameters('resourceGroupManagement')]"
                          },
                          "serviceName": {
                            "value": "[parameters('serviceName')]"
                          },
                          "storageAccountName": {
                            "value": "[split(parameters('artifactsStorageAccountResourceId'), '/')[8]]"
                          },
                          "subscriptionId": {
                            "value": "[subscription().subscriptionId]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          },
                          "userAssignedIdentityNamePrefix": {
                            "value": "[parameters('userAssignedIdentityNamePrefix')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "6877301614888836259"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "resourceGroupManagement": {
                              "type": "string"
                            },
                            "serviceName": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "subscriptionId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string"
                            },
                            "userAssignedIdentityNamePrefix": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "name": "[replace(parameters('userAssignedIdentityNamePrefix'), parameters('serviceName'), 'artifacts')]",
                            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                              "name": "[guid(variables('name'), variables('roleDefinitionId'), resourceGroup().id)]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UAI_Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]",
                                "principalType": "ServicePrincipal"
                              },
                              "dependsOn": [
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UAI_Artifacts_{0}', parameters('timestamp')))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('UAI_Artifacts_{0}', parameters('timestamp'))]",
                              "subscriptionId": "[parameters('subscriptionId')]",
                              "resourceGroup": "[parameters('resourceGroupManagement')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[variables('name')]"
                                  },
                                  "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject('value', parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities']), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "16458244474307002592"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                                      "apiVersion": "2018-11-30",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]"
                                    }
                                  ],
                                  "outputs": {
                                    "clientId": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                                    },
                                    "principalId": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "userAssignedIdentityClientId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UAI_Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value]"
                            },
                            "userAssignedIdentityPrincipalId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UAI_Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]"
                            },
                            "userAssignedIdentityResourceId": {
                              "type": "string",
                              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UAI_Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('CustomerManagedKeys_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "environment": {
                            "value": "[parameters('environmentAbbreviation')]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "keyVaultNetworkInterfaceName": {
                            "value": "[parameters('keyVaultNetworkInterfaceName')]"
                          },
                          "keyVaultPrivateDnsZoneResourceId": {
                            "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                          },
                          "keyVaultPrivateEndpointName": {
                            "value": "[parameters('keyVaultPrivateEndpointName')]"
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "serviceName": {
                            "value": "[parameters('serviceName')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          },
                          "userAssignedIdentityNamePrefix": {
                            "value": "[parameters('userAssignedIdentityNamePrefix')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "16998966433222672309"
                            }
                          },
                          "parameters": {
                            "diskEncryptionKeyExpirationInDays": {
                              "type": "int",
                              "defaultValue": 30
                            },
                            "environment": {
                              "type": "string"
                            },
                            "keyVaultName": {
                              "type": "string"
                            },
                            "keyVaultNetworkInterfaceName": {
                              "type": "string"
                            },
                            "keyVaultPrivateEndpointName": {
                              "type": "string"
                            },
                            "keyVaultPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "serviceName": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string"
                            },
                            "userAssignedIdentityNamePrefix": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('keyVaultName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
                              "properties": {
                                "enabledForDeployment": false,
                                "enabledForDiskEncryption": true,
                                "enabledForTemplateDeployment": false,
                                "enablePurgeProtection": true,
                                "enableRbacAuthorization": true,
                                "enableSoftDelete": true,
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "defaultAction": "Deny",
                                  "ipRules": [],
                                  "virtualNetworkRules": []
                                },
                                "publicNetworkAccess": "Disabled",
                                "sku": {
                                  "family": "A",
                                  "name": "standard"
                                },
                                "softDeleteRetentionInDays": "[if(or(equals(parameters('environment'), 'dev'), equals(parameters('environment'), 'test')), 7, 90)]",
                                "tenantId": "[subscription().tenantId]"
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('keyVaultPrivateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('keyVaultNetworkInterfaceName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('keyVaultPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                                      "groupIds": [
                                        "vault"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultPrivateEndpointName'), parameters('keyVaultName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('keyVaultPrivateEndpointName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'DiskEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2022-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageEncryptionKey')]",
                              "properties": {
                                "attributes": {
                                  "enabled": true
                                },
                                "keySize": 4096,
                                "kty": "RSA",
                                "rotationPolicy": {
                                  "attributes": {
                                    "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                                  },
                                  "lifetimeActions": [
                                    {
                                      "action": {
                                        "type": "Notify"
                                      },
                                      "trigger": {
                                        "timeBeforeExpiry": "P10D"
                                      }
                                    },
                                    {
                                      "action": {
                                        "type": "Rotate"
                                      },
                                      "trigger": {
                                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('UAI_Encryption_{0}', parameters('timestamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[replace(parameters('userAssignedIdentityNamePrefix'), parameters('serviceName'), 'encryption')]"
                                  },
                                  "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject('value', parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities']), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "16458244474307002592"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                                      "apiVersion": "2018-11-30",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]"
                                    }
                                  ],
                                  "outputs": {
                                    "clientId": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                                    },
                                    "principalId": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('RoleAssignment_Encryption_{0}', parameters('timestamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "PrincipalId": {
                                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]"
                                  },
                                  "PrincipalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "RoleDefinitionId": {
                                    "value": "e147488a-f6f5-4113-8e2d-b22465e65bf6"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "12785629321959268271"
                                    }
                                  },
                                  "parameters": {
                                    "PrincipalId": {
                                      "type": "string"
                                    },
                                    "PrincipalType": {
                                      "type": "string"
                                    },
                                    "RoleDefinitionId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                                      "properties": {
                                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                                        "principalId": "[parameters('PrincipalId')]",
                                        "principalType": "[parameters('PrincipalType')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timestamp')))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "keyUriWithVersion": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
                            },
                            "keyVaultResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                            },
                            "keyVaultUri": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri]"
                            },
                            "storageKeyName": {
                              "type": "string",
                              "value": "StorageEncryptionKey"
                            },
                            "encryptionUserAssignedIdentityClientId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value]"
                            },
                            "encryptionUserAssignedIdentityPrincipalId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]"
                            },
                            "encryptionUserAssignedIdentityResourceId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('DiskEncryptionSet_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "diskEncryptionSetName": {
                            "value": "[parameters('diskEncryptionSetName')]"
                          },
                          "keyUrl": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.keyUriWithVersion.value]"
                          },
                          "keyVaultResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), createObject('value', parameters('tags')['Microsoft.Compute/diskEncryptionSets']), createObject('value', createObject()))]",
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "7288273953559068799"
                            }
                          },
                          "parameters": {
                            "diskEncryptionSetName": {
                              "type": "string"
                            },
                            "keyVaultResourceId": {
                              "type": "string"
                            },
                            "keyUrl": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/diskEncryptionSets",
                              "apiVersion": "2023-04-02",
                              "name": "[parameters('diskEncryptionSetName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "activeKey": {
                                  "sourceVault": {
                                    "id": "[parameters('keyVaultResourceId')]"
                                  },
                                  "keyUrl": "[parameters('keyUrl')]"
                                },
                                "encryptionType": "EncryptionAtRestWithPlatformAndCustomerKeys",
                                "rotationToLatestKeyVersionEnabled": true
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('RoleAssignment_Encryption_{0}', parameters('timestamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "PrincipalId": {
                                    "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')), '2023-04-02', 'full').identity.principalId]"
                                  },
                                  "PrincipalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "RoleDefinitionId": {
                                    "value": "e147488a-f6f5-4113-8e2d-b22465e65bf6"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "12785629321959268271"
                                    }
                                  },
                                  "parameters": {
                                    "PrincipalId": {
                                      "type": "string"
                                    },
                                    "PrincipalType": {
                                      "type": "string"
                                    },
                                    "RoleDefinitionId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                                      "properties": {
                                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                                        "principalId": "[parameters('PrincipalId')]",
                                        "principalType": "[parameters('PrincipalType')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('ManagementVirtualMachine_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "artifactsUri": {
                            "value": "[parameters('artifactsUri')]"
                          },
                          "azurePowerShellModuleMsiName": {
                            "value": "[parameters('azurePowerShellModuleMsiName')]"
                          },
                          "deploymentUserAssignedIdentityClientId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value]"
                          },
                          "deploymentUserAssignedIdentityResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
                          },
                          "diskEncryptionSetResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DiskEncryptionSet_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
                          },
                          "diskNamePrefix": {
                            "value": "[parameters('diskNamePrefix')]"
                          },
                          "diskSku": {
                            "value": "[parameters('diskSku')]"
                          },
                          "domainJoinPassword": {
                            "value": "[parameters('domainJoinPassword')]"
                          },
                          "domainJoinUserPrincipalName": {
                            "value": "[parameters('domainJoinUserPrincipalName')]"
                          },
                          "domainName": {
                            "value": "[parameters('domainName')]"
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "networkInterfaceNamePrefix": {
                            "value": "[parameters('networkInterfaceNamePrefix')]"
                          },
                          "networkName": {
                            "value": "[parameters('networkName')]"
                          },
                          "organizationalUnitPath": {
                            "value": "[parameters('organizationalUnitPath')]"
                          },
                          "securityLogAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('securityLogAnalyticsWorkspaceResourceId')]"
                          },
                          "serviceName": {
                            "value": "[parameters('serviceName')]"
                          },
                          "subnet": {
                            "value": "[split(parameters('subnetResourceId'), '/')[10]]"
                          },
                          "tagsNetworkInterfaces": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject('value', parameters('tags')['Microsoft.Network/networkInterfaces']), createObject('value', createObject()))]",
                          "tagsVirtualMachines": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject('value', parameters('tags')['Microsoft.Compute/virtualMachines']), createObject('value', createObject()))]",
                          "virtualMachineMonitoringAgent": {
                            "value": "[parameters('virtualMachineMonitoringAgent')]"
                          },
                          "virtualMachineNamePrefix": {
                            "value": "[parameters('virtualMachineNamePrefix')]"
                          },
                          "virtualMachinePassword": {
                            "value": "[parameters('virtualMachinePassword')]"
                          },
                          "virtualMachineUsername": {
                            "value": "[parameters('virtualMachineUsername')]"
                          },
                          "virtualNetwork": {
                            "value": "[variables('VirtualNetworkName')]"
                          },
                          "virtualNetworkResourceGroup": {
                            "value": "[variables('VirtualNetworkResourceGroupName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "14529054583899138328"
                            }
                          },
                          "parameters": {
                            "artifactsUri": {
                              "type": "string"
                            },
                            "azurePowerShellModuleMsiName": {
                              "type": "string"
                            },
                            "deploymentUserAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "deploymentUserAssignedIdentityResourceId": {
                              "type": "string"
                            },
                            "diskEncryptionSetResourceId": {
                              "type": "string"
                            },
                            "diskNamePrefix": {
                              "type": "string"
                            },
                            "diskSku": {
                              "type": "string"
                            },
                            "domainJoinPassword": {
                              "type": "securestring"
                            },
                            "domainJoinUserPrincipalName": {
                              "type": "string"
                            },
                            "domainName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "networkInterfaceNamePrefix": {
                              "type": "string"
                            },
                            "networkName": {
                              "type": "string"
                            },
                            "organizationalUnitPath": {
                              "type": "string"
                            },
                            "securityLogAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "serviceName": {
                              "type": "string"
                            },
                            "subnet": {
                              "type": "string"
                            },
                            "tagsNetworkInterfaces": {
                              "type": "object"
                            },
                            "tagsVirtualMachines": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "virtualNetwork": {
                              "type": "string"
                            },
                            "virtualNetworkResourceGroup": {
                              "type": "string"
                            },
                            "virtualMachineMonitoringAgent": {
                              "type": "string"
                            },
                            "virtualMachineNamePrefix": {
                              "type": "string"
                            },
                            "virtualMachinePassword": {
                              "type": "securestring"
                            },
                            "virtualMachineUsername": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "networkInterfaceName": "[replace(parameters('networkInterfaceNamePrefix'), parameters('serviceName'), 'mgt-vm')]",
                            "securitylogAnalyticsWorkspaceName": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[8], '')]",
                            "securityLogAnalyticsWorkspaceResourceGroupName": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[4], resourceGroup().name)]",
                            "securityLogAnalyticsWorkspaceSubscriptionId": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[2], subscription().subscriptionId)]",
                            "securityMonitoring": "[if(empty(parameters('securityLogAnalyticsWorkspaceResourceId')), false(), true())]",
                            "virtualMachineName": "[replace(replace(parameters('virtualMachineNamePrefix'), parameters('serviceName'), 'mgt'), parameters('networkName'), '')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2020-05-01",
                              "name": "[variables('networkInterfaceName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsNetworkInterfaces')]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig",
                                    "properties": {
                                      "privateIPAllocationMethod": "Dynamic",
                                      "subnet": {
                                        "id": "[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork'), parameters('subnet'))]"
                                      },
                                      "primary": true,
                                      "privateIPAddressVersion": "IPv4"
                                    }
                                  }
                                ],
                                "enableAcceleratedNetworking": false,
                                "enableIPForwarding": false
                              }
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2021-11-01",
                              "name": "[variables('virtualMachineName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "Standard_B2s"
                                },
                                "storageProfile": {
                                  "imageReference": {
                                    "publisher": "MicrosoftWindowsServer",
                                    "offer": "WindowsServer",
                                    "sku": "2019-datacenter-core-g2",
                                    "version": "latest"
                                  },
                                  "osDisk": {
                                    "deleteOption": "Delete",
                                    "osType": "Windows",
                                    "createOption": "FromImage",
                                    "caching": "None",
                                    "managedDisk": {
                                      "diskEncryptionSet": {
                                        "id": "[parameters('diskEncryptionSetResourceId')]"
                                      },
                                      "storageAccountType": "[parameters('diskSku')]"
                                    },
                                    "name": "[replace(parameters('diskNamePrefix'), parameters('serviceName'), 'mgt-vm')]"
                                  },
                                  "dataDisks": []
                                },
                                "osProfile": {
                                  "computerName": "[variables('virtualMachineName')]",
                                  "adminUsername": "[parameters('virtualMachineUsername')]",
                                  "adminPassword": "[parameters('virtualMachinePassword')]",
                                  "windowsConfiguration": {
                                    "provisionVMAgent": true,
                                    "enableAutomaticUpdates": false
                                  },
                                  "secrets": [],
                                  "allowExtensionOperations": true
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
                                      "properties": {
                                        "deleteOption": "Delete"
                                      }
                                    }
                                  ]
                                },
                                "securityProfile": {
                                  "uefiSettings": {
                                    "secureBootEnabled": true,
                                    "vTpmEnabled": true
                                  },
                                  "securityType": "TrustedLaunch",
                                  "encryptionAtHost": true
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": false
                                  }
                                },
                                "licenseType": "Windows_Server"
                              },
                              "identity": {
                                "type": "SystemAssigned, UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('deploymentUserAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', variables('virtualMachineName'), 'IaaSAntimalware')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.Security",
                                "type": "IaaSAntimalware",
                                "typeHandlerVersion": "1.3",
                                "autoUpgradeMinorVersion": true,
                                "enableAutomaticUpgrade": false,
                                "settings": {
                                  "AntimalwareEnabled": true,
                                  "RealtimeProtectionEnabled": "true",
                                  "ScheduledScanSettings": {
                                    "isEnabled": "true",
                                    "day": "7",
                                    "time": "120",
                                    "scanType": "Quick"
                                  },
                                  "Exclusions": {}
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', variables('virtualMachineName'), 'GuestAttestation')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                                "type": "GuestAttestation",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "AttestationConfig": {
                                    "MaaSettings": {
                                      "maaEndpoint": "",
                                      "maaTenantName": "GuestAttestation"
                                    },
                                    "AscSettings": {
                                      "ascReportingEndpoint": "",
                                      "ascReportingFrequency": ""
                                    },
                                    "useCustomToken": "false",
                                    "disableAlerts": "false"
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]"
                              ]
                            },
                            {
                              "condition": "[and(variables('securityMonitoring'), equals(parameters('virtualMachineMonitoringAgent'), 'LogAnalyticsAgent'))]",
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', variables('virtualMachineName'), 'MicrosoftmonitoringAgent')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "publisher": "Microsoft.EnterpriseCloud.monitoring",
                                "type": "MicrosoftmonitoringAgent",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "workspaceId": "[if(variables('securityMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('securityLogAnalyticsWorkspaceSubscriptionId'), variables('securityLogAnalyticsWorkspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', variables('securitylogAnalyticsWorkspaceName')), '2022-10-01').customerId, null())]"
                                },
                                "protectedSettings": {
                                  "workspaceKey": "[if(variables('securityMonitoring'), listKeys(parameters('securityLogAnalyticsWorkspaceResourceId'), '2021-06-01').primarySharedKey, null())]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('virtualMachineName'), 'IaaSAntimalware')]",
                                "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2019-07-01",
                              "name": "[format('{0}/{1}', variables('virtualMachineName'), 'JsonADDomainExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "forceUpdateTag": "[parameters('timestamp')]",
                                "publisher": "Microsoft.Compute",
                                "type": "JsonADDomainExtension",
                                "typeHandlerVersion": "1.3",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "Name": "[parameters('domainName')]",
                                  "Options": "3",
                                  "OUPath": "[parameters('organizationalUnitPath')]",
                                  "Restart": "true",
                                  "User": "[parameters('domainJoinUserPrincipalName')]"
                                },
                                "protectedSettings": {
                                  "Password": "[parameters('domainJoinPassword')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('CSE_InstallAzurePowerShellAzModule_{0}', parameters('timestamp')))]",
                                "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('CSE_InstallAzurePowerShellAzModule_{0}', parameters('timestamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileUris": {
                                    "value": [
                                      "[format('{0}{1}', parameters('artifactsUri'), parameters('azurePowerShellModuleMsiName'))]",
                                      "[format('{0}Install-AzurePowerShellAzModule.ps1', parameters('artifactsUri'))]"
                                    ]
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "parameters": {
                                    "value": "[format('-Installer {0}', parameters('azurePowerShellModuleMsiName'))]"
                                  },
                                  "scriptFileName": {
                                    "value": "Install-AzurePowerShellAzModule.ps1"
                                  },
                                  "tags": {
                                    "value": "[parameters('tagsVirtualMachines')]"
                                  },
                                  "virtualMachineName": {
                                    "value": "[variables('virtualMachineName')]"
                                  },
                                  "userAssignedIdentityClientId": {
                                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "5322300289308830902"
                                    }
                                  },
                                  "parameters": {
                                    "fileUris": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "securestring"
                                    },
                                    "scriptFileName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "timestamp": {
                                      "type": "string",
                                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                                    },
                                    "userAssignedIdentityClientId": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-03-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "Microsoft.Compute",
                                        "type": "CustomScriptExtension",
                                        "typeHandlerVersion": "1.10",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                          "timestamp": "[parameters('timestamp')]"
                                        },
                                        "protectedSettings": {
                                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                          "fileUris": "[parameters('fileUris')]",
                                          "managedIdentity": {
                                            "clientId": "[parameters('userAssignedIdentityClientId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "value": {
                                      "type": "object",
                                      "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('virtualMachineName'), 'MicrosoftmonitoringAgent')]",
                                "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "Name": {
                              "type": "string",
                              "value": "[variables('virtualMachineName')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DiskEncryptionSet_{0}', parameters('timestamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Validations_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}Get-Validations.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "parameters": {
                            "value": "[format('-ActiveDirectorySolution {0} -CpuCountMax {1} -CpuCountMin {2} -DomainName {3} -Environment {4} -ImageDefinitionResourceId {5} -Location {6} -SessionHostCount {7} -StorageService {8} -SubscriptionId {9} -TenantId {10} -UserAssignedIdentityClientId {11} -VirtualMachineSize {12} -VirtualNetworkName {13} -VirtualNetworkResourceGroupName {14} -WorkspaceFeedName {15} -WorkspaceResourceGroupName {16}', parameters('activeDirectorySolution'), variables('CpuCountMax'), variables('CpuCountMin'), if(empty(parameters('domainName')), 'NotApplicable', parameters('domainName')), environment().name, if(empty(parameters('imageDefinitionResourceId')), 'NotApplicable', parameters('imageDefinitionResourceId')), parameters('locationVirtualMachines'), parameters('sessionHostCount'), parameters('storageService'), subscription().subscriptionId, tenant().tenantId, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value, parameters('virtualMachineSize'), variables('VirtualNetworkName'), variables('VirtualNetworkResourceGroupName'), parameters('workspaceFeedName'), parameters('resourceGroupFeedWorkspace'))]"
                          },
                          "scriptFileName": {
                            "value": "Get-Validations.ps1"
                          },
                          "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject('value', parameters('tags')['Microsoft.Compute/virtualMachines']), createObject('value', createObject()))]",
                          "userAssignedIdentityClientId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value]"
                          },
                          "virtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('ManagementVirtualMachine_{0}', parameters('timestamp'))), '2022-09-01').outputs.Name.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "5322300289308830902"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('ManagementVirtualMachine_{0}', parameters('timestamp')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Monitoring_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "dataCollectionRuleName": {
                            "value": "[parameters('dataCollectionRuleName')]"
                          },
                          "hostPoolName": {
                            "value": "[parameters('hostPoolName')]"
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('logAnalyticsWorkspaceName')]"
                          },
                          "logAnalyticsWorkspaceRetention": {
                            "value": "[parameters('logAnalyticsWorkspaceRetention')]"
                          },
                          "logAnalyticsWorkspaceSku": {
                            "value": "[parameters('logAnalyticsWorkspaceSku')]"
                          },
                          "resourceGroupControlPlane": {
                            "value": "[parameters('resourceGroupControlPlane')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualMachineMonitoringAgent": {
                            "value": "[parameters('virtualMachineMonitoringAgent')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "17373355811620539729"
                            }
                          },
                          "parameters": {
                            "dataCollectionRuleName": {
                              "type": "string"
                            },
                            "hostPoolName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceName": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceRetention": {
                              "type": "int"
                            },
                            "logAnalyticsWorkspaceSku": {
                              "type": "string"
                            },
                            "resourceGroupControlPlane": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineMonitoringAgent": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "WindowsEvents": [
                              {
                                "name": "Microsoft-FSLogix-Apps/Operational",
                                "types": [
                                  {
                                    "eventType": "Error"
                                  },
                                  {
                                    "eventType": "Warning"
                                  },
                                  {
                                    "eventType": "Information"
                                  }
                                ]
                              },
                              {
                                "name": "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational",
                                "types": [
                                  {
                                    "eventType": "Error"
                                  },
                                  {
                                    "eventType": "Warning"
                                  },
                                  {
                                    "eventType": "Information"
                                  }
                                ]
                              },
                              {
                                "name": "System",
                                "types": [
                                  {
                                    "eventType": "Error"
                                  },
                                  {
                                    "eventType": "Warning"
                                  }
                                ]
                              },
                              {
                                "name": "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Admin",
                                "types": [
                                  {
                                    "eventType": "Error"
                                  },
                                  {
                                    "eventType": "Warning"
                                  },
                                  {
                                    "eventType": "Information"
                                  }
                                ]
                              },
                              {
                                "name": "Microsoft-FSLogix-Apps/Admin",
                                "types": [
                                  {
                                    "eventType": "Error"
                                  },
                                  {
                                    "eventType": "Warning"
                                  },
                                  {
                                    "eventType": "Information"
                                  }
                                ]
                              },
                              {
                                "name": "Application",
                                "types": [
                                  {
                                    "eventType": "Error"
                                  },
                                  {
                                    "eventType": "Warning"
                                  }
                                ]
                              }
                            ],
                            "WindowsPerformanceCounters": [
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Disk Transfers/sec"
                              },
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Current Disk Queue Length"
                              },
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Disk Reads/sec"
                              },
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "% Free Space"
                              },
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Avg. Disk sec/Read"
                              },
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Disk Writes/sec"
                              },
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Avg. Disk sec/Write"
                              },
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Free Megabytes"
                              },
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "C:",
                                "intervalSeconds": 60,
                                "counterName": "% Free Space"
                              },
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "C:",
                                "intervalSeconds": 30,
                                "counterName": "Avg. Disk Queue Length"
                              },
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "C:",
                                "intervalSeconds": 60,
                                "counterName": "Avg. Disk sec/Transfer"
                              },
                              {
                                "objectName": "LogicalDisk",
                                "instanceName": "C:",
                                "intervalSeconds": 30,
                                "counterName": "Current Disk Queue Length"
                              },
                              {
                                "objectName": "Memory",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "% Committed Bytes In Use"
                              },
                              {
                                "objectName": "Memory",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Available MBytes"
                              },
                              {
                                "objectName": "Memory",
                                "instanceName": "*",
                                "intervalSeconds": 30,
                                "counterName": "Available Mbytes"
                              },
                              {
                                "objectName": "Memory",
                                "instanceName": "*",
                                "intervalSeconds": 30,
                                "counterName": "Page Faults/sec"
                              },
                              {
                                "objectName": "Memory",
                                "instanceName": "*",
                                "intervalSeconds": 30,
                                "counterName": "Pages/sec"
                              },
                              {
                                "objectName": "Network Adapter",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Bytes Sent/sec"
                              },
                              {
                                "objectName": "Network Adapter",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Bytes Received/sec"
                              },
                              {
                                "objectName": "Network Interface",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Bytes Total/sec"
                              },
                              {
                                "objectName": "PhysicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Avg. Disk Bytes/Transfer"
                              },
                              {
                                "objectName": "PhysicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Avg. Disk Bytes/Read"
                              },
                              {
                                "objectName": "PhysicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Avg. Disk sec/Write"
                              },
                              {
                                "objectName": "PhysicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Avg. Disk sec/Read"
                              },
                              {
                                "objectName": "PhysicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Avg. Disk Bytes/Write"
                              },
                              {
                                "objectName": "PhysicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Avg. Disk sec/Transfer"
                              },
                              {
                                "objectName": "PhysicalDisk",
                                "instanceName": "*",
                                "intervalSeconds": 30,
                                "counterName": "Avg. Disk Queue Length"
                              },
                              {
                                "objectName": "Process",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "IO Write Operations/sec"
                              },
                              {
                                "objectName": "Process",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "IO Read Operations/sec"
                              },
                              {
                                "objectName": "Process",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Thread Count"
                              },
                              {
                                "objectName": "Process",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "% User Time"
                              },
                              {
                                "objectName": "Process",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Working Set"
                              },
                              {
                                "objectName": "Process",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "% Processor Time"
                              },
                              {
                                "objectName": "Processor",
                                "instanceName": "_Total",
                                "intervalSeconds": 60,
                                "counterName": "% Processor Time"
                              },
                              {
                                "objectName": "Processor Information",
                                "instanceName": "_Total",
                                "intervalSeconds": 30,
                                "counterName": "% Processor Time"
                              },
                              {
                                "objectName": "RemoteFX Graphics",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Frames Skipped/Second - Insufficient Server Resources"
                              },
                              {
                                "objectName": "RemoteFX Graphics",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Average Encoding Time"
                              },
                              {
                                "objectName": "RemoteFX Graphics",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Frames Skipped/Second - Insufficient Client Resources"
                              },
                              {
                                "objectName": "RemoteFX Graphics",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Frames Skipped/Second - Insufficient Network Resources"
                              },
                              {
                                "objectName": "RemoteFX Network",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Current UDP Bandwidth"
                              },
                              {
                                "objectName": "RemoteFX Network",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Current TCP Bandwidth"
                              },
                              {
                                "objectName": "RemoteFX Network",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Current TCP RTT"
                              },
                              {
                                "objectName": "RemoteFX Network",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Current UDP RTT"
                              },
                              {
                                "objectName": "System",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Processor Queue Length"
                              },
                              {
                                "objectName": "Terminal Services",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Inactive Sessions"
                              },
                              {
                                "objectName": "Terminal Services",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Total Sessions"
                              },
                              {
                                "objectName": "Terminal Services",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "Active Sessions"
                              },
                              {
                                "objectName": "Terminal Services Session",
                                "instanceName": "*",
                                "intervalSeconds": 60,
                                "counterName": "% Processor Time"
                              },
                              {
                                "objectName": "User Input Delay per Process",
                                "instanceName": "*",
                                "intervalSeconds": 30,
                                "counterName": "Max Input Delay"
                              },
                              {
                                "objectName": "User Input Delay per Session",
                                "instanceName": "*",
                                "intervalSeconds": 30,
                                "counterName": "Max Input Delay"
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2021-06-01",
                              "name": "[parameters('logAnalyticsWorkspaceName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('tags')['Microsoft.OperationalInsights/workspaces'], createObject()))]",
                              "properties": {
                                "sku": {
                                  "name": "[parameters('logAnalyticsWorkspaceSku')]"
                                },
                                "retentionInDays": "[parameters('logAnalyticsWorkspaceRetention')]",
                                "workspaceCapping": {
                                  "dailyQuotaGb": -1
                                },
                                "publicNetworkAccessForIngestion": "Enabled",
                                "publicNetworkAccessForQuery": "Enabled"
                              }
                            },
                            {
                              "copy": {
                                "name": "windowsEvents",
                                "count": "[length(variables('WindowsEvents'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[equals(parameters('virtualMachineMonitoringAgent'), 'LogAnalyticsAgent')]",
                              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), format('WindowsEvent{0}', copyIndex()))]",
                              "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('tags')['Microsoft.OperationalInsights/workspaces'], createObject()))]",
                              "kind": "WindowsEvent",
                              "properties": {
                                "eventLogName": "[variables('WindowsEvents')[copyIndex()].name]",
                                "eventTypes": "[variables('WindowsEvents')[copyIndex()].types]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "windowsPerformanceCounters",
                                "count": "[length(variables('WindowsPerformanceCounters'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[equals(parameters('virtualMachineMonitoringAgent'), 'LogAnalyticsAgent')]",
                              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), format('WindowsPerformanceCounter{0}', copyIndex()))]",
                              "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('tags')['Microsoft.OperationalInsights/workspaces'], createObject()))]",
                              "kind": "WindowsPerformanceCounter",
                              "properties": {
                                "objectName": "[variables('WindowsPerformanceCounters')[copyIndex()].objectName]",
                                "instanceName": "[variables('WindowsPerformanceCounters')[copyIndex()].instanceName]",
                                "intervalSeconds": "[variables('WindowsPerformanceCounters')[copyIndex()].intervalSeconds]",
                                "counterName": "[variables('WindowsPerformanceCounters')[copyIndex()].counterName]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                                "windowsEvents"
                              ]
                            },
                            {
                              "condition": "[equals(parameters('virtualMachineMonitoringAgent'), 'AzureMonitorAgent')]",
                              "type": "Microsoft.Insights/dataCollectionRules",
                              "apiVersion": "2022-06-01",
                              "name": "[parameters('dataCollectionRuleName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Insights/dataCollectionRules'), parameters('tags')['Microsoft.Insights/dataCollectionRules'], createObject()))]",
                              "kind": "Windows",
                              "properties": {
                                "dataSources": {
                                  "performanceCounters": [
                                    {
                                      "streams": [
                                        "Microsoft-Perf"
                                      ],
                                      "samplingFrequencyInSeconds": 30,
                                      "counterSpecifiers": [
                                        "\\LogicalDisk(C:)\\Avg. Disk Queue Length",
                                        "\\LogicalDisk(C:)\\Current Disk Queue Length",
                                        "\\Memory\\Available Mbytes",
                                        "\\Memory\\Page Faults/sec",
                                        "\\Memory\\Pages/sec",
                                        "\\Memory\\% Committed Bytes In Use",
                                        "\\PhysicalDisk(*)\\Avg. Disk Queue Length",
                                        "\\PhysicalDisk(*)\\Avg. Disk sec/Read",
                                        "\\PhysicalDisk(*)\\Avg. Disk sec/Transfer",
                                        "\\PhysicalDisk(*)\\Avg. Disk sec/Write",
                                        "\\Processor Information(_Total)\\% Processor Time",
                                        "\\User Input Delay per Process(*)\\Max Input Delay",
                                        "\\User Input Delay per Session(*)\\Max Input Delay",
                                        "\\RemoteFX Network(*)\\Current TCP RTT",
                                        "\\RemoteFX Network(*)\\Current UDP Bandwidth"
                                      ],
                                      "name": "perfCounterDataSource10"
                                    },
                                    {
                                      "streams": [
                                        "Microsoft-Perf"
                                      ],
                                      "samplingFrequencyInSeconds": 60,
                                      "counterSpecifiers": [
                                        "\\LogicalDisk(C:)\\% Free Space",
                                        "\\LogicalDisk(C:)\\Avg. Disk sec/Transfer",
                                        "\\Terminal Services(*)\\Active Sessions",
                                        "\\Terminal Services(*)\\Inactive Sessions",
                                        "\\Terminal Services(*)\\Total Sessions"
                                      ],
                                      "name": "perfCounterDataSource30"
                                    }
                                  ],
                                  "windowsEventLogs": [
                                    {
                                      "streams": [
                                        "Microsoft-Event"
                                      ],
                                      "xPathQueries": [
                                        "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Admin!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                        "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                        "System!*",
                                        "Microsoft-FSLogix-Apps/Operational!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                        "Application!*[System[(Level=2 or Level=3)]]",
                                        "Microsoft-FSLogix-Apps/Admin!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]"
                                      ],
                                      "name": "eventLogsDataSource"
                                    }
                                  ]
                                },
                                "destinations": {
                                  "logAnalytics": [
                                    {
                                      "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                                      "name": "la-workspace"
                                    }
                                  ]
                                },
                                "dataFlows": [
                                  {
                                    "streams": [
                                      "Microsoft-Perf",
                                      "Microsoft-Event"
                                    ],
                                    "destinations": [
                                      "la-workspace"
                                    ]
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                            },
                            "dataCollectionRuleResourceId": {
                              "type": "string",
                              "value": "[if(equals(parameters('virtualMachineMonitoringAgent'), 'AzureMonitorAgent'), resourceId('Microsoft.Insights/dataCollectionRules', parameters('dataCollectionRuleName')), '')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[or(parameters('scalingTool'), equals(parameters('fslogixStorageService'), 'AzureFiles Premium'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('AutomationAccount_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "automationAccountDiagnosticSettingName": {
                            "value": "[parameters('automationAccountDiagnosticSettingName')]"
                          },
                          "automationAccountName": {
                            "value": "[parameters('automationAccountName')]"
                          },
                          "automationAccountNetworkInterfaceName": {
                            "value": "[parameters('automationAccountNetworkInterfaceName')]"
                          },
                          "automationAccountPrivateDnsZoneResourceId": {
                            "value": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
                          },
                          "automationAccountPrivateEndpointName": {
                            "value": "[parameters('automationAccountPrivateEndpointName')]"
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "logAnalyticsWorkspaceResourceId": "[if(parameters('enableMonitoring'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Monitoring_{0}', parameters('timestamp'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value), createObject('value', ''))]",
                          "monitoring": {
                            "value": "[parameters('enableMonitoring')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": "[if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), createObject('value', parameters('tags')['Microsoft.Automation/automationAccounts']), createObject('value', createObject()))]",
                          "virtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('ManagementVirtualMachine_{0}', parameters('timestamp'))), '2022-09-01').outputs.Name.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "13848362074560112397"
                            }
                          },
                          "parameters": {
                            "automationAccountDiagnosticSettingName": {
                              "type": "string"
                            },
                            "automationAccountName": {
                              "type": "string"
                            },
                            "automationAccountNetworkInterfaceName": {
                              "type": "string"
                            },
                            "automationAccountPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "automationAccountPrivateEndpointName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "monitoring": {
                              "type": "bool"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Automation/automationAccounts",
                              "apiVersion": "2021-06-22",
                              "name": "[parameters('automationAccountName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject())]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "sku": {
                                  "name": "Free"
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('automationAccountPrivateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('automationAccountNetworkInterfaceName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('automationAccountPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                                      "groupIds": [
                                        "DSCAndHybridWorker"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('automationAccountPrivateEndpointName'), 'default')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[replace(split(parameters('automationAccountPrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('automationAccountPrivateEndpointName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups",
                              "apiVersion": "2022-08-08",
                              "name": "[format('{0}/{1}', parameters('automationAccountName'), 'Scaling Tool')]",
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups/hybridRunbookWorkers",
                              "apiVersion": "2022-08-08",
                              "name": "[format('{0}/{1}/{2}', parameters('automationAccountName'), 'Scaling Tool', guid(resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Scaling Tool')))]",
                              "properties": {
                                "vmResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Scaling Tool')]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'HybridWorkerForWindows')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "publisher": "Microsoft.Azure.Automation.HybridWorker",
                                "type": "HybridWorkerForWindows",
                                "typeHandlerVersion": "1.1",
                                "autoUpgradeMinorVersion": true,
                                "enableAutomaticUpgrade": true,
                                "settings": {
                                  "AutomationAccountURL": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2021-06-22').automationHybridServiceUrl]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('monitoring')]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2017-05-01-preview",
                              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('automationAccountName'))]",
                              "name": "[parameters('automationAccountDiagnosticSettingName')]",
                              "properties": {
                                "logs": [
                                  {
                                    "category": "DscNodeStatus",
                                    "enabled": true
                                  },
                                  {
                                    "category": "JobLogs",
                                    "enabled": true
                                  },
                                  {
                                    "category": "JobStreams",
                                    "enabled": true
                                  }
                                ],
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "hybridRunbookWorkerGroupName": {
                              "type": "string",
                              "value": "Scaling Tool"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Monitoring_{0}', parameters('timestamp')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('ManagementVirtualMachine_{0}', parameters('timestamp')))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('recoveryServices'), or(and(and(contains(parameters('activeDirectorySolution'), 'DomainServices'), contains(parameters('hostPoolType'), 'Pooled')), contains(parameters('fslogixStorageService'), 'AzureFiles')), contains(parameters('hostPoolType'), 'Personal')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RecoveryServicesVault_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "azureBlobsPrivateDnsZoneResourceId": {
                            "value": "[parameters('azureBlobsPrivateDnsZoneResourceId')]"
                          },
                          "fslogix": {
                            "value": "[parameters('fslogix')]"
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "azureQueueStoragePrivateDnsZoneResourceId": {
                            "value": "[parameters('azureQueueStoragePrivateDnsZoneResourceId')]"
                          },
                          "recoveryServicesPrivateDnsZoneResourceId": {
                            "value": "[parameters('recoveryServicesPrivateDnsZoneResourceId')]"
                          },
                          "recoveryServicesVaultName": {
                            "value": "[parameters('recoveryServicesVaultName')]"
                          },
                          "recoveryServicesVaultNetworkInterfaceName": {
                            "value": "[parameters('recoveryServicesVaultNetworkInterfaceName')]"
                          },
                          "recoveryServicesVaultPrivateEndpointName": {
                            "value": "[parameters('recoveryServicesVaultPrivateEndpointName')]"
                          },
                          "storageService": {
                            "value": "[parameters('storageService')]"
                          },
                          "subnetId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "timeZone": {
                            "value": "[parameters('timeZone')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "6575468535502650100"
                            }
                          },
                          "parameters": {
                            "azureBlobsPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "azureQueueStoragePrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "fslogix": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "recoveryServicesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "recoveryServicesVaultName": {
                              "type": "string"
                            },
                            "recoveryServicesVaultNetworkInterfaceName": {
                              "type": "string"
                            },
                            "recoveryServicesVaultPrivateEndpointName": {
                              "type": "string"
                            },
                            "storageService": {
                              "type": "string"
                            },
                            "subnetId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timeZone": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults",
                              "apiVersion": "2022-03-01",
                              "name": "[parameters('recoveryServicesVaultName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), parameters('tags')['Microsoft.RecoveryServices/vaults'], createObject())]",
                              "sku": {
                                "name": "RS0",
                                "tier": "Standard"
                              },
                              "properties": {}
                            },
                            {
                              "condition": "[and(parameters('fslogix'), equals(parameters('storageService'), 'AzureFiles'))]",
                              "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/{1}', parameters('recoveryServicesVaultName'), 'AvdPolicyStorage')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), parameters('tags')['Microsoft.RecoveryServices/vaults'], createObject())]",
                              "properties": {
                                "backupManagementType": "AzureStorage",
                                "schedulePolicy": {
                                  "scheduleRunFrequency": "Daily",
                                  "scheduleRunTimes": [
                                    "23:00"
                                  ],
                                  "schedulePolicyType": "SimpleSchedulePolicy"
                                },
                                "retentionPolicy": {
                                  "retentionPolicyType": "LongTermRetentionPolicy",
                                  "dailySchedule": {
                                    "retentionTimes": [
                                      "23:00"
                                    ],
                                    "retentionDuration": {
                                      "count": 30,
                                      "durationType": "Days"
                                    }
                                  }
                                },
                                "timeZone": "[parameters('timeZone')]",
                                "workLoadType": "AzureFileShare"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                              ]
                            },
                            {
                              "condition": "[not(parameters('fslogix'))]",
                              "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/{1}', parameters('recoveryServicesVaultName'), 'AvdPolicyVm')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), parameters('tags')['Microsoft.RecoveryServices/vaults'], createObject())]",
                              "properties": {
                                "backupManagementType": "AzureIaasVM",
                                "instantRpRetentionRangeInDays": 2,
                                "policyType": "V2",
                                "retentionPolicy": {
                                  "retentionPolicyType": "LongTermRetentionPolicy",
                                  "dailySchedule": {
                                    "retentionTimes": [
                                      "23:00"
                                    ],
                                    "retentionDuration": {
                                      "count": 30,
                                      "durationType": "Days"
                                    }
                                  }
                                },
                                "schedulePolicy": {
                                  "schedulePolicyType": "SimpleSchedulePolicyV2",
                                  "scheduleRunFrequency": "Daily",
                                  "dailySchedule": {
                                    "scheduleRunTimes": [
                                      "23:00"
                                    ]
                                  }
                                },
                                "timeZone": "[parameters('timeZone')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('recoveryServicesVaultPrivateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('recoveryServicesVaultNetworkInterfaceName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('recoveryServicesVaultPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]",
                                      "groupIds": [
                                        "AzureBackup"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', parameters('recoveryServicesVaultPrivateEndpointName'), parameters('recoveryServicesVaultName'))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[replace(parameters('recoveryServicesPrivateDnsZoneResourceId'), '.', '-')]",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('recoveryServicesPrivateDnsZoneResourceId')]"
                                    }
                                  },
                                  {
                                    "name": "[replace(parameters('azureQueueStoragePrivateDnsZoneResourceId'), '.', '-')]",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('azureQueueStoragePrivateDnsZoneResourceId')]"
                                    }
                                  },
                                  {
                                    "name": "[replace(parameters('azureBlobsPrivateDnsZoneResourceId'), '.', '-')]",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('azureBlobsPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('recoveryServicesVaultPrivateEndpointName'))]",
                                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "artifactsUserAssignedIdentityClientId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('artifactsStorageAccountResourceId'), '/')[2], split(parameters('artifactsStorageAccountResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.userAssignedIdentityClientId.value]"
                    },
                    "artifactsUserAssignedIdentityPrincipalId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('artifactsStorageAccountResourceId'), '/')[2], split(parameters('artifactsStorageAccountResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value]"
                    },
                    "artifactsUserAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('artifactsStorageAccountResourceId'), '/')[2], split(parameters('artifactsStorageAccountResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
                    },
                    "dataCollectionRuleResourceId": {
                      "type": "string",
                      "value": "[if(parameters('enableMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Monitoring_{0}', parameters('timestamp'))), '2022-09-01').outputs.dataCollectionRuleResourceId.value, '')]"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value]"
                    },
                    "deploymentUserAssignedIdentityPrincipalId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]"
                    },
                    "deploymentUserAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DiskEncryptionSet_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "encryptionUserAssignedIdentityClientId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.encryptionUserAssignedIdentityClientId.value]"
                    },
                    "encryptionUserAssignedIdentityPrincipalId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.encryptionUserAssignedIdentityPrincipalId.value]"
                    },
                    "encryptionUserAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.encryptionUserAssignedIdentityResourceId.value]"
                    },
                    "existingFeedWorkspace": {
                      "type": "bool",
                      "value": "[if(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.existingWorkspace, 'true'), true(), false())]"
                    },
                    "hybridRunbookWorkerGroupName": {
                      "type": "string",
                      "value": "[if(or(parameters('scalingTool'), equals(parameters('fslogixStorageService'), 'AzureFiles Premium')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('AutomationAccount_{0}', parameters('timestamp'))), '2022-09-01').outputs.hybridRunbookWorkerGroupName.value, '')]"
                    },
                    "keyVaultUri": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.keyVaultUri.value]"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "value": "[if(parameters('enableMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Monitoring_{0}', parameters('timestamp'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value, '')]"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageKeyName.value]"
                    },
                    "validateAcceleratedNetworking": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.acceleratedNetworking]"
                    },
                    "validateANFDnsServers": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.anfDnsServers]"
                    },
                    "validateANFfActiveDirectory": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.anfActiveDirectory]"
                    },
                    "validateANFSubnetId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.anfSubnetId]"
                    },
                    "validateAvailabilityZones": {
                      "type": "array",
                      "value": "[if(equals(parameters('availability'), 'AvailabilityZones'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.availabilityZones, createArray('1'))]"
                    },
                    "virtualMachineName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('ManagementVirtualMachine_{0}', parameters('timestamp'))), '2022-09-01').outputs.Name.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp')))]",
                "rgs"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Hub_{0}', parameters('timestamp'))]",
              "subscriptionId": "[split(parameters('hubSubnetResourceId'), '/')[2]]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "existingWorkspace": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.existingFeedWorkspace.value]"
                  },
                  "globalWorkspacePrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.avdGlobalPrivateDnsZoneName)]"
                  },
                  "hubSubnetResourceId": {
                    "value": "[parameters('hubSubnetResourceId')]"
                  },
                  "resourceGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupGlobalWorkspace]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "workspaceGlobalName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceGlobalName]"
                  },
                  "workspaceGlobalNetworkInterfaceName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceGlobalNetworkInterfaceName]"
                  },
                  "workspaceGlobalPrivateEndpointName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceGlobalPrivateEndpointName]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "7007581849220022853"
                    }
                  },
                  "parameters": {
                    "existingWorkspace": {
                      "type": "bool"
                    },
                    "globalWorkspacePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "hubSubnetResourceId": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "workspaceGlobalName": {
                      "type": "string"
                    },
                    "workspaceGlobalNetworkInterfaceName": {
                      "type": "string"
                    },
                    "workspaceGlobalPrivateEndpointName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[not(parameters('existingWorkspace'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('SharedServices_VirtualNetwork_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[split(parameters('hubSubnetResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[split(parameters('hubSubnetResourceId'), '/')[8]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "8343323275640555439"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2023-06-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[not(parameters('existingWorkspace'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('ResourceGroup_WorkspaceGlobal_{0}', parameters('timestamp'))]",
                      "subscriptionId": "[split(parameters('hubSubnetResourceId'), '/')[2]]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": "[if(not(parameters('existingWorkspace')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hubSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('SharedServices_VirtualNetwork_{0}', parameters('timestamp'))), '2022-09-01').outputs.location.value), createObject('value', ''))]",
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "tags": {
                            "value": {}
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "14500695625135566681"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "resourceGroupName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/resourceGroups",
                              "apiVersion": "2020-10-01",
                              "name": "[parameters('resourceGroupName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Resources/resourceGroups'), parameters('tags')['Microsoft.Resources/resourceGroups'], createObject())]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hubSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('SharedServices_VirtualNetwork_{0}', parameters('timestamp')))]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('existingWorkspace'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('WorkspaceGlobal_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "globalWorkspacePrivateDnsZoneResourceId": {
                            "value": "[parameters('globalWorkspacePrivateDnsZoneResourceId')]"
                          },
                          "location": "[if(not(parameters('existingWorkspace')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hubSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('SharedServices_VirtualNetwork_{0}', parameters('timestamp'))), '2022-09-01').outputs.location.value), createObject('value', ''))]",
                          "subnetResourceId": {
                            "value": "[parameters('hubSubnetResourceId')]"
                          },
                          "workspaceGlobalName": {
                            "value": "[parameters('workspaceGlobalName')]"
                          },
                          "workspaceGlobalNetworkInterfaceName": {
                            "value": "[parameters('workspaceGlobalNetworkInterfaceName')]"
                          },
                          "workspaceGlobalPrivateEndpointName": {
                            "value": "[parameters('workspaceGlobalPrivateEndpointName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "7495532129610077876"
                            }
                          },
                          "parameters": {
                            "globalWorkspacePrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "workspaceGlobalName": {
                              "type": "string"
                            },
                            "workspaceGlobalNetworkInterfaceName": {
                              "type": "string"
                            },
                            "workspaceGlobalPrivateEndpointName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DesktopVirtualization/workspaces",
                              "apiVersion": "2023-09-05",
                              "name": "[parameters('workspaceGlobalName')]",
                              "location": "[parameters('location')]",
                              "tags": {},
                              "properties": {}
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('workspaceGlobalPrivateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": {},
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('workspaceGlobalNetworkInterfaceName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('workspaceGlobalPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceGlobalName'))]",
                                      "groupIds": [
                                        "global"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceGlobalName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('workspaceGlobalPrivateEndpointName'), 'default')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[replace(split(parameters('globalWorkspacePrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('globalWorkspacePrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('workspaceGlobalPrivateEndpointName'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId(split(parameters('hubSubnetResourceId'), '/')[2], 'Microsoft.Resources/deployments', format('ResourceGroup_WorkspaceGlobal_{0}', parameters('timestamp')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hubSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('SharedServices_VirtualNetwork_{0}', parameters('timestamp')))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('ControlPlane_{0}', parameters('timestamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "artifactsUri": {
                    "value": "[variables('artifactsUri')]"
                  },
                  "avdPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.avdPrivateDnsZoneName)]"
                  },
                  "customRdpProperty": {
                    "value": "[parameters('customRdpProperty')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
                  },
                  "desktopApplicationGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.desktopApplicationGroupName]"
                  },
                  "desktopFriendlyName": "[if(empty(parameters('desktopFriendlyName')), createObject('value', string(parameters('stampIndex'))), createObject('value', parameters('desktopFriendlyName')))]",
                  "existingFeedWorkspace": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.existingFeedWorkspace.value]"
                  },
                  "hostPoolDiagnosticSettingName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolDiagnosticSettingName]"
                  },
                  "hostPoolName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolName]"
                  },
                  "hostPoolNetworkInterfaceName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolNetworkInterfaceName]"
                  },
                  "hostPoolPrivateEndpointName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolPrivateEndpointName]"
                  },
                  "hostPoolPublicNetworkAccess": {
                    "value": "[parameters('hostPoolPublicNetworkAccess')]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "locationControlPlane": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "locationVirtualMachines": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceResourceId": "[if(parameters('monitoring'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value), createObject('value', ''))]",
                  "managementVirtualMachineName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.virtualMachineName.value]"
                  },
                  "maxSessionLimit": {
                    "value": "[mul(parameters('usersPerCore'), parameters('virtualMachineVirtualCpuCount'))]"
                  },
                  "monitoring": {
                    "value": "[parameters('monitoring')]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupControlPlane]"
                  },
                  "resourceGroupFeedWorkspace": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupFeedWorkspace]"
                  },
                  "resourceGroupManagement": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
                  },
                  "roleDefinitions": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.roleDefinitions.value]"
                  },
                  "securityPrincipalObjectIds": {
                    "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "validationEnvironment": {
                    "value": "[parameters('validationEnvironment')]"
                  },
                  "vmTemplate": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.vmTemplate.value]"
                  },
                  "workspaceFeedDiagnoticSettingName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFeedDiagnosticSettingName]"
                  },
                  "workspaceFeedName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFeedName]"
                  },
                  "workspaceFeedNetworkInterfaceName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFeedNetworkInterfaceName]"
                  },
                  "workspaceFeedPrivateEndpointName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFeedPrivateEndpointName]"
                  },
                  "workspaceFriendlyName": "[if(empty(parameters('workspaceFriendlyName')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFriendlyName), createObject('value', format('{0} ({1})', parameters('workspaceFriendlyName'), parameters('locationControlPlane'))))]",
                  "workspacePublicNetworkAccess": {
                    "value": "[parameters('workspacePublicNetworkAccess')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "1580607076343504927"
                    }
                  },
                  "parameters": {
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "artifactsUri": {
                      "type": "string"
                    },
                    "avdPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "customRdpProperty": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "desktopApplicationGroupName": {
                      "type": "string"
                    },
                    "desktopFriendlyName": {
                      "type": "string"
                    },
                    "existingFeedWorkspace": {
                      "type": "bool"
                    },
                    "hostPoolDiagnosticSettingName": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolNetworkInterfaceName": {
                      "type": "string"
                    },
                    "hostPoolPrivateEndpointName": {
                      "type": "string"
                    },
                    "hostPoolPublicNetworkAccess": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "locationControlPlane": {
                      "type": "string"
                    },
                    "locationVirtualMachines": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "maxSessionLimit": {
                      "type": "int"
                    },
                    "monitoring": {
                      "type": "bool"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "resourceGroupFeedWorkspace": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "roleDefinitions": {
                      "type": "object"
                    },
                    "securityPrincipalObjectIds": {
                      "type": "array"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "validationEnvironment": {
                      "type": "bool"
                    },
                    "vmTemplate": {
                      "type": "string"
                    },
                    "workspaceFeedDiagnoticSettingName": {
                      "type": "string"
                    },
                    "workspaceFeedName": {
                      "type": "string"
                    },
                    "workspaceFeedNetworkInterfaceName": {
                      "type": "string"
                    },
                    "workspaceFeedPrivateEndpointName": {
                      "type": "string"
                    },
                    "workspaceFriendlyName": {
                      "type": "string"
                    },
                    "workspacePublicNetworkAccess": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('HostPool_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupControlPlane')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "activeDirectorySolution": {
                            "value": "[parameters('activeDirectorySolution')]"
                          },
                          "avdPrivateDnsZoneResourceId": {
                            "value": "[parameters('avdPrivateDnsZoneResourceId')]"
                          },
                          "customRdpProperty": {
                            "value": "[parameters('customRdpProperty')]"
                          },
                          "hostPoolDiagnosticSettingName": {
                            "value": "[parameters('hostPoolDiagnosticSettingName')]"
                          },
                          "hostPoolName": {
                            "value": "[parameters('hostPoolName')]"
                          },
                          "hostPoolNetworkInterfaceName": {
                            "value": "[parameters('hostPoolNetworkInterfaceName')]"
                          },
                          "hostPoolPrivateEndpointName": {
                            "value": "[parameters('hostPoolPrivateEndpointName')]"
                          },
                          "hostPoolPublicNetworkAccess": {
                            "value": "[parameters('hostPoolPublicNetworkAccess')]"
                          },
                          "hostPoolType": {
                            "value": "[parameters('hostPoolType')]"
                          },
                          "location": {
                            "value": "[parameters('locationControlPlane')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "maxSessionLimit": {
                            "value": "[parameters('maxSessionLimit')]"
                          },
                          "monitoring": {
                            "value": "[parameters('monitoring')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "validationEnvironment": {
                            "value": "[parameters('validationEnvironment')]"
                          },
                          "vmTemplate": {
                            "value": "[parameters('vmTemplate')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "8117243727401569931"
                            }
                          },
                          "parameters": {
                            "activeDirectorySolution": {
                              "type": "string"
                            },
                            "avdPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "customRdpProperty": {
                              "type": "string"
                            },
                            "hostPoolDiagnosticSettingName": {
                              "type": "string"
                            },
                            "hostPoolName": {
                              "type": "string"
                            },
                            "hostPoolNetworkInterfaceName": {
                              "type": "string"
                            },
                            "hostPoolPrivateEndpointName": {
                              "type": "string"
                            },
                            "hostPoolPublicNetworkAccess": {
                              "type": "string"
                            },
                            "hostPoolType": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "maxSessionLimit": {
                              "type": "int"
                            },
                            "monitoring": {
                              "type": "bool"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "time": {
                              "type": "string",
                              "defaultValue": "[utcNow('u')]"
                            },
                            "validationEnvironment": {
                              "type": "bool"
                            },
                            "vmTemplate": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "customRdpProperty_Complete": "[if(contains(parameters('activeDirectorySolution'), 'MicrosoftEntraId'), format('{0}targetisaadjoined:i:1;enablerdsaadauth:i:1;', parameters('customRdpProperty')), parameters('customRdpProperty'))]",
                            "hostPoolLogs": [
                              {
                                "category": "Checkpoint",
                                "enabled": true
                              },
                              {
                                "category": "Error",
                                "enabled": true
                              },
                              {
                                "category": "Management",
                                "enabled": true
                              },
                              {
                                "category": "Connection",
                                "enabled": true
                              },
                              {
                                "category": "HostRegistration",
                                "enabled": true
                              },
                              {
                                "category": "AgentHealthStatus",
                                "enabled": true
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DesktopVirtualization/hostPools",
                              "apiVersion": "2023-09-05",
                              "name": "[parameters('hostPoolName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.DesktopVirtualization/hostPools'), parameters('tags')['Microsoft.DesktopVirtualization/hostPools'], createObject()))]",
                              "properties": {
                                "customRdpProperty": "[variables('customRdpProperty_Complete')]",
                                "hostPoolType": "[split(parameters('hostPoolType'), ' ')[0]]",
                                "loadBalancerType": "[if(contains(parameters('hostPoolType'), 'Pooled'), split(parameters('hostPoolType'), ' ')[1], 'Persistent')]",
                                "maxSessionLimit": "[parameters('maxSessionLimit')]",
                                "personalDesktopAssignmentType": "[if(contains(parameters('hostPoolType'), 'Personal'), split(parameters('hostPoolType'), ' ')[1], null())]",
                                "preferredAppGroupType": "Desktop",
                                "publicNetworkAccess": "[parameters('hostPoolPublicNetworkAccess')]",
                                "registrationInfo": {
                                  "expirationTime": "[dateTimeAdd(parameters('time'), 'PT2H')]",
                                  "registrationTokenOperation": "Update"
                                },
                                "startVMOnConnect": true,
                                "validationEnvironment": "[parameters('validationEnvironment')]",
                                "vmTemplate": "[parameters('vmTemplate')]"
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('hostPoolPrivateEndpointName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()))]",
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('hostPoolNetworkInterfaceName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('hostPoolPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]",
                                      "groupIds": [
                                        "connection"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('hostPoolPrivateEndpointName'), 'default')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[replace(split(parameters('avdPrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('avdPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('hostPoolPrivateEndpointName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('monitoring')]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', parameters('hostPoolName'))]",
                              "name": "[parameters('hostPoolDiagnosticSettingName')]",
                              "properties": {
                                "logs": "[variables('hostPoolLogs')]",
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "ResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('ApplicationGroup_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupControlPlane')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "artifactsUri": {
                            "value": "[parameters('artifactsUri')]"
                          },
                          "deploymentUserAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "desktopApplicationGroupName": {
                            "value": "[parameters('desktopApplicationGroupName')]"
                          },
                          "hostPoolResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('HostPool_{0}', parameters('timestamp'))), '2022-09-01').outputs.ResourceId.value]"
                          },
                          "locationControlPlane": {
                            "value": "[parameters('locationControlPlane')]"
                          },
                          "locationVirtualMachines": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "resourceGroupManagement": {
                            "value": "[parameters('resourceGroupManagement')]"
                          },
                          "roleDefinitions": {
                            "value": "[parameters('roleDefinitions')]"
                          },
                          "securityPrincipalObjectIds": {
                            "value": "[parameters('securityPrincipalObjectIds')]"
                          },
                          "desktopFriendlyName": {
                            "value": "[parameters('desktopFriendlyName')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "16505230916895982003"
                            }
                          },
                          "parameters": {
                            "artifactsUri": {
                              "type": "string"
                            },
                            "deploymentUserAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "desktopApplicationGroupName": {
                              "type": "string"
                            },
                            "desktopFriendlyName": {
                              "type": "string"
                            },
                            "hostPoolResourceId": {
                              "type": "string"
                            },
                            "locationControlPlane": {
                              "type": "string"
                            },
                            "locationVirtualMachines": {
                              "type": "string"
                            },
                            "resourceGroupManagement": {
                              "type": "string"
                            },
                            "roleDefinitions": {
                              "type": "object"
                            },
                            "securityPrincipalObjectIds": {
                              "type": "array"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DesktopVirtualization/applicationGroups",
                              "apiVersion": "2021-03-09-preview",
                              "name": "[parameters('desktopApplicationGroupName')]",
                              "location": "[parameters('locationControlPlane')]",
                              "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), if(contains(parameters('tags'), 'Microsoft.DesktopVirtualization/applicationGroups'), parameters('tags')['Microsoft.DesktopVirtualization/applicationGroups'], createObject()))]",
                              "properties": {
                                "hostPoolArmPath": "[parameters('hostPoolResourceId')]",
                                "applicationGroupType": "Desktop"
                              }
                            },
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(range(0, length(parameters('securityPrincipalObjectIds'))))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', parameters('desktopApplicationGroupName'))]",
                              "name": "[guid(parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]], parameters('roleDefinitions').DesktopVirtualizationUser, parameters('desktopApplicationGroupName'))]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitions').DesktopVirtualizationUser)]",
                                "principalId": "[parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]]]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                              ]
                            },
                            {
                              "condition": "[not(empty(parameters('desktopFriendlyName')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('ApplicationFriendlyName_{0}', parameters('timestamp'))]",
                              "resourceGroup": "[parameters('resourceGroupManagement')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileUris": {
                                    "value": [
                                      "[format('{0}Update-AvdDesktop.ps1', parameters('artifactsUri'))]"
                                    ]
                                  },
                                  "location": {
                                    "value": "[parameters('locationVirtualMachines')]"
                                  },
                                  "parameters": {
                                    "value": "[format('-ApplicationGroupName {0} -Environment {1} -FriendlyName \"{2}\" -ResourceGroupName {3} -SubscriptionId {4} -Tenant {5} -UserAssignedIdentityClientId {6}', parameters('desktopApplicationGroupName'), environment().name, parameters('desktopFriendlyName'), resourceGroup().name, subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedIdentityClientId'))]"
                                  },
                                  "scriptFileName": {
                                    "value": "Update-AvdDesktop.ps1"
                                  },
                                  "tags": {
                                    "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()))]"
                                  },
                                  "userAssignedIdentityClientId": {
                                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                                  },
                                  "virtualMachineName": {
                                    "value": "[parameters('virtualMachineName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "5322300289308830902"
                                    }
                                  },
                                  "parameters": {
                                    "fileUris": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "securestring"
                                    },
                                    "scriptFileName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "timestamp": {
                                      "type": "string",
                                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                                    },
                                    "userAssignedIdentityClientId": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-03-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "Microsoft.Compute",
                                        "type": "CustomScriptExtension",
                                        "typeHandlerVersion": "1.10",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                          "timestamp": "[parameters('timestamp')]"
                                        },
                                        "protectedSettings": {
                                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                          "fileUris": "[parameters('fileUris')]",
                                          "managedIdentity": {
                                            "clientId": "[parameters('userAssignedIdentityClientId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "value": {
                                      "type": "object",
                                      "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "applicationGroupReference": {
                              "type": "array",
                              "value": [
                                "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                              ]
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('HostPool_{0}', parameters('timestamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('WorkspaceFeed_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupFeedWorkspace')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "applicationGroupReferences": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('ApplicationGroup_{0}', parameters('timestamp'))), '2022-09-01').outputs.applicationGroupReference.value]"
                          },
                          "artifactsUri": {
                            "value": "[parameters('artifactsUri')]"
                          },
                          "avdPrivateDnsZoneResourceId": {
                            "value": "[parameters('avdPrivateDnsZoneResourceId')]"
                          },
                          "deploymentUserAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "existing": {
                            "value": "[parameters('existingFeedWorkspace')]"
                          },
                          "hostPoolName": {
                            "value": "[parameters('hostPoolName')]"
                          },
                          "locationControlPlane": {
                            "value": "[parameters('locationControlPlane')]"
                          },
                          "locationVirtualMachines": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "monitoring": {
                            "value": "[parameters('monitoring')]"
                          },
                          "resourceGroupManagement": {
                            "value": "[parameters('resourceGroupManagement')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          },
                          "workspaceFeedDiagnoticSettingName": {
                            "value": "[parameters('workspaceFeedDiagnoticSettingName')]"
                          },
                          "workspaceFeedName": {
                            "value": "[parameters('workspaceFeedName')]"
                          },
                          "workspaceFeedNetworkInterfaceName": {
                            "value": "[parameters('workspaceFeedNetworkInterfaceName')]"
                          },
                          "workspaceFeedPrivateEndpointName": {
                            "value": "[parameters('workspaceFeedPrivateEndpointName')]"
                          },
                          "workspaceFriendlyName": {
                            "value": "[parameters('workspaceFriendlyName')]"
                          },
                          "workspacePublicNetworkAccess": {
                            "value": "[parameters('workspacePublicNetworkAccess')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "14863945302360957631"
                            }
                          },
                          "parameters": {
                            "applicationGroupReferences": {
                              "type": "array"
                            },
                            "artifactsUri": {
                              "type": "string"
                            },
                            "avdPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "deploymentUserAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "existing": {
                              "type": "bool"
                            },
                            "hostPoolName": {
                              "type": "string"
                            },
                            "locationControlPlane": {
                              "type": "string"
                            },
                            "locationVirtualMachines": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "monitoring": {
                              "type": "bool"
                            },
                            "resourceGroupManagement": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            },
                            "workspaceFeedDiagnoticSettingName": {
                              "type": "string"
                            },
                            "workspaceFeedName": {
                              "type": "string"
                            },
                            "workspaceFeedNetworkInterfaceName": {
                              "type": "string"
                            },
                            "workspaceFeedPrivateEndpointName": {
                              "type": "string"
                            },
                            "workspaceFriendlyName": {
                              "type": "string"
                            },
                            "workspacePublicNetworkAccess": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "condition": "[not(parameters('existing'))]",
                              "type": "Microsoft.DesktopVirtualization/workspaces",
                              "apiVersion": "2023-09-05",
                              "name": "[parameters('workspaceFeedName')]",
                              "location": "[parameters('locationControlPlane')]",
                              "tags": {},
                              "properties": {
                                "applicationGroupReferences": "[parameters('applicationGroupReferences')]",
                                "friendlyName": "[parameters('workspaceFriendlyName')]",
                                "publicNetworkAccess": "[parameters('workspacePublicNetworkAccess')]"
                              }
                            },
                            {
                              "condition": "[not(parameters('existing'))]",
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('workspaceFeedPrivateEndpointName')]",
                              "location": "[parameters('locationControlPlane')]",
                              "tags": {},
                              "properties": {
                                "customNetworkInterfaceName": "[parameters('workspaceFeedNetworkInterfaceName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('workspaceFeedPrivateEndpointName')]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]",
                                      "groupIds": [
                                        "feed"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]"
                              ]
                            },
                            {
                              "condition": "[not(parameters('existing'))]",
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('workspaceFeedPrivateEndpointName'), 'default')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "[replace(split(parameters('avdPrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('avdPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('workspaceFeedPrivateEndpointName'))]"
                              ]
                            },
                            {
                              "condition": "[and(not(parameters('existing')), parameters('monitoring'))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', parameters('workspaceFeedName'))]",
                              "name": "[parameters('workspaceFeedDiagnoticSettingName')]",
                              "properties": {
                                "logs": [
                                  {
                                    "category": "Checkpoint",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Error",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Management",
                                    "enabled": true
                                  },
                                  {
                                    "category": "Feed",
                                    "enabled": true
                                  }
                                ],
                                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('existing')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('AddApplicationGroupReferences_{0}', parameters('timestamp'))]",
                              "resourceGroup": "[parameters('resourceGroupManagement')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileUris": {
                                    "value": [
                                      "[format('{0}Update-AvdWorkspace.ps1', parameters('artifactsUri'))]"
                                    ]
                                  },
                                  "location": {
                                    "value": "[parameters('locationVirtualMachines')]"
                                  },
                                  "parameters": {
                                    "value": "[format('-ApplicationGroupReferences \"{0}\" -Environment {1} -ResourceGroupName {2} -SubscriptionId {3} -TenantId {4} -UserAssignedIdentityClientId {5} -WorkspaceName {6}', parameters('applicationGroupReferences'), environment().name, resourceGroup().name, subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedIdentityClientId'), parameters('workspaceFeedName'))]"
                                  },
                                  "scriptFileName": {
                                    "value": "Update-AvdWorkspace.ps1"
                                  },
                                  "tags": {
                                    "value": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()))]"
                                  },
                                  "userAssignedIdentityClientId": {
                                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                                  },
                                  "virtualMachineName": {
                                    "value": "[parameters('virtualMachineName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "5322300289308830902"
                                    }
                                  },
                                  "parameters": {
                                    "fileUris": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "securestring"
                                    },
                                    "scriptFileName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "timestamp": {
                                      "type": "string",
                                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                                    },
                                    "userAssignedIdentityClientId": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-03-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "Microsoft.Compute",
                                        "type": "CustomScriptExtension",
                                        "typeHandlerVersion": "1.10",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                          "timestamp": "[parameters('timestamp')]"
                                        },
                                        "protectedSettings": {
                                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                          "fileUris": "[parameters('fileUris')]",
                                          "managedIdentity": {
                                            "clientId": "[parameters('userAssignedIdentityClientId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "value": {
                                      "type": "object",
                                      "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('ApplicationGroup_{0}', parameters('timestamp')))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp')))]",
                "rgs"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('FSLogix_{0}', parameters('timestamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectoryConnection": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.validateANFfActiveDirectory.value]"
                  },
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "artifactsUri": {
                    "value": "[variables('artifactsUri')]"
                  },
                  "automationAccountName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountName]"
                  },
                  "availability": {
                    "value": "[parameters('availability')]"
                  },
                  "azureFilesPrivateDnsZoneResourceId": {
                    "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.filePrivateDnsZoneName)]"
                  },
                  "delegatedSubnetId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.validateANFSubnetId.value]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
                  },
                  "dnsServers": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.validateANFDnsServers.value]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "encryptionUserAssignedIdentityResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.encryptionUserAssignedIdentityResourceId.value]"
                  },
                  "fileShares": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.fileShares.value]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "fslogixShareSizeInGB": {
                    "value": "[parameters('fslogixShareSizeInGB')]"
                  },
                  "fslogixStorageService": {
                    "value": "[parameters('fslogixStorageService')]"
                  },
                  "hostPoolName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolName]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "keyVaultUri": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.keyVaultUri.value]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.virtualMachineName.value]"
                  },
                  "netAppAccountName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.netAppAccountName]"
                  },
                  "netAppCapacityPoolName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.netAppCapacityPoolName]"
                  },
                  "netbios": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.netbios.value]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "recoveryServices": {
                    "value": "[parameters('recoveryServices')]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.recoveryServicesVaultName]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupControlPlane]"
                  },
                  "resourceGroupManagement": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
                  },
                  "resourceGroupStorage": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupStorage]"
                  },
                  "securityPrincipalNames": {
                    "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').name))]"
                  },
                  "securityPrincipalObjectIds": {
                    "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
                  },
                  "serviceName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.serviceName.value]"
                  },
                  "smbServerLocation": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.smbServerLocation.value]"
                  },
                  "storageAccountNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.storageAccountNamePrefix]"
                  },
                  "storageAccountNetworkInterfaceNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.storageAccountNetworkInterfaceNamePrefix]"
                  },
                  "storageAccountPrivateEndpointNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.storageAccountPrivateEndpointNamePrefix]"
                  },
                  "storageCount": {
                    "value": "[parameters('storageCount')]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageEncryptionKeyName.value]"
                  },
                  "storageIndex": {
                    "value": "[parameters('storageIndex')]"
                  },
                  "storageService": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageService.value]"
                  },
                  "storageSku": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageSku.value]"
                  },
                  "subnet": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[10]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[10]))]",
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "timeZone": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.timeZone.value]"
                  },
                  "virtualNetwork": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[8]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[8]))]",
                  "virtualNetworkResourceGroup": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[4]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[4]))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "13548514408482675760"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "activeDirectoryConnection": {
                      "type": "string"
                    },
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "availability": {
                      "type": "string"
                    },
                    "azureFilesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "delegatedSubnetId": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "dnsServers": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "encryptionUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "fileShares": {
                      "type": "array"
                    },
                    "fslogixShareSizeInGB": {
                      "type": "int"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "fslogixStorageService": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "netAppAccountName": {
                      "type": "string"
                    },
                    "netAppCapacityPoolName": {
                      "type": "string"
                    },
                    "netbios": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "recoveryServices": {
                      "type": "bool"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "resourceGroupStorage": {
                      "type": "string"
                    },
                    "securityPrincipalObjectIds": {
                      "type": "array"
                    },
                    "securityPrincipalNames": {
                      "type": "array"
                    },
                    "serviceName": {
                      "type": "string"
                    },
                    "smbServerLocation": {
                      "type": "string"
                    },
                    "storageAccountNamePrefix": {
                      "type": "string"
                    },
                    "storageAccountNetworkInterfaceNamePrefix": {
                      "type": "string"
                    },
                    "storageAccountPrivateEndpointNamePrefix": {
                      "type": "string"
                    },
                    "storageCount": {
                      "type": "int"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "storageIndex": {
                      "type": "int"
                    },
                    "storageSku": {
                      "type": "string"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "subnet": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "timeZone": {
                      "type": "string"
                    },
                    "virtualNetwork": {
                      "type": "string"
                    },
                    "virtualNetworkResourceGroup": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "tagsAutomationAccounts": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject()))]",
                    "tagsNetAppAccount": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.NetApp/netAppAccounts'), parameters('tags')['Microsoft.NetApp/netAppAccounts'], createObject()))]",
                    "tagsPrivateEndpoints": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()))]",
                    "tagsStorageAccounts": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Storage/storageAccounts'), parameters('tags')['Microsoft.Storage/storageAccounts'], createObject()))]",
                    "tagsRecoveryServicesVault": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.recoveryServices/vaults'), parameters('tags')['Microsoft.recoveryServices/vaults'], createObject()))]",
                    "tagsVirtualMachines": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()))]"
                  },
                  "resources": [
                    {
                      "condition": "[and(equals(parameters('storageService'), 'AzureNetAppFiles'), contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('AzureNetAppFiles_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupStorage')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "artifactsUri": {
                            "value": "[parameters('artifactsUri')]"
                          },
                          "activeDirectoryConnection": {
                            "value": "[parameters('activeDirectoryConnection')]"
                          },
                          "delegatedSubnetId": {
                            "value": "[parameters('delegatedSubnetId')]"
                          },
                          "dnsServers": {
                            "value": "[parameters('dnsServers')]"
                          },
                          "domainJoinPassword": {
                            "value": "[parameters('domainJoinPassword')]"
                          },
                          "domainJoinUserPrincipalName": {
                            "value": "[parameters('domainJoinUserPrincipalName')]"
                          },
                          "domainName": {
                            "value": "[parameters('domainName')]"
                          },
                          "fileShares": {
                            "value": "[parameters('fileShares')]"
                          },
                          "fslogixContainerType": {
                            "value": "[parameters('fslogixContainerType')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "managementVirtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          },
                          "netAppAccountName": {
                            "value": "[parameters('netAppAccountName')]"
                          },
                          "netAppCapacityPoolName": {
                            "value": "[parameters('netAppCapacityPoolName')]"
                          },
                          "organizationalUnitPath": {
                            "value": "[parameters('organizationalUnitPath')]"
                          },
                          "resourceGroupManagement": {
                            "value": "[parameters('resourceGroupManagement')]"
                          },
                          "securityPrincipalNames": {
                            "value": "[parameters('securityPrincipalNames')]"
                          },
                          "smbServerLocation": {
                            "value": "[parameters('smbServerLocation')]"
                          },
                          "storageSku": {
                            "value": "[parameters('storageSku')]"
                          },
                          "storageService": {
                            "value": "[parameters('storageService')]"
                          },
                          "tagsNetAppAccount": {
                            "value": "[variables('tagsNetAppAccount')]"
                          },
                          "tagsVirtualMachines": {
                            "value": "[variables('tagsVirtualMachines')]"
                          },
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          },
                          "deploymentUserAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "2710514303551396035"
                            }
                          },
                          "parameters": {
                            "artifactsUri": {
                              "type": "string"
                            },
                            "activeDirectoryConnection": {
                              "type": "string"
                            },
                            "delegatedSubnetId": {
                              "type": "string"
                            },
                            "deploymentUserAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "dnsServers": {
                              "type": "string"
                            },
                            "domainJoinPassword": {
                              "type": "securestring"
                            },
                            "domainJoinUserPrincipalName": {
                              "type": "string"
                            },
                            "domainName": {
                              "type": "string"
                            },
                            "fileShares": {
                              "type": "array"
                            },
                            "fslogixContainerType": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "managementVirtualMachineName": {
                              "type": "string"
                            },
                            "netAppAccountName": {
                              "type": "string"
                            },
                            "netAppCapacityPoolName": {
                              "type": "string"
                            },
                            "organizationalUnitPath": {
                              "type": "string"
                            },
                            "resourceGroupManagement": {
                              "type": "string"
                            },
                            "securityPrincipalNames": {
                              "type": "array"
                            },
                            "smbServerLocation": {
                              "type": "string"
                            },
                            "storageSku": {
                              "type": "string"
                            },
                            "storageService": {
                              "type": "string"
                            },
                            "tagsNetAppAccount": {
                              "type": "object"
                            },
                            "tagsVirtualMachines": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.NetApp/netAppAccounts",
                              "apiVersion": "2021-06-01",
                              "name": "[parameters('netAppAccountName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsNetAppAccount')]",
                              "properties": {
                                "activeDirectories": "[if(equals(parameters('activeDirectoryConnection'), 'false'), null(), createArray(createObject('aesEncryption', true(), 'domain', parameters('domainName'), 'dns', parameters('dnsServers'), 'organizationalUnit', parameters('organizationalUnitPath'), 'password', parameters('domainJoinPassword'), 'smbServerName', format('anf-{0}', parameters('smbServerLocation')), 'username', split(parameters('domainJoinUserPrincipalName'), '@')[0])))]",
                                "encryption": {
                                  "keySource": "Microsoft.NetApp"
                                }
                              }
                            },
                            {
                              "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsNetAppAccount')]",
                              "properties": {
                                "coolAccess": false,
                                "encryptionType": "Single",
                                "qosType": "Auto",
                                "serviceLevel": "[parameters('storageSku')]",
                                "size": 4398046511104
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.NetApp/netAppAccounts', parameters('netAppAccountName'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "volumes",
                                "count": "[length(range(0, length(parameters('fileShares'))))]"
                              },
                              "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]])]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsNetAppAccount')]",
                              "properties": {
                                "avsDataStore": "Disabled",
                                "coolAccess": false,
                                "creationToken": "[parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]]]",
                                "defaultGroupQuotaInKiBs": 0,
                                "defaultUserQuotaInKiBs": 0,
                                "encryptionKeySource": "Microsoft.NetApp",
                                "isDefaultQuotaEnabled": false,
                                "kerberosEnabled": false,
                                "ldapEnabled": false,
                                "networkFeatures": "Standard",
                                "protocolTypes": [
                                  "CIFS"
                                ],
                                "securityStyle": "ntfs",
                                "serviceLevel": "[parameters('storageSku')]",
                                "smbContinuouslyAvailable": true,
                                "smbEncryption": true,
                                "snapshotDirectoryVisible": true,
                                "subnetId": "[parameters('delegatedSubnetId')]",
                                "usageThreshold": 107374182400
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('FslogixNtfsPermissions_{0}', parameters('timestamp'))]",
                              "resourceGroup": "[parameters('resourceGroupManagement')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileUris": {
                                    "value": [
                                      "[format('{0}Set-NtfsPermissions.ps1', parameters('artifactsUri'))]"
                                    ]
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "parameters": {
                                    "value": "[format('-domainJoinPassword \"{0}\" -domainJoinUserPrincipalName {1} -fslogixContainerType {2} -securityPrincipalNames \"{3}\" -smbServerLocation {4} -storageService {5}', parameters('domainJoinPassword'), parameters('domainJoinUserPrincipalName'), parameters('fslogixContainerType'), parameters('securityPrincipalNames'), parameters('smbServerLocation'), parameters('storageService'))]"
                                  },
                                  "scriptFileName": {
                                    "value": "Set-NtfsPermissions.ps1"
                                  },
                                  "tags": {
                                    "value": "[parameters('tagsVirtualMachines')]"
                                  },
                                  "userAssignedIdentityClientId": {
                                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                                  },
                                  "virtualMachineName": {
                                    "value": "[parameters('managementVirtualMachineName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "5322300289308830902"
                                    }
                                  },
                                  "parameters": {
                                    "fileUris": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "securestring"
                                    },
                                    "scriptFileName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "timestamp": {
                                      "type": "string",
                                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                                    },
                                    "userAssignedIdentityClientId": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-03-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "Microsoft.Compute",
                                        "type": "CustomScriptExtension",
                                        "typeHandlerVersion": "1.10",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                          "timestamp": "[parameters('timestamp')]"
                                        },
                                        "protectedSettings": {
                                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                          "fileUris": "[parameters('fileUris')]",
                                          "managedIdentity": {
                                            "clientId": "[parameters('userAssignedIdentityClientId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "value": {
                                      "type": "object",
                                      "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "volumes"
                              ]
                            }
                          ],
                          "outputs": {
                            "fileShares": {
                              "type": "array",
                              "value": "[if(contains(parameters('fslogixContainerType'), 'Office'), createArray(reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[0]]), '2021-06-01').mountTargets[0].smbServerFqdn, reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[1]]), '2021-06-01').mountTargets[0].smbServerFqdn), createArray(reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[0]]), '2021-06-01').mountTargets[0].smbServerFqdn))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(equals(parameters('storageService'), 'AzureFiles'), contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('AzureFiles_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupStorage')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "activeDirectorySolution": {
                            "value": "[parameters('activeDirectorySolution')]"
                          },
                          "artifactsUri": {
                            "value": "[parameters('artifactsUri')]"
                          },
                          "automationAccountName": {
                            "value": "[parameters('automationAccountName')]"
                          },
                          "availability": {
                            "value": "[parameters('availability')]"
                          },
                          "azureFilesPrivateDnsZoneResourceId": {
                            "value": "[parameters('azureFilesPrivateDnsZoneResourceId')]"
                          },
                          "deploymentUserAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "domainJoinPassword": {
                            "value": "[parameters('domainJoinPassword')]"
                          },
                          "domainJoinUserPrincipalName": {
                            "value": "[parameters('domainJoinUserPrincipalName')]"
                          },
                          "enableRecoveryServices": {
                            "value": "[parameters('recoveryServices')]"
                          },
                          "encryptionUserAssignedIdentityResourceId": {
                            "value": "[parameters('encryptionUserAssignedIdentityResourceId')]"
                          },
                          "fileShares": {
                            "value": "[parameters('fileShares')]"
                          },
                          "fslogixContainerType": {
                            "value": "[parameters('fslogixContainerType')]"
                          },
                          "fslogixShareSizeInGB": {
                            "value": "[parameters('fslogixShareSizeInGB')]"
                          },
                          "fslogixStorageService": {
                            "value": "[parameters('fslogixStorageService')]"
                          },
                          "hostPoolType": {
                            "value": "[parameters('hostPoolType')]"
                          },
                          "keyVaultUri": {
                            "value": "[parameters('keyVaultUri')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "managementVirtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          },
                          "netbios": {
                            "value": "[parameters('netbios')]"
                          },
                          "organizationalUnitPath": {
                            "value": "[parameters('organizationalUnitPath')]"
                          },
                          "recoveryServicesVaultName": {
                            "value": "[parameters('recoveryServicesVaultName')]"
                          },
                          "resourceGroupManagement": {
                            "value": "[parameters('resourceGroupManagement')]"
                          },
                          "resourceGroupStorage": {
                            "value": "[parameters('resourceGroupStorage')]"
                          },
                          "securityPrincipalNames": {
                            "value": "[parameters('securityPrincipalNames')]"
                          },
                          "securityPrincipalObjectIds": {
                            "value": "[parameters('securityPrincipalObjectIds')]"
                          },
                          "serviceName": {
                            "value": "[parameters('serviceName')]"
                          },
                          "storageAccountNamePrefix": {
                            "value": "[parameters('storageAccountNamePrefix')]"
                          },
                          "storageAccountNetworkInterfaceNamePrefix": {
                            "value": "[parameters('storageAccountNetworkInterfaceNamePrefix')]"
                          },
                          "storageAccountPrivateEndpointNamePrefix": {
                            "value": "[parameters('storageAccountPrivateEndpointNamePrefix')]"
                          },
                          "storageCount": {
                            "value": "[parameters('storageCount')]"
                          },
                          "storageEncryptionKeyName": {
                            "value": "[parameters('storageEncryptionKeyName')]"
                          },
                          "storageIndex": {
                            "value": "[parameters('storageIndex')]"
                          },
                          "storageService": {
                            "value": "[parameters('storageService')]"
                          },
                          "storageSku": {
                            "value": "[parameters('storageSku')]"
                          },
                          "subnet": {
                            "value": "[parameters('subnet')]"
                          },
                          "tagsAutomationAccounts": {
                            "value": "[variables('tagsAutomationAccounts')]"
                          },
                          "tagsPrivateEndpoints": {
                            "value": "[variables('tagsPrivateEndpoints')]"
                          },
                          "tagsRecoveryServicesVault": {
                            "value": "[variables('tagsRecoveryServicesVault')]"
                          },
                          "tagsStorageAccounts": {
                            "value": "[variables('tagsStorageAccounts')]"
                          },
                          "tagsVirtualMachines": {
                            "value": "[variables('tagsVirtualMachines')]"
                          },
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          },
                          "timeZone": {
                            "value": "[parameters('timeZone')]"
                          },
                          "virtualNetwork": {
                            "value": "[parameters('virtualNetwork')]"
                          },
                          "virtualNetworkResourceGroup": {
                            "value": "[parameters('virtualNetworkResourceGroup')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "13316784024502839986"
                            }
                          },
                          "parameters": {
                            "artifactsUri": {
                              "type": "string"
                            },
                            "automationAccountName": {
                              "type": "string"
                            },
                            "availability": {
                              "type": "string"
                            },
                            "azureFilesPrivateDnsZoneResourceId": {
                              "type": "string"
                            },
                            "deploymentUserAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "domainJoinPassword": {
                              "type": "securestring"
                            },
                            "domainJoinUserPrincipalName": {
                              "type": "string"
                            },
                            "enableRecoveryServices": {
                              "type": "bool"
                            },
                            "encryptionUserAssignedIdentityResourceId": {
                              "type": "string"
                            },
                            "activeDirectorySolution": {
                              "type": "string"
                            },
                            "fileShares": {
                              "type": "array"
                            },
                            "fslogixShareSizeInGB": {
                              "type": "int"
                            },
                            "fslogixContainerType": {
                              "type": "string"
                            },
                            "fslogixStorageService": {
                              "type": "string"
                            },
                            "hostPoolType": {
                              "type": "string"
                            },
                            "keyVaultUri": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "managementVirtualMachineName": {
                              "type": "string"
                            },
                            "netbios": {
                              "type": "string"
                            },
                            "organizationalUnitPath": {
                              "type": "string"
                            },
                            "recoveryServicesVaultName": {
                              "type": "string"
                            },
                            "resourceGroupManagement": {
                              "type": "string"
                            },
                            "resourceGroupStorage": {
                              "type": "string"
                            },
                            "securityPrincipalObjectIds": {
                              "type": "array"
                            },
                            "securityPrincipalNames": {
                              "type": "array"
                            },
                            "serviceName": {
                              "type": "string"
                            },
                            "storageAccountNamePrefix": {
                              "type": "string",
                              "minLength": 3
                            },
                            "storageAccountNetworkInterfaceNamePrefix": {
                              "type": "string"
                            },
                            "storageAccountPrivateEndpointNamePrefix": {
                              "type": "string"
                            },
                            "storageCount": {
                              "type": "int"
                            },
                            "storageEncryptionKeyName": {
                              "type": "string"
                            },
                            "storageIndex": {
                              "type": "int"
                            },
                            "storageSku": {
                              "type": "string"
                            },
                            "storageService": {
                              "type": "string"
                            },
                            "subnet": {
                              "type": "string"
                            },
                            "tagsAutomationAccounts": {
                              "type": "object"
                            },
                            "tagsPrivateEndpoints": {
                              "type": "object"
                            },
                            "tagsRecoveryServicesVault": {
                              "type": "object"
                            },
                            "tagsStorageAccounts": {
                              "type": "object"
                            },
                            "tagsVirtualMachines": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string"
                            },
                            "timeZone": {
                              "type": "string"
                            },
                            "virtualNetwork": {
                              "type": "string"
                            },
                            "virtualNetworkResourceGroup": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "roleDefinitionId": "0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                            "smbMultiChannel": {
                              "multichannel": {
                                "enabled": true
                              }
                            },
                            "smbSettings": {
                              "versions": "SMB3.1.1;",
                              "authenticationMethods": "NTLMv2;Kerberos;",
                              "kerberosTicketEncryption": "AES-256;",
                              "channelEncryption": "AES-128-GCM;AES-256-GCM;"
                            },
                            "storageRedundancy": "[if(equals(parameters('availability'), 'availabilityZones'), '_ZRS', '_LRS')]",
                            "subnetId": "[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork'), parameters('subnet'))]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "storageAccounts",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsStorageAccounts')]",
                              "sku": {
                                "name": "[format('{0}{1}', parameters('storageSku'), variables('storageRedundancy'))]"
                              },
                              "kind": "[if(equals(parameters('storageSku'), 'Standard'), 'StorageV2', 'FileStorage')]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('encryptionUserAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "properties": {
                                "accessTier": "Hot",
                                "allowBlobPublicAccess": false,
                                "allowCrossTenantReplication": false,
                                "allowedCopyScope": "PrivateLink",
                                "allowSharedKeyAccess": true,
                                "azureFilesIdentityBasedAuthentication": {
                                  "directoryServiceOptions": "[if(equals(parameters('activeDirectorySolution'), 'MicrosoftEntraDomainServices'), 'AADDS', 'None')]"
                                },
                                "defaultToOAuthAuthentication": false,
                                "dnsEndpointType": "Standard",
                                "encryption": {
                                  "identity": {
                                    "userAssignedIdentity": "[parameters('encryptionUserAssignedIdentityResourceId')]"
                                  },
                                  "requireInfrastructureEncryption": true,
                                  "keyvaultproperties": {
                                    "keyvaulturi": "[parameters('keyVaultUri')]",
                                    "keyname": "[parameters('storageEncryptionKeyName')]"
                                  },
                                  "services": "[if(equals(parameters('storageSku'), 'Standard'), createObject('file', createObject('keyType', 'Account', 'enabled', true()), 'table', createObject('keyType', 'Account', 'enabled', true()), 'queue', createObject('keyType', 'Account', 'enabled', true()), 'blob', createObject('keyType', 'Account', 'enabled', true())), createObject('file', createObject('keyType', 'Account', 'enabled', true())))]",
                                  "keySource": "Microsoft.KeyVault"
                                },
                                "largeFileSharesState": "[if(equals(parameters('storageSku'), 'Standard'), 'Enabled', null())]",
                                "minimumTlsVersion": "TLS1_2",
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "virtualNetworkRules": [],
                                  "ipRules": [],
                                  "defaultAction": "Deny"
                                },
                                "publicNetworkAccess": "Disabled",
                                "supportsHttpsTrafficOnly": true
                              }
                            },
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]",
                              "name": "[guid(parameters('securityPrincipalObjectIds')[range(0, parameters('storageCount'))[copyIndex()]], variables('roleDefinitionId'), resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                                "principalId": "[parameters('securityPrincipalObjectIds')[range(0, parameters('storageCount'))[copyIndex()]]]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]",
                                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "fileServices",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 'default')]",
                              "properties": {
                                "protocolSettings": {
                                  "smb": "[if(equals(parameters('storageSku'), 'Standard'), variables('smbSettings'), union(variables('smbSettings'), variables('smbMultiChannel')))]"
                                },
                                "shareDeleteRetentionPolicy": {
                                  "enabled": false
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateEndpoints",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsPrivateEndpoints')]",
                              "properties": {
                                "customNetworkInterfaceName": "[format('{0}-{1}', replace(parameters('storageAccountNetworkInterfaceNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]",
                                      "groupIds": [
                                        "file"
                                      ]
                                    }
                                  }
                                ],
                                "subnet": {
                                  "id": "[variables('subnetId')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneGroups",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/{1}', format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), format('{0}-{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('azureFilesPrivateDnsZoneResourceId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]",
                                "storageAccounts"
                              ]
                            },
                            {
                              "copy": {
                                "name": "shares",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('fileShares_{0}_{1}', range(0, parameters('storageCount'))[copyIndex()], parameters('timestamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileShares": {
                                    "value": "[parameters('fileShares')]"
                                  },
                                  "fslogixShareSizeInGB": {
                                    "value": "[parameters('fslogixShareSizeInGB')]"
                                  },
                                  "storageAccountName": {
                                    "value": "[format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))]"
                                  },
                                  "storageSku": {
                                    "value": "[parameters('storageSku')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "10619096950710478702"
                                    }
                                  },
                                  "parameters": {
                                    "fileShares": {
                                      "type": "array"
                                    },
                                    "fslogixShareSizeInGB": {
                                      "type": "int"
                                    },
                                    "storageAccountName": {
                                      "type": "string"
                                    },
                                    "storageSku": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "shares",
                                        "count": "[length(range(0, length(parameters('fileShares'))))]"
                                      },
                                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/default/{1}', parameters('storageAccountName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]])]",
                                      "properties": {
                                        "accessTier": "[if(equals(parameters('storageSku'), 'Premium'), 'Premium', 'TransactionOptimized')]",
                                        "shareQuota": "[parameters('fslogixShareSizeInGB')]",
                                        "enabledProtocols": "SMB"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "roleAssignment",
                                "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]"
                              ]
                            },
                            {
                              "condition": "[contains(parameters('activeDirectorySolution'), 'DomainServices')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('FslogixNtfsPermissions_{0}', parameters('timestamp'))]",
                              "resourceGroup": "[parameters('resourceGroupManagement')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileUris": {
                                    "value": [
                                      "[format('{0}Set-NtfsPermissions.ps1', parameters('artifactsUri'))]"
                                    ]
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "parameters": {
                                    "value": "[format('-domainJoinPassword \"{0}\" -domainJoinUserPrincipalName {1} -activeDirectorySolution {2} -Environment {3} -fslogixContainerType {4} -netbios {5} -organizationalUnitPath \"{6}\" -securityPrincipalNames \"{7}\" -StorageAccountPrefix {8} -StorageAccountResourceGroupName {9} -storageCount {10} -storageIndex {11} -storageService {12} -StorageSuffix {13} -SubscriptionId {14} -TenantId {15} -UserAssignedIdentityClientId {16}', parameters('domainJoinPassword'), parameters('domainJoinUserPrincipalName'), parameters('activeDirectorySolution'), environment().name, parameters('fslogixContainerType'), parameters('netbios'), parameters('organizationalUnitPath'), parameters('securityPrincipalNames'), parameters('storageAccountNamePrefix'), parameters('resourceGroupStorage'), parameters('storageCount'), parameters('storageIndex'), parameters('storageService'), environment().suffixes.storage, subscription().subscriptionId, subscription().tenantId, parameters('deploymentUserAssignedIdentityClientId'))]"
                                  },
                                  "scriptFileName": {
                                    "value": "Set-NtfsPermissions.ps1"
                                  },
                                  "tags": {
                                    "value": "[parameters('tagsVirtualMachines')]"
                                  },
                                  "userAssignedIdentityClientId": {
                                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                                  },
                                  "virtualMachineName": {
                                    "value": "[parameters('managementVirtualMachineName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "5322300289308830902"
                                    }
                                  },
                                  "parameters": {
                                    "fileUris": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "securestring"
                                    },
                                    "scriptFileName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "timestamp": {
                                      "type": "string",
                                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                                    },
                                    "userAssignedIdentityClientId": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-03-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "Microsoft.Compute",
                                        "type": "CustomScriptExtension",
                                        "typeHandlerVersion": "1.10",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                          "timestamp": "[parameters('timestamp')]"
                                        },
                                        "protectedSettings": {
                                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                          "fileUris": "[parameters('fileUris')]",
                                          "managedIdentity": {
                                            "clientId": "[parameters('userAssignedIdentityClientId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "value": {
                                      "type": "object",
                                      "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZoneGroups",
                                "privateEndpoints",
                                "shares"
                              ]
                            },
                            {
                              "condition": "[and(parameters('enableRecoveryServices'), contains(parameters('hostPoolType'), 'Pooled'))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('recoveryServices_AzureFiles_{0}', parameters('timestamp'))]",
                              "resourceGroup": "[parameters('resourceGroupManagement')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileShares": {
                                    "value": "[parameters('fileShares')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "recoveryServicesVaultName": {
                                    "value": "[parameters('recoveryServicesVaultName')]"
                                  },
                                  "resourceGroupStorage": {
                                    "value": "[parameters('resourceGroupStorage')]"
                                  },
                                  "storageAccountNamePrefix": {
                                    "value": "[parameters('storageAccountNamePrefix')]"
                                  },
                                  "storageCount": {
                                    "value": "[parameters('storageCount')]"
                                  },
                                  "storageIndex": {
                                    "value": "[parameters('storageIndex')]"
                                  },
                                  "tagsRecoveryServicesVault": {
                                    "value": "[parameters('tagsRecoveryServicesVault')]"
                                  },
                                  "timestamp": {
                                    "value": "[parameters('timestamp')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "12279473499111277652"
                                    }
                                  },
                                  "parameters": {
                                    "fileShares": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "recoveryServicesVaultName": {
                                      "type": "string"
                                    },
                                    "resourceGroupStorage": {
                                      "type": "string"
                                    },
                                    "storageAccountNamePrefix": {
                                      "type": "string"
                                    },
                                    "storageCount": {
                                      "type": "int"
                                    },
                                    "storageIndex": {
                                      "type": "int"
                                    },
                                    "tagsRecoveryServicesVault": {
                                      "type": "object"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "protectionContainers",
                                        "count": "[length(range(0, parameters('storageCount')))]"
                                      },
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers",
                                      "apiVersion": "2022-03-01",
                                      "name": "[format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                                      "properties": {
                                        "backupManagementType": "AzureStorage",
                                        "containerType": "StorageContainer",
                                        "sourceResourceId": "[resourceId(parameters('resourceGroupStorage'), 'Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "protectedItems_fileShares",
                                        "count": "[length(range(0, parameters('storageCount')))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('BackupProtectedItems_fileShares_{0}_{1}', add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), parameters('timestamp'))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "fileShares": {
                                            "value": "[parameters('fileShares')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "protectionContainerName": {
                                            "value": "[format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))]"
                                          },
                                          "policyId": {
                                            "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('recoveryServicesVaultName'), 'AvdPolicyStorage')]"
                                          },
                                          "sourceResourceId": {
                                            "value": "[resourceId(parameters('resourceGroupStorage'), 'Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]"
                                          },
                                          "tags": {
                                            "value": "[parameters('tagsRecoveryServicesVault')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "5778916271701476724"
                                            }
                                          },
                                          "parameters": {
                                            "fileShares": {
                                              "type": "array"
                                            },
                                            "location": {
                                              "type": "string"
                                            },
                                            "policyId": {
                                              "type": "string"
                                            },
                                            "protectionContainerName": {
                                              "type": "string"
                                            },
                                            "sourceResourceId": {
                                              "type": "string"
                                            },
                                            "tags": {
                                              "type": "object"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "protectedItems_FileShare",
                                                "count": "[length(parameters('fileShares'))]"
                                              },
                                              "condition": "[contains(parameters('fileShares')[copyIndex()], 'profile')]",
                                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                              "apiVersion": "2022-03-01",
                                              "name": "[format('{0}/AzureFileShare;{1}', parameters('protectionContainerName'), parameters('fileShares')[copyIndex()])]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "protectedItemType": "AzureFileShareProtectedItem",
                                                "policyId": "[parameters('policyId')]",
                                                "sourceResourceId": "[parameters('sourceResourceId')]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers', split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[0], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[1], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[2])]"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "shares"
                              ]
                            },
                            {
                              "condition": "[and(equals(parameters('fslogixStorageService'), 'AzureFiles Premium'), greater(parameters('storageCount'), 0))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('AutoIncreasePremiumFileShareQuota_{0}', parameters('timestamp'))]",
                              "resourceGroup": "[parameters('resourceGroupManagement')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "artifactsUri": {
                                    "value": "[parameters('artifactsUri')]"
                                  },
                                  "automationAccountName": {
                                    "value": "[parameters('automationAccountName')]"
                                  },
                                  "deploymentUserAssignedIdentityClientId": {
                                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                                  },
                                  "fslogixContainerType": {
                                    "value": "[parameters('fslogixContainerType')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "managementVirtualMachineName": {
                                    "value": "[parameters('managementVirtualMachineName')]"
                                  },
                                  "storageAccountNamePrefix": {
                                    "value": "[parameters('storageAccountNamePrefix')]"
                                  },
                                  "storageCount": {
                                    "value": "[parameters('storageCount')]"
                                  },
                                  "storageIndex": {
                                    "value": "[parameters('storageIndex')]"
                                  },
                                  "storageResourceGroupName": {
                                    "value": "[parameters('resourceGroupStorage')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tagsAutomationAccounts')]"
                                  },
                                  "timestamp": {
                                    "value": "[parameters('timestamp')]"
                                  },
                                  "timeZone": {
                                    "value": "[parameters('timeZone')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "2831457635204434604"
                                    }
                                  },
                                  "parameters": {
                                    "artifactsUri": {
                                      "type": "string"
                                    },
                                    "automationAccountName": {
                                      "type": "string"
                                    },
                                    "deploymentUserAssignedIdentityClientId": {
                                      "type": "string"
                                    },
                                    "fslogixContainerType": {
                                      "type": "string"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "managementVirtualMachineName": {
                                      "type": "string"
                                    },
                                    "storageAccountNamePrefix": {
                                      "type": "string"
                                    },
                                    "storageCount": {
                                      "type": "int"
                                    },
                                    "storageIndex": {
                                      "type": "int"
                                    },
                                    "storageResourceGroupName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "timeZone": {
                                      "type": "string"
                                    }
                                  },
                                  "variables": {
                                    "runbookFileName": "Set-FileShareScaling.ps1",
                                    "scriptFileName": "Set-AutomationRunbook.ps1",
                                    "subscriptionId": "[subscription().subscriptionId]"
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('Runbook_QuotaScaling_{0}', parameters('timestamp'))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "fileUris": {
                                            "value": [
                                              "[format('{0}{1}', parameters('artifactsUri'), variables('runbookFileName'))]",
                                              "[format('{0}{1}', parameters('artifactsUri'), variables('scriptFileName'))]"
                                            ]
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "parameters": {
                                            "value": "[format('-AutomationAccountName {0} -Environment {1} -ResourceGroupName {2} -RunbookFileName {3} -SubscriptionId {4} -TenantId {5} -UserAssignedIdentityClientId {6}', parameters('automationAccountName'), environment().name, resourceGroup().name, variables('runbookFileName'), subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedIdentityClientId'))]"
                                          },
                                          "scriptFileName": {
                                            "value": "[variables('scriptFileName')]"
                                          },
                                          "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject('value', parameters('tags')['Microsoft.Compute/virtualMachines']), createObject('value', createObject()))]",
                                          "userAssignedIdentityClientId": {
                                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                                          },
                                          "virtualMachineName": {
                                            "value": "[parameters('managementVirtualMachineName')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "5322300289308830902"
                                            }
                                          },
                                          "parameters": {
                                            "fileUris": {
                                              "type": "array"
                                            },
                                            "location": {
                                              "type": "string"
                                            },
                                            "parameters": {
                                              "type": "securestring"
                                            },
                                            "scriptFileName": {
                                              "type": "string"
                                            },
                                            "tags": {
                                              "type": "object"
                                            },
                                            "timestamp": {
                                              "type": "string",
                                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                                            },
                                            "userAssignedIdentityClientId": {
                                              "type": "string"
                                            },
                                            "virtualMachineName": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2021-03-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "Microsoft.Compute",
                                                "type": "CustomScriptExtension",
                                                "typeHandlerVersion": "1.10",
                                                "autoUpgradeMinorVersion": true,
                                                "settings": {
                                                  "timestamp": "[parameters('timestamp')]"
                                                },
                                                "protectedSettings": {
                                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                                  "fileUris": "[parameters('fileUris')]",
                                                  "managedIdentity": {
                                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "value": {
                                              "type": "object",
                                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "schedules",
                                        "count": "[length(range(parameters('storageIndex'), parameters('storageCount')))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('Schedules_{0}_{1}', range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], parameters('timestamp'))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "automationAccountName": {
                                            "value": "[parameters('automationAccountName')]"
                                          },
                                          "fslogixContainerType": {
                                            "value": "[parameters('fslogixContainerType')]"
                                          },
                                          "storageAccountName": {
                                            "value": "[format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], 2, '0'))]"
                                          },
                                          "timeZone": {
                                            "value": "[parameters('timeZone')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "10323387708297265407"
                                            }
                                          },
                                          "parameters": {
                                            "automationAccountName": {
                                              "type": "string"
                                            },
                                            "fslogixContainerType": {
                                              "type": "string"
                                            },
                                            "storageAccountName": {
                                              "type": "string"
                                            },
                                            "time": {
                                              "type": "string",
                                              "defaultValue": "[utcNow()]"
                                            },
                                            "timeZone": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "schedules_ProfileContainers",
                                                "count": "[length(range(0, 4))]"
                                              },
                                              "type": "Microsoft.Automation/automationAccounts/schedules",
                                              "apiVersion": "2022-08-08",
                                              "name": "[format('{0}/{1}', parameters('automationAccountName'), format('{0}_ProfileContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                              "properties": {
                                                "advancedSchedule": {},
                                                "description": null,
                                                "expiryTime": null,
                                                "frequency": "Hour",
                                                "interval": 1,
                                                "startTime": "[dateTimeAdd(parameters('time'), format('PT{0}M', mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                                "timeZone": "[parameters('timeZone')]"
                                              }
                                            },
                                            {
                                              "copy": {
                                                "name": "schedules_OfficeContainers",
                                                "count": "[length(range(0, 4))]"
                                              },
                                              "condition": "[contains(parameters('fslogixContainerType'), 'Office')]",
                                              "type": "Microsoft.Automation/automationAccounts/schedules",
                                              "apiVersion": "2022-08-08",
                                              "name": "[format('{0}/{1}', parameters('automationAccountName'), format('{0}_OfficeContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                              "properties": {
                                                "advancedSchedule": {},
                                                "description": null,
                                                "expiryTime": null,
                                                "frequency": "Hour",
                                                "interval": 1,
                                                "startTime": "[dateTimeAdd(parameters('time'), format('PT{0}M', mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                                "timeZone": "[parameters('timeZone')]"
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "jobSchedules",
                                        "count": "[length(range(parameters('storageIndex'), parameters('storageCount')))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('JobSchedules_{0}_{1}', range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], parameters('timestamp'))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "automationAccountName": {
                                            "value": "[parameters('automationAccountName')]"
                                          },
                                          "environment": {
                                            "value": "[environment().name]"
                                          },
                                          "fslogixContainerType": {
                                            "value": "[parameters('fslogixContainerType')]"
                                          },
                                          "runbookName": {
                                            "value": "[replace(variables('runbookFileName'), '.ps1', '')]"
                                          },
                                          "resourceGroupName": {
                                            "value": "[parameters('storageResourceGroupName')]"
                                          },
                                          "storageAccountName": {
                                            "value": "[format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], 2, '0'))]"
                                          },
                                          "subscriptionId": {
                                            "value": "[variables('subscriptionId')]"
                                          },
                                          "timestamp": {
                                            "value": "[parameters('timestamp')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "6227937299408544503"
                                            }
                                          },
                                          "parameters": {
                                            "automationAccountName": {
                                              "type": "string"
                                            },
                                            "environment": {
                                              "type": "string"
                                            },
                                            "fslogixContainerType": {
                                              "type": "string"
                                            },
                                            "resourceGroupName": {
                                              "type": "string"
                                            },
                                            "runbookName": {
                                              "type": "string"
                                            },
                                            "storageAccountName": {
                                              "type": "string"
                                            },
                                            "subscriptionId": {
                                              "type": "string"
                                            },
                                            "timestamp": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "jobSchedules_ProfileContainers",
                                                "count": "[length(range(0, 4))]"
                                              },
                                              "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                                              "apiVersion": "2022-08-08",
                                              "name": "[format('{0}/{1}', parameters('automationAccountName'), guid(parameters('timestamp'), parameters('runbookName'), parameters('storageAccountName'), 'ProfileContainers', string(range(0, 4)[copyIndex()])))]",
                                              "properties": {
                                                "parameters": {
                                                  "environment": "[parameters('environment')]",
                                                  "FileShareName": "profile-containers",
                                                  "resourceGroupName": "[parameters('resourceGroupName')]",
                                                  "storageAccountName": "[parameters('storageAccountName')]",
                                                  "subscriptionId": "[parameters('subscriptionId')]"
                                                },
                                                "runbook": {
                                                  "name": "[parameters('runbookName')]"
                                                },
                                                "runOn": null,
                                                "schedule": {
                                                  "name": "[format('{0}_ProfileContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15))]"
                                                }
                                              }
                                            },
                                            {
                                              "copy": {
                                                "name": "jobSchedules_OfficeContainers",
                                                "count": "[length(range(0, 4))]"
                                              },
                                              "condition": "[contains(parameters('fslogixContainerType'), 'Office')]",
                                              "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                                              "apiVersion": "2022-08-08",
                                              "name": "[format('{0}/{1}', parameters('automationAccountName'), guid(parameters('timestamp'), parameters('runbookName'), parameters('storageAccountName'), 'OfficeContainers', string(range(0, 4)[copyIndex()])))]",
                                              "properties": {
                                                "parameters": {
                                                  "environment": "[parameters('environment')]",
                                                  "FileShareName": "office-containers",
                                                  "resourceGroupName": "[parameters('resourceGroupName')]",
                                                  "storageAccountName": "[parameters('storageAccountName')]",
                                                  "subscriptionId": "[parameters('subscriptionId')]"
                                                },
                                                "runbook": {
                                                  "name": "[parameters('runbookName')]"
                                                },
                                                "runOn": null,
                                                "schedule": {
                                                  "name": "[format('{0}_OfficeContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15))]"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Resources/deployments', format('Runbook_QuotaScaling_{0}', parameters('timestamp')))]",
                                        "schedules"
                                      ]
                                    },
                                    {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('RoleAssignment_Storage_{0}', parameters('timestamp'))]",
                                      "resourceGroup": "[parameters('storageResourceGroupName')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "PrincipalId": {
                                            "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2022-08-08', 'full').identity.principalId]"
                                          },
                                          "PrincipalType": {
                                            "value": "ServicePrincipal"
                                          },
                                          "RoleDefinitionId": {
                                            "value": "17d1049b-9a84-46fb-8f53-869881c3d3ab"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.26.54.24096",
                                              "templateHash": "12785629321959268271"
                                            }
                                          },
                                          "parameters": {
                                            "PrincipalId": {
                                              "type": "string"
                                            },
                                            "PrincipalType": {
                                              "type": "string"
                                            },
                                            "RoleDefinitionId": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                                              "properties": {
                                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                                                "principalId": "[parameters('PrincipalId')]",
                                                "principalType": "[parameters('PrincipalType')]"
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('FslogixNtfsPermissions_{0}', parameters('timestamp')))]"
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "netAppShares": {
                      "type": "array",
                      "value": "[if(equals(parameters('storageService'), 'AzureNetAppFiles'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupStorage')), 'Microsoft.Resources/deployments', format('AzureNetAppFiles_{0}', parameters('timestamp'))), '2022-09-01').outputs.fileShares.value, createArray('None'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('ControlPlane_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp')))]",
                "rgs"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('SessionHosts_{0}', parameters('timestamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "acceleratedNetworking": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.validateAcceleratedNetworking.value]"
                  },
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "artifactsUri": {
                    "value": "[variables('artifactsUri')]"
                  },
                  "artifactsUserAssignedIdentityClientId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.artifactsUserAssignedIdentityClientId.value]"
                  },
                  "artifactsUserAssignedIdentityResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.artifactsUserAssignedIdentityResourceId.value]"
                  },
                  "automationAccountName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountName]"
                  },
                  "availability": {
                    "value": "[parameters('availability')]"
                  },
                  "availabilitySetNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.availabilitySetNamePrefix]"
                  },
                  "availabilitySetsCount": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.availabilitySetsCount.value]"
                  },
                  "availabilitySetsIndex": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.beginAvSetRange.value]"
                  },
                  "availabilityZones": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.validateAvailabilityZones.value]"
                  },
                  "avdAgentBootLoaderMsiName": {
                    "value": "[parameters('avdAgentBootLoaderMsiName')]"
                  },
                  "avdAgentMsiName": {
                    "value": "[parameters('avdAgentMsiName')]"
                  },
                  "dataCollectionRuleAssociationName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.dataCollectionRuleAssociationName]"
                  },
                  "dataCollectionRuleResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.dataCollectionRuleResourceId.value]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
                  },
                  "diskNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.diskNamePrefix]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "divisionRemainderValue": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.divisionRemainderValue.value]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "drainMode": {
                    "value": "[parameters('drainMode')]"
                  },
                  "enableRecoveryServices": {
                    "value": "[parameters('recoveryServices')]"
                  },
                  "enableScalingTool": {
                    "value": "[parameters('scalingTool')]"
                  },
                  "fslogix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.fslogix.value]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "hostPoolName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolName]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "hybridRunbookWorkerGroupName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.hybridRunbookWorkerGroupName.value]"
                  },
                  "imageOffer": {
                    "value": "[parameters('imageOffer')]"
                  },
                  "imagePublisher": {
                    "value": "[parameters('imagePublisher')]"
                  },
                  "imageSku": {
                    "value": "[parameters('imageSku')]"
                  },
                  "imageDefinitionResourceId": {
                    "value": "[parameters('imageDefinitionResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.logAnalyticsWorkspaceName]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.virtualMachineName.value]"
                  },
                  "maxResourcesPerTemplateDeployment": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.maxResourcesPerTemplateDeployment.value]"
                  },
                  "monitoring": {
                    "value": "[parameters('monitoring')]"
                  },
                  "netAppFileShares": "[if(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.fslogix.value, createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('FSLogix_{0}', parameters('timestamp'))), '2022-09-01').outputs.netAppShares.value), createObject('value', createArray('None')))]",
                  "networkInterfaceNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.networkInterfaceNamePrefix]"
                  },
                  "networkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.networkName.value]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "pooledHostPool": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.pooledHostPool.value]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.recoveryServicesVaultName]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupControlPlane]"
                  },
                  "resourceGroupHosts": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupHosts]"
                  },
                  "resourceGroupManagement": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
                  },
                  "roleDefinitions": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.roleDefinitions.value]"
                  },
                  "scalingBeginPeakTime": {
                    "value": "[parameters('scalingBeginPeakTime')]"
                  },
                  "scalingEndPeakTime": {
                    "value": "[parameters('scalingEndPeakTime')]"
                  },
                  "scalingLimitSecondsToForceLogOffUser": {
                    "value": "[parameters('scalingLimitSecondsToForceLogOffUser')]"
                  },
                  "scalingMinimumNumberOfRdsh": {
                    "value": "[parameters('scalingMinimumNumberOfRdsh')]"
                  },
                  "scalingSessionThresholdPerCPU": {
                    "value": "[parameters('scalingSessionThresholdPerCPU')]"
                  },
                  "securityPrincipalObjectIds": {
                    "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
                  },
                  "securityLogAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('securityLogAnalyticsWorkspaceResourceId')]"
                  },
                  "serviceName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.serviceName.value]"
                  },
                  "sessionHostBatchCount": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.sessionHostBatchCount.value]"
                  },
                  "sessionHostIndex": {
                    "value": "[parameters('sessionHostIndex')]"
                  },
                  "storageAccountPrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.storageAccountNamePrefix]"
                  },
                  "storageCount": {
                    "value": "[parameters('storageCount')]"
                  },
                  "storageIndex": {
                    "value": "[parameters('storageIndex')]"
                  },
                  "storageService": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageService.value]"
                  },
                  "storageSuffix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageSuffix.value]"
                  },
                  "subnet": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[10]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[10]))]",
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeDifference": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.timeDifference.value]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "timeZone": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.timeZone.value]"
                  },
                  "virtualMachineMonitoringAgent": {
                    "value": "[parameters('virtualMachineMonitoringAgent')]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.virtualMachineNamePrefix]"
                  },
                  "virtualMachinePassword": {
                    "value": "[parameters('virtualMachinePassword')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "virtualMachineUsername": {
                    "value": "[parameters('virtualMachineUsername')]"
                  },
                  "virtualNetwork": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[8]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[8]))]",
                  "virtualNetworkResourceGroup": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[4]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[4]))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "4316863222626577412"
                    }
                  },
                  "parameters": {
                    "acceleratedNetworking": {
                      "type": "string"
                    },
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "artifactsUri": {
                      "type": "string"
                    },
                    "artifactsUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "artifactsUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "availability": {
                      "type": "string"
                    },
                    "availabilitySetNamePrefix": {
                      "type": "string"
                    },
                    "availabilitySetsCount": {
                      "type": "int"
                    },
                    "availabilitySetsIndex": {
                      "type": "int"
                    },
                    "availabilityZones": {
                      "type": "array"
                    },
                    "avdAgentBootLoaderMsiName": {
                      "type": "string"
                    },
                    "avdAgentMsiName": {
                      "type": "string"
                    },
                    "dataCollectionRuleAssociationName": {
                      "type": "string"
                    },
                    "dataCollectionRuleResourceId": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "diskNamePrefix": {
                      "type": "string"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "divisionRemainderValue": {
                      "type": "int"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "drainMode": {
                      "type": "bool"
                    },
                    "fslogix": {
                      "type": "bool"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "hybridRunbookWorkerGroupName": {
                      "type": "string"
                    },
                    "imageDefinitionResourceId": {
                      "type": "string"
                    },
                    "imageOffer": {
                      "type": "string"
                    },
                    "imagePublisher": {
                      "type": "string"
                    },
                    "imageSku": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "maxResourcesPerTemplateDeployment": {
                      "type": "int"
                    },
                    "monitoring": {
                      "type": "bool"
                    },
                    "netAppFileShares": {
                      "type": "array"
                    },
                    "networkInterfaceNamePrefix": {
                      "type": "string"
                    },
                    "networkName": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "pooledHostPool": {
                      "type": "bool"
                    },
                    "enableRecoveryServices": {
                      "type": "bool"
                    },
                    "enableScalingTool": {
                      "type": "bool"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "resourceGroupHosts": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "roleDefinitions": {
                      "type": "object"
                    },
                    "scalingBeginPeakTime": {
                      "type": "string"
                    },
                    "scalingEndPeakTime": {
                      "type": "string"
                    },
                    "scalingLimitSecondsToForceLogOffUser": {
                      "type": "string"
                    },
                    "scalingMinimumNumberOfRdsh": {
                      "type": "string"
                    },
                    "scalingSessionThresholdPerCPU": {
                      "type": "string"
                    },
                    "securityPrincipalObjectIds": {
                      "type": "array"
                    },
                    "securityLogAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "serviceName": {
                      "type": "string"
                    },
                    "sessionHostBatchCount": {
                      "type": "int"
                    },
                    "sessionHostIndex": {
                      "type": "int"
                    },
                    "storageAccountPrefix": {
                      "type": "string"
                    },
                    "storageCount": {
                      "type": "int"
                    },
                    "storageIndex": {
                      "type": "int"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "storageSuffix": {
                      "type": "string"
                    },
                    "subnet": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeDifference": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "timeZone": {
                      "type": "string"
                    },
                    "virtualMachineMonitoringAgent": {
                      "type": "string"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    },
                    "virtualMachinePassword": {
                      "type": "securestring"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "virtualMachineUsername": {
                      "type": "string"
                    },
                    "virtualNetwork": {
                      "type": "string"
                    },
                    "virtualNetworkResourceGroup": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "tagsAutomationAccounts": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject()))]",
                    "tagsAvailabilitySets": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/availabilitySets'), parameters('tags')['Microsoft.Compute/availabilitySets'], createObject()))]",
                    "tagsNetworkInterfaces": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject()))]",
                    "tagsRecoveryServicesVault": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.recoveryServices/vaults'), parameters('tags')['Microsoft.recoveryServices/vaults'], createObject()))]",
                    "tagsVirtualMachines": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()))]"
                  },
                  "resources": [
                    {
                      "condition": "[and(parameters('pooledHostPool'), equals(parameters('availability'), 'availabilitySets'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('availabilitySets_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupHosts')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "availabilitySetNamePrefix": {
                            "value": "[parameters('availabilitySetNamePrefix')]"
                          },
                          "availabilitySetsCount": {
                            "value": "[parameters('availabilitySetsCount')]"
                          },
                          "availabilitySetsIndex": {
                            "value": "[parameters('availabilitySetsIndex')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tagsAvailabilitySets": {
                            "value": "[variables('tagsAvailabilitySets')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "14355390265754909100"
                            }
                          },
                          "parameters": {
                            "availabilitySetNamePrefix": {
                              "type": "string"
                            },
                            "availabilitySetsCount": {
                              "type": "int"
                            },
                            "availabilitySetsIndex": {
                              "type": "int"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tagsAvailabilitySets": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "availabilitySets",
                                "count": "[length(range(0, parameters('availabilitySetsCount')))]"
                              },
                              "type": "Microsoft.Compute/availabilitySets",
                              "apiVersion": "2019-07-01",
                              "name": "[format('{0}{1}', parameters('availabilitySetNamePrefix'), padLeft(add(range(0, parameters('availabilitySetsCount'))[copyIndex()], parameters('availabilitySetsIndex')), 2, '0'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsAvailabilitySets')]",
                              "sku": {
                                "name": "Aligned"
                              },
                              "properties": {
                                "platformUpdateDomainCount": 5,
                                "platformFaultDomainCount": 2
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "roleAssignments",
                        "count": "[length(range(0, length(parameters('securityPrincipalObjectIds'))))]"
                      },
                      "condition": "[not(contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RoleAssignments_{0}_{1}', range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()], parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupHosts')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrincipalId": {
                            "value": "[parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]]]"
                          },
                          "PrincipalType": {
                            "value": "Group"
                          },
                          "RoleDefinitionId": {
                            "value": "[parameters('roleDefinitions').VirtualMachineUserLogin]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "12785629321959268271"
                            }
                          },
                          "parameters": {
                            "PrincipalId": {
                              "type": "string"
                            },
                            "PrincipalType": {
                              "type": "string"
                            },
                            "RoleDefinitionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                                "principalId": "[parameters('PrincipalId')]",
                                "principalType": "[parameters('PrincipalType')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "virtualMachines",
                        "count": "[length(range(1, parameters('sessionHostBatchCount')))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('VirtualMachines_{0}_{1}', sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupHosts')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "acceleratedNetworking": {
                            "value": "[parameters('acceleratedNetworking')]"
                          },
                          "activeDirectorySolution": {
                            "value": "[parameters('activeDirectorySolution')]"
                          },
                          "artifactsUri": {
                            "value": "[parameters('artifactsUri')]"
                          },
                          "artifactsUserAssignedIdentityClientId": {
                            "value": "[parameters('artifactsUserAssignedIdentityClientId')]"
                          },
                          "artifactsUserAssignedIdentityResourceId": {
                            "value": "[parameters('artifactsUserAssignedIdentityResourceId')]"
                          },
                          "availability": {
                            "value": "[parameters('availability')]"
                          },
                          "availabilitySetNamePrefix": {
                            "value": "[parameters('availabilitySetNamePrefix')]"
                          },
                          "availabilityZones": {
                            "value": "[parameters('availabilityZones')]"
                          },
                          "avdAgentBootLoaderMsiName": {
                            "value": "[parameters('avdAgentBootLoaderMsiName')]"
                          },
                          "avdAgentMsiName": {
                            "value": "[parameters('avdAgentMsiName')]"
                          },
                          "batchCount": {
                            "value": "[range(1, parameters('sessionHostBatchCount'))[copyIndex()]]"
                          },
                          "dataCollectionRuleAssociationName": {
                            "value": "[parameters('dataCollectionRuleAssociationName')]"
                          },
                          "dataCollectionRuleResourceId": {
                            "value": "[parameters('dataCollectionRuleResourceId')]"
                          },
                          "deploymentUserAssignedidentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "diskEncryptionSetResourceId": {
                            "value": "[parameters('diskEncryptionSetResourceId')]"
                          },
                          "diskNamePrefix": {
                            "value": "[parameters('diskNamePrefix')]"
                          },
                          "diskSku": {
                            "value": "[parameters('diskSku')]"
                          },
                          "domainJoinPassword": {
                            "value": "[parameters('domainJoinPassword')]"
                          },
                          "domainJoinUserPrincipalName": {
                            "value": "[parameters('domainJoinUserPrincipalName')]"
                          },
                          "domainName": {
                            "value": "[parameters('domainName')]"
                          },
                          "enableDrainMode": {
                            "value": "[parameters('drainMode')]"
                          },
                          "fslogix": {
                            "value": "[parameters('fslogix')]"
                          },
                          "fslogixContainerType": {
                            "value": "[parameters('fslogixContainerType')]"
                          },
                          "hostPoolName": {
                            "value": "[parameters('hostPoolName')]"
                          },
                          "hostPoolType": {
                            "value": "[parameters('hostPoolType')]"
                          },
                          "imageDefinitionResourceId": {
                            "value": "[parameters('imageDefinitionResourceId')]"
                          },
                          "imageOffer": {
                            "value": "[parameters('imageOffer')]"
                          },
                          "imagePublisher": {
                            "value": "[parameters('imagePublisher')]"
                          },
                          "imageSku": {
                            "value": "[parameters('imageSku')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('logAnalyticsWorkspaceName')]"
                          },
                          "managementVirtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          },
                          "monitoring": {
                            "value": "[parameters('monitoring')]"
                          },
                          "netAppFileShares": {
                            "value": "[parameters('netAppFileShares')]"
                          },
                          "networkInterfaceNamePrefix": {
                            "value": "[parameters('networkInterfaceNamePrefix')]"
                          },
                          "networkName": {
                            "value": "[parameters('networkName')]"
                          },
                          "organizationalUnitPath": {
                            "value": "[parameters('organizationalUnitPath')]"
                          },
                          "resourceGroupControlPlane": {
                            "value": "[parameters('resourceGroupControlPlane')]"
                          },
                          "resourceGroupManagement": {
                            "value": "[parameters('resourceGroupManagement')]"
                          },
                          "securityLogAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('securityLogAnalyticsWorkspaceResourceId')]"
                          },
                          "serviceName": {
                            "value": "[parameters('serviceName')]"
                          },
                          "sessionHostCount": "[if(and(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], parameters('sessionHostBatchCount')), greater(parameters('divisionRemainderValue'), 0)), createObject('value', parameters('divisionRemainderValue')), createObject('value', parameters('maxResourcesPerTemplateDeployment')))]",
                          "sessionHostIndex": "[if(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), createObject('value', parameters('sessionHostIndex')), createObject('value', add(mul(sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('maxResourcesPerTemplateDeployment')), parameters('sessionHostIndex'))))]",
                          "storageAccountPrefix": {
                            "value": "[parameters('storageAccountPrefix')]"
                          },
                          "storageCount": {
                            "value": "[parameters('storageCount')]"
                          },
                          "storageIndex": {
                            "value": "[parameters('storageIndex')]"
                          },
                          "storageService": {
                            "value": "[parameters('storageService')]"
                          },
                          "storageSuffix": {
                            "value": "[parameters('storageSuffix')]"
                          },
                          "subnet": {
                            "value": "[parameters('subnet')]"
                          },
                          "tagsNetworkInterfaces": {
                            "value": "[variables('tagsNetworkInterfaces')]"
                          },
                          "tagsVirtualMachines": {
                            "value": "[variables('tagsVirtualMachines')]"
                          },
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          },
                          "virtualMachineMonitoringAgent": {
                            "value": "[parameters('virtualMachineMonitoringAgent')]"
                          },
                          "virtualMachineNamePrefix": {
                            "value": "[parameters('virtualMachineNamePrefix')]"
                          },
                          "virtualMachinePassword": {
                            "value": "[parameters('virtualMachinePassword')]"
                          },
                          "virtualMachineSize": {
                            "value": "[parameters('virtualMachineSize')]"
                          },
                          "virtualMachineUsername": {
                            "value": "[parameters('virtualMachineUsername')]"
                          },
                          "virtualNetwork": {
                            "value": "[parameters('virtualNetwork')]"
                          },
                          "virtualNetworkResourceGroup": {
                            "value": "[parameters('virtualNetworkResourceGroup')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "5242830718173570915"
                            }
                          },
                          "parameters": {
                            "artifactsUri": {
                              "type": "string"
                            },
                            "artifactsUserAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "artifactsUserAssignedIdentityResourceId": {
                              "type": "string"
                            },
                            "acceleratedNetworking": {
                              "type": "string"
                            },
                            "activeDirectorySolution": {
                              "type": "string"
                            },
                            "availability": {
                              "type": "string"
                            },
                            "availabilitySetNamePrefix": {
                              "type": "string"
                            },
                            "availabilityZones": {
                              "type": "array"
                            },
                            "avdAgentBootLoaderMsiName": {
                              "type": "string"
                            },
                            "avdAgentMsiName": {
                              "type": "string"
                            },
                            "batchCount": {
                              "type": "int"
                            },
                            "dataCollectionRuleAssociationName": {
                              "type": "string"
                            },
                            "dataCollectionRuleResourceId": {
                              "type": "string"
                            },
                            "deploymentUserAssignedidentityClientId": {
                              "type": "string"
                            },
                            "diskEncryptionSetResourceId": {
                              "type": "string"
                            },
                            "diskNamePrefix": {
                              "type": "string"
                            },
                            "diskSku": {
                              "type": "string"
                            },
                            "domainJoinPassword": {
                              "type": "securestring"
                            },
                            "domainJoinUserPrincipalName": {
                              "type": "string"
                            },
                            "domainName": {
                              "type": "string"
                            },
                            "enableDrainMode": {
                              "type": "bool"
                            },
                            "fslogix": {
                              "type": "bool"
                            },
                            "fslogixContainerType": {
                              "type": "string"
                            },
                            "hostPoolName": {
                              "type": "string"
                            },
                            "hostPoolType": {
                              "type": "string"
                            },
                            "imageDefinitionResourceId": {
                              "type": "string"
                            },
                            "imageOffer": {
                              "type": "string"
                            },
                            "imagePublisher": {
                              "type": "string"
                            },
                            "imageSku": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceName": {
                              "type": "string"
                            },
                            "managementVirtualMachineName": {
                              "type": "string"
                            },
                            "monitoring": {
                              "type": "bool"
                            },
                            "netAppFileShares": {
                              "type": "array"
                            },
                            "networkInterfaceNamePrefix": {
                              "type": "string"
                            },
                            "networkName": {
                              "type": "string"
                            },
                            "organizationalUnitPath": {
                              "type": "string"
                            },
                            "resourceGroupControlPlane": {
                              "type": "string"
                            },
                            "resourceGroupManagement": {
                              "type": "string"
                            },
                            "securityLogAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "serviceName": {
                              "type": "string"
                            },
                            "sessionHostCount": {
                              "type": "int"
                            },
                            "sessionHostIndex": {
                              "type": "int"
                            },
                            "storageAccountPrefix": {
                              "type": "string"
                            },
                            "storageCount": {
                              "type": "int"
                            },
                            "storageIndex": {
                              "type": "int"
                            },
                            "storageService": {
                              "type": "string"
                            },
                            "storageSuffix": {
                              "type": "string"
                            },
                            "subnet": {
                              "type": "string"
                            },
                            "tagsNetworkInterfaces": {
                              "type": "object"
                            },
                            "tagsVirtualMachines": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string"
                            },
                            "virtualMachineMonitoringAgent": {
                              "type": "string"
                            },
                            "virtualMachineNamePrefix": {
                              "type": "string"
                            },
                            "virtualMachinePassword": {
                              "type": "securestring"
                            },
                            "virtualMachineSize": {
                              "type": "string"
                            },
                            "virtualMachineUsername": {
                              "type": "string"
                            },
                            "virtualNetwork": {
                              "type": "string"
                            },
                            "virtualNetworkResourceGroup": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "amdVmSize": "[contains(variables('amdVmSizes'), parameters('virtualMachineSize'))]",
                            "amdVmSizes": [
                              "Standard_NV4as_v4",
                              "Standard_NV8as_v4",
                              "Standard_NV16as_v4",
                              "Standard_NV32as_v4"
                            ],
                            "fslogixExclusions": "[format('\"%TEMP%\\*\\*.VHDX\";\"%Windir%\\TEMP\\*\\*.VHDX\"{0}{1}{2}', variables('fslogixExclusionsCloudCache'), variables('fslogixExclusionsProfileContainers'), variables('fslogixExclusionsOfficeContainers'))]",
                            "fslogixExclusionsCloudCache": "[if(contains(parameters('fslogixContainerType'), 'CloudCache'), ';\"%ProgramData%\\fslogix\\Cache\\*\";\"%ProgramData%\\fslogix\\Proxy\\*\"', '')]",
                            "fslogixExclusionsOfficeContainers": "[if(contains(parameters('fslogixContainerType'), 'Office'), format(';\"{0}\";\"{1}.lock\";\"{2}.meta\";\"{3}.metadata\"', variables('fslogixOfficeShare'), variables('fslogixOfficeShare'), variables('fslogixOfficeShare'), variables('fslogixOfficeShare')), '')]",
                            "fslogixExclusionsProfileContainers": "[format(';\"{0}\";\"{1}.lock\";\"{2}.meta\";\"{3}.metadata\"', variables('fslogixProfileShare'), variables('fslogixProfileShare'), variables('fslogixProfileShare'), variables('fslogixProfileShare'))]",
                            "fslogixOfficeShare": "[format('\\\\{0}??.file.{1}\\office-containers\\*\\*.VHDX', parameters('storageAccountPrefix'), parameters('storageSuffix'))]",
                            "fslogixProfileShare": "[format('\\\\{0}??.file.{1}\\profile-containers\\*\\*.VHDX', parameters('storageAccountPrefix'), parameters('storageSuffix'))]",
                            "imageReference": "[if(empty(parameters('imageDefinitionResourceId')), createObject('publisher', parameters('imagePublisher'), 'offer', parameters('imageOffer'), 'sku', parameters('imageSku'), 'version', 'latest'), createObject('id', parameters('imageDefinitionResourceId')))]",
                            "intune": "[contains(parameters('activeDirectorySolution'), 'intuneEnrollment')]",
                            "nvidiaVmSize": "[contains(variables('nvidiaVmSizes'), parameters('virtualMachineSize'))]",
                            "nvidiaVmSizes": [
                              "Standard_NV6",
                              "Standard_NV12",
                              "Standard_NV24",
                              "Standard_NV12s_v3",
                              "Standard_NV24s_v3",
                              "Standard_NV48s_v3",
                              "Standard_NC4as_T4_v3",
                              "Standard_NC8as_T4_v3",
                              "Standard_NC16as_T4_v3",
                              "Standard_NC64as_T4_v3",
                              "Standard_NV6ads_A10_v5",
                              "Standard_NV12ads_A10_v5",
                              "Standard_NV18ads_A10_v5",
                              "Standard_NV36ads_A10_v5",
                              "Standard_NV36adms_A10_v5",
                              "Standard_NV72ads_A10_v5"
                            ],
                            "pooledHostPool": "[equals(split(parameters('hostPoolType'), ' ')[0], 'Pooled')]",
                            "securitylogAnalyticsWorkspaceName": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[8], '')]",
                            "securityLogAnalyticsWorkspaceResourceGroupName": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[4], resourceGroup().name)]",
                            "securityLogAnalyticsWorkspaceSubscriptionId": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[2], subscription().subscriptionId)]",
                            "securityMonitoring": "[if(empty(parameters('securityLogAnalyticsWorkspaceResourceId')), false(), true())]",
                            "sessionHostNamePrefix": "[replace(parameters('virtualMachineNamePrefix'), format('{0}{1}', parameters('serviceName'), parameters('networkName')), '')]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "networkInterface",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2020-05-01",
                              "name": "[format('{0}-{1}', replace(parameters('networkInterfaceNamePrefix'), format('-{0}', parameters('serviceName')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsNetworkInterfaces')]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig",
                                    "properties": {
                                      "privateIPAllocationMethod": "Dynamic",
                                      "subnet": {
                                        "id": "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork'), parameters('subnet'))]"
                                      },
                                      "primary": true,
                                      "privateIPAddressVersion": "IPv4"
                                    }
                                  }
                                ],
                                "enableAcceleratedNetworking": "[if(equals(parameters('acceleratedNetworking'), 'True'), true(), false())]",
                                "enableIPForwarding": false
                              }
                            },
                            {
                              "copy": {
                                "name": "virtualMachine",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "zones": "[if(equals(parameters('availability'), 'AvailabilityZones'), createArray(parameters('availabilityZones')[mod(range(0, parameters('sessionHostCount'))[copyIndex()], length(parameters('availabilityZones')))]), null())]",
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('artifactsUserAssignedIdentityResourceId'))]": {}
                                }
                              },
                              "properties": {
                                "availabilitySet": "[if(equals(parameters('availability'), 'AvailabilitySets'), createObject('id', resourceId('Microsoft.Compute/availabilitySets', format('{0}{1}', parameters('availabilitySetNamePrefix'), padLeft(div(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 200), 2, '0')))), null())]",
                                "hardwareProfile": {
                                  "vmSize": "[parameters('virtualMachineSize')]"
                                },
                                "storageProfile": {
                                  "imageReference": "[variables('imageReference')]",
                                  "osDisk": {
                                    "name": "[format('{0}-{1}', replace(parameters('diskNamePrefix'), format('-{0}', parameters('serviceName')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                                    "osType": "Windows",
                                    "createOption": "FromImage",
                                    "caching": "ReadWrite",
                                    "deleteOption": "Delete",
                                    "managedDisk": {
                                      "diskEncryptionSet": {
                                        "id": "[parameters('diskEncryptionSetResourceId')]"
                                      },
                                      "storageAccountType": "[parameters('diskSku')]"
                                    }
                                  },
                                  "dataDisks": []
                                },
                                "osProfile": {
                                  "computerName": "[format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                                  "adminUsername": "[parameters('virtualMachineUsername')]",
                                  "adminPassword": "[parameters('virtualMachinePassword')]",
                                  "windowsConfiguration": {
                                    "provisionVMAgent": true,
                                    "enableAutomaticUpdates": false
                                  },
                                  "secrets": [],
                                  "allowExtensionOperations": true
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}', replace(parameters('networkInterfaceNamePrefix'), format('-{0}', parameters('serviceName')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]",
                                      "properties": {
                                        "deleteOption": "Delete"
                                      }
                                    }
                                  ]
                                },
                                "securityProfile": {
                                  "uefiSettings": {
                                    "secureBootEnabled": true,
                                    "vTpmEnabled": true
                                  },
                                  "securityType": "trustedLaunch",
                                  "encryptionAtHost": true
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": false
                                  }
                                },
                                "licenseType": "[if(equals(parameters('imagePublisher'), 'MicrosoftWindowsDesktop'), 'Windows_Client', 'Windows_Server')]"
                              },
                              "dependsOn": [
                                "networkInterface"
                              ]
                            },
                            {
                              "copy": {
                                "name": "extension_IaasAntimalware",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'IaaSAntimalware')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.Security",
                                "type": "IaaSAntimalware",
                                "typeHandlerVersion": "1.3",
                                "autoUpgradeMinorVersion": true,
                                "enableAutomaticUpgrade": false,
                                "settings": {
                                  "AntimalwareEnabled": true,
                                  "RealtimeProtectionEnabled": "true",
                                  "ScheduledScanSettings": {
                                    "isEnabled": "true",
                                    "day": "7",
                                    "time": "120",
                                    "scanType": "Quick"
                                  },
                                  "Exclusions": "[if(parameters('fslogix'), createObject('Paths', variables('fslogixExclusions')), createObject())]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "extension_GuestAttestation",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'GuestAttestation')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                                "type": "GuestAttestation",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "AttestationConfig": {
                                    "MaaSettings": {
                                      "maaEndpoint": "",
                                      "maaTenantName": "GuestAttestation"
                                    },
                                    "AscSettings": {
                                      "ascReportingEndpoint": "",
                                      "ascReportingFrequency": ""
                                    },
                                    "useCustomToken": "false",
                                    "disableAlerts": "false"
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "extension_MicrosoftMonitoringAgent",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "condition": "[and(parameters('monitoring'), equals(parameters('virtualMachineMonitoringAgent'), 'LogAnalyticsAgent'))]",
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'MicrosoftmonitoringAgent')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "publisher": "Microsoft.EnterpriseCloud.monitoring",
                                "type": "MicrosoftmonitoringAgent",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "workspaceId": "[if(parameters('monitoring'), reference(resourceId(parameters('resourceGroupManagement'), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2015-03-20').customerId, null())]"
                                },
                                "protectedSettings": {
                                  "workspaceKey": "[if(parameters('monitoring'), listKeys(resourceId(parameters('resourceGroupManagement'), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2015-03-20').primarySharedKey, null())]"
                                }
                              },
                              "dependsOn": [
                                "extension_IaasAntimalware",
                                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "extension_AzureMonitorWindowsAgent",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "condition": "[and(parameters('monitoring'), equals(parameters('virtualMachineMonitoringAgent'), 'AzureMonitorAgent'))]",
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AzureMonitorWindowsAgent')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.Monitor",
                                "type": "AzureMonitorWindowsAgent",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true,
                                "enableAutomaticUpgrade": true
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "dataCollectionRuleAssociation",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "condition": "[and(parameters('monitoring'), equals(parameters('virtualMachineMonitoringAgent'), 'AzureMonitorAgent'))]",
                              "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                              "apiVersion": "2022-06-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]",
                              "name": "[parameters('dataCollectionRuleAssociationName')]",
                              "properties": {
                                "dataCollectionRuleId": "[parameters('dataCollectionRuleResourceId')]",
                                "description": "AVD Insights data collection rule association"
                              },
                              "dependsOn": [
                                "extension_AzureMonitorWindowsAgent",
                                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "extension_CustomScriptExtension",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "fileUris": [
                                    "[format('{0}{1}', parameters('artifactsUri'), parameters('avdAgentBootLoaderMsiName'))]",
                                    "[format('{0}{1}', parameters('artifactsUri'), parameters('avdAgentMsiName'))]",
                                    "[format('{0}Set-SessionHostConfiguration.ps1', parameters('artifactsUri'))]"
                                  ],
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File Set-SessionHostConfiguration.ps1 -activeDirectorySolution {0} -amdVmSize {1} -avdAgentBootLoaderMsiName \"{2}\" -avdAgentMsiName \"{3}\" -Environment {4} -fslogix {5} -fslogixContainerType {6} -hostPoolName {7} -HostPoolRegistrationToken \"{8}\" -imageOffer {9} -imagePublisher {10} -netAppFileShares {11} -nvidiaVmSize {12} -pooledHostPool {13} -securityMonitoring {14} -SecurityWorkspaceId {15} -securityWorkspaceKey \"{16}\" -storageAccountPrefix {17} -storageCount {18} -storageIndex {19} -storageService {20} -storageSuffix {21}', parameters('activeDirectorySolution'), variables('amdVmSize'), parameters('avdAgentBootLoaderMsiName'), parameters('avdAgentMsiName'), environment().name, parameters('fslogix'), parameters('fslogixContainerType'), parameters('hostPoolName'), reference(resourceId(parameters('resourceGroupControlPlane'), 'Microsoft.DesktopVirtualization/hostpools', parameters('hostPoolName')), '2019-12-10-preview').registrationInfo.token, parameters('imageOffer'), parameters('imagePublisher'), parameters('netAppFileShares'), variables('nvidiaVmSize'), variables('pooledHostPool'), variables('securityMonitoring'), if(variables('securityMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('securityLogAnalyticsWorkspaceSubscriptionId'), variables('securityLogAnalyticsWorkspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', variables('securitylogAnalyticsWorkspaceName')), '2021-06-01').customerId, 'NotApplicable'), if(variables('securityMonitoring'), listKeys(parameters('securityLogAnalyticsWorkspaceResourceId'), '2021-06-01').primarySharedKey, 'NotApplicable'), parameters('storageAccountPrefix'), parameters('storageCount'), parameters('storageIndex'), parameters('storageService'), parameters('storageSuffix'))]",
                                  "managedidentity": {
                                    "clientId": "[parameters('artifactsUserAssignedIdentityClientId')]"
                                  }
                                }
                              },
                              "dependsOn": [
                                "dataCollectionRuleAssociation",
                                "extension_MicrosoftMonitoringAgent",
                                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "extension_JsonADDomainExtension",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "condition": "[contains(parameters('activeDirectorySolution'), 'DomainServices')]",
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'JsonADDomainExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "forceUpdateTag": "[parameters('timestamp')]",
                                "publisher": "Microsoft.Compute",
                                "type": "JsonADDomainExtension",
                                "typeHandlerVersion": "1.3",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "Name": "[parameters('domainName')]",
                                  "Options": "3",
                                  "OUPath": "[parameters('organizationalUnitPath')]",
                                  "Restart": "true",
                                  "User": "[parameters('domainJoinUserPrincipalName')]"
                                },
                                "protectedSettings": {
                                  "Password": "[parameters('domainJoinPassword')]"
                                }
                              },
                              "dependsOn": [
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CSE_DrainMode_{0}_{1}', parameters('batchCount'), parameters('timestamp')))]",
                                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "extension_AADLoginForWindows",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "condition": "[not(contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AADLoginForWindows')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "publisher": "Microsoft.Azure.ActiveDirectory",
                                "type": "AADLoginForWindows",
                                "typeHandlerVersion": "2.0",
                                "autoUpgradeMinorVersion": true,
                                "settings": "[if(variables('intune'), createObject('mdmId', '0000000a-0000-0000-c000-000000000000'), null())]"
                              },
                              "dependsOn": [
                                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CSE_DrainMode_{0}_{1}', parameters('batchCount'), parameters('timestamp')))]",
                                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "extension_AmdGpuDriverWindows",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "condition": "[variables('amdVmSize')]",
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AmdGpuDriverWindows')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "publisher": "Microsoft.HpcCompute",
                                "type": "AmdGpuDriverWindows",
                                "typeHandlerVersion": "1.0",
                                "autoUpgradeMinorVersion": true,
                                "settings": {}
                              },
                              "dependsOn": [
                                "extension_AADLoginForWindows",
                                "extension_JsonADDomainExtension",
                                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "extension_NvidiaGpuDriverWindows",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "condition": "[variables('nvidiaVmSize')]",
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'NvidiaGpuDriverWindows')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tagsVirtualMachines')]",
                              "properties": {
                                "publisher": "Microsoft.HpcCompute",
                                "type": "NvidiaGpuDriverWindows",
                                "typeHandlerVersion": "1.2",
                                "autoUpgradeMinorVersion": true,
                                "settings": {}
                              },
                              "dependsOn": [
                                "extension_AADLoginForWindows",
                                "extension_JsonADDomainExtension",
                                "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                              ]
                            },
                            {
                              "condition": "[parameters('enableDrainMode')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('CSE_DrainMode_{0}_{1}', parameters('batchCount'), parameters('timestamp'))]",
                              "resourceGroup": "[parameters('resourceGroupManagement')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileUris": {
                                    "value": [
                                      "[format('{0}Set-AvdDrainMode.ps1', parameters('artifactsUri'))]"
                                    ]
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "parameters": {
                                    "value": "[format('-Environment {0} -hostPoolName {1} -HostPoolResourceGroupName {2} -sessionHostCount {3} -sessionHostIndex {4} -SubscriptionId {5} -TenantId {6} -userAssignedidentityClientId {7} -virtualMachineNamePrefix {8}', environment().name, parameters('hostPoolName'), parameters('resourceGroupControlPlane'), parameters('sessionHostCount'), parameters('sessionHostIndex'), subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedidentityClientId'), variables('sessionHostNamePrefix'))]"
                                  },
                                  "scriptFileName": {
                                    "value": "Set-AvdDrainMode.ps1"
                                  },
                                  "tags": {
                                    "value": "[parameters('tagsVirtualMachines')]"
                                  },
                                  "userAssignedIdentityClientId": {
                                    "value": "[parameters('deploymentUserAssignedidentityClientId')]"
                                  },
                                  "virtualMachineName": {
                                    "value": "[parameters('managementVirtualMachineName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "5322300289308830902"
                                    }
                                  },
                                  "parameters": {
                                    "fileUris": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "securestring"
                                    },
                                    "scriptFileName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "timestamp": {
                                      "type": "string",
                                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                                    },
                                    "userAssignedIdentityClientId": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-03-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "Microsoft.Compute",
                                        "type": "CustomScriptExtension",
                                        "typeHandlerVersion": "1.10",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                          "timestamp": "[parameters('timestamp')]"
                                        },
                                        "protectedSettings": {
                                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                          "fileUris": "[parameters('fileUris')]",
                                          "managedIdentity": {
                                            "clientId": "[parameters('userAssignedIdentityClientId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "value": {
                                      "type": "object",
                                      "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "extension_CustomScriptExtension"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('availabilitySets_{0}', parameters('timestamp')))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('enableRecoveryServices'), contains(parameters('hostPoolType'), 'Personal'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RecoveryServices_VirtualMachines_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "divisionRemainderValue": {
                            "value": "[parameters('divisionRemainderValue')]"
                          },
                          "fslogix": {
                            "value": "[parameters('fslogix')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "maxResourcesPerTemplateDeployment": {
                            "value": "[parameters('maxResourcesPerTemplateDeployment')]"
                          },
                          "recoveryServicesVaultName": {
                            "value": "[parameters('recoveryServicesVaultName')]"
                          },
                          "resourceGroupHosts": {
                            "value": "[parameters('resourceGroupHosts')]"
                          },
                          "resourceGroupManagement": {
                            "value": "[parameters('resourceGroupManagement')]"
                          },
                          "sessionHostBatchCount": {
                            "value": "[parameters('sessionHostBatchCount')]"
                          },
                          "sessionHostIndex": {
                            "value": "[parameters('sessionHostIndex')]"
                          },
                          "tagsRecoveryServicesVault": {
                            "value": "[variables('tagsRecoveryServicesVault')]"
                          },
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          },
                          "virtualMachineNamePrefix": {
                            "value": "[parameters('virtualMachineNamePrefix')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "9869456736552463179"
                            }
                          },
                          "parameters": {
                            "divisionRemainderValue": {
                              "type": "int"
                            },
                            "fslogix": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "maxResourcesPerTemplateDeployment": {
                              "type": "int"
                            },
                            "recoveryServicesVaultName": {
                              "type": "string"
                            },
                            "resourceGroupHosts": {
                              "type": "string"
                            },
                            "resourceGroupManagement": {
                              "type": "string"
                            },
                            "sessionHostBatchCount": {
                              "type": "int"
                            },
                            "sessionHostIndex": {
                              "type": "int"
                            },
                            "tagsRecoveryServicesVault": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string"
                            },
                            "virtualMachineNamePrefix": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "protectedItems_Vm",
                                "count": "[length(range(1, parameters('sessionHostBatchCount')))]"
                              },
                              "condition": "[not(parameters('fslogix'))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('BackupProtectedItems_VirtualMachines_{0}_{1}', sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('timestamp'))]",
                              "resourceGroup": "[parameters('resourceGroupManagement')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "policyId": {
                                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.RecoveryServices/vaults/backupPolicies', parameters('recoveryServicesVaultName'), 'AvdPolicyVm')]"
                                  },
                                  "recoveryServicesVaultName": {
                                    "value": "[parameters('recoveryServicesVaultName')]"
                                  },
                                  "sessionHostCount": "[if(and(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], parameters('sessionHostBatchCount')), greater(parameters('divisionRemainderValue'), 0)), createObject('value', parameters('divisionRemainderValue')), createObject('value', parameters('maxResourcesPerTemplateDeployment')))]",
                                  "sessionHostIndex": "[if(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), createObject('value', parameters('sessionHostIndex')), createObject('value', add(mul(sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('maxResourcesPerTemplateDeployment')), parameters('sessionHostIndex'))))]",
                                  "tags": {
                                    "value": "[parameters('tagsRecoveryServicesVault')]"
                                  },
                                  "virtualMachineNamePrefix": {
                                    "value": "[parameters('virtualMachineNamePrefix')]"
                                  },
                                  "virtualMachineResourceGroupName": {
                                    "value": "[parameters('resourceGroupHosts')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "3292317499387210660"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "policyId": {
                                      "type": "string"
                                    },
                                    "recoveryServicesVaultName": {
                                      "type": "string"
                                    },
                                    "sessionHostCount": {
                                      "type": "int"
                                    },
                                    "sessionHostIndex": {
                                      "type": "int"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "virtualMachineNamePrefix": {
                                      "type": "string"
                                    },
                                    "virtualMachineResourceGroupName": {
                                      "type": "string"
                                    }
                                  },
                                  "variables": {
                                    "v2VmContainer": "iaasvmcontainer;iaasvmcontainerv2;",
                                    "v2Vm": "vm;iaasvmcontainerv2;"
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "protectedItems_Vm",
                                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                                      },
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                      "apiVersion": "2021-08-01",
                                      "name": "[format('{0}/Azure/{1}{2};{3}{4}/{5}{6};{7}{8}', parameters('recoveryServicesVaultName'), variables('v2VmContainer'), parameters('virtualMachineResourceGroupName'), parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'), variables('v2Vm'), parameters('virtualMachineResourceGroupName'), parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "protectedItemType": "Microsoft.Compute/virtualMachines",
                                        "policyId": "[parameters('policyId')]",
                                        "sourceResourceId": "[resourceId(parameters('virtualMachineResourceGroupName'), 'Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0')))]"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "virtualMachines"
                      ]
                    },
                    {
                      "condition": "[and(parameters('enableScalingTool'), parameters('pooledHostPool'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('ScalingTool_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "artifactsUri": {
                            "value": "[parameters('artifactsUri')]"
                          },
                          "automationAccountName": {
                            "value": "[parameters('automationAccountName')]"
                          },
                          "beginPeakTime": {
                            "value": "[parameters('scalingBeginPeakTime')]"
                          },
                          "endPeakTime": {
                            "value": "[parameters('scalingEndPeakTime')]"
                          },
                          "hostPoolName": {
                            "value": "[parameters('hostPoolName')]"
                          },
                          "hostPoolResourceGroupName": {
                            "value": "[parameters('resourceGroupControlPlane')]"
                          },
                          "hybridRunbookWorkerGroupName": {
                            "value": "[parameters('hybridRunbookWorkerGroupName')]"
                          },
                          "limitSecondsToForceLogOffUser": {
                            "value": "[parameters('scalingLimitSecondsToForceLogOffUser')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "managementVirtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          },
                          "minimumNumberOfRdsh": {
                            "value": "[parameters('scalingMinimumNumberOfRdsh')]"
                          },
                          "resourceGroupControlPlane": {
                            "value": "[parameters('resourceGroupControlPlane')]"
                          },
                          "resourceGroupHosts": {
                            "value": "[parameters('resourceGroupHosts')]"
                          },
                          "sessionThresholdPerCPU": {
                            "value": "[parameters('scalingSessionThresholdPerCPU')]"
                          },
                          "tags": {
                            "value": "[variables('tagsAutomationAccounts')]"
                          },
                          "timeDifference": {
                            "value": "[parameters('timeDifference')]"
                          },
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          },
                          "timeZone": {
                            "value": "[parameters('timeZone')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "18165978877365317351"
                            }
                          },
                          "parameters": {
                            "artifactsUri": {
                              "type": "string"
                            },
                            "automationAccountName": {
                              "type": "string"
                            },
                            "beginPeakTime": {
                              "type": "string"
                            },
                            "endPeakTime": {
                              "type": "string"
                            },
                            "hostPoolName": {
                              "type": "string"
                            },
                            "hostPoolResourceGroupName": {
                              "type": "string"
                            },
                            "hybridRunbookWorkerGroupName": {
                              "type": "string"
                            },
                            "limitSecondsToForceLogOffUser": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "managementVirtualMachineName": {
                              "type": "string"
                            },
                            "minimumNumberOfRdsh": {
                              "type": "string"
                            },
                            "resourceGroupControlPlane": {
                              "type": "string"
                            },
                            "resourceGroupHosts": {
                              "type": "string"
                            },
                            "sessionThresholdPerCPU": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timeDifference": {
                              "type": "string"
                            },
                            "time": {
                              "type": "string",
                              "defaultValue": "[utcNow('u')]"
                            },
                            "timestamp": {
                              "type": "string"
                            },
                            "timeZone": {
                              "type": "string"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "roleAssignments": [
                              "[parameters('resourceGroupControlPlane')]",
                              "[parameters('resourceGroupHosts')]"
                            ],
                            "runbookFileName": "Set-HostPoolScaling.ps1",
                            "scriptFileName": "Set-AutomationRunbook.ps1"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "schedules",
                                "count": "[length(range(0, 4))]"
                              },
                              "type": "Microsoft.Automation/automationAccounts/schedules",
                              "apiVersion": "2022-08-08",
                              "name": "[format('{0}/{1}', parameters('automationAccountName'), format('{0}_{1}min', parameters('hostPoolName'), mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                              "properties": {
                                "advancedSchedule": {},
                                "description": null,
                                "expiryTime": null,
                                "frequency": "Hour",
                                "interval": 1,
                                "startTime": "[dateTimeAdd(parameters('time'), format('PT{0}M', mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                "timeZone": "[parameters('timeZone')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "jobSchedules",
                                "count": "[length(range(0, 4))]"
                              },
                              "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                              "apiVersion": "2022-08-08",
                              "name": "[format('{0}/{1}', parameters('automationAccountName'), guid(parameters('time'), variables('runbookFileName'), parameters('hostPoolName'), string(range(0, 4)[copyIndex()])))]",
                              "properties": {
                                "parameters": {
                                  "beginPeakTime": "[parameters('beginPeakTime')]",
                                  "endPeakTime": "[parameters('endPeakTime')]",
                                  "EnvironmentName": "[environment().name]",
                                  "hostPoolName": "[parameters('hostPoolName')]",
                                  "limitSecondsToForceLogOffUser": "[parameters('limitSecondsToForceLogOffUser')]",
                                  "LogOffMessageBody": "Your session will be logged off. Please save and close everything.",
                                  "LogOffMessageTitle": "Machine is about to shutdown.",
                                  "MaintenanceTagName": "Maintenance",
                                  "minimumNumberOfRdsh": "[parameters('minimumNumberOfRdsh')]",
                                  "ResourceGroupName": "[parameters('hostPoolResourceGroupName')]",
                                  "sessionThresholdPerCPU": "[parameters('sessionThresholdPerCPU')]",
                                  "SubscriptionId": "[subscription().subscriptionId]",
                                  "TenantId": "[subscription().tenantId]",
                                  "timeDifference": "[parameters('timeDifference')]"
                                },
                                "runbook": {
                                  "name": "[replace(variables('runbookFileName'), '.ps1', '')]"
                                },
                                "runOn": "[parameters('hybridRunbookWorkerGroupName')]",
                                "schedule": {
                                  "name": "[format('{0}_{1}min', parameters('hostPoolName'), mul(add(range(0, 4)[range(0, 4)[copyIndex()]], 1), 15))]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('Runbook_{0}', parameters('timestamp')))]",
                                "[resourceId('Microsoft.Automation/automationAccounts/schedules', parameters('automationAccountName'), format('{0}_{1}min', parameters('hostPoolName'), mul(add(range(0, 4)[range(0, 4)[copyIndex()]], 1), 15)))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Runbook_{0}', parameters('timestamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileUris": {
                                    "value": [
                                      "[format('{0}{1}', parameters('artifactsUri'), variables('runbookFileName'))]",
                                      "[format('{0}{1}', parameters('artifactsUri'), variables('scriptFileName'))]"
                                    ]
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "parameters": {
                                    "value": "[format('-AutomationAccountName {0} -Environment {1} -ResourceGroupName {2} -RunbookFileName {3} -SubscriptionId {4} -TenantId {5} -UserAssignedIdentityClientId {6}', parameters('automationAccountName'), environment().name, resourceGroup().name, variables('runbookFileName'), subscription().subscriptionId, tenant().tenantId, parameters('userAssignedIdentityClientId'))]"
                                  },
                                  "scriptFileName": {
                                    "value": "[variables('scriptFileName')]"
                                  },
                                  "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject('value', parameters('tags')['Microsoft.Compute/virtualMachines']), createObject('value', createObject()))]",
                                  "userAssignedIdentityClientId": {
                                    "value": "[parameters('userAssignedIdentityClientId')]"
                                  },
                                  "virtualMachineName": {
                                    "value": "[parameters('managementVirtualMachineName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "5322300289308830902"
                                    }
                                  },
                                  "parameters": {
                                    "fileUris": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "securestring"
                                    },
                                    "scriptFileName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "timestamp": {
                                      "type": "string",
                                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                                    },
                                    "userAssignedIdentityClientId": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-03-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "Microsoft.Compute",
                                        "type": "CustomScriptExtension",
                                        "typeHandlerVersion": "1.10",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                          "timestamp": "[parameters('timestamp')]"
                                        },
                                        "protectedSettings": {
                                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                          "fileUris": "[parameters('fileUris')]",
                                          "managedIdentity": {
                                            "clientId": "[parameters('userAssignedIdentityClientId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "value": {
                                      "type": "object",
                                      "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(range(0, length(variables('roleAssignments'))))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('RoleAssignment_{0}_{1}', range(0, length(variables('roleAssignments')))[copyIndex()], variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]])]",
                              "resourceGroup": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "PrincipalId": {
                                    "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2022-08-08', 'full').identity.principalId]"
                                  },
                                  "PrincipalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "RoleDefinitionId": {
                                    "value": "40c5ff49-9181-41f8-ae61-143b0e78555e"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "12785629321959268271"
                                    }
                                  },
                                  "parameters": {
                                    "PrincipalId": {
                                      "type": "string"
                                    },
                                    "PrincipalType": {
                                      "type": "string"
                                    },
                                    "RoleDefinitionId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                                      "properties": {
                                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                                        "principalId": "[parameters('PrincipalId')]",
                                        "principalType": "[parameters('PrincipalType')]"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('RecoveryServices_VirtualMachines_{0}', parameters('timestamp')))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('FSLogix_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp')))]",
                "rgs"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('CleanUp_{0}', parameters('timestamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "fslogixStorageService": {
                    "value": "[parameters('fslogixStorageService')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
                  },
                  "scalingTool": {
                    "value": "[parameters('scalingTool')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.virtualMachineName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "14408164812996156104"
                    }
                  },
                  "parameters": {
                    "fslogixStorageService": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "scalingTool": {
                      "type": "bool"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[and(not(parameters('scalingTool')), not(equals(parameters('fslogixStorageService'), 'AzureFiles Premium')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RemoveManagementVirtualMachine_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "Location": {
                            "value": "[parameters('location')]"
                          },
                          "UserAssignedIdentityClientId": {
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          "VirtualMachineName": {
                            "value": "[parameters('virtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "12785568757146296480"
                            }
                          },
                          "parameters": {
                            "Location": {
                              "type": "string"
                            },
                            "UserAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "VirtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/runCommands",
                              "apiVersion": "2023-03-01",
                              "name": "[format('{0}/{1}', parameters('VirtualMachineName'), 'RunCommand')]",
                              "location": "[parameters('Location')]",
                              "properties": {
                                "treatFailureAsDeploymentFailure": true,
                                "asyncExecution": true,
                                "parameters": [
                                  {
                                    "name": "Environment",
                                    "value": "[environment().name]"
                                  },
                                  {
                                    "name": "ResourceGroupName",
                                    "value": "[resourceGroup().name]"
                                  },
                                  {
                                    "name": "SubscriptionId",
                                    "value": "[subscription().subscriptionId]"
                                  },
                                  {
                                    "name": "TenantId",
                                    "value": "[tenant().tenantId]"
                                  },
                                  {
                                    "name": "UserAssignedIdentityClientId",
                                    "value": "[parameters('UserAssignedIdentityClientId')]"
                                  },
                                  {
                                    "name": "VirtualMachineName",
                                    "value": "[parameters('VirtualMachineName')]"
                                  }
                                ],
                                "source": {
                                  "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        Start-Sleep -Seconds 30\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId\r\n        Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -NoWait -Force\r\n      "
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('FSLogix_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('SessionHosts_{0}', parameters('timestamp')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-entra-domain-services-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-image-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-esri-enterprise-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminPassword": {
            "value": "[parameters('localAdministratorPassword')]"
          },
          "adminUsername": {
            "value": "[parameters('localAdministratorUsername')]"
          },
          "arcgisServiceAccountIsDomainAccount": {
            "value": true
          },
          "arcgisServiceAccountPassword": {
            "value": "[parameters('arcgisServiceAccountPassword')]"
          },
          "arcgisServiceAccountUserName": {
            "value": "[parameters('arcgisServiceAccountUserName')]"
          },
          "architecture": {
            "value": "singletier"
          },
          "artifactsContainerName": {
            "value": "[parameters('containerName')]"
          },
          "artifactsStorageAccountName": {
            "value": "[split(parameters('storageAccountResourceId'), '/')[8]]"
          },
          "artifactsStorageAccountResourceGroupName": {
            "value": "[split(parameters('storageAccountResourceId'), '/')[4]]"
          },
          "artifactsStorageAccountSubscriptionId": {
            "value": "[split(parameters('storageAccountResourceId'), '/')[2]]"
          },
          "azureFirewallName": {
            "value": "[split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.azureFirewallResourceId.value, '/')[8]]"
          },
          "certificateFileName": {
            "value": "[parameters('certificateFileName')]"
          },
          "certificatePassword": {
            "value": "[parameters('certificatePassword')]"
          },
          "deployDefender": {
            "value": false
          },
          "diskEncryptionSetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
          },
          "enableGraphDataStore": {
            "value": false
          },
          "enableMonitoring": {
            "value": true
          },
          "enableObjectDataStore": {
            "value": false
          },
          "enableSpatiotemporalBigDataStore": {
            "value": true
          },
          "enableTileCacheDataStore": {
            "value": true
          },
          "externalDnsHostname": {
            "value": "[format('esri.{0}', parameters('domainName'))]"
          },
          "hubResourceGroupName": {
            "value": "[split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubVirtualNetworkResourceId.value, '/')[4]]"
          },
          "hubSubscriptionId": {
            "value": "[subscription().subscriptionId]"
          },
          "hubVirtualNetworkName": {
            "value": "[split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubVirtualNetworkResourceId.value, '/')[8]]"
          },
          "joinEntraDomain": {
            "value": false
          },
          "joinWindowsDomain": {
            "value": true
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "portalLicenseFile": {
            "value": "[parameters('portalLicenseFile')]"
          },
          "portalLicenseUserTypeId": {
            "value": "[parameters('portalLicenseUserTypeId')]"
          },
          "primarySiteAdministratorAccountPassword": {
            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
          },
          "primarySiteAdministratorAccountUserName": {
            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
          },
          "resourcePrefix": {
            "value": "[parameters('resourcePrefix')]"
          },
          "selfSignedCertificatePassword": {
            "value": "[parameters('certificatePassword')]"
          },
          "serverLicenseFile": {
            "value": "[parameters('serverLicenseFile')]"
          },
          "spokelogAnalyticsWorkspaceResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
          },
          "useAzureFiles": {
            "value": false
          },
          "useCloudStorage": {
            "value": false
          },
          "windowsDomainAdministratorPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "windowsDomainAdministratorUserName": {
            "value": "[parameters('domainJoinUsername')]"
          },
          "windowsDomainName": {
            "value": "[parameters('domainName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.26.54.24096",
              "templateHash": "1813883205934201037"
            }
          },
          "parameters": {
            "adminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password for the local administrator account on the virtual machines."
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "The username for the local adminsitrator account on the virtual machines."
              }
            },
            "applicationGatewaySubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.135.0/24",
              "metadata": {
                "description": "The address prefix for the subnet of the application gateway."
              }
            },
            "arcgisServiceAccountIsDomainAccount": {
              "type": "bool",
              "metadata": {
                "description": "Determine whether the ArcGIS Service Account is a domain account."
              }
            },
            "arcgisServiceAccountPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password for the ArcGIS service account."
              }
            },
            "arcgisServiceAccountUserName": {
              "type": "string",
              "metadata": {
                "description": "The username for the ArcGIS service account."
              }
            },
            "artifactsStorageAccountName": {
              "type": "string",
              "metadata": {
                "description": "The name of the storage account for the deployment artifacts."
              }
            },
            "artifactsContainerName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Blobs container for the deployment artifacts."
              }
            },
            "artifactsStorageAccountResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group for the artifacts storage account."
              }
            },
            "artifactsStorageAccountSubscriptionId": {
              "type": "string",
              "metadata": {
                "description": "The subscription ID for the artifacts storage account."
              }
            },
            "architecture": {
              "type": "string",
              "allowedValues": [
                "singletier",
                "multitier"
              ],
              "metadata": {
                "description": "The architecture for ESRI, either Single Tier or Multi Tier."
              }
            },
            "azureFirewallName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Firewall in the Hub."
              }
            },
            "certificatePassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password for the certificate."
              }
            },
            "certificateFileName": {
              "type": "string",
              "metadata": {
                "description": "The file name for the certificate."
              }
            },
            "dataStoreVirtualMachineOSDiskSize": {
              "type": "int",
              "defaultValue": 128,
              "allowedValues": [
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32767
              ],
              "metadata": {
                "description": "The OS disk size for virtual machines hosting the data store."
              }
            },
            "debugMode": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Determine whether debug mode is enabled for ESRI Enterprise."
              }
            },
            "defaultSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.136.0/24",
              "metadata": {
                "description": "The address prefix for the subnet containing the ESRI Enterpise servers."
              }
            },
            "deployDefender": {
              "type": "bool",
              "metadata": {
                "description": "Determine whether to deploy Defender for Cloud. This is only necessary if the target description does not have Defender for Cloud already enabled."
              }
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
              }
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "emailSecurityContact": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The email address or distribution list to receive security alerts."
              }
            },
            "enableDataStoreVirtualMachineDataDisk": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Determine whether to enable the Data Store on the virtual machine data disk"
              }
            },
            "enableGraphDataStore": {
              "type": "bool",
              "metadata": {
                "description": "Determine whether to enable the Graph Data Store."
              }
            },
            "enableGraphDataStoreVirtualMachineDataDisk": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Determine whether to enable the Graph Data Store on the virtual machine data disk."
              }
            },
            "enableMonitoring": {
              "type": "bool",
              "metadata": {
                "description": "Determine whether to enable monitoring for the virtual machines."
              }
            },
            "enableObjectDataStore": {
              "type": "bool",
              "metadata": {
                "description": "Determine whether to enable Object Data Store."
              }
            },
            "enableObjectDataStoreVirtualMachineDataDisk": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Determine whether to enable the Object Data Store on the virtual machine data disk."
              }
            },
            "enableServerLogHarvesterPlugin": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Determine whether to enable the Server Log Harvester Plugin."
              }
            },
            "enableSpatiotemporalBigDataStore": {
              "type": "bool",
              "metadata": {
                "description": "Determine whether to enable the Spatiotemporal Big Data Store."
              }
            },
            "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Determine whether to enable the Spatiotemporal Big Data Store on the virtual machine data disk."
              }
            },
            "enableTileCacheDataStore": {
              "type": "bool",
              "metadata": {
                "description": "Determine whether to enable the Tile Cache Data Store."
              }
            },
            "enableTileCacheDataStoreVirtualMachineDataDisk": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Determine whether to enable the Tile Cache Data Store on the virtual machine data disk."
              }
            },
            "enableVirtualMachineDataDisk": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Determine whether to enable the virtual machine data disk."
              }
            },
            "externalDnsHostname": {
              "type": "string",
              "metadata": {
                "description": "External DNS Hostname"
              }
            },
            "graphDataStoreVirtualMachineOSDiskSize": {
              "type": "int",
              "defaultValue": 128,
              "allowedValues": [
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32767
              ],
              "metadata": {
                "description": "Graph Data Store Virtual Machine OS Disk Size"
              }
            },
            "hubResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group for the Hub."
              }
            },
            "hubSubscriptionId": {
              "type": "string",
              "metadata": {
                "description": "The subscription ID for the Hub."
              }
            },
            "hubVirtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "The name of the virtual network in the Hub."
              }
            },
            "isUpdatingCertificates": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Updating Certificates"
              }
            },
            "joinEntraDomain": {
              "type": "bool",
              "metadata": {
                "description": "Join Entra Domain"
              }
            },
            "joinWindowsDomain": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Join Windows Domain"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The target location for the Azure resources."
              }
            },
            "numberOfDataStoreVirtualMachines": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "The number of data store virtual machines."
              }
            },
            "numberOfEsriServers": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "The number of ESRI servers."
              }
            },
            "numberOfEsrispatiotemporalBigDataStoreVirtualMachines": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "The number of ESRI Spatiotemporal Big Data Store virtual machines."
              }
            },
            "numberOfFileShareVirtualMachineNames": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "The number of file share virtual machines."
              }
            },
            "numberOfGraphDataStoreVirtualMachineNames": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "The number of graph data store virtual machines."
              }
            },
            "numberOfObjectDataStoreVirtualMachines": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "metadata": {
                "description": "The number of object data store virtual machines."
              }
            },
            "numberOfPortalVirtualMachines": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "The number of portal virtual machines."
              }
            },
            "numberOfTileCacheDataStoreVirtualMachineNames": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "The number of tile cache data store virtual machines."
              }
            },
            "objectDataStoreVirtualMachineOSDiskSize": {
              "type": "int",
              "defaultValue": 128,
              "allowedValues": [
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32767
              ],
              "metadata": {
                "description": "The OS disk size for the Object Data Store Virtual Machine."
              }
            },
            "ouPath": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The distinguished name for the OU path when domain joining the virtual machines."
              }
            },
            "portalLicenseFile": {
              "type": "string",
              "metadata": {
                "description": "The base 64 encoded string containing the license file for the ESRI portal."
              }
            },
            "portalLicenseUserTypeId": {
              "type": "string",
              "allowedValues": [
                "creatorUT",
                "editorUT",
                "fieldWorkerUT",
                "GISProfessionalAdvUT",
                "GISProfessionalBasicUT",
                "GISProfessionalStdUT",
                "IndoorsUserUT",
                "insightsAnalystUT",
                "viewerUT"
              ],
              "metadata": {
                "description": "The license user type ID for the ESRI portal."
              }
            },
            "portalVirtualMachineOSDiskSize": {
              "type": "int",
              "defaultValue": 128,
              "allowedValues": [
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32767
              ],
              "metadata": {
                "description": "The OS disk size for the virtual machines hosting the ESRI portal."
              }
            },
            "primarySiteAdministratorAccountPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password for the ESRI Primary Site Administrator Account."
              }
            },
            "primarySiteAdministratorAccountUserName": {
              "type": "string",
              "metadata": {
                "description": "The username for the ESRI Primary Site Administrator Account."
              }
            },
            "resourcePrefix": {
              "type": "string",
              "metadata": {
                "description": "The prefix for naming the Azure resources."
              }
            },
            "secondaryDnsHostName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The secondary host name"
              }
            },
            "selfSignedCertificatePassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password for the self-signed certificate."
              }
            },
            "serverLicenseFile": {
              "type": "string",
              "metadata": {
                "description": "The base 64 encoded string containing the license file for ESRI Enterprise server."
              }
            },
            "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
              "type": "int",
              "defaultValue": 128,
              "allowedValues": [
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32767
              ]
            },
            "spokelogAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID for the log analytics workspace in the Operations spoke."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The metadata of key / vaule pairs for the Azure resources."
              }
            },
            "tileCacheDataStoreVirtualMachineOSDiskSize": {
              "type": "int",
              "defaultValue": 128,
              "allowedValues": [
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32767
              ],
              "metadata": {
                "description": "The OS disk size on the virutal machine for the tile cache data store."
              }
            },
            "useAzureFiles": {
              "type": "bool",
              "metadata": {
                "description": "Determine whether to use Azure Files for storage."
              }
            },
            "useCloudStorage": {
              "type": "bool",
              "metadata": {
                "description": "Determine whether to use cloud storage."
              }
            },
            "virtualMachineOSDiskSize": {
              "type": "int",
              "defaultValue": 128,
              "allowedValues": [
                64,
                128,
                256,
                512,
                1024,
                2048,
                4096,
                8192,
                16384,
                32767
              ],
              "metadata": {
                "description": "The size of the virtual machine OS disk"
              }
            },
            "virtualMachineSize": {
              "type": "string",
              "defaultValue": "Standard_DS4_v2",
              "metadata": {
                "description": "The size of the virtual machines"
              }
            },
            "virtualNetworkAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.135.0/23",
              "metadata": {
                "description": "The virtual network address prefix"
              }
            },
            "windowsDomainAdministratorPassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "The password for the Windows domain administrator account."
              }
            },
            "windowsDomainAdministratorUserName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The username for the Windows domain administrator account."
              }
            },
            "windowsDomainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The name of the Windows domain."
              }
            },
            "workloadSubscriptionId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The GUID of the workload subscription."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "applicationGatewayUsableIpAddresses",
                "count": "[length(range(0, 4))]",
                "input": "[cidrHost(parameters('applicationGatewaySubnetAddressPrefix'), range(0, 4)[copyIndex('applicationGatewayUsableIpAddresses')])]"
              },
              {
                "name": "dataStoreVirtualMachines",
                "count": "[length(range(0, parameters('numberOfDataStoreVirtualMachines')))]",
                "input": "[format('vm-esri-ds-{0}', range(0, parameters('numberOfDataStoreVirtualMachines'))[copyIndex('dataStoreVirtualMachines')])]"
              },
              {
                "name": "fileShareVirtualMachines",
                "count": "[length(range(0, parameters('numberOfFileShareVirtualMachineNames')))]",
                "input": "[format('vm-esri-fl-{0}', range(0, parameters('numberOfFileShareVirtualMachineNames'))[copyIndex('fileShareVirtualMachines')])]"
              },
              {
                "name": "graphDataStoreVirtualMachines",
                "count": "[length(range(0, parameters('numberOfGraphDataStoreVirtualMachineNames')))]",
                "input": "[format('vm-esri-gr-{0}', range(0, parameters('numberOfGraphDataStoreVirtualMachineNames'))[copyIndex('graphDataStoreVirtualMachines')])]"
              },
              {
                "name": "objectDataStoreVirtualMachines",
                "count": "[length(range(0, parameters('numberOfObjectDataStoreVirtualMachines')))]",
                "input": "[format('vm-esri-od-{0}', range(0, parameters('numberOfObjectDataStoreVirtualMachines'))[copyIndex('objectDataStoreVirtualMachines')])]"
              },
              {
                "name": "portalVirtualMachines",
                "count": "[length(range(0, parameters('numberOfPortalVirtualMachines')))]",
                "input": "[format('vm-esri-pr-{0}', range(0, parameters('numberOfPortalVirtualMachines'))[copyIndex('portalVirtualMachines')])]"
              },
              {
                "name": "serverVirtualMachines",
                "count": "[length(range(0, parameters('numberOfEsriServers')))]",
                "input": "[format('vm-esri-sv-{0}', range(0, parameters('numberOfEsriServers'))[copyIndex('serverVirtualMachines')])]"
              },
              {
                "name": "spatiotemporalBigDataStoreVirtualMachines",
                "count": "[length(range(0, parameters('numberOfEsrispatiotemporalBigDataStoreVirtualMachines')))]",
                "input": "[format('vm-esri-sp-{0}', range(0, parameters('numberOfEsrispatiotemporalBigDataStoreVirtualMachines'))[copyIndex('spatiotemporalBigDataStoreVirtualMachines')])]"
              },
              {
                "name": "tileCacheDataStoreVirtualMachines",
                "count": "[length(range(0, parameters('numberOfTileCacheDataStoreVirtualMachineNames')))]",
                "input": "[format('vm-esri-tc-{0}', range(0, parameters('numberOfTileCacheDataStoreVirtualMachineNames'))[copyIndex('tileCacheDataStoreVirtualMachines')])]"
              }
            ],
            "resourceSuffix": "[parameters('resourcePrefix')]",
            "applicationGatewayName": "[format('{0}-appgw-esri', parameters('resourcePrefix'))]",
            "applicationGatewayPrivateIpAddress": "[variables('applicationGatewayUsableIpAddresses')[3]]",
            "availabilitySetName": "[format('{0}-avset-esri', parameters('resourcePrefix'))]",
            "container": "artifacts",
            "keyVaultCertificatesOfficer": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
            "keyVaultCryptoOfficer": "[resourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
            "keyVaultName": "[format('{0}-kv-esri', parameters('resourcePrefix'))]",
            "keyVaultSecretsOfficer": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
            "networkInterfaceName": "[format('{0}-nic-esri', parameters('resourcePrefix'))]",
            "portalContext": "portal",
            "portalLicenseFileName": "portalLicense.json",
            "privatelink_blob_name": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
            "privatelink_file_name": "[format('privatelink.file.{0}', environment().suffixes.storage)]",
            "privatelink_keyvaultDns_name": "[replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore')]",
            "publicIpAddressName": "[format('{0}-pip-esri', parameters('resourcePrefix'))]",
            "resourceGroupName": "[format('{0}-rg-esri-enterprise', parameters('resourcePrefix'))]",
            "serverContext": "server",
            "serverLicenseFileName": "serverLicense.prvc",
            "subscriptionId": "[subscription().subscriptionId]",
            "userAssignedManagedIdentityName": "[format('{0}-uami-esri-{1}', parameters('resourcePrefix'), variables('resourceSuffix'))]",
            "virtualMachineName": "[format('{0}-vm-esri', parameters('resourcePrefix'))]",
            "dataStoreVirtualMachineNames": "[join(variables('dataStoreVirtualMachines'), ',')]",
            "fileShareVirtualMachineName": "[join(variables('fileShareVirtualMachines'), ',')]",
            "graphDataStoreVirtualMachineNames": "[join(variables('graphDataStoreVirtualMachines'), ',')]",
            "objectDataStoreVirtualMachineNames": "[join(variables('objectDataStoreVirtualMachines'), ',')]",
            "portalVirtualMachineNames": "[join(variables('portalVirtualMachines'), ',')]",
            "serverVirtualMachineNames": "[join(variables('serverVirtualMachines'), ',')]",
            "spatiotemporalBigDataStoreVirtualMachineNames": "[join(variables('spatiotemporalBigDataStoreVirtualMachines'), ',')]",
            "tileCacheDataStoreVirtualMachineNames": "[join(variables('tileCacheDataStoreVirtualMachines'), ',')]",
            "dscDataStoreFunction": "DataStoreConfiguration",
            "dscGraphDataStoreFunction": "GraphDataStoreConfiguration",
            "dscObjectDataStoreFunction": "ObjectDataStoreConfiguration",
            "dscPortalFunction": "PortalConfiguration",
            "dscServerScriptFunction": "ServerConfiguration",
            "dscSingleTierConfiguration": "BaseDeploymentSingleTierConfiguration",
            "dscsSatiotemporalBigDataStoreFunction": "SpatiotemporalBigDataStoreConfiguration",
            "dscTileCacheDataStoreDscFunction": "TileCacheDataStoreConfiguration",
            "fileShareDscScriptFunction": "FileShareConfiguration",
            "isObjectDataStoreClustered": "[if(greaterOrEquals(parameters('numberOfObjectDataStoreVirtualMachines'), 3), true(), false())]",
            "isTileCacheDataStoreClustered": "[if(greaterOrEquals(parameters('numberOfTileCacheDataStoreVirtualMachineNames'), 1), true(), false())]",
            "isMultiMachineTileCacheDataStore": "[if(greaterOrEquals(parameters('numberOfTileCacheDataStoreVirtualMachineNames'), 1), true(), false())]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2019-05-01",
              "name": "[variables('resourceGroupName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "condition": "[equals(parameters('architecture'), 'singletier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-single-tier-datastore-types-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "enableSpatiotemporalBigDataStore": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', parameters('enableSpatiotemporalBigDataStore')), createObject('value', false()))]",
                  "enableTileCacheDataStore": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', parameters('enableTileCacheDataStore')), createObject('value', false()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "13758339223885887518"
                    }
                  },
                  "parameters": {
                    "enableTileCacheDataStore": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "enableSpatiotemporalBigDataStore": {
                      "type": "bool",
                      "defaultValue": false
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "dataStoreTypesForSingleTier",
                        "count": "[length(variables('singleTierDataStoreTypes'))]",
                        "input": "[if(or(or(equals(variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'Relational'), equals(variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'TileCache')), equals(variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'SpatioTemporal')), variables('singleTierDataStoreTypes')[copyIndex('dataStoreTypesForSingleTier')], 'Relational')]"
                      }
                    ],
                    "singleTierDataStoreTypes": [
                      "Relational",
                      "[if(parameters('enableTileCacheDataStore'), 'TileCache', 'Relational')]",
                      "[if(parameters('enableSpatiotemporalBigDataStore'), 'SpatioTemporal', 'Relational')]"
                    ],
                    "dataStoreTypesForBaseDeployment": "[union(variables('singleTierDataStoreTypes'), variables('dataStoreTypesForSingleTier'))]"
                  },
                  "resources": [],
                  "outputs": {
                    "dataStoreTypesForBaseDeploymentServers": {
                      "type": "string",
                      "value": "[join(variables('dataStoreTypesForBaseDeployment'), ',')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGatewayName": {
                    "value": "[variables('applicationGatewayName')]"
                  },
                  "applicationGatewayPrivateIpAddress": {
                    "value": "[variables('applicationGatewayPrivateIpAddress')]"
                  },
                  "applicationGatewaySubnetAddressPrefix": {
                    "value": "[parameters('applicationGatewaySubnetAddressPrefix')]"
                  },
                  "defaultSubnetAddressPrefix": {
                    "value": "[parameters('defaultSubnetAddressPrefix')]"
                  },
                  "deployDefender": {
                    "value": "[parameters('deployDefender')]"
                  },
                  "emailSecurityContact": {
                    "value": "[parameters('emailSecurityContact')]"
                  },
                  "externalDnsHostname": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "firewallPrivateIPAddress": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/azureFirewalls', parameters('azureFirewallName')), '2023-05-01').ipConfigurations[0].properties.privateIPAddress]"
                  },
                  "hubResourceGroupName": {
                    "value": "[parameters('hubResourceGroupName')]"
                  },
                  "hubSubscriptionId": {
                    "value": "[parameters('hubSubscriptionId')]"
                  },
                  "hubVirtualNetworkId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('hubVirtualNetworkName'))]"
                  },
                  "hubVirtualNetworkName": {
                    "value": "[parameters('hubVirtualNetworkName')]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('hubVirtualNetworkName'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('spokelogAnalyticsWorkspaceResourceId')]"
                  },
                  "privatelink_keyvaultDns_name": {
                    "value": "[split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/privateDnsZones', variables('privatelink_keyvaultDns_name')), '/')[8]]"
                  },
                  "resourceGroupName": {
                    "value": "[variables('resourceGroupName')]"
                  },
                  "resourcePrefix": {
                    "value": "[parameters('resourcePrefix')]"
                  },
                  "virtualNetworkAddressPrefix": {
                    "value": "[parameters('virtualNetworkAddressPrefix')]"
                  },
                  "workloadSubscriptionId": {
                    "value": "[parameters('workloadSubscriptionId')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "2623986189587500516"
                    }
                  },
                  "parameters": {
                    "resourcePrefix": {
                      "type": "string",
                      "defaultValue": "esri",
                      "minLength": 3,
                      "maxLength": 10,
                      "metadata": {
                        "description": "A prefix, 3 to 10 characters in length, to append to resource names (e.g. \"dev\", \"test\", \"prod\", \"mlz\"). It defaults to \"mlz\"."
                      }
                    },
                    "resourceSuffix": {
                      "type": "string",
                      "defaultValue": "mlz",
                      "minLength": 3,
                      "maxLength": 6,
                      "metadata": {
                        "description": "A suffix, 3 to 6 characters in length, to append to resource names (e.g. \"dev\", \"test\", \"prod\", \"mlz\"). It defaults to \"mlz\"."
                      }
                    },
                    "deployDefender": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string",
                      "defaultValue": "[utcNow()]"
                    },
                    "emailSecurityContact": {
                      "type": "string"
                    },
                    "firewallPrivateIPAddress": {
                      "type": "string"
                    },
                    "hubResourceGroupName": {
                      "type": "string"
                    },
                    "hubSubscriptionId": {
                      "type": "string"
                    },
                    "hubVirtualNetworkName": {
                      "type": "string"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "vNetDnsServers": {
                      "type": "array",
                      "defaultValue": [
                        "[parameters('firewallPrivateIPAddress')]"
                      ]
                    },
                    "workloadName": {
                      "type": "string",
                      "defaultValue": "esri"
                    },
                    "workloadSubscriptionId": {
                      "type": "string"
                    },
                    "applicationGatewayName": {
                      "type": "string"
                    },
                    "applicationGatewaySubnetAddressPrefix": {
                      "type": "string"
                    },
                    "defaultSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "privatelink_keyvaultDns_name": {
                      "type": "string"
                    },
                    "hubVirtualNetworkId": {
                      "type": "string"
                    },
                    "externalDnsHostname": {
                      "type": "string"
                    },
                    "applicationGatewayPrivateIpAddress": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    }
                  },
                  "variables": {
                    "resourceToken": "resource_token",
                    "nameToken": "name_token",
                    "namingConvention": "[format('{0}-{1}-{2}-{3}', toLower(parameters('resourcePrefix')), variables('resourceToken'), variables('nameToken'), toLower(parameters('resourceSuffix')))]",
                    "virtualNetworkNamingConvention": "[replace(variables('namingConvention'), variables('resourceToken'), 'vnet')]",
                    "routeTableNamingConvention": "[replace(replace(variables('namingConvention'), variables('nameToken'), 'esri'), variables('resourceToken'), 'rt')]",
                    "workloadVirtualNetworkName": "[replace(variables('virtualNetworkNamingConvention'), variables('nameToken'), parameters('workloadName'))]",
                    "defaultTags": {
                      "DeploymentType": "MissionLandingZoneARM"
                    },
                    "calculatedTags": "[union(parameters('tags'), variables('defaultTags'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('workloadSubscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "applicationGatewayName": {
                            "value": "[parameters('applicationGatewayName')]"
                          },
                          "applicationGatewaySubnetAddressPrefix": {
                            "value": "[parameters('applicationGatewaySubnetAddressPrefix')]"
                          },
                          "defaultSubnetAddressPrefix": {
                            "value": "[parameters('defaultSubnetAddressPrefix')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "resourceGroup": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "routeTableName": {
                            "value": "[variables('routeTableNamingConvention')]"
                          },
                          "routeTableRouteNextHopIpAddress": {
                            "value": "[parameters('firewallPrivateIPAddress')]"
                          },
                          "tags": {
                            "value": "[variables('calculatedTags')]"
                          },
                          "virtualNetworkAddressPrefix": {
                            "value": "[parameters('virtualNetworkAddressPrefix')]"
                          },
                          "virtualNetworkName": {
                            "value": "[variables('workloadVirtualNetworkName')]"
                          },
                          "vNetDnsServers": {
                            "value": "[parameters('vNetDnsServers')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "3556296216752459961"
                            }
                          },
                          "parameters": {
                            "applicationGatewayName": {
                              "type": "string"
                            },
                            "applicationGatewaySubnetAddressPrefix": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "resourceGroup": {
                              "type": "string"
                            },
                            "routeTableName": {
                              "type": "string"
                            },
                            "routeTableRouteNextHopIpAddress": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualNetworkAddressPrefix": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "defaultSubnetAddressPrefix": {
                              "type": "string"
                            },
                            "vNetDnsServers": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('virtualNetworkName')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/virtualNetworks'), parameters('tags')['Microsoft.Network/virtualNetworks'], createObject())]",
                              "properties": {
                                "addressSpace": {
                                  "addressPrefixes": [
                                    "[parameters('virtualNetworkAddressPrefix')]"
                                  ]
                                },
                                "dhcpOptions": "[if(not(equals(parameters('vNetDnsServers'), null())), createObject('dnsServers', parameters('vNetDnsServers')), null())]",
                                "subnets": [
                                  {
                                    "name": "default",
                                    "properties": {
                                      "addressPrefix": "[parameters('defaultSubnetAddressPrefix')]",
                                      "delegations": [],
                                      "privateEndpointNetworkPolicies": "Disabled",
                                      "privateLinkServiceNetworkPolicies": "Enabled",
                                      "routeTable": {
                                        "id": "[reference(resourceId('Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value]"
                                      }
                                    },
                                    "type": "Microsoft.Network/virtualNetworks/subnets"
                                  },
                                  {
                                    "name": "appGatewaySubnet",
                                    "properties": {
                                      "addressPrefix": "[parameters('applicationGatewaySubnetAddressPrefix')]",
                                      "applicationGatewayIPConfigurations": [
                                        {
                                          "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/gatewayIPConfigurations', parameters('applicationGatewayName'), 'appGatewayIpConfig')]"
                                        }
                                      ],
                                      "delegations": [],
                                      "privateEndpointNetworkPolicies": "Disabled",
                                      "privateLinkServiceNetworkPolicies": "Disabled"
                                    },
                                    "type": "Microsoft.Network/virtualNetworks/subnets"
                                  }
                                ],
                                "virtualNetworkPeerings": [],
                                "enableDdosProtection": false
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', 'routeTable')]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), 'appGatewaySubnet')]",
                              "properties": {
                                "addressPrefix": "[parameters('applicationGatewaySubnetAddressPrefix')]",
                                "applicationGatewayIPConfigurations": [
                                  {
                                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/gatewayIPConfigurations', parameters('applicationGatewayName'), 'appGatewayIpConfig')]"
                                  }
                                ],
                                "delegations": [],
                                "privateEndpointNetworkPolicies": "Disabled",
                                "privateLinkServiceNetworkPolicies": "Enabled"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), 'default')]",
                              "properties": {
                                "addressPrefix": "[parameters('defaultSubnetAddressPrefix')]",
                                "delegations": [],
                                "privateEndpointNetworkPolicies": "Disabled",
                                "privateLinkServiceNetworkPolicies": "Enabled",
                                "routeTable": {
                                  "id": "[reference(resourceId('Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]",
                                "[resourceId('Microsoft.Resources/deployments', 'routeTable')]",
                                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "routeTable",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "name": {
                                    "value": "[parameters('routeTableName')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "routeTableNextHopIpAddress": {
                                    "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "3208799972746950006"
                                    }
                                  },
                                  "parameters": {
                                    "location": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "routeTableRouteName": {
                                      "type": "string",
                                      "defaultValue": "default_route"
                                    },
                                    "routeTableRouteAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "0.0.0.0/0"
                                    },
                                    "routeTableNextHopIpAddress": {
                                      "type": "string"
                                    },
                                    "routeTableRouteNextHopType": {
                                      "type": "string",
                                      "defaultValue": "VirtualAppliance"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/routeTables",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "routes": [
                                          {
                                            "name": "[parameters('routeTableRouteName')]",
                                            "properties": {
                                              "addressPrefix": "[parameters('routeTableRouteAddressPrefix')]",
                                              "nextHopIpAddress": "[parameters('routeTableNextHopIpAddress')]",
                                              "nextHopType": "[parameters('routeTableRouteNextHopType')]"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "id": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "appGatewaySubnetAddressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet'), '2023-04-01').addressPrefix]"
                            },
                            "appGatewaySubnetId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                            },
                            "appGatewaySubnetName": {
                              "type": "string",
                              "value": "appGatewaySubnet"
                            },
                            "subnetAddressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'default'), '2023-04-01').addressPrefix]"
                            },
                            "subnetName": {
                              "type": "string",
                              "value": "default"
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'default')]"
                            },
                            "vNetAddressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2023-04-01').addressSpace.addressPrefixes[0]]"
                            },
                            "vNetid": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                            },
                            "vNetName": {
                              "type": "string",
                              "value": "[parameters('virtualNetworkName')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-virtualNetworkLink--{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('hubSubscriptionId')]",
                      "resourceGroup": "[parameters('hubResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privatelink_keyvaultDns_name": {
                            "value": "[parameters('privatelink_keyvaultDns_name')]"
                          },
                          "workloadVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetName.value]"
                          },
                          "virtualNetworkId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetid.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "15109711853711429239"
                            }
                          },
                          "parameters": {
                            "privatelink_keyvaultDns_name": {
                              "type": "string"
                            },
                            "workloadVirtualNetworkName": {
                              "type": "string"
                            },
                            "virtualNetworkId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privatelink_keyvaultDns_name'), parameters('workloadVirtualNetworkName'))]",
                              "location": "global",
                              "properties": {
                                "virtualNetwork": {
                                  "id": "[parameters('virtualNetworkId')]"
                                },
                                "registrationEnabled": false
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('{0}-to-hub-vnet-peering', parameters('workloadName')), 64)]",
                      "subscriptionId": "[parameters('workloadSubscriptionId')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "spokeName": {
                            "value": "[parameters('workloadName')]"
                          },
                          "spokeResourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "spokeVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetName.value]"
                          },
                          "hubVirtualNetworkName": {
                            "value": "[parameters('hubVirtualNetworkName')]"
                          },
                          "hubVirtualNetworkResourceId": {
                            "value": "[parameters('hubVirtualNetworkResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "13987612441032900755"
                            }
                          },
                          "parameters": {
                            "spokeName": {
                              "type": "string"
                            },
                            "spokeResourceGroupName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkName": {
                              "type": "string"
                            },
                            "hubVirtualNetworkName": {
                              "type": "string"
                            },
                            "hubVirtualNetworkResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-to-hub-vnet-peering', parameters('spokeName'))]",
                              "resourceGroup": "[parameters('spokeResourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('{0}/to-{1}', parameters('spokeVirtualNetworkName'), parameters('hubVirtualNetworkName'))]"
                                  },
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('hubVirtualNetworkResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "10509951780144584720"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-virtualNetworkLink--{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('hub-to-{0}-vnet-peering', parameters('workloadName')), 64)]",
                      "subscriptionId": "[parameters('workloadSubscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "hubVirtualNetworkName": {
                            "value": "[parameters('hubVirtualNetworkName')]"
                          },
                          "hubResourceGroupName": {
                            "value": "[parameters('hubResourceGroupName')]"
                          },
                          "spokeVirtualNetworkName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetName.value]"
                          },
                          "spokeVirtualNetworkResourceId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetid.value]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "5664108101366069473"
                            }
                          },
                          "parameters": {
                            "hubResourceGroupName": {
                              "type": "string"
                            },
                            "hubVirtualNetworkName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkName": {
                              "type": "string"
                            },
                            "spokeVirtualNetworkResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "hubToSpokeVirtualNetworkPeering",
                              "resourceGroup": "[parameters('hubResourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('{0}/to-{1}', parameters('hubVirtualNetworkName'), parameters('spokeVirtualNetworkName'))]"
                                  },
                                  "remoteVirtualNetworkResourceId": {
                                    "value": "[parameters('spokeVirtualNetworkResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "10509951780144584720"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "remoteVirtualNetworkResourceId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                      "apiVersion": "2021-02-01",
                                      "name": "[parameters('name')]",
                                      "properties": {
                                        "allowForwardedTraffic": true,
                                        "remoteVirtualNetwork": {
                                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-virtualNetworkLink--{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix')))]",
                        "[subscriptionResourceId(parameters('workloadSubscriptionId'), 'Microsoft.Resources/deployments', take(format('{0}-to-hub-vnet-peering', parameters('workloadName')), 64))]"
                      ]
                    },
                    {
                      "condition": "[parameters('deployDefender')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('set-{0}-sub-defender', parameters('workloadName'))]",
                      "subscriptionId": "[parameters('workloadSubscriptionId')]",
                      "location": "[resourceGroup().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "emailSecurityContact": {
                            "value": "[parameters('emailSecurityContact')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "2376507858724004427"
                            }
                          },
                          "parameters": {
                            "defenderPlans": {
                              "type": "array",
                              "defaultValue": [
                                "VirtualMachines"
                              ],
                              "metadata": {
                                "description": "Defender Paid protection Plans. Even if a customer selects the free sku, at least 1 paid protection plan must be specified."
                              }
                            },
                            "enableAutoProvisioning": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Turn automatic deployment by Defender of the MMA (OMS VM extension) on or off"
                              }
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Specify the ID of your custom Log Analytics workspace to collect Defender data."
                              }
                            },
                            "emailSecurityContact": {
                              "type": "string",
                              "metadata": {
                                "description": "Email address of the contact, in the form of john@doe.com"
                              }
                            },
                            "policySetDescription": {
                              "type": "string",
                              "defaultValue": "The Microsoft Cloud Security Benchmark initiative represents the policies and controls implementing security recommendations defined in Microsoft Cloud Security Benchmark v2, see https://aka.ms/azsecbm. This also serves as the Microsoft Defender for Cloud default policy initiative. You can directly assign this initiative, or manage its policies and compliance results within Microsoft Defender.",
                              "metadata": {
                                "description": "Policy Initiative description field"
                              }
                            },
                            "defenderSkuTier": {
                              "type": "string",
                              "defaultValue": "Free",
                              "metadata": {
                                "description": "[Standard/Free] The SKU for Defender. It defaults to \"Free\"."
                              }
                            }
                          },
                          "variables": {
                            "autoProvisioning": "[if(parameters('enableAutoProvisioning'), 'On', 'Off')]",
                            "defenderPaidPlansSpecialHandlingAzurePublicList": [
                              "Api"
                            ],
                            "defenderPaidPlanConfig": {
                              "AzureCloud": {
                                "Api": {
                                  "subPlan": "P1"
                                }
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "defenderFreeAllClouds",
                                "count": "[length(parameters('defenderPlans'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[and(not(empty(parameters('defenderPlans'))), equals(parameters('defenderSkuTier'), 'Free'))]",
                              "type": "Microsoft.Security/pricings",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('defenderPlans')[copyIndex()]]",
                              "properties": {
                                "pricingTier": "[parameters('defenderSkuTier')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "defenderStandardNoSubplanNoExtensions",
                                "count": "[length(parameters('defenderPlans'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[and(and(not(empty(parameters('defenderPlans'))), equals(parameters('defenderSkuTier'), 'Standard')), not(contains(variables('defenderPaidPlansSpecialHandlingAzurePublicList'), parameters('defenderPlans')[copyIndex()])))]",
                              "type": "Microsoft.Security/pricings",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('defenderPlans')[copyIndex()]]",
                              "properties": {
                                "pricingTier": "[parameters('defenderSkuTier')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "defenderStandardSubplanExtensionsAzureCloud",
                                "count": "[length(parameters('defenderPlans'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[and(and(and(not(empty(parameters('defenderPlans'))), equals(parameters('defenderSkuTier'), 'Standard')), contains(variables('defenderPaidPlansSpecialHandlingAzurePublicList'), parameters('defenderPlans')[copyIndex()])), equals(environment().name, 'AzureCloud'))]",
                              "type": "Microsoft.Security/pricings",
                              "apiVersion": "2023-01-01",
                              "name": "[parameters('defenderPlans')[copyIndex()]]",
                              "properties": "[if(not(contains(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'subPlan')), createObject('pricingTier', parameters('defenderSkuTier')), createObject('pricingTier', parameters('defenderSkuTier'), 'subPlan', variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]].subPlan))]"
                            },
                            {
                              "type": "Microsoft.Security/autoProvisioningSettings",
                              "apiVersion": "2019-01-01",
                              "name": "default",
                              "properties": {
                                "autoProvision": "[variables('autoProvisioning')]"
                              }
                            },
                            {
                              "type": "Microsoft.Security/workspaceSettings",
                              "apiVersion": "2019-01-01",
                              "name": "default",
                              "properties": {
                                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                                "scope": "[subscription().id]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('emailSecurityContact')))]",
                              "type": "Microsoft.Security/securityContacts",
                              "apiVersion": "2020-01-01-preview",
                              "name": "default",
                              "properties": {
                                "notificationsByRole": {
                                  "roles": [
                                    "AccountAdmin",
                                    "Contributor",
                                    "Owner",
                                    "ServiceAdmin"
                                  ],
                                  "state": "On"
                                },
                                "alertNotifications": {
                                  "state": "On"
                                },
                                "emails": "[parameters('emailSecurityContact')]"
                              }
                            },
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2022-06-01",
                              "name": "Microsoft Cloud Security Benchmark",
                              "properties": {
                                "displayName": "Defender Default",
                                "description": "[parameters('policySetDescription')]",
                                "enforcementMode": "DoNotEnforce",
                                "parameters": {},
                                "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '1f3afdf9-d0c9-4c3d-847f-89da613e70a8')]"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "condition": "[equals(parameters('joinWindowsDomain'), false())]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-privatednszone-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('workloadSubscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "externalDnsHostname": {
                            "value": "[parameters('externalDnsHostname')]"
                          },
                          "applicationGatewayPrivateIPAddress": {
                            "value": "[parameters('applicationGatewayPrivateIpAddress')]"
                          },
                          "virtualNetworkId": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetid.value]"
                          },
                          "hubVirtualNetworkId": {
                            "value": "[parameters('hubVirtualNetworkId')]"
                          },
                          "resourcePrefix": {
                            "value": "[parameters('resourcePrefix')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "9906905578732634543"
                            }
                          },
                          "parameters": {
                            "applicationGatewayPrivateIPAddress": {
                              "type": "string"
                            },
                            "externalDnsHostname": {
                              "type": "string"
                            },
                            "hubVirtualNetworkId": {
                              "type": "string"
                            },
                            "resourcePrefix": {
                              "type": "string"
                            },
                            "virtualNetworkId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "privateDNSZoneName": "[format('{0}.{1}', split(parameters('externalDnsHostname'), '.')[1], split(parameters('externalDnsHostname'), '.')[2])]",
                            "aRecordName": "[split(parameters('externalDnsHostname'), '.')[0]]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[variables('privateDNSZoneName')]",
                              "location": "global",
                              "properties": {}
                            },
                            {
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', variables('privateDNSZoneName'), format('{0}-esri-link', parameters('resourcePrefix')))]",
                              "location": "global",
                              "properties": {
                                "virtualNetwork": {
                                  "id": "[parameters('virtualNetworkId')]"
                                },
                                "registrationEnabled": true
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', variables('privateDNSZoneName'), format('{0}-hub-link', parameters('resourcePrefix')))]",
                              "location": "global",
                              "properties": {
                                "virtualNetwork": {
                                  "id": "[parameters('hubVirtualNetworkId')]"
                                },
                                "registrationEnabled": false
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', variables('privateDNSZoneName'), variables('aRecordName'))]",
                              "properties": {
                                "ttl": 3600,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('applicationGatewayPrivateIPAddress')]"
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDNSZoneName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "privateDNSZoneName": {
                              "type": "string",
                              "value": "[variables('privateDNSZoneName')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', take(format('hub-to-{0}-vnet-peering', parameters('workloadName')), 64))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix')))]",
                        "[subscriptionResourceId(parameters('workloadSubscriptionId'), 'Microsoft.Resources/deployments', take(format('{0}-to-hub-vnet-peering', parameters('workloadName')), 64))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "rg": {
                      "type": "string",
                      "value": "[parameters('resourceGroupName')]"
                    },
                    "location": {
                      "type": "string",
                      "value": "[parameters('location')]"
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetName.value]"
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetAddressPrefix.value]"
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetid.value]"
                    },
                    "subnetName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetName.value]"
                    },
                    "subnetAddressPrefix": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetAddressPrefix.value]"
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('workloadSubscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-spokeNetwork--{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-uami-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[variables('userAssignedManagedIdentityName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "9749879718794757824"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities'], createObject())]"
                    }
                  ],
                  "outputs": {
                    "clientId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "principalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-storage-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerName": {
                    "value": "[variables('container')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "blobsPrivateDnsZoneResourceId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/privateDnsZones', variables('privatelink_blob_name'))]"
                  },
                  "filePrivateDnsZoneResourceId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/privateDnsZones', variables('privatelink_file_name'))]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "keyVaultUri": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "resourcePrefix": {
                    "value": "[parameters('resourcePrefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "5576770691490877000"
                    }
                  },
                  "parameters": {
                    "containerName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "storageSKU": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_GZRS",
                        "Standard_RAGZRS"
                      ]
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "blobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "filePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "resourcePrefix": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "uniqueStorageName": "[take(format('{0}', uniqueString(resourceGroup().id)), 10)]",
                    "zones": [
                      "[parameters('blobsPrivateDnsZoneResourceId')]",
                      "[parameters('filePrivateDnsZoneResourceId')]"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Storage/storageAccounts'), parameters('tags')['Microsoft.Storage/storageAccounts'], createObject())]",
                      "sku": {
                        "name": "[parameters('storageSKU')]"
                      },
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowCrossTenantReplication": false,
                        "allowedCopyScope": "PrivateLink",
                        "allowSharedKeyAccess": true,
                        "defaultToOAuthAuthentication": false,
                        "dnsEndpointType": "Standard",
                        "encryption": {
                          "identity": {
                            "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId')]"
                          },
                          "keySource": "Microsoft.KeyVault",
                          "keyvaultproperties": {
                            "keyvaulturi": "[parameters('keyVaultUri')]",
                            "keyname": "[parameters('storageEncryptionKeyName')]"
                          },
                          "requireInfrastructureEncryption": true,
                          "services": {
                            "blob": {
                              "keyType": "Account",
                              "enabled": true
                            },
                            "file": {
                              "keyType": "Account",
                              "enabled": true
                            },
                            "queue": {
                              "keyType": "Account",
                              "enabled": true
                            },
                            "table": {
                              "keyType": "Account",
                              "enabled": true
                            }
                          }
                        },
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "virtualNetworkRules": [],
                          "ipRules": [],
                          "defaultAction": "Deny"
                        },
                        "publicNetworkAccess": "Disabled",
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "condition": "[parameters('useCloudStorage')]",
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
                      "properties": {
                        "protocolSettings": {
                          "smb": {}
                        },
                        "cors": {
                          "corsRules": []
                        },
                        "shareDeleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('useCloudStorage')]",
                      "type": "Microsoft.Storage/storageAccounts/queueServices",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
                      "properties": {
                        "cors": {
                          "corsRules": []
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('useCloudStorage')]",
                      "type": "Microsoft.Storage/storageAccounts/tableServices",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
                      "properties": {
                        "cors": {
                          "corsRules": []
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('useCloudStorage')]",
                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}/{2}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default', parameters('fileShareName'))]",
                      "properties": {
                        "accessTier": "TransactionOptimized",
                        "shareQuota": 5120,
                        "enabledProtocols": "SMB"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default', parameters('containerName'))]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), 'default')]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateEndpoints",
                        "count": "[length(variables('zones'))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}-esri-pe-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex())]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[format('{0}-esri-nic-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex())]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-esri-pl-{1}', parameters('resourcePrefix'), copyIndex())]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]",
                              "groupIds": [
                                "[split(split(variables('zones')[copyIndex()], '/')[8], '.')[1]]"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneGroups",
                        "count": "[length(variables('zones'))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', format('{0}-esri-pe-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex()), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[variables('zones')[copyIndex()]]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-esri-pe-{1}-{2}', parameters('resourcePrefix'), format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), copyIndex()))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageEndpoint": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))), '2023-01-01').primaryEndpoints.blob]"
                    },
                    "storageAccountName": {
                      "type": "string",
                      "value": "[format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))]"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string",
                      "value": "[format('{0}{1}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName')), replace(split(reference(resourceId('Microsoft.Storage/storageAccounts', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))), '2023-01-01').primaryEndpoints.blob, format('https://{0}', format('{0}saesri{1}', parameters('resourcePrefix'), variables('uniqueStorageName'))))[1], '/', ''))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-pip-address-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hostname": {
                    "value": "[format('esri-{0}{1}', parameters('resourcePrefix'), uniqueString(variables('resourceGroupName')))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "publicIpAddressName": {
                    "value": "[variables('publicIpAddressName')]"
                  },
                  "publicIpAllocationMethod": {
                    "value": "Static"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "6156014875832287100"
                    }
                  },
                  "parameters": {
                    "hostname": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "publicIpAddressName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "publicIpAllocationMethod": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('publicIpAddressName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/publicIPAddresses'), parameters('tags')['Microsoft.Network/publicIPAddresses'], createObject())]",
                      "sku": {
                        "name": "Standard",
                        "tier": "Regional"
                      },
                      "properties": {
                        "publicIPAddressVersion": "IPv4",
                        "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]",
                        "idleTimeoutInMinutes": 11,
                        "dnsSettings": {
                          "domainNameLabel": "[parameters('hostname')]",
                          "fqdn": "[parameters('hostname')]"
                        },
                        "ipTags": []
                      }
                    }
                  ],
                  "outputs": {
                    "pipFqdn": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName')), '2023-04-01').dnsSettings.fqdn]"
                    },
                    "pipIp": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName')), '2023-04-01').ipAddress]"
                    },
                    "pipId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
                    },
                    "pipName": {
                      "type": "string",
                      "value": "[parameters('publicIpAddressName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-avset-server-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "availabilitySetName": {
                    "value": "[format('{0}-av-set-server', parameters('resourcePrefix'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "17093710300497942843"
                    }
                  },
                  "parameters": {
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2017-03-30",
                      "name": "[parameters('availabilitySetName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "properties": {
                        "platformUpdateDomainCount": 2,
                        "platformFaultDomainCount": 2
                      },
                      "sku": {
                        "name": "Aligned"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('availabilitySetName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-avset-portal-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "availabilitySetName": {
                    "value": "[format('{0}-av-set-portal', parameters('resourcePrefix'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "17093710300497942843"
                    }
                  },
                  "parameters": {
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2017-03-30",
                      "name": "[parameters('availabilitySetName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "properties": {
                        "platformUpdateDomainCount": 2,
                        "platformFaultDomainCount": 2
                      },
                      "sku": {
                        "name": "Aligned"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('availabilitySetName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-avset-datastore-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "availabilitySetName": {
                    "value": "[format('{0}-av-set-datastore', parameters('resourcePrefix'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "17093710300497942843"
                    }
                  },
                  "parameters": {
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2017-03-30",
                      "name": "[parameters('availabilitySetName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "properties": {
                        "platformUpdateDomainCount": 2,
                        "platformFaultDomainCount": 2
                      },
                      "sku": {
                        "name": "Aligned"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('availabilitySetName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-avset-spatiotemporal-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "availabilitySetName": {
                    "value": "[format('{0}-av-set-spatiotemporal', parameters('resourcePrefix'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "17093710300497942843"
                    }
                  },
                  "parameters": {
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2017-03-30",
                      "name": "[parameters('availabilitySetName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "properties": {
                        "platformUpdateDomainCount": 2,
                        "platformFaultDomainCount": 2
                      },
                      "sku": {
                        "name": "Aligned"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('availabilitySetName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-avset-tilecache-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "availabilitySetName": {
                    "value": "[format('{0}-av-set-tilecache', parameters('resourcePrefix'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "17093710300497942843"
                    }
                  },
                  "parameters": {
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2017-03-30",
                      "name": "[parameters('availabilitySetName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "properties": {
                        "platformUpdateDomainCount": 2,
                        "platformFaultDomainCount": 2
                      },
                      "sku": {
                        "name": "Aligned"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('availabilitySetName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-avset-graph-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "availabilitySetName": {
                    "value": "[format('{0}-av-set-graph', parameters('resourcePrefix'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "17093710300497942843"
                    }
                  },
                  "parameters": {
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2017-03-30",
                      "name": "[parameters('availabilitySetName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "properties": {
                        "platformUpdateDomainCount": 2,
                        "platformFaultDomainCount": 2
                      },
                      "sku": {
                        "name": "Aligned"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('availabilitySetName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-avset-odata-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "availabilitySetName": {
                    "value": "[format('{0}-av-set-odata', parameters('resourcePrefix'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "17093710300497942843"
                    }
                  },
                  "parameters": {
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2017-03-30",
                      "name": "[parameters('availabilitySetName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "properties": {
                        "platformUpdateDomainCount": 2,
                        "platformFaultDomainCount": 2
                      },
                      "sku": {
                        "name": "Aligned"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('availabilitySetName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[equals(parameters('architecture'), 'singletier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-virtual-machine-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "architecture": {
                    "value": "[parameters('architecture')]"
                  },
                  "availabilitySetName": {
                    "value": "[variables('availabilitySetName')]"
                  },
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinEntraDomain": {
                    "value": "[parameters('joinEntraDomain')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkInterfaceName": {
                    "value": "[variables('networkInterfaceName')]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "serverFunction": {
                    "value": "singletier"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "subnetResourceId": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value), createObject('value', 'none'))]",
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value), createObject('value', 'none'))]",
                  "virtualMachineName": {
                    "value": "[variables('virtualMachineName')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "windowsDomainAdministratorPassword": {
                    "value": "[parameters('windowsDomainAdministratorPassword')]"
                  },
                  "windowsDomainAdministratorUserName": {
                    "value": "[parameters('windowsDomainAdministratorUserName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "7579044595906678679"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "architecture": {
                      "type": "string"
                    },
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "domainJoinOptions": {
                      "type": "int",
                      "defaultValue": 3
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "joinEntraDomain": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "serverFunction": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "windowsDomainAdministratorPassword": {
                      "type": "securestring"
                    },
                    "windowsDomainAdministratorUserName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                    "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
                    "availabilitySetId": {
                      "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "dnsSettings": {
                          "dnsServers": []
                        },
                        "enableIPForwarding": false,
                        "disableTcpStateTracking": false,
                        "nicType": "Standard",
                        "auxiliaryMode": "None",
                        "auxiliarySku": "None"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2023-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "plan": {
                        "name": "byol-111",
                        "product": "arcgis-enterprise",
                        "publisher": "esri"
                      },
                      "properties": {
                        "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "esri",
                            "offer": "arcgis-enterprise",
                            "sku": "byol-111",
                            "version": "latest"
                          },
                          "osDisk": {
                            "osType": "Windows",
                            "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                              "storageAccountType": "Premium_LRS"
                            },
                            "deleteOption": "Detach",
                            "diskSizeGB": 128
                          },
                          "dataDisks": [],
                          "diskControllerType": "SCSI"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false,
                            "patchSettings": {
                              "patchMode": "Manual",
                              "assessmentMode": "ImageDefault"
                            },
                            "enableVMAgentPlatformUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                          "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                          "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                          "restart": true,
                          "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                        },
                        "protectedSettings": {
                          "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "ConfigurationforWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "authentication": {
                            "managedIdentity": {
                              "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                              "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Domain",
                            "value": "[variables('nicDnsSuffix')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "virtualMachineName": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "availabilitySetResourceId": {
                      "type": "string",
                      "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
                    },
                    "networkInterfaceInternalDomainNameSuffix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "multiTierServerVirtualMachines",
                "count": "[length(variables('serverVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 5
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-esri-server-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "architecture": {
                    "value": "[parameters('architecture')]"
                  },
                  "availabilitySetName": "[if(equals(parameters('architecture'), 'multitier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-server-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinEntraDomain": {
                    "value": "[parameters('joinEntraDomain')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkInterfaceName": {
                    "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('serverVirtualMachines')[copyIndex()])]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "serverFunction": {
                    "value": "server"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[variables('serverVirtualMachines')[copyIndex()]]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "windowsDomainAdministratorPassword": {
                    "value": "[parameters('windowsDomainAdministratorPassword')]"
                  },
                  "windowsDomainAdministratorUserName": {
                    "value": "[parameters('windowsDomainAdministratorUserName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "7579044595906678679"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "architecture": {
                      "type": "string"
                    },
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "domainJoinOptions": {
                      "type": "int",
                      "defaultValue": 3
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "joinEntraDomain": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "serverFunction": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "windowsDomainAdministratorPassword": {
                      "type": "securestring"
                    },
                    "windowsDomainAdministratorUserName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                    "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
                    "availabilitySetId": {
                      "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "dnsSettings": {
                          "dnsServers": []
                        },
                        "enableIPForwarding": false,
                        "disableTcpStateTracking": false,
                        "nicType": "Standard",
                        "auxiliaryMode": "None",
                        "auxiliarySku": "None"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2023-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "plan": {
                        "name": "byol-111",
                        "product": "arcgis-enterprise",
                        "publisher": "esri"
                      },
                      "properties": {
                        "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "esri",
                            "offer": "arcgis-enterprise",
                            "sku": "byol-111",
                            "version": "latest"
                          },
                          "osDisk": {
                            "osType": "Windows",
                            "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                              "storageAccountType": "Premium_LRS"
                            },
                            "deleteOption": "Detach",
                            "diskSizeGB": 128
                          },
                          "dataDisks": [],
                          "diskControllerType": "SCSI"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false,
                            "patchSettings": {
                              "patchMode": "Manual",
                              "assessmentMode": "ImageDefault"
                            },
                            "enableVMAgentPlatformUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                          "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                          "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                          "restart": true,
                          "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                        },
                        "protectedSettings": {
                          "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "ConfigurationforWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "authentication": {
                            "managedIdentity": {
                              "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                              "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Domain",
                            "value": "[variables('nicDnsSuffix')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "virtualMachineName": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "availabilitySetResourceId": {
                      "type": "string",
                      "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
                    },
                    "networkInterfaceInternalDomainNameSuffix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-server-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "multiTierPortalVirtualMachines",
                "count": "[length(variables('portalVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 5
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-esri-portal-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "architecture": {
                    "value": "[parameters('architecture')]"
                  },
                  "availabilitySetName": "[if(equals(parameters('architecture'), 'multitier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-portal-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinEntraDomain": {
                    "value": "[parameters('joinEntraDomain')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkInterfaceName": {
                    "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('portalVirtualMachines')[copyIndex()])]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "serverFunction": {
                    "value": "portal"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[variables('portalVirtualMachines')[copyIndex()]]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "windowsDomainAdministratorPassword": {
                    "value": "[parameters('windowsDomainAdministratorPassword')]"
                  },
                  "windowsDomainAdministratorUserName": {
                    "value": "[parameters('windowsDomainAdministratorUserName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "7579044595906678679"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "architecture": {
                      "type": "string"
                    },
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "domainJoinOptions": {
                      "type": "int",
                      "defaultValue": 3
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "joinEntraDomain": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "serverFunction": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "windowsDomainAdministratorPassword": {
                      "type": "securestring"
                    },
                    "windowsDomainAdministratorUserName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                    "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
                    "availabilitySetId": {
                      "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "dnsSettings": {
                          "dnsServers": []
                        },
                        "enableIPForwarding": false,
                        "disableTcpStateTracking": false,
                        "nicType": "Standard",
                        "auxiliaryMode": "None",
                        "auxiliarySku": "None"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2023-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "plan": {
                        "name": "byol-111",
                        "product": "arcgis-enterprise",
                        "publisher": "esri"
                      },
                      "properties": {
                        "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "esri",
                            "offer": "arcgis-enterprise",
                            "sku": "byol-111",
                            "version": "latest"
                          },
                          "osDisk": {
                            "osType": "Windows",
                            "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                              "storageAccountType": "Premium_LRS"
                            },
                            "deleteOption": "Detach",
                            "diskSizeGB": 128
                          },
                          "dataDisks": [],
                          "diskControllerType": "SCSI"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false,
                            "patchSettings": {
                              "patchMode": "Manual",
                              "assessmentMode": "ImageDefault"
                            },
                            "enableVMAgentPlatformUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                          "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                          "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                          "restart": true,
                          "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                        },
                        "protectedSettings": {
                          "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "ConfigurationforWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "authentication": {
                            "managedIdentity": {
                              "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                              "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Domain",
                            "value": "[variables('nicDnsSuffix')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "virtualMachineName": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "availabilitySetResourceId": {
                      "type": "string",
                      "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
                    },
                    "networkInterfaceInternalDomainNameSuffix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-portal-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "multiTierDatastoreServerVirtualMachines",
                "count": "[length(variables('dataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 5
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-esri-datastore-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "architecture": {
                    "value": "[parameters('architecture')]"
                  },
                  "availabilitySetName": "[if(equals(parameters('architecture'), 'multitier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-datastore-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinEntraDomain": {
                    "value": "[parameters('joinEntraDomain')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkInterfaceName": {
                    "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('dataStoreVirtualMachines')[copyIndex()])]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "serverFunction": {
                    "value": "datastore"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[variables('dataStoreVirtualMachines')[copyIndex()]]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "windowsDomainAdministratorPassword": {
                    "value": "[parameters('windowsDomainAdministratorPassword')]"
                  },
                  "windowsDomainAdministratorUserName": {
                    "value": "[parameters('windowsDomainAdministratorUserName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "7579044595906678679"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "architecture": {
                      "type": "string"
                    },
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "domainJoinOptions": {
                      "type": "int",
                      "defaultValue": 3
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "joinEntraDomain": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "serverFunction": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "windowsDomainAdministratorPassword": {
                      "type": "securestring"
                    },
                    "windowsDomainAdministratorUserName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                    "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
                    "availabilitySetId": {
                      "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "dnsSettings": {
                          "dnsServers": []
                        },
                        "enableIPForwarding": false,
                        "disableTcpStateTracking": false,
                        "nicType": "Standard",
                        "auxiliaryMode": "None",
                        "auxiliarySku": "None"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2023-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "plan": {
                        "name": "byol-111",
                        "product": "arcgis-enterprise",
                        "publisher": "esri"
                      },
                      "properties": {
                        "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "esri",
                            "offer": "arcgis-enterprise",
                            "sku": "byol-111",
                            "version": "latest"
                          },
                          "osDisk": {
                            "osType": "Windows",
                            "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                              "storageAccountType": "Premium_LRS"
                            },
                            "deleteOption": "Detach",
                            "diskSizeGB": 128
                          },
                          "dataDisks": [],
                          "diskControllerType": "SCSI"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false,
                            "patchSettings": {
                              "patchMode": "Manual",
                              "assessmentMode": "ImageDefault"
                            },
                            "enableVMAgentPlatformUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                          "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                          "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                          "restart": true,
                          "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                        },
                        "protectedSettings": {
                          "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "ConfigurationforWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "authentication": {
                            "managedIdentity": {
                              "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                              "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Domain",
                            "value": "[variables('nicDnsSuffix')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "virtualMachineName": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "availabilitySetResourceId": {
                      "type": "string",
                      "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
                    },
                    "networkInterfaceInternalDomainNameSuffix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-datastore-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "multiTierFileServerVirtualMachines",
                "count": "[length(variables('fileShareVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 5
              },
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-esri-fileserver-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "architecture": {
                    "value": "[parameters('architecture')]"
                  },
                  "availabilitySetName": {
                    "value": ""
                  },
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinEntraDomain": {
                    "value": "[parameters('joinEntraDomain')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkInterfaceName": {
                    "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('fileShareVirtualMachines')[copyIndex()])]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "serverFunction": {
                    "value": "fileshare"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[variables('fileShareVirtualMachines')[copyIndex()]]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "windowsDomainAdministratorPassword": {
                    "value": "[parameters('windowsDomainAdministratorPassword')]"
                  },
                  "windowsDomainAdministratorUserName": {
                    "value": "[parameters('windowsDomainAdministratorUserName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "7579044595906678679"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "architecture": {
                      "type": "string"
                    },
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "domainJoinOptions": {
                      "type": "int",
                      "defaultValue": 3
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "joinEntraDomain": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "serverFunction": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "windowsDomainAdministratorPassword": {
                      "type": "securestring"
                    },
                    "windowsDomainAdministratorUserName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                    "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
                    "availabilitySetId": {
                      "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "dnsSettings": {
                          "dnsServers": []
                        },
                        "enableIPForwarding": false,
                        "disableTcpStateTracking": false,
                        "nicType": "Standard",
                        "auxiliaryMode": "None",
                        "auxiliarySku": "None"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2023-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "plan": {
                        "name": "byol-111",
                        "product": "arcgis-enterprise",
                        "publisher": "esri"
                      },
                      "properties": {
                        "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "esri",
                            "offer": "arcgis-enterprise",
                            "sku": "byol-111",
                            "version": "latest"
                          },
                          "osDisk": {
                            "osType": "Windows",
                            "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                              "storageAccountType": "Premium_LRS"
                            },
                            "deleteOption": "Detach",
                            "diskSizeGB": 128
                          },
                          "dataDisks": [],
                          "diskControllerType": "SCSI"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false,
                            "patchSettings": {
                              "patchMode": "Manual",
                              "assessmentMode": "ImageDefault"
                            },
                            "enableVMAgentPlatformUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                          "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                          "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                          "restart": true,
                          "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                        },
                        "protectedSettings": {
                          "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "ConfigurationforWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "authentication": {
                            "managedIdentity": {
                              "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                              "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Domain",
                            "value": "[variables('nicDnsSuffix')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "virtualMachineName": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "availabilitySetResourceId": {
                      "type": "string",
                      "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
                    },
                    "networkInterfaceInternalDomainNameSuffix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "multiTierSpatiotemporalBigDataStoreVirtualMachines",
                "count": "[length(variables('spatiotemporalBigDataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 5
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-esri-spatiotemporal-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "architecture": {
                    "value": "[parameters('architecture')]"
                  },
                  "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-spatiotemporal-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinEntraDomain": {
                    "value": "[parameters('joinEntraDomain')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkInterfaceName": {
                    "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()])]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "serverFunction": {
                    "value": "spatiotemporal"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[variables('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()]]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "windowsDomainAdministratorPassword": {
                    "value": "[parameters('windowsDomainAdministratorPassword')]"
                  },
                  "windowsDomainAdministratorUserName": {
                    "value": "[parameters('windowsDomainAdministratorUserName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "7579044595906678679"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "architecture": {
                      "type": "string"
                    },
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "domainJoinOptions": {
                      "type": "int",
                      "defaultValue": 3
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "joinEntraDomain": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "serverFunction": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "windowsDomainAdministratorPassword": {
                      "type": "securestring"
                    },
                    "windowsDomainAdministratorUserName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                    "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
                    "availabilitySetId": {
                      "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "dnsSettings": {
                          "dnsServers": []
                        },
                        "enableIPForwarding": false,
                        "disableTcpStateTracking": false,
                        "nicType": "Standard",
                        "auxiliaryMode": "None",
                        "auxiliarySku": "None"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2023-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "plan": {
                        "name": "byol-111",
                        "product": "arcgis-enterprise",
                        "publisher": "esri"
                      },
                      "properties": {
                        "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "esri",
                            "offer": "arcgis-enterprise",
                            "sku": "byol-111",
                            "version": "latest"
                          },
                          "osDisk": {
                            "osType": "Windows",
                            "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                              "storageAccountType": "Premium_LRS"
                            },
                            "deleteOption": "Detach",
                            "diskSizeGB": 128
                          },
                          "dataDisks": [],
                          "diskControllerType": "SCSI"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false,
                            "patchSettings": {
                              "patchMode": "Manual",
                              "assessmentMode": "ImageDefault"
                            },
                            "enableVMAgentPlatformUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                          "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                          "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                          "restart": true,
                          "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                        },
                        "protectedSettings": {
                          "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "ConfigurationforWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "authentication": {
                            "managedIdentity": {
                              "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                              "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Domain",
                            "value": "[variables('nicDnsSuffix')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "virtualMachineName": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "availabilitySetResourceId": {
                      "type": "string",
                      "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
                    },
                    "networkInterfaceInternalDomainNameSuffix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-spatiotemporal-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "multiTierTileCacheVirtualMachines",
                "count": "[length(variables('tileCacheDataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 5
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-esri-tilecache-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "architecture": {
                    "value": "[parameters('architecture')]"
                  },
                  "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-tilecache-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinEntraDomain": {
                    "value": "[parameters('joinEntraDomain')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkInterfaceName": {
                    "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('tileCacheDataStoreVirtualMachines')[copyIndex()])]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "serverFunction": {
                    "value": "tilecache"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[variables('tileCacheDataStoreVirtualMachines')[copyIndex()]]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "windowsDomainAdministratorPassword": {
                    "value": "[parameters('windowsDomainAdministratorPassword')]"
                  },
                  "windowsDomainAdministratorUserName": {
                    "value": "[parameters('windowsDomainAdministratorUserName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "7579044595906678679"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "architecture": {
                      "type": "string"
                    },
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "domainJoinOptions": {
                      "type": "int",
                      "defaultValue": 3
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "joinEntraDomain": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "serverFunction": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "windowsDomainAdministratorPassword": {
                      "type": "securestring"
                    },
                    "windowsDomainAdministratorUserName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                    "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
                    "availabilitySetId": {
                      "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "dnsSettings": {
                          "dnsServers": []
                        },
                        "enableIPForwarding": false,
                        "disableTcpStateTracking": false,
                        "nicType": "Standard",
                        "auxiliaryMode": "None",
                        "auxiliarySku": "None"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2023-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "plan": {
                        "name": "byol-111",
                        "product": "arcgis-enterprise",
                        "publisher": "esri"
                      },
                      "properties": {
                        "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "esri",
                            "offer": "arcgis-enterprise",
                            "sku": "byol-111",
                            "version": "latest"
                          },
                          "osDisk": {
                            "osType": "Windows",
                            "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                              "storageAccountType": "Premium_LRS"
                            },
                            "deleteOption": "Detach",
                            "diskSizeGB": 128
                          },
                          "dataDisks": [],
                          "diskControllerType": "SCSI"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false,
                            "patchSettings": {
                              "patchMode": "Manual",
                              "assessmentMode": "ImageDefault"
                            },
                            "enableVMAgentPlatformUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                          "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                          "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                          "restart": true,
                          "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                        },
                        "protectedSettings": {
                          "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "ConfigurationforWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "authentication": {
                            "managedIdentity": {
                              "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                              "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Domain",
                            "value": "[variables('nicDnsSuffix')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "virtualMachineName": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "availabilitySetResourceId": {
                      "type": "string",
                      "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
                    },
                    "networkInterfaceInternalDomainNameSuffix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-tilecache-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "multiTierGraphVirtualMachines",
                "count": "[length(variables('graphDataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 5
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-esri-graph-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "architecture": {
                    "value": "[parameters('architecture')]"
                  },
                  "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-graph-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinEntraDomain": {
                    "value": "[parameters('joinEntraDomain')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkInterfaceName": {
                    "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('graphDataStoreVirtualMachines')[copyIndex()])]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "serverFunction": {
                    "value": "graph"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[variables('graphDataStoreVirtualMachines')[copyIndex()]]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "windowsDomainAdministratorPassword": {
                    "value": "[parameters('windowsDomainAdministratorPassword')]"
                  },
                  "windowsDomainAdministratorUserName": {
                    "value": "[parameters('windowsDomainAdministratorUserName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "7579044595906678679"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "architecture": {
                      "type": "string"
                    },
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "domainJoinOptions": {
                      "type": "int",
                      "defaultValue": 3
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "joinEntraDomain": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "serverFunction": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "windowsDomainAdministratorPassword": {
                      "type": "securestring"
                    },
                    "windowsDomainAdministratorUserName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                    "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
                    "availabilitySetId": {
                      "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "dnsSettings": {
                          "dnsServers": []
                        },
                        "enableIPForwarding": false,
                        "disableTcpStateTracking": false,
                        "nicType": "Standard",
                        "auxiliaryMode": "None",
                        "auxiliarySku": "None"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2023-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "plan": {
                        "name": "byol-111",
                        "product": "arcgis-enterprise",
                        "publisher": "esri"
                      },
                      "properties": {
                        "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "esri",
                            "offer": "arcgis-enterprise",
                            "sku": "byol-111",
                            "version": "latest"
                          },
                          "osDisk": {
                            "osType": "Windows",
                            "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                              "storageAccountType": "Premium_LRS"
                            },
                            "deleteOption": "Detach",
                            "diskSizeGB": 128
                          },
                          "dataDisks": [],
                          "diskControllerType": "SCSI"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false,
                            "patchSettings": {
                              "patchMode": "Manual",
                              "assessmentMode": "ImageDefault"
                            },
                            "enableVMAgentPlatformUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                          "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                          "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                          "restart": true,
                          "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                        },
                        "protectedSettings": {
                          "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "ConfigurationforWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "authentication": {
                            "managedIdentity": {
                              "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                              "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Domain",
                            "value": "[variables('nicDnsSuffix')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "virtualMachineName": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "availabilitySetResourceId": {
                      "type": "string",
                      "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
                    },
                    "networkInterfaceInternalDomainNameSuffix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-graph-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "multiTierObjectDataStoreVirtualMachines",
                "count": "[length(variables('objectDataStoreVirtualMachines'))]",
                "mode": "serial",
                "batchSize": 5
              },
              "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-esri-odata-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "architecture": {
                    "value": "[parameters('architecture')]"
                  },
                  "availabilitySetName": "[if(and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-odata-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value), createObject('value', 'none'))]",
                  "enableMonitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "externalDnsHostName": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "joinEntraDomain": {
                    "value": "[parameters('joinEntraDomain')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkInterfaceName": {
                    "value": "[format('{0}-{1}', variables('networkInterfaceName'), variables('objectDataStoreVirtualMachines')[copyIndex()])]"
                  },
                  "ouPath": {
                    "value": "[parameters('ouPath')]"
                  },
                  "serverFunction": {
                    "value": "objectDataStore"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[variables('objectDataStoreVirtualMachines')[copyIndex()]]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "windowsDomainAdministratorPassword": {
                    "value": "[parameters('windowsDomainAdministratorPassword')]"
                  },
                  "windowsDomainAdministratorUserName": {
                    "value": "[parameters('windowsDomainAdministratorUserName')]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "7579044595906678679"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "architecture": {
                      "type": "string"
                    },
                    "availabilitySetName": {
                      "type": "string"
                    },
                    "domainJoinOptions": {
                      "type": "int",
                      "defaultValue": 3
                    },
                    "enableMonitoring": {
                      "type": "bool"
                    },
                    "externalDnsHostName": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "joinEntraDomain": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "ouPath": {
                      "type": "string"
                    },
                    "serverFunction": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "windowsDomainAdministratorPassword": {
                      "type": "securestring"
                    },
                    "windowsDomainAdministratorUserName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                    "windowsDomainNameNetBios": "[split(parameters('windowsDomainName'), '.')[0]]",
                    "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]",
                    "availabilitySetId": {
                      "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "dnsSettings": {
                          "dnsServers": []
                        },
                        "enableIPForwarding": false,
                        "disableTcpStateTracking": false,
                        "nicType": "Standard",
                        "auxiliaryMode": "None",
                        "auxiliarySku": "None"
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2023-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "plan": {
                        "name": "byol-111",
                        "product": "arcgis-enterprise",
                        "publisher": "esri"
                      },
                      "properties": {
                        "availabilitySet": "[if(and(not(equals(parameters('serverFunction'), 'fileshare')), equals(parameters('architecture'), 'multitier')), variables('availabilitySetId'), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "esri",
                            "offer": "arcgis-enterprise",
                            "sku": "byol-111",
                            "version": "latest"
                          },
                          "osDisk": {
                            "osType": "Windows",
                            "name": "[format('{0}-osdisk', parameters('virtualMachineName'))]",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                              "storageAccountType": "Premium_LRS"
                            },
                            "deleteOption": "Detach",
                            "diskSizeGB": 128
                          },
                          "dataDisks": [],
                          "diskControllerType": "SCSI"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false,
                            "patchSettings": {
                              "patchMode": "Manual",
                              "assessmentMode": "ImageDefault"
                            },
                            "enableVMAgentPlatformUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('virtualMachineName'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(and(and(not(empty(parameters('windowsDomainAdministratorUserName'))), not(empty(parameters('windowsDomainName')))), not(empty(parameters('ouPath')))), parameters('joinWindowsDomain'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'joindomain')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "name": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainName'), 'None')]",
                          "ouPath": "[if(parameters('joinWindowsDomain'), parameters('ouPath'), 'None')]",
                          "user": "[if(parameters('joinWindowsDomain'), format('{0}\\{1}', variables('windowsDomainNameNetBios'), parameters('windowsDomainAdministratorUserName')), 'None')]",
                          "restart": true,
                          "options": "[if(parameters('joinWindowsDomain'), parameters('domainJoinOptions'), 'None')]"
                        },
                        "protectedSettings": {
                          "Password": "[if(parameters('joinWindowsDomain'), parameters('windowsDomainAdministratorPassword'), 'None')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'DependencyAgentWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzurePolicyforWindows')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "ConfigurationforWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'Microsoft.Azure.NetworkWatcher')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableMonitoring')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "authentication": {
                            "managedIdentity": {
                              "identifier-name": "[if(parameters('enableMonitoring'), split(parameters('userAssignedIdentityResourceId'), '/')[8], 'None')]",
                              "identifier-value": "[if(parameters('enableMonitoring'), parameters('userAssignedIdentityResourceId'), 'None')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('joinEntraDomain'), not(parameters('joinWindowsDomain')))]",
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriDnsSuffix')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "Domain",
                            "value": "[variables('nicDnsSuffix')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$Domain\r\n      )\r\n      # ONLY RETURN ETHERNET CONNECTIONS\r\n      $nic = Get-DnsClient | Where-Object -Property InterfaceAlias -Match Ethernet\r\n      # ADD SUFFIX TO EACH ETHERNET CONNECTION\r\n      Foreach ($nic in $nics) {\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      $Alias = $nic.InterfaceAlias\r\n      $Index = $nic.InterfaceIndex\r\n      }\r\n      Set-DnsClient -ConnectionSpecificSuffix $Domain -InterfaceIndex $nic.InterfaceIndex -confirm:$false\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'AADLoginForWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'joindomain')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "virtualMachineName": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    },
                    "availabilitySetResourceId": {
                      "type": "string",
                      "value": "[if(equals(parameters('architecture'), 'multitier'), resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')), 'null')]"
                    },
                    "networkInterfaceInternalDomainNameSuffix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName')), '2023-04-01').dnsSettings.internalDomainNameSuffix]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-avset-odata-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "domainJoinPassword": "[if(parameters('joinWindowsDomain'), createObject('value', parameters('windowsDomainAdministratorPassword')), createObject('value', 'None'))]",
                  "domainJoinUserPrincipalName": "[if(parameters('joinWindowsDomain'), createObject('value', parameters('windowsDomainAdministratorUserName')), createObject('value', 'None'))]",
                  "keyVaultCertificatesOfficerRoleDefinitionResourceId": {
                    "value": "[variables('keyVaultCertificatesOfficer')]"
                  },
                  "keyVaultCryptoOfficerRoleDefinitionResourceId": {
                    "value": "[variables('keyVaultCryptoOfficer')]"
                  },
                  "keyVaultName": {
                    "value": "[take(format('{0}-{1}', variables('keyVaultName'), uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName')), variables('keyVaultName'))), 24)]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroupName')), 'Microsoft.Network/privateDnsZones', variables('privatelink_keyvaultDns_name'))]"
                  },
                  "keyVaultSecretsOfficerRoleDefinitionResourceId": {
                    "value": "[variables('keyVaultSecretsOfficer')]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "resourcePrefix": {
                    "value": "[parameters('resourcePrefix')]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "8376415160635004409"
                    }
                  },
                  "parameters": {
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "securestring"
                    },
                    "keyVaultCertificatesOfficerRoleDefinitionResourceId": {
                      "type": "string"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "keyVaultSecretsOfficerRoleDefinitionResourceId": {
                      "type": "string"
                    },
                    "keyVaultCryptoOfficerRoleDefinitionResourceId": {
                      "type": "string"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "location": {
                      "type": "string"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "diskEncryptionKeyExpirationInDays": {
                      "type": "int",
                      "defaultValue": 30
                    },
                    "resourcePrefix": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "Secrets": [
                      {
                        "name": "DomainJoinPassword",
                        "value": "[parameters('domainJoinPassword')]"
                      },
                      {
                        "name": "DomainJoinUserPrincipalName",
                        "value": "[parameters('domainJoinUserPrincipalName')]"
                      },
                      {
                        "name": "LocalAdministratorPassword",
                        "value": "[parameters('localAdministratorPassword')]"
                      },
                      {
                        "name": "LocalAdministratorUsername",
                        "value": "[parameters('localAdministratorUsername')]"
                      },
                      {
                        "name": "PrimarySiteAdministratorAccountUserName",
                        "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                      },
                      {
                        "name": "PrimarySiteAdministratorAccountPassword",
                        "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-10-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
                      "properties": {
                        "enabledForDeployment": true,
                        "enabledForDiskEncryption": true,
                        "enabledForTemplateDeployment": true,
                        "enablePurgeProtection": true,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": true,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "publicNetworkAccess": "Disabled",
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "softDeleteRetentionInDays": 7,
                        "tenantId": "[subscription().tenantId]"
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'DiskEncryptionKey')]",
                      "properties": {
                        "attributes": {
                          "enabled": true
                        },
                        "keySize": 4096,
                        "kty": "RSA",
                        "rotationPolicy": {
                          "attributes": {
                            "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                          },
                          "lifetimeActions": [
                            {
                              "action": {
                                "type": "Notify"
                              },
                              "trigger": {
                                "timeBeforeExpiry": "P10D"
                              }
                            },
                            {
                              "action": {
                                "type": "Rotate"
                              },
                              "trigger": {
                                "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageEncryptionKey')]",
                      "properties": {
                        "attributes": {
                          "enabled": true
                        },
                        "keySize": 4096,
                        "kty": "RSA",
                        "rotationPolicy": {
                          "attributes": {
                            "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                          },
                          "lifetimeActions": [
                            {
                              "action": {
                                "type": "Notify"
                              },
                              "trigger": {
                                "timeBeforeExpiry": "P10D"
                              }
                            },
                            {
                              "action": {
                                "type": "Rotate"
                              },
                              "trigger": {
                                "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "secrets",
                        "count": "[length(variables('Secrets'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-10-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('Secrets')[copyIndex()].name)]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
                      "properties": {
                        "value": "[variables('Secrets')[copyIndex()].value]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('keyVaultSecretsOfficerRoleDefinitionResourceId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[parameters('keyVaultSecretsOfficerRoleDefinitionResourceId')]",
                        "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('keyVaultCertificatesOfficerRoleDefinitionResourceId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[parameters('keyVaultCertificatesOfficerRoleDefinitionResourceId')]",
                        "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-10-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[guid(parameters('userAssignedIdentityPrincipalId'), parameters('keyVaultCryptoOfficerRoleDefinitionResourceId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[parameters('keyVaultCryptoOfficerRoleDefinitionResourceId')]",
                        "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "customNetworkInterfaceName": "[format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('keyVaultName'))]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                              "groupIds": [
                                "vault"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName')), parameters('keyVaultName'))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-pe-{1}', parameters('resourcePrefix'), parameters('keyVaultName')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('keyVaultName')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    },
                    "keyUriWithVersion": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
                    },
                    "keyVaultResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    },
                    "keyVaultUri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2021-10-01').vaultUri]"
                    },
                    "storageKeyName": {
                      "type": "string",
                      "value": "StorageEncryptionKey"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-role-sa-01-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "8411349545033436594"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-role-sa-02-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('artifactsStorageAccountSubscriptionId')]",
              "resourceGroup": "[parameters('artifactsStorageAccountResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "storageAccountName": {
                    "value": "[parameters('artifactsStorageAccountName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "8411349545033436594"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('storageAccountName'))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-role-vm-01-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "resourceGroupName": {
                    "value": "[variables('resourceGroupName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "8843829551900952560"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('resourceGroupName'))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-role-sub-01-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "userAssignedIdentityId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "subscriptionId": {
                    "value": "[variables('subscriptionId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "3020662803375983209"
                    }
                  },
                  "parameters": {
                    "userAssignedIdentityId": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "deploymentNameSuffix": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyyMMddHHmmss')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('assign-role-vm-02-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalId": {
                            "value": "[parameters('userAssignedIdentityId')]"
                          },
                          "subscriptionid": {
                            "value": "[parameters('subscriptionId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "8968981336685248524"
                            }
                          },
                          "parameters": {
                            "principalId": {
                              "type": "string"
                            },
                            "subscriptionid": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "roleDefinitionId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('subscriptionid'))]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                                "principalId": "[parameters('principalId')]",
                                "principalType": "ServicePrincipal"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-management-vm-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "artifactsContainerName": {
                    "value": "[parameters('artifactsContainerName')]"
                  },
                  "artifactsStorageAccountName": {
                    "value": "[parameters('artifactsStorageAccountName')]"
                  },
                  "certificateFileName": {
                    "value": "[parameters('certificateFileName')]"
                  },
                  "certificatePassword": {
                    "value": "[parameters('certificatePassword')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "esriStorageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "externalDnsHostname": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "hybridUseBenefit": {
                    "value": false
                  },
                  "keyVaultName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
                  },
                  "localAdministratorPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "localAdministratorUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalLicenseFile": {
                    "value": "[parameters('portalLicenseFile')]"
                  },
                  "portalLicenseFileName": {
                    "value": "[variables('portalLicenseFileName')]"
                  },
                  "resourcePrefix": {
                    "value": "[parameters('resourcePrefix')]"
                  },
                  "serverLicenseFile": {
                    "value": "[parameters('serverLicenseFile')]"
                  },
                  "serverLicenseFileName": {
                    "value": "[variables('serverLicenseFileName')]"
                  },
                  "subnetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.clientId.value]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[take(format('{0}-vmesrimgmt', parameters('resourcePrefix')), 15)]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "4677294163377019848"
                    }
                  },
                  "parameters": {
                    "artifactsContainerName": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "hybridUseBenefit": {
                      "type": "bool"
                    },
                    "localAdministratorPassword": {
                      "type": "securestring"
                    },
                    "localAdministratorUsername": {
                      "type": "securestring"
                    },
                    "location": {
                      "type": "string"
                    },
                    "artifactsStorageAccountName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "portalLicenseFile": {
                      "type": "string"
                    },
                    "portalLicenseFileName": {
                      "type": "string"
                    },
                    "serverLicenseFile": {
                      "type": "string"
                    },
                    "serverLicenseFileName": {
                      "type": "string"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "certificatePassword": {
                      "type": "securestring"
                    },
                    "certificateFileName": {
                      "type": "string"
                    },
                    "externalDnsHostname": {
                      "type": "string"
                    },
                    "esriStorageAccountName": {
                      "type": "string"
                    },
                    "resourcePrefix": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('virtualMachineName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject())]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('subnetResourceId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": true,
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "Standard_D2s_v3"
                        },
                        "osProfile": {
                          "computerName": "[parameters('virtualMachineName')]",
                          "adminUsername": "[parameters('localAdministratorUsername')]",
                          "adminPassword": "[parameters('localAdministratorPassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": true,
                            "patchSettings": {
                              "patchMode": "AutomaticByOS",
                              "assessmentMode": "ImageDefault"
                            }
                          }
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2022-datacenter-core-g2",
                            "version": "latest"
                          },
                          "osDisk": {
                            "caching": "ReadWrite",
                            "createOption": "FromImage",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "Premium_LRS"
                            },
                            "name": "[format('{0}-disk-{1}', parameters('resourcePrefix'), parameters('virtualMachineName'))]",
                            "osType": "Windows"
                          }
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('virtualMachineName')))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "securityProfile": {
                          "encryptionAtHost": true,
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch"
                        },
                        "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic-{1}', parameters('resourcePrefix'), parameters('virtualMachineName')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-azModules')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "ContainerName",
                            "value": "[parameters('artifactsContainerName')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('artifactsStorageAccountName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[environment().suffixes.storage]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.13.1.nupkg','az.automation.1.9.0.nupkg','az.compute.5.7.0.nupkg','az.resources.6.6.0.nupkg','az.keyvault.4.12.0.nupkg', 'az.storage.5.1.0.nupkg', 'az.marketplaceordering.2.0.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriScriptArtifacts')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "ContainerName",
                            "value": "[parameters('artifactsContainerName')]"
                          },
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('esriStorageAccountName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[environment().suffixes.storage]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          },
                          {
                            "name": "location",
                            "value": "[parameters('location')]"
                          },
                          {
                            "name": "subscription",
                            "value": "[subscription().subscriptionId]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$ContainerName,\r\n        [string]$certificatePassword,\r\n        [string]$environment,\r\n        [string]$StorageAccountName,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$UserAssignedIdentityClientId,\r\n        [string]$location,\r\n        [string]$fqdn,\r\n        [string]$subscription\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      Connect-AzAccount -Environment $Environment -Subscription $subscription -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n      Invoke-WebRequest https://github.com/Esri/arcgis-azure-templates/raw/main/Releases/11.1/DSC.zip -OutFile ./DSC.zip\r\n      Invoke-WebRequest https://github.com/Esri/arcgis-azure-templates/raw/main/Releases/11.1/GenerateSSLCerts.ps1 -OutFile ./GenerateSSLCerts.ps1\r\n      $ctx = New-AzStorageContext -StorageAccountName $storageAccountName -UseConnectedAccount\r\n      Set-AzStorageBlobContent -File ./DSC.zip -Container $containerName -Blob DSC.zip -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File ./GenerateSSLCerts.ps1 -Container $containerName -Blob GenerateSSLCerts.ps1 -Context $ctx -Force\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'rc-azModules')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-licenseAndCertificateArtifacts')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "ContainerName",
                            "value": "[parameters('artifactsContainerName')]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('artifactsStorageAccountName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[environment().suffixes.storage]"
                          },
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          },
                          {
                            "name": "PortalLicensefile",
                            "value": "[parameters('portalLicenseFile')]"
                          },
                          {
                            "name": "PortalLicenseFileName",
                            "value": "[parameters('portalLicenseFileName')]"
                          },
                          {
                            "name": "ServerLicensefile",
                            "value": "[parameters('serverLicenseFile')]"
                          },
                          {
                            "name": "ServerLicenseFileName",
                            "value": "[parameters('serverLicenseFileName')]"
                          },
                          {
                            "name": "location",
                            "value": "[parameters('location')]"
                          },
                          {
                            "name": "fqdn",
                            "value": "[parameters('externalDnsHostname')]"
                          },
                          {
                            "name": "keyVault",
                            "value": "[parameters('keyVaultName')]"
                          },
                          {
                            "name": "certificateFileName",
                            "value": "[parameters('certificateFileName')]"
                          },
                          {
                            "name": "certificatePassword",
                            "value": "[parameters('certificatePassword')]"
                          },
                          {
                            "name": "subscription",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "EsriStorageAccount",
                            "value": "[parameters('esriStorageAccountName')]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$ContainerName,\r\n        [string]$CertificateFileName,\r\n        [string]$CertificatePassword,\r\n        [string]$StorageAccountName,\r\n        [string]$StorageEndpoint,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$UserAssignedIdentityClientId,\r\n        [string]$PortalLicenseFileName,\r\n        [string]$PortalLicenseFile,\r\n        [string]$ServerLicensefile,\r\n        [string]$ServerLicenseFileName,\r\n        [string]$TenantId,\r\n        [string]$Location,\r\n        [string]$Fqdn,\r\n        [string]$Subscription,\r\n        [string]$KeyVaultName,\r\n        [string]$EsriStorageAccount,\r\n        [string]$Environment\r\n      )\r\n      New-Item -ItemType File \"$env:windir\\temp\\$portalLicenseFileName\"\r\n      New-Item -ItemType File \"$env:windir\\temp\\$serverLicenseFileName\"\r\n\r\n      $plf = \"$env:windir\\temp\\$portalLicenseFileName\"\r\n      $slf = \"$env:windir\\temp\\$serverLicenseFileName\"\r\n\r\n\r\n      $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False\r\n\r\n      $portalLicense = [System.Text.UTF8Encoding]::UTF8.GetString([System.Convert]::FromBase64String($portalLicensefile))\r\n      [System.IO.File]::WriteAllLines($plf, $portalLicense, $Utf8NoBomEncoding)\r\n\r\n      $serverLicense = [System.Text.UTF8Encoding]::UTF8.GetString([System.Convert]::FromBase64String($serverLicensefile))\r\n      [System.IO.File]::WriteAllLines($slf, $serverLicense, $Utf8NoBomEncoding)\r\n\r\n      Import-Module az.keyvault\r\n      Connect-AzAccount -Environment $Environment -Subscription $Subscription -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n      $ctx = New-AzStorageContext -StorageAccountName $esriStorageAccount -UseConnectedAccount\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      $BlobNames = @($certificateFileName)\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl/$ContainerName/$BlobNames\" -OutFile $env:windir\\temp\\$certificateFileName -Verbose\r\n      $pfx = \"$env:windir\\temp\\$CertificateFileName\"\r\n      Set-AzStorageBlobContent -File $pfx -Container $containerName -Blob $CertificateFileName -Context $ctx -Force\r\n      $base64 = [System.Convert]::ToBase64String([System.IO.File]::ReadAllBytes($pfx))\r\n      $Password = ConvertTo-SecureString -String $CertificatePassword -AsPlainText -Force\r\n      $cert = Import-AzKeyVaultCertificate -VaultName $keyVaultName -Name \"pfx$location\" -FilePath $pfx -Password $Password\r\n      $azKeyVaultCert = Get-AzKeyVaultCertificate -VaultName  $keyVaultName -Name \"pfx$location\"\r\n      $azKeyVaultCertBytes = $azKeyVaultCert.Certificate.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert)\r\n      $publicCertificateName = \"wildcard$fqdn-PublicKey.cer\"\r\n      $cerCertFile = \"$env:windir\\temp\\$publicCertificateName\"\r\n      Write-Output $cerCertFile\r\n      [System.IO.File]::WriteAllBytes($cerCertFile, $azKeyVaultCertBytes)\r\n      #$ctx = New-AzStorageContext -StorageAccountName $esriStorageAccount -UseConnectedAccount\r\n      Set-AzStorageBlobContent -File $cerCertFile -Container $containerName -Blob $publicCertificateName -Context $ctx -Force\r\n      #Set-AzStorageBlobContent -File $pfx -Container $containerName -Blob $CertificateFileName -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File $plf -Container $containerName -Properties @{\"ContentEncoding\" = \"UTF-8\"} -Blob $portalLicenseFileName -Context $ctx -Force\r\n      Set-AzStorageBlobContent -File $slf -Container $containerName -Properties @{\"ContentEncoding\" = \"UTF-8\"} -Blob $serverLicenseFileName -Context $ctx -Force\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'rc-esriScriptArtifacts')]",
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'rc-azModules')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'rc-esriMarketplaceImageTerms')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": false,
                        "parameters": [
                          {
                            "name": "ContainerName",
                            "value": "[parameters('artifactsContainerName')]"
                          },
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "StorageAccountName",
                            "value": "[parameters('esriStorageAccountName')]"
                          },
                          {
                            "name": "StorageEndpoint",
                            "value": "[environment().suffixes.storage]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          {
                            "name": "UserAssignedIdentityObjectId",
                            "value": "[parameters('userAssignedIdentityPrincipalId')]"
                          },
                          {
                            "name": "location",
                            "value": "[parameters('location')]"
                          },
                          {
                            "name": "subscription",
                            "value": "[subscription().subscriptionId]"
                          }
                        ],
                        "source": {
                          "script": "      param(\r\n        [string]$Environment,\r\n        [string]$UserAssignedIdentityObjectId,\r\n        [string]$UserAssignedIdentityClientId,\r\n        [string]$subscription\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      Connect-AzAccount -Environment $Environment -Subscription $subscription -Identity -AccountId $UserAssignedIdentityClientId | Out-Null\r\n      $name = 'byol-111'\r\n      $product = 'arcgis-enterprise'\r\n      $publisher = 'esri'\r\n      Get-AzMarketplaceTerms -Publisher $publisher -Name $name -Product $product -OfferType 'virtualmachine' | Set-AzMarketplaceTerms -Accept\r\n      "
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'rc-azModules')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('virtualMachineName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
                "multiTierFileServerVirtualMachines",
                "multiTierPortalVirtualMachines",
                "multiTierServerVirtualMachines",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('artifactsStorageAccountSubscriptionId'), parameters('artifactsStorageAccountResourceGroupName')), 'Microsoft.Resources/deployments', format('assign-role-sa-02-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId(variables('subscriptionId'), 'Microsoft.Resources/deployments', format('assign-role-sub-01-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('assign-role-sa-01-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('assign-role-vm-01-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('create-certificates-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "fileUri": {
                    "value": "[format('{0}{1}/GenerateSSLCerts.ps1', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalInternalCertificateFileName": {
                    "value": ""
                  },
                  "portalVirtualMachineNames": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('portalVirtualMachineNames')))]",
                  "selfSignedSSLCertificatePassword": {
                    "value": "[parameters('selfSignedCertificatePassword')]"
                  },
                  "serverInternalCertificateFileName": {
                    "value": ""
                  },
                  "serverVirtualMachineNames": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('serverVirtualMachineNames')))]",
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineName": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', variables('virtualMachineName')), createObject('value', variables('fileShareVirtualMachineName')))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "16303095877301641490"
                    }
                  },
                  "parameters": {
                    "fileShareName": {
                      "type": "string",
                      "defaultValue": "fileshare"
                    },
                    "fileUri": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                    },
                    "useSelfSignedInternalSSLCertificate": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "portalVirtualMachineNames": {
                      "type": "string"
                    },
                    "serverInternalCertificateFileName": {
                      "type": "string"
                    },
                    "portalInternalCertificateFileName": {
                      "type": "string"
                    },
                    "selfSignedSSLCertificatePassword": {
                      "type": "securestring"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "timestamp": "[parameters('timestamp')]"
                        },
                        "protectedSettings": {
                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File .\\GenerateSSLCerts.ps1 -ServerMachineNames \"{0}\" -PortalMachineNames \"{1}\" -FileShareName \"{2}\" {3}', parameters('serverVirtualMachineNames'), parameters('portalVirtualMachineNames'), parameters('fileShareName'), if(parameters('useSelfSignedInternalSSLCertificate'), format('-UseInternalSelfSignedCertificate -CertificatePassword {0}', parameters('selfSignedSSLCertificatePassword')), format('-ServerInternalCertificateFileName \"{0}\" -PortalInternalCertificateFileName \"{1}\"', if(empty(parameters('serverInternalCertificateFileName')), '', parameters('serverInternalCertificateFileName')), if(empty(parameters('portalInternalCertificateFileName')), '', parameters('portalInternalCertificateFileName')))))]",
                          "fileUris": [
                            "[parameters('fileUri')]"
                          ],
                          "managedIdentity": {}
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "vmId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                    },
                    "serverBackendSSLCert": {
                      "type": "string",
                      "value": "[split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2023-03-01').instanceView.substatuses[0].message, '###DATA###')[0]]"
                    },
                    "portalBackendSSLCert": {
                      "type": "string",
                      "value": "[split(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2023-03-01').instanceView.substatuses[0].message, '###DATA###')[1]]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "multiTierFileServerVirtualMachines",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-virtual-machine-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[equals(parameters('architecture'), 'multitier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-esri-multitier-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "applicationGatewayName": {
                    "value": "[variables('applicationGatewayName')]"
                  },
                  "applicationGatewayPrivateIPAddress": {
                    "value": "[variables('applicationGatewayPrivateIpAddress')]"
                  },
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "architecture": {
                    "value": "[parameters('architecture')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.cloudStorageAccountCredentialsUserName.value]"
                  },
                  "dataStoreVirtualMachineNames": {
                    "value": "[variables('dataStoreVirtualMachineNames')]"
                  },
                  "dataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('dataStoreVirtualMachineOSDiskSize')]"
                  },
                  "dataStoreVirtualMachines": {
                    "value": "[variables('dataStoreVirtualMachines')]"
                  },
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "dscDataStoreFunction": {
                    "value": "[variables('dscDataStoreFunction')]"
                  },
                  "dscGraphDataStoreFunction": {
                    "value": "[variables('dscGraphDataStoreFunction')]"
                  },
                  "dscObjectDataStoreFunction": {
                    "value": "[variables('dscObjectDataStoreFunction')]"
                  },
                  "dscPortalFunction": {
                    "value": "[variables('dscPortalFunction')]"
                  },
                  "dscServerScriptFunction": {
                    "value": "[variables('dscServerScriptFunction')]"
                  },
                  "dscSpatioTemporalFunction": {
                    "value": "[variables('dscsSatiotemporalBigDataStoreFunction')]"
                  },
                  "dscTileCacheFunction": {
                    "value": "[variables('dscTileCacheDataStoreDscFunction')]"
                  },
                  "enableDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableDataStoreVirtualMachineDataDisk')]"
                  },
                  "enableGraphDataStore": {
                    "value": "[parameters('enableGraphDataStore')]"
                  },
                  "enableGraphDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableGraphDataStoreVirtualMachineDataDisk')]"
                  },
                  "enableObjectDataStore": {
                    "value": "[parameters('enableObjectDataStore')]"
                  },
                  "enableObjectDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableObjectDataStoreVirtualMachineDataDisk')]"
                  },
                  "enableServerLogHarvesterPlugin": {
                    "value": "[parameters('enableServerLogHarvesterPlugin')]"
                  },
                  "enableSpatiotemporalBigDataStore": {
                    "value": "[parameters('enableSpatiotemporalBigDataStore')]"
                  },
                  "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk')]"
                  },
                  "enableTileCacheDataStore": {
                    "value": "[parameters('enableTileCacheDataStore')]"
                  },
                  "enableTileCacheDataStoreVirtualMachineDataDisk": {
                    "value": "[parameters('enableTileCacheDataStoreVirtualMachineDataDisk')]"
                  },
                  "enableVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "externalDnsHostname": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "fileShareDscScriptFunction": {
                    "value": "[variables('fileShareDscScriptFunction')]"
                  },
                  "fileShareVirtualMachineName": {
                    "value": "[variables('fileShareVirtualMachineName')]"
                  },
                  "graphDataStoreVirtualMachineNames": {
                    "value": "[variables('graphDataStoreVirtualMachineNames')]"
                  },
                  "graphDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('graphDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "graphDataStoreVirtualMachines": {
                    "value": "[variables('graphDataStoreVirtualMachines')]"
                  },
                  "isMultiMachineTileCacheDataStore": {
                    "value": "[variables('isMultiMachineTileCacheDataStore')]"
                  },
                  "isObjectDataStoreClustered": {
                    "value": "[variables('isObjectDataStoreClustered')]"
                  },
                  "isTileCacheDataStoreClustered": {
                    "value": "[variables('isTileCacheDataStoreClustered')]"
                  },
                  "isUpdatingCertificates": {
                    "value": "[parameters('isUpdatingCertificates')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "keyVaultUri": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "objectDataStoreVirtualMachineNames": {
                    "value": "[variables('objectDataStoreVirtualMachineNames')]"
                  },
                  "objectDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('objectDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "objectDataStoreVirtualMachines": {
                    "value": "[variables('objectDataStoreVirtualMachines')]"
                  },
                  "portalBackendSslCert": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.portalBackendSSLCert.value]"
                  },
                  "portalContext": {
                    "value": "[variables('portalContext')]"
                  },
                  "portalLicenseFileName": {
                    "value": "[variables('portalLicenseFileName')]"
                  },
                  "portalLicenseUserTypeId": {
                    "value": "[parameters('portalLicenseUserTypeId')]"
                  },
                  "portalVirtualMachineNames": {
                    "value": "[variables('portalVirtualMachineNames')]"
                  },
                  "portalVirtualMachineOSDiskSize": {
                    "value": "[parameters('portalVirtualMachineOSDiskSize')]"
                  },
                  "portalVirtualMachines": {
                    "value": "[variables('portalVirtualMachines')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "publicIpId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.pipId.value]"
                  },
                  "resourceGroupName": {
                    "value": "[variables('resourceGroupName')]"
                  },
                  "resourceSuffix": {
                    "value": "[variables('resourceSuffix')]"
                  },
                  "secondaryDnsHostName": {
                    "value": "[parameters('secondaryDnsHostName')]"
                  },
                  "selfSignedSSLCertificatePassword": {
                    "value": "[parameters('selfSignedCertificatePassword')]"
                  },
                  "serverBackendSSLCert": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.serverBackendSSLCert.value]"
                  },
                  "serverContext": {
                    "value": "[variables('serverContext')]"
                  },
                  "serverLicenseFileName": {
                    "value": "[variables('serverLicenseFileName')]"
                  },
                  "serverVirtualMachineNames": {
                    "value": "[variables('serverVirtualMachineNames')]"
                  },
                  "serverVirtualMachines": {
                    "value": "[variables('serverVirtualMachines')]"
                  },
                  "spatiotemporalBigDataStoreVirtualMachineNames": {
                    "value": "[variables('spatiotemporalBigDataStoreVirtualMachineNames')]"
                  },
                  "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "spatiotemporalBigDataStoreVirtualMachines": {
                    "value": "[variables('spatiotemporalBigDataStoreVirtualMachines')]"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "storageUriPrefix": {
                    "value": "[format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tileCacheDataStoreVirtualMachineOSDiskSize": {
                    "value": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]"
                  },
                  "tileCacheVirtualMachineNames": {
                    "value": "[variables('tileCacheDataStoreVirtualMachineNames')]"
                  },
                  "tileCacheVirtualMachines": {
                    "value": "[variables('tileCacheDataStoreVirtualMachines')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "userAssignedIdenityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "virtualMachineOSDiskSize": {
                    "value": "[parameters('virtualMachineOSDiskSize')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  },
                  "windowsDomainName": "[if(parameters('joinWindowsDomain'), createObject('value', parameters('windowsDomainName')), createObject('value', 'none'))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "13179115516730625918"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "applicationGatewayName": {
                      "type": "string"
                    },
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "architecture": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "dataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "dataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "dataStoreVirtualMachines": {
                      "type": "array"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "dscDataStoreFunction": {
                      "type": "string"
                    },
                    "dscPortalFunction": {
                      "type": "string"
                    },
                    "dscServerScriptFunction": {
                      "type": "string"
                    },
                    "dscSpatioTemporalFunction": {
                      "type": "string"
                    },
                    "dscTileCacheFunction": {
                      "type": "string"
                    },
                    "dscGraphDataStoreFunction": {
                      "type": "string"
                    },
                    "dscObjectDataStoreFunction": {
                      "type": "string"
                    },
                    "enableDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "enableServerLogHarvesterPlugin": {
                      "type": "bool"
                    },
                    "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "enableVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "externalDnsHostname": {
                      "type": "string"
                    },
                    "fileShareDscScriptFunction": {
                      "type": "string"
                    },
                    "fileShareVirtualMachineName": {
                      "type": "string"
                    },
                    "isUpdatingCertificates": {
                      "type": "bool"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "portalBackendSslCert": {
                      "type": "string"
                    },
                    "portalContext": {
                      "type": "string"
                    },
                    "portalLicenseFileName": {
                      "type": "string"
                    },
                    "portalLicenseUserTypeId": {
                      "type": "string"
                    },
                    "portalVirtualMachineNames": {
                      "type": "string"
                    },
                    "portalVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "portalVirtualMachines": {
                      "type": "array"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "publicIpId": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "resourceSuffix": {
                      "type": "string"
                    },
                    "secondaryDnsHostName": {
                      "type": "string"
                    },
                    "serverBackendSSLCert": {
                      "type": "string"
                    },
                    "serverContext": {
                      "type": "string"
                    },
                    "serverLicenseFileName": {
                      "type": "string"
                    },
                    "serverVirtualMachineNames": {
                      "type": "string"
                    },
                    "serverVirtualMachines": {
                      "type": "array"
                    },
                    "spatiotemporalBigDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "spatiotemporalBigDataStoreVirtualMachines": {
                      "type": "array"
                    },
                    "tileCacheVirtualMachines": {
                      "type": "array"
                    },
                    "tileCacheVirtualMachineNames": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "userAssignedIdenityResourceId": {
                      "type": "string"
                    },
                    "virtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "selfSignedSSLCertificatePassword": {
                      "type": "securestring"
                    },
                    "tileCacheDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "isTileCacheDataStoreClustered": {
                      "type": "bool"
                    },
                    "isMultiMachineTileCacheDataStore": {
                      "type": "bool"
                    },
                    "enableTileCacheDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "graphDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "graphDataStoreVirtualMachines": {
                      "type": "array"
                    },
                    "graphDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "enableGraphDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "objectDataStoreVirtualMachineNames": {
                      "type": "string"
                    },
                    "objectDataStoreVirtualMachines": {
                      "type": "array"
                    },
                    "objectDataStoreVirtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "isObjectDataStoreClustered": {
                      "type": "bool"
                    },
                    "enableObjectDataStoreVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "enableSpatiotemporalBigDataStore": {
                      "type": "bool"
                    },
                    "enableTileCacheDataStore": {
                      "type": "bool"
                    },
                    "enableGraphDataStore": {
                      "type": "bool"
                    },
                    "enableObjectDataStore": {
                      "type": "bool"
                    },
                    "applicationGatewayPrivateIPAddress": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[equals(parameters('architecture'), 'multitier')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "adminPassword": {
                            "value": "[parameters('adminPassword')]"
                          },
                          "adminUsername": {
                            "value": "[parameters('adminUsername')]"
                          },
                          "arcgisServiceAccountIsDomainAccount": {
                            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          },
                          "arcgisServiceAccountPassword": {
                            "value": "[parameters('arcgisServiceAccountPassword')]"
                          },
                          "arcgisServiceAccountUserName": {
                            "value": "[parameters('arcgisServiceAccountUserName')]"
                          },
                          "debugMode": {
                            "value": "[parameters('debugMode')]"
                          },
                          "dscConfiguration": {
                            "value": "[parameters('fileShareDscScriptFunction')]"
                          },
                          "dscScript": {
                            "value": "FileShareConfiguration.ps1"
                          },
                          "enableVirtualMachineDataDisk": {
                            "value": "[parameters('enableVirtualMachineDataDisk')]"
                          },
                          "externalDNSHostName": {
                            "value": "[parameters('externalDnsHostname')]"
                          },
                          "fileShareVirtualMachineName": {
                            "value": "[parameters('fileShareVirtualMachineName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "portalContext": {
                            "value": "[parameters('portalContext')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "storageUriPrefix": {
                            "value": "[parameters('storageUriPrefix')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualMachineOSDiskSize": {
                            "value": "[parameters('virtualMachineOSDiskSize')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "4811268326227267852"
                            }
                          },
                          "parameters": {
                            "adminPassword": {
                              "type": "securestring"
                            },
                            "adminUsername": {
                              "type": "string"
                            },
                            "arcgisServiceAccountIsDomainAccount": {
                              "type": "bool"
                            },
                            "arcgisServiceAccountPassword": {
                              "type": "securestring"
                            },
                            "arcgisServiceAccountUserName": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "convertedEpoch": {
                              "type": "int",
                              "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                            },
                            "debugMode": {
                              "type": "bool"
                            },
                            "dscConfiguration": {
                              "type": "string"
                            },
                            "dscScript": {
                              "type": "string"
                            },
                            "enableVirtualMachineDataDisk": {
                              "type": "bool"
                            },
                            "fileShareName": {
                              "type": "string",
                              "defaultValue": "fileshare"
                            },
                            "externalDNSHostName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "portalContext": {
                              "type": "string"
                            },
                            "storageUriPrefix": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "fileShareVirtualMachineName": {
                              "type": "string"
                            },
                            "virtualMachineOSDiskSize": {
                              "type": "int"
                            }
                          },
                          "variables": {
                            "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                            "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                            "sasProperties": {
                              "signedProtocol": "https",
                              "signedResourceTypes": "sco",
                              "signedPermission": "rl",
                              "signedServices": "b",
                              "signedExpiry": "[variables('convertedDatetime')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2018-06-01",
                              "name": "[format('{0}/{1}', parameters('fileShareVirtualMachineName'), 'DSCConfiguration')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "autoUpgradeMinorVersion": true,
                                "publisher": "Microsoft.Powershell",
                                "type": "DSC",
                                "typeHandlerVersion": "2.77",
                                "settings": {
                                  "wmfVersion": "latest",
                                  "configuration": {
                                    "url": "[variables('dscModuleUrl')]",
                                    "script": "[parameters('dscScript')]",
                                    "function": "[parameters('dscConfiguration')]"
                                  },
                                  "configurationArguments": {
                                    "DebugMode": "[parameters('debugMode')]",
                                    "EnableDataDisk": "[parameters('enableVirtualMachineDataDisk')]",
                                    "ExternalDNSHostName": "[parameters('externalDNSHostName')]",
                                    "IsBaseDeployment": "True",
                                    "FileShareName": "[parameters('fileShareName')]",
                                    "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                                    "PortalContext": "[parameters('portalContext')]",
                                    "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                                  }
                                },
                                "protectedSettings": {
                                  "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                  "managedIdentity": {
                                    "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('fileShareVirtualMachineName')), '2023-03-01', 'full').identity.principalId]",
                                    "tenantId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('fileShareVirtualMachineName')), '2023-03-01', 'full').identity.tenantId]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredential": {
                                      "userName": "[parameters('arcgisServiceAccountUserName')]",
                                      "password": "[parameters('arcgisServiceAccountPassword')]"
                                    },
                                    "MachineAdministratorCredential": {
                                      "userName": "[parameters('adminUsername')]",
                                      "password": "[parameters('adminPassword')]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "dscStatus": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('fileShareVirtualMachineName'), 'DSCConfiguration'), '2018-06-01').provisioningState]"
                            },
                            "fileShareName": {
                              "type": "string",
                              "value": "[parameters('fileShareName')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[equals(parameters('architecture'), 'multitier')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "applicationGatewayName": {
                            "value": "[parameters('applicationGatewayName')]"
                          },
                          "applicationGatewayPrivateIpAddress": {
                            "value": "[parameters('applicationGatewayPrivateIPAddress')]"
                          },
                          "externalDnsHostName": {
                            "value": "[parameters('externalDnsHostname')]"
                          },
                          "joinWindowsDomain": {
                            "value": "[parameters('joinWindowsDomain')]"
                          },
                          "keyVaultUri": {
                            "value": "[parameters('keyVaultUri')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "portalBackendSslCert": {
                            "value": "[parameters('portalBackendSslCert')]"
                          },
                          "portalVirtualMachineNames": {
                            "value": "[parameters('portalVirtualMachineNames')]"
                          },
                          "publicIpId": {
                            "value": "[parameters('publicIpId')]"
                          },
                          "resourceGroup": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "resourceSuffix": {
                            "value": "[parameters('resourceSuffix')]"
                          },
                          "serverBackendSSLCert": {
                            "value": "[parameters('serverBackendSSLCert')]"
                          },
                          "serverVirtualMachineNames": {
                            "value": "[parameters('serverVirtualMachineNames')]"
                          },
                          "userAssignedIdenityResourceId": {
                            "value": "[parameters('userAssignedIdenityResourceId')]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "windowsDomainName": {
                            "value": "[parameters('windowsDomainName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "13366513209151885602"
                            }
                          },
                          "parameters": {
                            "applicationGatewayName": {
                              "type": "string"
                            },
                            "applicationGatewayPrivateIpAddress": {
                              "type": "string"
                            },
                            "externalDnsHostName": {
                              "type": "string"
                            },
                            "joinWindowsDomain": {
                              "type": "bool"
                            },
                            "keyVaultUri": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "portalBackendSslCert": {
                              "type": "string"
                            },
                            "portalVirtualMachineNames": {
                              "type": "string"
                            },
                            "publicIpId": {
                              "type": "string"
                            },
                            "resourceGroup": {
                              "type": "string"
                            },
                            "resourceSuffix": {
                              "type": "string"
                            },
                            "serverBackendSSLCert": {
                              "type": "string"
                            },
                            "serverVirtualMachineNames": {
                              "type": "string"
                            },
                            "userAssignedIdenityResourceId": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "windowsDomainName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "serverBackEndVirtualMachines": "[split(parameters('serverVirtualMachineNames'), ',')]",
                            "portalBackEndVirtualMachines": "[split(parameters('portalVirtualMachineNames'), ',')]",
                            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/applicationGateways",
                              "apiVersion": "2023-06-01",
                              "name": "[parameters('applicationGatewayName')]",
                              "location": "[parameters('location')]",
                              "tags": {},
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('userAssignedIdenityResourceId'))]": {}
                                }
                              },
                              "properties": {
                                "sku": {
                                  "name": "Standard_v2",
                                  "tier": "Standard_v2",
                                  "capacity": 2
                                },
                                "gatewayIPConfigurations": [
                                  {
                                    "name": "appGatewayIpConfig",
                                    "properties": {
                                      "subnet": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                                      }
                                    }
                                  }
                                ],
                                "sslCertificates": [
                                  {
                                    "name": "frontendCert",
                                    "properties": {
                                      "keyVaultSecretId": "[format('{0}secrets/pfx{1}', parameters('keyVaultUri'), parameters('location'))]"
                                    }
                                  }
                                ],
                                "trustedRootCertificates": [
                                  {
                                    "name": "serverBackendSSLCert",
                                    "properties": {
                                      "data": "[parameters('serverBackendSSLCert')]"
                                    }
                                  },
                                  {
                                    "name": "portalBackendSSLCert",
                                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]",
                                    "properties": {
                                      "data": "[parameters('portalBackendSslCert')]"
                                    }
                                  }
                                ],
                                "trustedClientCertificates": [],
                                "sslProfiles": [],
                                "frontendIPConfigurations": [
                                  {
                                    "name": "pipIpConfig",
                                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                                    "properties": {
                                      "privateIPAllocationMethod": "Dynamic",
                                      "publicIPAddress": {
                                        "id": "[parameters('publicIpId')]"
                                      }
                                    }
                                  },
                                  {
                                    "name": "[format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix'))]",
                                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                                    "properties": {
                                      "privateIPAddress": "[parameters('applicationGatewayPrivateIpAddress')]",
                                      "privateIPAllocationMethod": "Static",
                                      "subnet": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                                      }
                                    }
                                  }
                                ],
                                "frontendPorts": [
                                  {
                                    "name": "[format('EnterprisePort443{0}', parameters('resourceSuffix'))]",
                                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]",
                                    "properties": {
                                      "port": 443
                                    }
                                  },
                                  {
                                    "name": "[format('EnterprisePort80{0}', parameters('resourceSuffix'))]",
                                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]",
                                    "properties": {
                                      "port": 80
                                    }
                                  }
                                ],
                                "backendAddressPools": [
                                  {
                                    "name": "[format('ServerBackendPool{0}', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "copy": [
                                        {
                                          "name": "backendAddresses",
                                          "count": "[length(variables('serverBackEndVirtualMachines'))]",
                                          "input": {
                                            "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "[format('{0}PortalBackendPool', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "copy": [
                                        {
                                          "name": "backendAddresses",
                                          "count": "[length(variables('portalBackEndVirtualMachines'))]",
                                          "input": {
                                            "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "loadDistributionPolicies": [],
                                "backendHttpSettingsCollection": [
                                  {
                                    "name": "[format('PortalHttpsSetting{0}', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "port": 7443,
                                      "protocol": "Https",
                                      "cookieBasedAffinity": "Disabled",
                                      "connectionDraining": {
                                        "enabled": true,
                                        "drainTimeoutInSec": 60
                                      },
                                      "pickHostNameFromBackendAddress": true,
                                      "path": "/arcgis/",
                                      "requestTimeout": 180,
                                      "probe": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}PortalProbeName', parameters('resourceSuffix')))]"
                                      },
                                      "trustedRootCertificates": [
                                        {
                                          "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "[format('ServerHttpsSetting{0}', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "port": 6443,
                                      "protocol": "Https",
                                      "cookieBasedAffinity": "Disabled",
                                      "connectionDraining": {
                                        "enabled": true,
                                        "drainTimeoutInSec": 60
                                      },
                                      "pickHostNameFromBackendAddress": true,
                                      "path": "/arcgis/",
                                      "requestTimeout": 180,
                                      "probe": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}ServerProbeName', parameters('resourceSuffix')))]"
                                      },
                                      "trustedRootCertificates": [
                                        {
                                          "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'serverBackendSSLCert')]"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "backendSettingsCollection": [],
                                "httpListeners": [
                                  {
                                    "name": "[format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "frontendIPConfiguration": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                                      },
                                      "frontendPort": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]"
                                      },
                                      "protocol": "Http",
                                      "hostNames": [
                                        "[parameters('externalDnsHostName')]"
                                      ],
                                      "requireServerNameIndication": false
                                    }
                                  },
                                  {
                                    "name": "[format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "frontendIPConfiguration": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                                      },
                                      "frontendPort": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]"
                                      },
                                      "protocol": "Https",
                                      "sslCertificate": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/sslCertificates', parameters('applicationGatewayName'), 'frontendCert')]"
                                      },
                                      "hostNames": [
                                        "[parameters('externalDnsHostName')]"
                                      ],
                                      "requireServerNameIndication": false
                                    }
                                  }
                                ],
                                "listeners": [],
                                "urlPathMaps": [
                                  {
                                    "name": "[format('{0}EnterprisePathMap', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "defaultBackendAddressPool": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                                      },
                                      "defaultBackendHttpSettings": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                                      },
                                      "pathRules": [
                                        {
                                          "name": "serverPathRule",
                                          "properties": {
                                            "paths": [
                                              "/server/*",
                                              "/server"
                                            ],
                                            "backendAddressPool": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                                            },
                                            "backendHttpSettings": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                                            },
                                            "rewriteRuleSet": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}ServerRewriteRuleSet', parameters('resourceSuffix')))]"
                                            }
                                          }
                                        },
                                        {
                                          "name": "portalPathRule",
                                          "properties": {
                                            "paths": [
                                              "/portal/*",
                                              "/portal"
                                            ],
                                            "backendAddressPool": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('{0}PortalBackendPool', parameters('resourceSuffix')))]"
                                            },
                                            "backendHttpSettings": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('PortalHttpsSetting{0}', parameters('resourceSuffix')))]"
                                            },
                                            "rewriteRuleSet": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}PortalRewriteRuleSet', parameters('resourceSuffix')))]"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "requestRoutingRules": [
                                  {
                                    "name": "[format('{0}EnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "ruleType": "PathBasedRouting",
                                      "priority": 10,
                                      "httpListener": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                                      },
                                      "urlPathMap": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/urlPathMaps', parameters('applicationGatewayName'), format('{0}EnterprisePathMap', parameters('resourceSuffix')))]"
                                      }
                                    }
                                  },
                                  {
                                    "name": "[format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "ruleType": "Basic",
                                      "priority": 20,
                                      "httpListener": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                                      },
                                      "redirectConfiguration": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/redirectConfigurations', parameters('applicationGatewayName'), format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix')))]"
                                      }
                                    }
                                  }
                                ],
                                "routingRules": [],
                                "probes": [
                                  {
                                    "name": "[format('{0}ServerProbeName', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "protocol": "Https",
                                      "path": "/arcgis/rest/info/healthcheck",
                                      "interval": 30,
                                      "timeout": 30,
                                      "unhealthyThreshold": 3,
                                      "pickHostNameFromBackendHttpSettings": true,
                                      "minServers": 0,
                                      "match": {
                                        "statusCodes": [
                                          "200"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "name": "[format('{0}PortalProbeName', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "protocol": "Https",
                                      "path": "/arcgis/portaladmin/healthCheck",
                                      "interval": 30,
                                      "timeout": 30,
                                      "unhealthyThreshold": 3,
                                      "pickHostNameFromBackendHttpSettings": true,
                                      "minServers": 0,
                                      "match": {
                                        "statusCodes": [
                                          "200"
                                        ]
                                      }
                                    }
                                  }
                                ],
                                "rewriteRuleSets": [
                                  {
                                    "name": "[format('{0}PortalRewriteRuleSet', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "rewriteRules": [
                                        {
                                          "ruleSequence": 50,
                                          "conditions": [],
                                          "name": "XForwardedHostRewrite",
                                          "actionSet": {
                                            "requestHeaderConfigurations": [
                                              {
                                                "headerName": "X-Forwarded-Host",
                                                "headerValue": "{http_req_host}"
                                              }
                                            ],
                                            "responseHeaderConfigurations": []
                                          }
                                        },
                                        {
                                          "ruleSequence": 100,
                                          "conditions": [
                                            {
                                              "variable": "http_resp_Location",
                                              "pattern": "(https?):\\/\\/[^\\/]+:7443\\/(?:arcgis|portal)(.*)$",
                                              "ignoreCase": true,
                                              "negate": false
                                            }
                                          ],
                                          "name": "PortalRewrite",
                                          "actionSet": {
                                            "requestHeaderConfigurations": [],
                                            "responseHeaderConfigurations": [
                                              {
                                                "headerName": "RewriteLocationValue",
                                                "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                              },
                                              {
                                                "headerName": "Location",
                                                "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "[format('{0}ServerRewriteRuleSet', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "rewriteRules": [
                                        {
                                          "ruleSequence": 50,
                                          "conditions": [],
                                          "name": "XForwardedHostRewrite",
                                          "actionSet": {
                                            "requestHeaderConfigurations": [
                                              {
                                                "headerName": "X-Forwarded-Host",
                                                "headerValue": "{http_req_host}"
                                              }
                                            ],
                                            "responseHeaderConfigurations": []
                                          }
                                        },
                                        {
                                          "ruleSequence": 100,
                                          "conditions": [
                                            {
                                              "variable": "http_resp_Location",
                                              "pattern": "(https?):\\/\\/[^\\/]+:6443\\/(?:arcgis|server)(.*)$",
                                              "ignoreCase": true,
                                              "negate": false
                                            }
                                          ],
                                          "name": "ServerRewrite",
                                          "actionSet": {
                                            "requestHeaderConfigurations": [],
                                            "responseHeaderConfigurations": [
                                              {
                                                "headerName": "RewriteLocationValue",
                                                "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                              },
                                              {
                                                "headerName": "Location",
                                                "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "redirectConfigurations": [
                                  {
                                    "name": "[format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "redirectType": "Permanent",
                                      "targetListener": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                                      },
                                      "includePath": true,
                                      "includeQueryString": true,
                                      "requestRoutingRules": [
                                        {
                                          "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/requestRoutingRules', parameters('applicationGatewayName'), format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix')))]"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "privateLinkConfigurations": []
                              }
                            }
                          ],
                          "outputs": {
                            "applicationGatewayPrivateIpAddress": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '2023-06-01').frontendIPConfigurations[1].properties.privateIPAddress]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dscEsriServers",
                        "count": "[length(parameters('serverVirtualMachines'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[equals(parameters('architecture'), 'multitier')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('serverVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "arcgisServiceAccountIsDomainAccount": {
                            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          },
                          "arcgisServiceAccountPassword": {
                            "value": "[parameters('arcgisServiceAccountPassword')]"
                          },
                          "arcgisServiceAccountUserName": {
                            "value": "[parameters('arcgisServiceAccountUserName')]"
                          },
                          "cloudStorageAccountCredentialsUserName": {
                            "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                          },
                          "debugMode": {
                            "value": "[parameters('debugMode')]"
                          },
                          "dscConfiguration": {
                            "value": "[parameters('dscServerScriptFunction')]"
                          },
                          "dscScript": {
                            "value": "[format('{0}.ps1', parameters('dscServerScriptFunction'))]"
                          },
                          "enableServerLogHarvesterPlugin": {
                            "value": "[parameters('enableServerLogHarvesterPlugin')]"
                          },
                          "enableVirtualMachineDataDisk": {
                            "value": "[parameters('enableVirtualMachineDataDisk')]"
                          },
                          "externalDnsHostName": {
                            "value": "[parameters('externalDnsHostname')]"
                          },
                          "fileShareVirtualMachineName": {
                            "value": "[parameters('fileShareVirtualMachineName')]"
                          },
                          "isUpdatingCertificates": {
                            "value": "[parameters('isUpdatingCertificates')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "primarySiteAdministratorAccountPassword": {
                            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                          },
                          "primarySiteAdministratorAccountUserName": {
                            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                          },
                          "publicKeySSLCertificateFileName": {
                            "value": "[format('wildcard{0}-PublicKey.cer', parameters('externalDnsHostname'))]"
                          },
                          "serverContext": {
                            "value": "[parameters('serverContext')]"
                          },
                          "serverLicenseFileName": {
                            "value": "[parameters('serverLicenseFileName')]"
                          },
                          "serverVirtualMachineNames": {
                            "value": "[parameters('serverVirtualMachineNames')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "storageUriPrefix": {
                            "value": "[parameters('storageUriPrefix')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "useAzureFiles": {
                            "value": "[parameters('useAzureFiles')]"
                          },
                          "useCloudStorage": {
                            "value": "[parameters('useCloudStorage')]"
                          },
                          "virtualMachineNames": {
                            "value": "[parameters('serverVirtualMachines')[copyIndex()]]"
                          },
                          "virtualMachineOSDiskSize": {
                            "value": "[parameters('virtualMachineOSDiskSize')]"
                          },
                          "selfSignedSSLCertificatePassword": {
                            "value": "[parameters('selfSignedSSLCertificatePassword')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "11214753598227343118"
                            }
                          },
                          "parameters": {
                            "arcgisServiceAccountIsDomainAccount": {
                              "type": "bool"
                            },
                            "arcgisServiceAccountPassword": {
                              "type": "securestring"
                            },
                            "arcgisServiceAccountUserName": {
                              "type": "string"
                            },
                            "cloudStorageAccountCredentialsUserName": {
                              "type": "string"
                            },
                            "convertedEpoch": {
                              "type": "int",
                              "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                            },
                            "debugMode": {
                              "type": "bool"
                            },
                            "dscConfiguration": {
                              "type": "string"
                            },
                            "dscScript": {
                              "type": "string"
                            },
                            "enableServerLogHarvesterPlugin": {
                              "type": "bool"
                            },
                            "enableVirtualMachineDataDisk": {
                              "type": "bool"
                            },
                            "fileShareName": {
                              "type": "string",
                              "defaultValue": "fileshare"
                            },
                            "fileShareVirtualMachineName": {
                              "type": "string"
                            },
                            "externalDnsHostName": {
                              "type": "string"
                            },
                            "isUpdatingCertificates": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "primarySiteAdministratorAccountPassword": {
                              "type": "securestring"
                            },
                            "primarySiteAdministratorAccountUserName": {
                              "type": "string"
                            },
                            "publicKeySSLCertificateFileName": {
                              "type": "string"
                            },
                            "serverVirtualMachineNames": {
                              "type": "string"
                            },
                            "serverContext": {
                              "type": "string"
                            },
                            "serverLicenseFileName": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "storageUriPrefix": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "useAzureFiles": {
                              "type": "bool"
                            },
                            "useCloudStorage": {
                              "type": "bool"
                            },
                            "virtualMachineNames": {
                              "type": "string"
                            },
                            "virtualMachineOSDiskSize": {
                              "type": "int"
                            },
                            "selfSignedSSLCertificatePassword": {
                              "type": "securestring"
                            }
                          },
                          "variables": {
                            "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                            "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                            "sasProperties": {
                              "signedProtocol": "https",
                              "signedResourceTypes": "sco",
                              "signedPermission": "rl",
                              "signedServices": "b",
                              "signedExpiry": "[variables('convertedDatetime')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2018-10-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "autoUpgradeMinorVersion": true,
                                "publisher": "Microsoft.Powershell",
                                "type": "DSC",
                                "typeHandlerVersion": "2.77",
                                "settings": {
                                  "wmfVersion": "latest",
                                  "configuration": {
                                    "url": "[variables('dscModuleUrl')]",
                                    "script": "[parameters('dscScript')]",
                                    "function": "[parameters('dscConfiguration')]"
                                  },
                                  "configurationArguments": {
                                    "DebugMode": "[string(parameters('debugMode'))]",
                                    "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
                                    "EnableLogHarvesterPlugin": "[string(parameters('enableServerLogHarvesterPlugin'))]",
                                    "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                                    "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                                    "FileShareName": "[parameters('fileShareName')]",
                                    "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
                                    "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                                    "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                    "ServerContext": "[parameters('serverContext')]",
                                    "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                                    "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                                    "UseAzureFiles": "[parameters('useAzureFiles')]",
                                    "UseCloudStorage": "[parameters('useCloudStorage')]",
                                    "ServerLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('serverLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]"
                                  }
                                },
                                "protectedSettings": {
                                  "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                  "managedIdentity": {
                                    "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                                    "tenantId": "[subscription().tenantId]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredential": {
                                      "userName": "[parameters('arcgisServiceAccountUserName')]",
                                      "password": "[parameters('arcgisServiceAccountPassword')]"
                                    },
                                    "ServerInternalCertificatePassword": {
                                      "userName": "Placeholder",
                                      "password": "[parameters('selfSignedSSLCertificatePassword')]"
                                    },
                                    "SiteAdministratorCredential": {
                                      "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                                      "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                                    },
                                    "StorageAccountCredential": {
                                      "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                                      "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "dscsStatus": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dscEsriDataStoreServers",
                        "count": "[length(parameters('dataStoreVirtualMachines'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[equals(parameters('architecture'), 'multitier')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('dataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "arcgisServiceAccountIsDomainAccount": {
                            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          },
                          "arcgisServiceAccountPassword": {
                            "value": "[parameters('arcgisServiceAccountPassword')]"
                          },
                          "arcgisServiceAccountUserName": {
                            "value": "[parameters('arcgisServiceAccountUserName')]"
                          },
                          "cloudStorageAccountCredentialsUserName": {
                            "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                          },
                          "dataStoreVirtualMachineNames": {
                            "value": "[parameters('dataStoreVirtualMachineNames')]"
                          },
                          "dataStoreVirtualMachineOSDiskSize": {
                            "value": "[parameters('dataStoreVirtualMachineOSDiskSize')]"
                          },
                          "debugMode": {
                            "value": "[parameters('debugMode')]"
                          },
                          "dscConfiguration": {
                            "value": "[parameters('dscDataStoreFunction')]"
                          },
                          "dscScript": {
                            "value": "[format('{0}.ps1', parameters('dscDataStoreFunction'))]"
                          },
                          "enableDataStoreVirtualMachineDataDisk": {
                            "value": "[parameters('enableDataStoreVirtualMachineDataDisk')]"
                          },
                          "externalDnsHostName": {
                            "value": "[parameters('externalDnsHostname')]"
                          },
                          "fileShareVirtualMachineName": {
                            "value": "[parameters('fileShareVirtualMachineName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "primarySiteAdministratorAccountPassword": {
                            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                          },
                          "primarySiteAdministratorAccountUserName": {
                            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                          },
                          "serverVirtualMachineNames": {
                            "value": "[parameters('serverVirtualMachineNames')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "storageUriPrefix": {
                            "value": "[parameters('storageUriPrefix')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "useAzureFiles": {
                            "value": "[parameters('useAzureFiles')]"
                          },
                          "useCloudStorage": {
                            "value": "[parameters('useCloudStorage')]"
                          },
                          "virtualMachineNames": {
                            "value": "[parameters('dataStoreVirtualMachines')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "12201042815010593544"
                            }
                          },
                          "parameters": {
                            "arcgisServiceAccountIsDomainAccount": {
                              "type": "bool"
                            },
                            "arcgisServiceAccountPassword": {
                              "type": "securestring"
                            },
                            "arcgisServiceAccountUserName": {
                              "type": "string"
                            },
                            "cloudStorageAccountCredentialsUserName": {
                              "type": "string"
                            },
                            "convertedEpoch": {
                              "type": "int",
                              "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                            },
                            "dataStoreVirtualMachineNames": {
                              "type": "string"
                            },
                            "dataStoreVirtualMachineOSDiskSize": {
                              "type": "int"
                            },
                            "fileShareVirtualMachineName": {
                              "type": "string"
                            },
                            "serverVirtualMachineNames": {
                              "type": "string"
                            },
                            "enableDataStoreVirtualMachineDataDisk": {
                              "type": "bool"
                            },
                            "externalDnsHostName": {
                              "type": "string"
                            },
                            "debugMode": {
                              "type": "bool"
                            },
                            "dscConfiguration": {
                              "type": "string"
                            },
                            "dscScript": {
                              "type": "string"
                            },
                            "fileShareName": {
                              "type": "string",
                              "defaultValue": "fileshare"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "primarySiteAdministratorAccountPassword": {
                              "type": "securestring"
                            },
                            "primarySiteAdministratorAccountUserName": {
                              "type": "string"
                            },
                            "storageUriPrefix": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "useAzureFiles": {
                              "type": "bool"
                            },
                            "useCloudStorage": {
                              "type": "bool"
                            },
                            "virtualMachineNames": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                            "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                            "sasProperties": {
                              "signedProtocol": "https",
                              "signedResourceTypes": "sco",
                              "signedPermission": "rl",
                              "signedServices": "b",
                              "signedExpiry": "[variables('convertedDatetime')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2018-10-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "autoUpgradeMinorVersion": true,
                                "publisher": "Microsoft.Powershell",
                                "type": "DSC",
                                "typeHandlerVersion": "2.77",
                                "settings": {
                                  "wmfVersion": "latest",
                                  "configuration": {
                                    "url": "[variables('dscModuleUrl')]",
                                    "script": "[parameters('dscScript')]",
                                    "function": "[parameters('dscConfiguration')]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                                    "DataStoreMachineNames": "[parameters('dataStoreVirtualMachineNames')]",
                                    "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                                    "FileShareName": "[parameters('fileShareName')]",
                                    "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                                    "OSDiskSize": "[parameters('dataStoreVirtualMachineOSDiskSize')]",
                                    "EnableDataDisk": "[string(parameters('enableDataStoreVirtualMachineDataDisk'))]",
                                    "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                                    "UseCloudStorage": "[parameters('useCloudStorage')]",
                                    "UseAzureFiles": "[parameters('useAzureFiles')]",
                                    "DebugMode": "[string(parameters('debugMode'))]"
                                  }
                                },
                                "protectedSettings": {
                                  "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                  "managedIdentity": {
                                    "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                                    "tenantId": "[subscription().tenantId]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredential": {
                                      "userName": "[parameters('arcgisServiceAccountUserName')]",
                                      "password": "[parameters('arcgisServiceAccountPassword')]"
                                    },
                                    "SiteAdministratorCredential": {
                                      "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                                      "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                                    },
                                    "StorageAccountCredential": {
                                      "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                                      "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "dscsStatus": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                        "dscEsriServers",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dscEsriSpatioTemporalServers",
                        "count": "[length(parameters('spatiotemporalBigDataStoreVirtualMachines'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableSpatiotemporalBigDataStore'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "arcgisServiceAccountIsDomainAccount": {
                            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          },
                          "arcgisServiceAccountPassword": {
                            "value": "[parameters('arcgisServiceAccountPassword')]"
                          },
                          "arcgisServiceAccountUserName": {
                            "value": "[parameters('arcgisServiceAccountUserName')]"
                          },
                          "debugMode": {
                            "value": "[parameters('debugMode')]"
                          },
                          "dscConfiguration": {
                            "value": "[parameters('dscSpatioTemporalFunction')]"
                          },
                          "dscScript": {
                            "value": "[format('{0}.ps1', parameters('dscSpatioTemporalFunction'))]"
                          },
                          "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
                            "value": "[parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk')]"
                          },
                          "fileShareVirtualMachineName": {
                            "value": "[parameters('fileShareVirtualMachineName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "primarySiteAdministratorAccountPassword": {
                            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                          },
                          "primarySiteAdministratorAccountUserName": {
                            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                          },
                          "serverVirtualMachineNames": {
                            "value": "[parameters('serverVirtualMachineNames')]"
                          },
                          "spatiotemporalBigDataStoreVirtualMachineNames": {
                            "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineNames')]"
                          },
                          "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
                            "value": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "storageUriPrefix": {
                            "value": "[parameters('storageUriPrefix')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualMachineNames": {
                            "value": "[parameters('spatiotemporalBigDataStoreVirtualMachines')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "3516818735457343143"
                            }
                          },
                          "parameters": {
                            "arcgisServiceAccountIsDomainAccount": {
                              "type": "bool"
                            },
                            "arcgisServiceAccountPassword": {
                              "type": "securestring"
                            },
                            "arcgisServiceAccountUserName": {
                              "type": "string"
                            },
                            "debugMode": {
                              "type": "bool"
                            },
                            "dscConfiguration": {
                              "type": "string"
                            },
                            "dscScript": {
                              "type": "string"
                            },
                            "fileShareName": {
                              "type": "string",
                              "defaultValue": "fileshare"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "primarySiteAdministratorAccountPassword": {
                              "type": "securestring"
                            },
                            "primarySiteAdministratorAccountUserName": {
                              "type": "string"
                            },
                            "storageUriPrefix": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineNames": {
                              "type": "string"
                            },
                            "spatiotemporalBigDataStoreVirtualMachineNames": {
                              "type": "string"
                            },
                            "fileShareVirtualMachineName": {
                              "type": "string"
                            },
                            "serverVirtualMachineNames": {
                              "type": "string"
                            },
                            "spatiotemporalBigDataStoreVirtualMachineOSDiskSize": {
                              "type": "int"
                            },
                            "enableSpatiotemporalBigDataStoreVirtualMachineDataDisk": {
                              "type": "bool"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "convertedEpoch": {
                              "type": "int",
                              "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                            }
                          },
                          "variables": {
                            "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                            "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                            "sasProperties": {
                              "signedProtocol": "https",
                              "signedResourceTypes": "sco",
                              "signedPermission": "rl",
                              "signedServices": "b",
                              "signedExpiry": "[variables('convertedDatetime')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2018-10-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "autoUpgradeMinorVersion": true,
                                "publisher": "Microsoft.Powershell",
                                "type": "DSC",
                                "typeHandlerVersion": "2.77",
                                "settings": {
                                  "wmfVersion": "latest",
                                  "configuration": {
                                    "url": "[variables('dscModuleUrl')]",
                                    "script": "[parameters('dscScript')]",
                                    "function": "[parameters('dscConfiguration')]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                                    "SpatiotemporalBigDataStoreMachineNames": "[parameters('spatiotemporalBigDataStoreVirtualMachineNames')]",
                                    "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                                    "FileShareName": "[parameters('fileShareName')]",
                                    "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                                    "OSDiskSize": "[parameters('spatiotemporalBigDataStoreVirtualMachineOSDiskSize')]",
                                    "EnableDataDisk": "[string(parameters('enableSpatiotemporalBigDataStoreVirtualMachineDataDisk'))]",
                                    "DebugMode": "[string(parameters('debugMode'))]"
                                  }
                                },
                                "protectedSettings": {
                                  "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                  "managedIdentity": {
                                    "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                                    "tenantId": "[subscription().tenantId]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredential": {
                                      "userName": "[parameters('arcgisServiceAccountUserName')]",
                                      "password": "[parameters('arcgisServiceAccountPassword')]"
                                    },
                                    "SiteAdministratorCredential": {
                                      "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                                      "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                        "dscEsriDataStoreServers",
                        "dscEsriObjectDataStoreServers",
                        "dscEsriServers",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dscEsriTileCacheServers",
                        "count": "[length(parameters('tileCacheVirtualMachines'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableTileCacheDataStore'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('tileCacheVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "arcgisServiceAccountIsDomainAccount": {
                            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          },
                          "arcgisServiceAccountPassword": {
                            "value": "[parameters('arcgisServiceAccountPassword')]"
                          },
                          "arcgisServiceAccountUserName": {
                            "value": "[parameters('arcgisServiceAccountUserName')]"
                          },
                          "debugMode": {
                            "value": "[parameters('debugMode')]"
                          },
                          "dscConfiguration": {
                            "value": "[parameters('dscTileCacheFunction')]"
                          },
                          "dscScript": {
                            "value": "[format('{0}.ps1', parameters('dscTileCacheFunction'))]"
                          },
                          "enableTileCacheDataStoreVirtualMachineDataDisk": {
                            "value": "[parameters('enableTileCacheDataStoreVirtualMachineDataDisk')]"
                          },
                          "fileShareVirtualMachineName": {
                            "value": "[parameters('fileShareVirtualMachineName')]"
                          },
                          "isMultiMachineTileCacheDataStore": {
                            "value": "[parameters('isMultiMachineTileCacheDataStore')]"
                          },
                          "isTileCacheDataStoreClustered": {
                            "value": "[parameters('isTileCacheDataStoreClustered')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "primarySiteAdministratorAccountPassword": {
                            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                          },
                          "primarySiteAdministratorAccountUserName": {
                            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                          },
                          "serverVirtualMachineNames": {
                            "value": "[parameters('serverVirtualMachineNames')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "storageUriPrefix": {
                            "value": "[parameters('storageUriPrefix')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "tileCacheDataStoreVirtualMachineNames": {
                            "value": "[parameters('tileCacheVirtualMachineNames')]"
                          },
                          "tileCacheDataStoreVirtualMachineOSDiskSize": {
                            "value": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]"
                          },
                          "virtualMachineNames": {
                            "value": "[parameters('tileCacheVirtualMachines')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "16093052119851457375"
                            }
                          },
                          "parameters": {
                            "arcgisServiceAccountIsDomainAccount": {
                              "type": "bool"
                            },
                            "arcgisServiceAccountPassword": {
                              "type": "securestring"
                            },
                            "arcgisServiceAccountUserName": {
                              "type": "string"
                            },
                            "debugMode": {
                              "type": "bool"
                            },
                            "dscConfiguration": {
                              "type": "string"
                            },
                            "dscScript": {
                              "type": "string"
                            },
                            "fileShareName": {
                              "type": "string",
                              "defaultValue": "fileshare"
                            },
                            "isTileCacheDataStoreClustered": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "primarySiteAdministratorAccountPassword": {
                              "type": "securestring"
                            },
                            "primarySiteAdministratorAccountUserName": {
                              "type": "string"
                            },
                            "storageUriPrefix": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineNames": {
                              "type": "string"
                            },
                            "tileCacheDataStoreVirtualMachineNames": {
                              "type": "string"
                            },
                            "isMultiMachineTileCacheDataStore": {
                              "type": "bool"
                            },
                            "fileShareVirtualMachineName": {
                              "type": "string"
                            },
                            "serverVirtualMachineNames": {
                              "type": "string"
                            },
                            "tileCacheDataStoreVirtualMachineOSDiskSize": {
                              "type": "int"
                            },
                            "enableTileCacheDataStoreVirtualMachineDataDisk": {
                              "type": "bool"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "convertedEpoch": {
                              "type": "int",
                              "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                            }
                          },
                          "variables": {
                            "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                            "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                            "sasProperties": {
                              "signedProtocol": "https",
                              "signedResourceTypes": "sco",
                              "signedPermission": "rl",
                              "signedServices": "b",
                              "signedExpiry": "[variables('convertedDatetime')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2018-10-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "autoUpgradeMinorVersion": true,
                                "publisher": "Microsoft.Powershell",
                                "type": "DSC",
                                "typeHandlerVersion": "2.77",
                                "settings": {
                                  "wmfVersion": "latest",
                                  "configuration": {
                                    "url": "[variables('dscModuleUrl')]",
                                    "script": "[parameters('dscScript')]",
                                    "function": "[parameters('dscConfiguration')]"
                                  },
                                  "configurationArguments": {
                                    "IsTileCacheDataStoreClustered": "[parameters('isTileCacheDataStoreClustered')]",
                                    "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                                    "TileCacheDataStoreMachineNames": "[parameters('tileCacheDataStoreVirtualMachineNames')]",
                                    "IsMultiMachineTileCache": "[parameters('isMultiMachineTileCacheDataStore')]",
                                    "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                                    "FileShareName": "[parameters('fileShareName')]",
                                    "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                                    "OSDiskSize": "[parameters('tileCacheDataStoreVirtualMachineOSDiskSize')]",
                                    "EnableDataDisk": "[string(parameters('enableTileCacheDataStoreVirtualMachineDataDisk'))]",
                                    "DebugMode": "[string(parameters('debugMode'))]"
                                  }
                                },
                                "protectedSettings": {
                                  "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                  "managedIdentity": {
                                    "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                                    "tenantId": "[subscription().tenantId]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredential": {
                                      "userName": "[parameters('arcgisServiceAccountUserName')]",
                                      "password": "[parameters('arcgisServiceAccountPassword')]"
                                    },
                                    "SiteAdministratorCredential": {
                                      "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                                      "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                        "dscEsriDataStoreServers",
                        "dscEsriGraphDataStoreServers",
                        "dscEsriServers",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dscEsriGraphDataStoreServers",
                        "count": "[length(parameters('graphDataStoreVirtualMachines'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableGraphDataStore'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('graphDataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "arcgisServiceAccountIsDomainAccount": {
                            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          },
                          "arcgisServiceAccountPassword": {
                            "value": "[parameters('arcgisServiceAccountPassword')]"
                          },
                          "arcgisServiceAccountUserName": {
                            "value": "[parameters('arcgisServiceAccountUserName')]"
                          },
                          "debugMode": {
                            "value": "[parameters('debugMode')]"
                          },
                          "dscConfiguration": {
                            "value": "[parameters('dscGraphDataStoreFunction')]"
                          },
                          "dscScript": {
                            "value": "[format('{0}.ps1', parameters('dscGraphDataStoreFunction'))]"
                          },
                          "enableGraphDataStoreVirtualMachineDataDisk": {
                            "value": "[parameters('enableGraphDataStoreVirtualMachineDataDisk')]"
                          },
                          "fileShareVirtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.fileShareName.value]"
                          },
                          "graphDataStoreVirtualMachineNames": {
                            "value": "[parameters('graphDataStoreVirtualMachineNames')]"
                          },
                          "graphDataStoreVirtualMachineOSDiskSize": {
                            "value": "[parameters('graphDataStoreVirtualMachineOSDiskSize')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "primarySiteAdministratorAccountPassword": {
                            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                          },
                          "primarySiteAdministratorAccountUserName": {
                            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                          },
                          "serverVirtualMachineNames": {
                            "value": "[parameters('serverVirtualMachineNames')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "storageUriPrefix": {
                            "value": "[parameters('storageUriPrefix')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualMachineNames": {
                            "value": "[parameters('graphDataStoreVirtualMachines')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "15926008132751897196"
                            }
                          },
                          "parameters": {
                            "arcgisServiceAccountIsDomainAccount": {
                              "type": "bool"
                            },
                            "arcgisServiceAccountPassword": {
                              "type": "securestring"
                            },
                            "arcgisServiceAccountUserName": {
                              "type": "string"
                            },
                            "graphDataStoreVirtualMachineNames": {
                              "type": "string"
                            },
                            "fileShareVirtualMachineName": {
                              "type": "string"
                            },
                            "serverVirtualMachineNames": {
                              "type": "string"
                            },
                            "debugMode": {
                              "type": "bool"
                            },
                            "dscConfiguration": {
                              "type": "string"
                            },
                            "dscScript": {
                              "type": "string"
                            },
                            "fileShareName": {
                              "type": "string",
                              "defaultValue": "fileshare"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "primarySiteAdministratorAccountPassword": {
                              "type": "securestring"
                            },
                            "primarySiteAdministratorAccountUserName": {
                              "type": "string"
                            },
                            "storageUriPrefix": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineNames": {
                              "type": "string"
                            },
                            "graphDataStoreVirtualMachineOSDiskSize": {
                              "type": "int"
                            },
                            "enableGraphDataStoreVirtualMachineDataDisk": {
                              "type": "bool"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "convertedEpoch": {
                              "type": "int",
                              "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                            }
                          },
                          "variables": {
                            "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                            "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                            "sasProperties": {
                              "signedProtocol": "https",
                              "signedResourceTypes": "sco",
                              "signedPermission": "rl",
                              "signedServices": "b",
                              "signedExpiry": "[variables('convertedDatetime')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2018-10-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "autoUpgradeMinorVersion": true,
                                "publisher": "Microsoft.Powershell",
                                "type": "DSC",
                                "typeHandlerVersion": "2.77",
                                "settings": {
                                  "wmfVersion": "latest",
                                  "configuration": {
                                    "url": "[variables('dscModuleUrl')]",
                                    "script": "[parameters('dscScript')]",
                                    "function": "[parameters('dscConfiguration')]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                                    "GraphDataStoreMachineNames": "[parameters('graphDataStoreVirtualMachineNames')]",
                                    "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                                    "FileShareName": "[parameters('fileShareName')]",
                                    "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                                    "OSDiskSize": "[parameters('graphDataStoreVirtualMachineOSDiskSize')]",
                                    "EnableDataDisk": "[parameters('enableGraphDataStoreVirtualMachineDataDisk')]",
                                    "DebugMode": "[string(parameters('debugMode'))]"
                                  }
                                },
                                "protectedSettings": {
                                  "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                  "managedIdentity": {
                                    "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                                    "tenantId": "[subscription().tenantId]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredential": {
                                      "userName": "[parameters('arcgisServiceAccountUserName')]",
                                      "password": "[parameters('arcgisServiceAccountPassword')]"
                                    },
                                    "SiteAdministratorCredential": {
                                      "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                                      "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "dscsStatus": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                        "dscEsriDataStoreServers",
                        "dscEsriObjectDataStoreServers",
                        "dscEsriServers",
                        "dscEsriSpatioTemporalServers",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dscEsriObjectDataStoreServers",
                        "count": "[length(parameters('objectDataStoreVirtualMachines'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('architecture'), 'multitier'), parameters('enableObjectDataStore'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('objectDataStoreVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "arcgisServiceAccountIsDomainAccount": {
                            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          },
                          "arcgisServiceAccountPassword": {
                            "value": "[parameters('arcgisServiceAccountPassword')]"
                          },
                          "arcgisServiceAccountUserName": {
                            "value": "[parameters('arcgisServiceAccountUserName')]"
                          },
                          "debugMode": {
                            "value": "[parameters('debugMode')]"
                          },
                          "dscConfiguration": {
                            "value": "[parameters('dscObjectDataStoreFunction')]"
                          },
                          "dscScript": {
                            "value": "[format('{0}.ps1', parameters('dscObjectDataStoreFunction'))]"
                          },
                          "enableObjectDataStoreVirtualMachineDataDisk": {
                            "value": "[parameters('enableObjectDataStoreVirtualMachineDataDisk')]"
                          },
                          "fileShareVirtualMachineName": {
                            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.fileShareName.value]"
                          },
                          "isObjectDataStoreClustered": {
                            "value": "[parameters('isObjectDataStoreClustered')]"
                          },
                          "objectDataStoreVirtualMachineNames": {
                            "value": "[parameters('objectDataStoreVirtualMachineNames')]"
                          },
                          "objectDataStoreVirtualMachineOSDiskSize": {
                            "value": "[parameters('objectDataStoreVirtualMachineOSDiskSize')]"
                          },
                          "primarySiteAdministratorAccountPassword": {
                            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                          },
                          "primarySiteAdministratorAccountUserName": {
                            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                          },
                          "serverVirtualMachineNames": {
                            "value": "[parameters('serverVirtualMachineNames')]"
                          },
                          "storageUriPrefix": {
                            "value": "[parameters('storageUriPrefix')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "virtualMachineNames": {
                            "value": "[parameters('objectDataStoreVirtualMachines')[copyIndex()]]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "11051323292383584718"
                            }
                          },
                          "parameters": {
                            "arcgisServiceAccountIsDomainAccount": {
                              "type": "bool"
                            },
                            "arcgisServiceAccountPassword": {
                              "type": "securestring"
                            },
                            "arcgisServiceAccountUserName": {
                              "type": "string"
                            },
                            "debugMode": {
                              "type": "bool"
                            },
                            "dscConfiguration": {
                              "type": "string"
                            },
                            "dscScript": {
                              "type": "string"
                            },
                            "fileShareName": {
                              "type": "string",
                              "defaultValue": "fileshare"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "primarySiteAdministratorAccountPassword": {
                              "type": "securestring"
                            },
                            "primarySiteAdministratorAccountUserName": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "storageUriPrefix": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineNames": {
                              "type": "string"
                            },
                            "isObjectDataStoreClustered": {
                              "type": "bool"
                            },
                            "objectDataStoreVirtualMachineNames": {
                              "type": "string"
                            },
                            "fileShareVirtualMachineName": {
                              "type": "string"
                            },
                            "serverVirtualMachineNames": {
                              "type": "string"
                            },
                            "objectDataStoreVirtualMachineOSDiskSize": {
                              "type": "int"
                            },
                            "enableObjectDataStoreVirtualMachineDataDisk": {
                              "type": "bool"
                            },
                            "convertedEpoch": {
                              "type": "int",
                              "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                            }
                          },
                          "variables": {
                            "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                            "sasProperties": {
                              "signedProtocol": "https",
                              "signedResourceTypes": "sco",
                              "signedPermission": "rl",
                              "signedServices": "b",
                              "signedExpiry": "[variables('convertedDatetime')]"
                            },
                            "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2018-10-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "autoUpgradeMinorVersion": true,
                                "publisher": "Microsoft.Powershell",
                                "type": "DSC",
                                "typeHandlerVersion": "2.77",
                                "settings": {
                                  "wmfVersion": "latest",
                                  "configuration": {
                                    "url": "[variables('dscModuleUrl')]",
                                    "script": "[parameters('dscScript')]",
                                    "function": "[parameters('dscConfiguration')]"
                                  },
                                  "configurationArguments": {
                                    "IsObjectDataStoreClustered": "[parameters('isObjectDataStoreClustered')]",
                                    "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                                    "ObjectDataStoreMachineNames": "[parameters('objectDataStoreVirtualMachineNames')]",
                                    "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                                    "FileShareName": "[parameters('fileShareName')]",
                                    "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                                    "OSDiskSize": "[parameters('objectDataStoreVirtualMachineOSDiskSize')]",
                                    "EnableDataDisk": "[string(parameters('enableObjectDataStoreVirtualMachineDataDisk'))]",
                                    "DebugMode": "[string(parameters('debugMode'))]"
                                  }
                                },
                                "protectedSettings": {
                                  "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                  "managedIdentity": {
                                    "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                                    "tenantId": "[subscription().tenantId]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredential": {
                                      "userName": "[parameters('arcgisServiceAccountUserName')]",
                                      "password": "[parameters('arcgisServiceAccountPassword')]"
                                    },
                                    "SiteAdministratorCredential": {
                                      "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                                      "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                        "dscEsriDataStoreServers",
                        "dscEsriServers",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dscEsriPortalServers",
                        "count": "[length(parameters('portalVirtualMachines'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[equals(parameters('architecture'), 'multitier')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-{0}-dsc-{1}{2}', parameters('portalVirtualMachines')[copyIndex()], parameters('deploymentNameSuffix'), copyIndex())]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "arcgisServiceAccountIsDomainAccount": {
                            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          },
                          "arcgisServiceAccountPassword": {
                            "value": "[parameters('arcgisServiceAccountPassword')]"
                          },
                          "arcgisServiceAccountUserName": {
                            "value": "[parameters('arcgisServiceAccountUserName')]"
                          },
                          "cloudStorageAccountCredentialsUserName": {
                            "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                          },
                          "debugMode": {
                            "value": "[parameters('debugMode')]"
                          },
                          "dscConfiguration": {
                            "value": "[parameters('dscPortalFunction')]"
                          },
                          "dscScript": {
                            "value": "[format('{0}.ps1', parameters('dscPortalFunction'))]"
                          },
                          "enablePortalVirtualMachineDataDisk": {
                            "value": "[parameters('enableVirtualMachineDataDisk')]"
                          },
                          "externalDnsHostName": {
                            "value": "[parameters('externalDnsHostname')]"
                          },
                          "fileShareVirtualMachineName": {
                            "value": "[parameters('fileShareVirtualMachineName')]"
                          },
                          "isUpdatingCertificates": {
                            "value": "[parameters('isUpdatingCertificates')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "portalContext": {
                            "value": "[parameters('portalContext')]"
                          },
                          "portalLicenseFileName": {
                            "value": "[parameters('portalLicenseFileName')]"
                          },
                          "portalLicenseUserTypeId": {
                            "value": "[parameters('portalLicenseUserTypeId')]"
                          },
                          "portalVirtualMachineNames": {
                            "value": "[parameters('portalVirtualMachineNames')]"
                          },
                          "portalVirtualMachineOSDiskSize": {
                            "value": "[parameters('portalVirtualMachineOSDiskSize')]"
                          },
                          "primarySiteAdministratorAccountPassword": {
                            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                          },
                          "primarySiteAdministratorAccountUserName": {
                            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                          },
                          "publicKeySSLCertificateFileName": {
                            "value": "[format('wildcard{0}-PublicKey.cer', parameters('externalDnsHostname'))]"
                          },
                          "secondaryDnsHostName": {
                            "value": "[parameters('secondaryDnsHostName')]"
                          },
                          "serverContext": {
                            "value": "[parameters('serverContext')]"
                          },
                          "serverVirtualMachineNames": {
                            "value": "[parameters('serverVirtualMachineNames')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "storageUriPrefix": {
                            "value": "[parameters('storageUriPrefix')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "useAzureFiles": {
                            "value": "[parameters('useAzureFiles')]"
                          },
                          "useCloudStorage": {
                            "value": "[parameters('useCloudStorage')]"
                          },
                          "virtualMachineNames": {
                            "value": "[parameters('portalVirtualMachines')[copyIndex()]]"
                          },
                          "selfSignedSSLCertificatePassword": {
                            "value": "[parameters('selfSignedSSLCertificatePassword')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "1666894846892138554"
                            }
                          },
                          "parameters": {
                            "arcgisServiceAccountIsDomainAccount": {
                              "type": "bool"
                            },
                            "arcgisServiceAccountPassword": {
                              "type": "securestring"
                            },
                            "arcgisServiceAccountUserName": {
                              "type": "string"
                            },
                            "cloudStorageAccountCredentialsUserName": {
                              "type": "string"
                            },
                            "convertedEpoch": {
                              "type": "int",
                              "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                            },
                            "debugMode": {
                              "type": "bool"
                            },
                            "dscConfiguration": {
                              "type": "string"
                            },
                            "dscScript": {
                              "type": "string"
                            },
                            "enablePortalVirtualMachineDataDisk": {
                              "type": "bool"
                            },
                            "externalDnsHostName": {
                              "type": "string"
                            },
                            "fileShareName": {
                              "type": "string",
                              "defaultValue": "fileshare"
                            },
                            "fileShareVirtualMachineName": {
                              "type": "string"
                            },
                            "isUpdatingCertificates": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "portalContext": {
                              "type": "string"
                            },
                            "portalLicenseFileName": {
                              "type": "string"
                            },
                            "portalLicenseUserTypeId": {
                              "type": "string"
                            },
                            "primarySiteAdministratorAccountPassword": {
                              "type": "securestring"
                            },
                            "primarySiteAdministratorAccountUserName": {
                              "type": "string"
                            },
                            "publicKeySSLCertificateFileName": {
                              "type": "string"
                            },
                            "secondaryDnsHostName": {
                              "type": "string"
                            },
                            "serverVirtualMachineNames": {
                              "type": "string"
                            },
                            "portalVirtualMachineNames": {
                              "type": "string"
                            },
                            "portalVirtualMachineOSDiskSize": {
                              "type": "int"
                            },
                            "serverContext": {
                              "type": "string"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "storageUriPrefix": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "useAzureFiles": {
                              "type": "bool"
                            },
                            "useCloudStorage": {
                              "type": "bool"
                            },
                            "useSelfSignedInternalSSLCertificate": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "virtualMachineNames": {
                              "type": "string"
                            },
                            "selfSignedSSLCertificatePassword": {
                              "type": "securestring"
                            }
                          },
                          "variables": {
                            "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                            "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                            "sasProperties": {
                              "signedProtocol": "https",
                              "signedResourceTypes": "sco",
                              "signedPermission": "rl",
                              "signedServices": "b",
                              "signedExpiry": "[variables('convertedDatetime')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2018-10-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "autoUpgradeMinorVersion": true,
                                "publisher": "Microsoft.Powershell",
                                "type": "DSC",
                                "typeHandlerVersion": "2.77",
                                "settings": {
                                  "wmfVersion": "latest",
                                  "configuration": {
                                    "url": "[variables('dscModuleUrl')]",
                                    "script": "[parameters('dscScript')]",
                                    "function": "[parameters('dscConfiguration')]"
                                  },
                                  "configurationArguments": {
                                    "DebugMode": "[string(parameters('debugMode'))]",
                                    "EnableDataDisk": "[string(parameters('enablePortalVirtualMachineDataDisk'))]",
                                    "ExternalDNSHostName": "[parameters('externalDnsHostName')]",
                                    "FileShareMachineName": "[parameters('fileShareVirtualMachineName')]",
                                    "FileShareName": "[parameters('fileShareName')]",
                                    "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]",
                                    "OSDiskSize": "[parameters('portalVirtualMachineOSDiskSize')]",
                                    "PortalContext": "[parameters('portalContext')]",
                                    "PortalLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('portalLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                    "PortalMachineNames": "[parameters('portalVirtualMachineNames')]",
                                    "PrivateDNSHostName": "[parameters('secondaryDnsHostName')]",
                                    "ServerContext": "[parameters('serverContext')]",
                                    "ServerMachineNames": "[parameters('serverVirtualMachineNames')]",
                                    "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                                    "UseAzureFiles": "[parameters('useAzureFiles')]",
                                    "UseCloudStorage": "[parameters('useCloudStorage')]",
                                    "PortalLicenseUserTypeId": "[parameters('portalLicenseUserTypeId')]",
                                    "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]"
                                  }
                                },
                                "protectedSettings": {
                                  "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                  "managedIdentity": {
                                    "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineNames')), '2023-03-01', 'full').identity.principalId]",
                                    "tenantId": "[subscription().tenantId]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredential": {
                                      "userName": "[parameters('arcgisServiceAccountUserName')]",
                                      "password": "[parameters('arcgisServiceAccountPassword')]"
                                    },
                                    "PortalInternalCertificatePassword": {
                                      "userName": "Placeholder",
                                      "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), '')]"
                                    },
                                    "SiteAdministratorCredential": {
                                      "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                                      "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                                    },
                                    "StorageAccountCredential": {
                                      "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                                      "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "dscsStatus": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineNames'), 'DSCConfiguration'), '2018-10-01').provisioningState]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]",
                        "dscEsriDataStoreServers",
                        "dscEsriGraphDataStoreServers",
                        "dscEsriObjectDataStoreServers",
                        "dscEsriServers",
                        "dscEsriSpatioTemporalServers",
                        "dscEsriTileCacheServers",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-fileshare-dsc-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "multiTierDatastoreServerVirtualMachines",
                "multiTierFileServerVirtualMachines",
                "multiTierGraphVirtualMachines",
                "multiTierObjectDataStoreVirtualMachines",
                "multiTierPortalVirtualMachines",
                "multiTierServerVirtualMachines",
                "multiTierSpatiotemporalBigDataStoreVirtualMachines",
                "multiTierTileCacheVirtualMachines",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[equals(parameters('architecture'), 'singletier')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-esri-singletier-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('adminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('adminUsername')]"
                  },
                  "applicationGatewayName": {
                    "value": "[variables('applicationGatewayName')]"
                  },
                  "applicationGatewayPrivateIpAddress": {
                    "value": "[variables('applicationGatewayPrivateIpAddress')]"
                  },
                  "arcgisServiceAccountIsDomainAccount": {
                    "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                  },
                  "arcgisServiceAccountPassword": {
                    "value": "[parameters('arcgisServiceAccountPassword')]"
                  },
                  "arcgisServiceAccountUserName": {
                    "value": "[parameters('arcgisServiceAccountUserName')]"
                  },
                  "cloudStorageAccountCredentialsUserName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.cloudStorageAccountCredentialsUserName.value]"
                  },
                  "dataStoreTypesForBaseDeploymentServers": "[if(equals(parameters('architecture'), 'singletier'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-single-tier-datastore-types-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.dataStoreTypesForBaseDeploymentServers.value), createObject('value', 'none'))]",
                  "debugMode": {
                    "value": "[parameters('debugMode')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "dscConfiguration": {
                    "value": "[variables('dscSingleTierConfiguration')]"
                  },
                  "dscScript": {
                    "value": "[format('{0}.ps1', variables('dscSingleTierConfiguration'))]"
                  },
                  "enableServerLogHarvesterPlugin": {
                    "value": "[parameters('enableServerLogHarvesterPlugin')]"
                  },
                  "enableVirtualMachineDataDisk": {
                    "value": "[parameters('enableVirtualMachineDataDisk')]"
                  },
                  "externalDnsHostname": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "hostname": {
                    "value": "[parameters('externalDnsHostname')]"
                  },
                  "isTileCacheDataStoreClustered": {
                    "value": "[variables('isTileCacheDataStoreClustered')]"
                  },
                  "isUpdatingCertificates": {
                    "value": "[parameters('isUpdatingCertificates')]"
                  },
                  "joinWindowsDomain": {
                    "value": "[parameters('joinWindowsDomain')]"
                  },
                  "keyVaultUri": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "portalBackendSslCert": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.portalBackendSSLCert.value]"
                  },
                  "portalContext": {
                    "value": "[variables('portalContext')]"
                  },
                  "portalLicenseFileName": {
                    "value": "[variables('portalLicenseFileName')]"
                  },
                  "portalLicenseUserTypeId": {
                    "value": "[parameters('portalLicenseUserTypeId')]"
                  },
                  "primarySiteAdministratorAccountPassword": {
                    "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                  },
                  "primarySiteAdministratorAccountUserName": {
                    "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                  },
                  "publicIpId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.pipId.value]"
                  },
                  "publicKeySSLCertificateFileName": {
                    "value": "[format('wildcard{0}-PublicKey.cer', parameters('externalDnsHostname'))]"
                  },
                  "resourceGroupName": {
                    "value": "[variables('resourceGroupName')]"
                  },
                  "resourceSuffix": {
                    "value": "[variables('resourceSuffix')]"
                  },
                  "selfSignedSSLCertificatePassword": {
                    "value": "[parameters('selfSignedCertificatePassword')]"
                  },
                  "serverBackendSSLCert": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.serverBackendSSLCert.value]"
                  },
                  "serverContext": {
                    "value": "[variables('serverContext')]"
                  },
                  "serverLicenseFileName": {
                    "value": "[variables('serverLicenseFileName')]"
                  },
                  "storageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value]"
                  },
                  "storageUriPrefix": {
                    "value": "[format('{0}{1}/', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageEndpoint.value, variables('container'))]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "useAzureFiles": {
                    "value": "[parameters('useAzureFiles')]"
                  },
                  "useCloudStorage": {
                    "value": "[parameters('useCloudStorage')]"
                  },
                  "userAssignedIdenityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[variables('virtualMachineName')]"
                  },
                  "virtualMachineOSDiskSize": {
                    "value": "[parameters('virtualMachineOSDiskSize')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  },
                  "windowsDomainName": {
                    "value": "[parameters('windowsDomainName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "14779582043224308008"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring"
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "arcgisServiceAccountIsDomainAccount": {
                      "type": "bool"
                    },
                    "arcgisServiceAccountPassword": {
                      "type": "securestring"
                    },
                    "arcgisServiceAccountUserName": {
                      "type": "string"
                    },
                    "applicationGatewayPrivateIpAddress": {
                      "type": "string"
                    },
                    "cloudStorageAccountCredentialsUserName": {
                      "type": "string"
                    },
                    "dataStoreTypesForBaseDeploymentServers": {
                      "type": "string"
                    },
                    "debugMode": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "dscConfiguration": {
                      "type": "string"
                    },
                    "dscScript": {
                      "type": "string"
                    },
                    "enableServerLogHarvesterPlugin": {
                      "type": "bool"
                    },
                    "enableVirtualMachineDataDisk": {
                      "type": "bool"
                    },
                    "hostname": {
                      "type": "string"
                    },
                    "isTileCacheDataStoreClustered": {
                      "type": "bool"
                    },
                    "isUpdatingCertificates": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "portalContext": {
                      "type": "string"
                    },
                    "portalLicenseFileName": {
                      "type": "string"
                    },
                    "portalLicenseUserTypeId": {
                      "type": "string"
                    },
                    "primarySiteAdministratorAccountPassword": {
                      "type": "securestring"
                    },
                    "primarySiteAdministratorAccountUserName": {
                      "type": "string"
                    },
                    "publicKeySSLCertificateFileName": {
                      "type": "string"
                    },
                    "serverContext": {
                      "type": "string"
                    },
                    "serverLicenseFileName": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "storageUriPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "useAzureFiles": {
                      "type": "bool"
                    },
                    "useCloudStorage": {
                      "type": "bool"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "virtualMachineOSDiskSize": {
                      "type": "int"
                    },
                    "selfSignedSSLCertificatePassword": {
                      "type": "securestring"
                    },
                    "applicationGatewayName": {
                      "type": "string"
                    },
                    "externalDnsHostname": {
                      "type": "string"
                    },
                    "joinWindowsDomain": {
                      "type": "bool"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "portalBackendSslCert": {
                      "type": "string"
                    },
                    "publicIpId": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "resourceSuffix": {
                      "type": "string"
                    },
                    "serverBackendSSLCert": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]"
                    },
                    "userAssignedIdenityResourceId": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "windowsDomainName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "applicationGatewayName": {
                            "value": "[parameters('applicationGatewayName')]"
                          },
                          "applicationGatewayPrivateIpAddress": {
                            "value": "[parameters('applicationGatewayPrivateIpAddress')]"
                          },
                          "externalDnsHostName": {
                            "value": "[parameters('externalDnsHostname')]"
                          },
                          "joinWindowsDomain": {
                            "value": "[parameters('joinWindowsDomain')]"
                          },
                          "keyVaultUri": {
                            "value": "[parameters('keyVaultUri')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "portalBackendSslCert": {
                            "value": "[parameters('portalBackendSslCert')]"
                          },
                          "portalVirtualMachineNames": {
                            "value": "[parameters('virtualMachineName')]"
                          },
                          "publicIpId": {
                            "value": "[parameters('publicIpId')]"
                          },
                          "resourceGroup": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "resourceSuffix": {
                            "value": "[parameters('resourceSuffix')]"
                          },
                          "serverBackendSSLCert": {
                            "value": "[parameters('serverBackendSSLCert')]"
                          },
                          "serverVirtualMachineNames": {
                            "value": "[parameters('virtualMachineName')]"
                          },
                          "userAssignedIdenityResourceId": {
                            "value": "[parameters('userAssignedIdenityResourceId')]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "windowsDomainName": {
                            "value": "[parameters('windowsDomainName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "13366513209151885602"
                            }
                          },
                          "parameters": {
                            "applicationGatewayName": {
                              "type": "string"
                            },
                            "applicationGatewayPrivateIpAddress": {
                              "type": "string"
                            },
                            "externalDnsHostName": {
                              "type": "string"
                            },
                            "joinWindowsDomain": {
                              "type": "bool"
                            },
                            "keyVaultUri": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "portalBackendSslCert": {
                              "type": "string"
                            },
                            "portalVirtualMachineNames": {
                              "type": "string"
                            },
                            "publicIpId": {
                              "type": "string"
                            },
                            "resourceGroup": {
                              "type": "string"
                            },
                            "resourceSuffix": {
                              "type": "string"
                            },
                            "serverBackendSSLCert": {
                              "type": "string"
                            },
                            "serverVirtualMachineNames": {
                              "type": "string"
                            },
                            "userAssignedIdenityResourceId": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "windowsDomainName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "serverBackEndVirtualMachines": "[split(parameters('serverVirtualMachineNames'), ',')]",
                            "portalBackEndVirtualMachines": "[split(parameters('portalVirtualMachineNames'), ',')]",
                            "nicDnsSuffix": "[format('{0}.{1}', split(parameters('externalDnsHostName'), '.')[1], split(parameters('externalDnsHostName'), '.')[2])]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/applicationGateways",
                              "apiVersion": "2023-06-01",
                              "name": "[parameters('applicationGatewayName')]",
                              "location": "[parameters('location')]",
                              "tags": {},
                              "identity": {
                                "type": "UserAssigned",
                                "userAssignedIdentities": {
                                  "[format('{0}', parameters('userAssignedIdenityResourceId'))]": {}
                                }
                              },
                              "properties": {
                                "sku": {
                                  "name": "Standard_v2",
                                  "tier": "Standard_v2",
                                  "capacity": 2
                                },
                                "gatewayIPConfigurations": [
                                  {
                                    "name": "appGatewayIpConfig",
                                    "properties": {
                                      "subnet": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                                      }
                                    }
                                  }
                                ],
                                "sslCertificates": [
                                  {
                                    "name": "frontendCert",
                                    "properties": {
                                      "keyVaultSecretId": "[format('{0}secrets/pfx{1}', parameters('keyVaultUri'), parameters('location'))]"
                                    }
                                  }
                                ],
                                "trustedRootCertificates": [
                                  {
                                    "name": "serverBackendSSLCert",
                                    "properties": {
                                      "data": "[parameters('serverBackendSSLCert')]"
                                    }
                                  },
                                  {
                                    "name": "portalBackendSSLCert",
                                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]",
                                    "properties": {
                                      "data": "[parameters('portalBackendSslCert')]"
                                    }
                                  }
                                ],
                                "trustedClientCertificates": [],
                                "sslProfiles": [],
                                "frontendIPConfigurations": [
                                  {
                                    "name": "pipIpConfig",
                                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                                    "properties": {
                                      "privateIPAllocationMethod": "Dynamic",
                                      "publicIPAddress": {
                                        "id": "[parameters('publicIpId')]"
                                      }
                                    }
                                  },
                                  {
                                    "name": "[format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix'))]",
                                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]",
                                    "properties": {
                                      "privateIPAddress": "[parameters('applicationGatewayPrivateIpAddress')]",
                                      "privateIPAllocationMethod": "Static",
                                      "subnet": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'appGatewaySubnet')]"
                                      }
                                    }
                                  }
                                ],
                                "frontendPorts": [
                                  {
                                    "name": "[format('EnterprisePort443{0}', parameters('resourceSuffix'))]",
                                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]",
                                    "properties": {
                                      "port": 443
                                    }
                                  },
                                  {
                                    "name": "[format('EnterprisePort80{0}', parameters('resourceSuffix'))]",
                                    "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]",
                                    "properties": {
                                      "port": 80
                                    }
                                  }
                                ],
                                "backendAddressPools": [
                                  {
                                    "name": "[format('ServerBackendPool{0}', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "copy": [
                                        {
                                          "name": "backendAddresses",
                                          "count": "[length(variables('serverBackEndVirtualMachines'))]",
                                          "input": {
                                            "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('serverBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "[format('{0}PortalBackendPool', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "copy": [
                                        {
                                          "name": "backendAddresses",
                                          "count": "[length(variables('portalBackEndVirtualMachines'))]",
                                          "input": {
                                            "fqdn": "[if(parameters('joinWindowsDomain'), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], parameters('windowsDomainName')), format('{0}.{1}', variables('portalBackEndVirtualMachines')[copyIndex('backendAddresses')], variables('nicDnsSuffix')))]"
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "loadDistributionPolicies": [],
                                "backendHttpSettingsCollection": [
                                  {
                                    "name": "[format('PortalHttpsSetting{0}', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "port": 7443,
                                      "protocol": "Https",
                                      "cookieBasedAffinity": "Disabled",
                                      "connectionDraining": {
                                        "enabled": true,
                                        "drainTimeoutInSec": 60
                                      },
                                      "pickHostNameFromBackendAddress": true,
                                      "path": "/arcgis/",
                                      "requestTimeout": 180,
                                      "probe": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}PortalProbeName', parameters('resourceSuffix')))]"
                                      },
                                      "trustedRootCertificates": [
                                        {
                                          "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'portalBackendSSLCert')]"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "[format('ServerHttpsSetting{0}', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "port": 6443,
                                      "protocol": "Https",
                                      "cookieBasedAffinity": "Disabled",
                                      "connectionDraining": {
                                        "enabled": true,
                                        "drainTimeoutInSec": 60
                                      },
                                      "pickHostNameFromBackendAddress": true,
                                      "path": "/arcgis/",
                                      "requestTimeout": 180,
                                      "probe": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/probes', parameters('applicationGatewayName'), format('{0}ServerProbeName', parameters('resourceSuffix')))]"
                                      },
                                      "trustedRootCertificates": [
                                        {
                                          "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/trustedRootCertificates', parameters('applicationGatewayName'), 'serverBackendSSLCert')]"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "backendSettingsCollection": [],
                                "httpListeners": [
                                  {
                                    "name": "[format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "frontendIPConfiguration": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                                      },
                                      "frontendPort": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort80{0}', parameters('resourceSuffix')))]"
                                      },
                                      "protocol": "Http",
                                      "hostNames": [
                                        "[parameters('externalDnsHostName')]"
                                      ],
                                      "requireServerNameIndication": false
                                    }
                                  },
                                  {
                                    "name": "[format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "frontendIPConfiguration": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('applicationGatewayName'), format('EnterpriseAppGatewayFrontendIP{0}', parameters('resourceSuffix')))]"
                                      },
                                      "frontendPort": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/frontendPorts', parameters('applicationGatewayName'), format('EnterprisePort443{0}', parameters('resourceSuffix')))]"
                                      },
                                      "protocol": "Https",
                                      "sslCertificate": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/sslCertificates', parameters('applicationGatewayName'), 'frontendCert')]"
                                      },
                                      "hostNames": [
                                        "[parameters('externalDnsHostName')]"
                                      ],
                                      "requireServerNameIndication": false
                                    }
                                  }
                                ],
                                "listeners": [],
                                "urlPathMaps": [
                                  {
                                    "name": "[format('{0}EnterprisePathMap', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "defaultBackendAddressPool": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                                      },
                                      "defaultBackendHttpSettings": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                                      },
                                      "pathRules": [
                                        {
                                          "name": "serverPathRule",
                                          "properties": {
                                            "paths": [
                                              "/server/*",
                                              "/server"
                                            ],
                                            "backendAddressPool": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('ServerBackendPool{0}', parameters('resourceSuffix')))]"
                                            },
                                            "backendHttpSettings": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('ServerHttpsSetting{0}', parameters('resourceSuffix')))]"
                                            },
                                            "rewriteRuleSet": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}ServerRewriteRuleSet', parameters('resourceSuffix')))]"
                                            }
                                          }
                                        },
                                        {
                                          "name": "portalPathRule",
                                          "properties": {
                                            "paths": [
                                              "/portal/*",
                                              "/portal"
                                            ],
                                            "backendAddressPool": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendAddressPools', parameters('applicationGatewayName'), format('{0}PortalBackendPool', parameters('resourceSuffix')))]"
                                            },
                                            "backendHttpSettings": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('applicationGatewayName'), format('PortalHttpsSetting{0}', parameters('resourceSuffix')))]"
                                            },
                                            "rewriteRuleSet": {
                                              "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('applicationGatewayName'), format('{0}PortalRewriteRuleSet', parameters('resourceSuffix')))]"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "requestRoutingRules": [
                                  {
                                    "name": "[format('{0}EnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "ruleType": "PathBasedRouting",
                                      "priority": 10,
                                      "httpListener": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                                      },
                                      "urlPathMap": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/urlPathMaps', parameters('applicationGatewayName'), format('{0}EnterprisePathMap', parameters('resourceSuffix')))]"
                                      }
                                    }
                                  },
                                  {
                                    "name": "[format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "ruleType": "Basic",
                                      "priority": 20,
                                      "httpListener": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                                      },
                                      "redirectConfiguration": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/redirectConfigurations', parameters('applicationGatewayName'), format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix')))]"
                                      }
                                    }
                                  }
                                ],
                                "routingRules": [],
                                "probes": [
                                  {
                                    "name": "[format('{0}ServerProbeName', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "protocol": "Https",
                                      "path": "/arcgis/rest/info/healthcheck",
                                      "interval": 30,
                                      "timeout": 30,
                                      "unhealthyThreshold": 3,
                                      "pickHostNameFromBackendHttpSettings": true,
                                      "minServers": 0,
                                      "match": {
                                        "statusCodes": [
                                          "200"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "name": "[format('{0}PortalProbeName', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "protocol": "Https",
                                      "path": "/arcgis/portaladmin/healthCheck",
                                      "interval": 30,
                                      "timeout": 30,
                                      "unhealthyThreshold": 3,
                                      "pickHostNameFromBackendHttpSettings": true,
                                      "minServers": 0,
                                      "match": {
                                        "statusCodes": [
                                          "200"
                                        ]
                                      }
                                    }
                                  }
                                ],
                                "rewriteRuleSets": [
                                  {
                                    "name": "[format('{0}PortalRewriteRuleSet', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "rewriteRules": [
                                        {
                                          "ruleSequence": 50,
                                          "conditions": [],
                                          "name": "XForwardedHostRewrite",
                                          "actionSet": {
                                            "requestHeaderConfigurations": [
                                              {
                                                "headerName": "X-Forwarded-Host",
                                                "headerValue": "{http_req_host}"
                                              }
                                            ],
                                            "responseHeaderConfigurations": []
                                          }
                                        },
                                        {
                                          "ruleSequence": 100,
                                          "conditions": [
                                            {
                                              "variable": "http_resp_Location",
                                              "pattern": "(https?):\\/\\/[^\\/]+:7443\\/(?:arcgis|portal)(.*)$",
                                              "ignoreCase": true,
                                              "negate": false
                                            }
                                          ],
                                          "name": "PortalRewrite",
                                          "actionSet": {
                                            "requestHeaderConfigurations": [],
                                            "responseHeaderConfigurations": [
                                              {
                                                "headerName": "RewriteLocationValue",
                                                "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                              },
                                              {
                                                "headerName": "Location",
                                                "headerValue": "{http_resp_Location_1}://{http_req_host}/portal{http_resp_Location_2}"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "name": "[format('{0}ServerRewriteRuleSet', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "rewriteRules": [
                                        {
                                          "ruleSequence": 50,
                                          "conditions": [],
                                          "name": "XForwardedHostRewrite",
                                          "actionSet": {
                                            "requestHeaderConfigurations": [
                                              {
                                                "headerName": "X-Forwarded-Host",
                                                "headerValue": "{http_req_host}"
                                              }
                                            ],
                                            "responseHeaderConfigurations": []
                                          }
                                        },
                                        {
                                          "ruleSequence": 100,
                                          "conditions": [
                                            {
                                              "variable": "http_resp_Location",
                                              "pattern": "(https?):\\/\\/[^\\/]+:6443\\/(?:arcgis|server)(.*)$",
                                              "ignoreCase": true,
                                              "negate": false
                                            }
                                          ],
                                          "name": "ServerRewrite",
                                          "actionSet": {
                                            "requestHeaderConfigurations": [],
                                            "responseHeaderConfigurations": [
                                              {
                                                "headerName": "RewriteLocationValue",
                                                "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                              },
                                              {
                                                "headerName": "Location",
                                                "headerValue": "{http_resp_Location_1}://{http_req_host}/server{http_resp_Location_2}"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "redirectConfigurations": [
                                  {
                                    "name": "[format('{0}EnterpriseHttpToHttps', parameters('resourceSuffix'))]",
                                    "properties": {
                                      "redirectType": "Permanent",
                                      "targetListener": {
                                        "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/httpListeners', parameters('applicationGatewayName'), format('{0}HttpsEnterpriseDeploymentListner', parameters('resourceSuffix')))]"
                                      },
                                      "includePath": true,
                                      "includeQueryString": true,
                                      "requestRoutingRules": [
                                        {
                                          "id": "[resourceId(parameters('resourceGroup'), 'Microsoft.Network/applicationGateways/requestRoutingRules', parameters('applicationGatewayName'), format('{0}HttpToHttpsEnterpriseRequestRoutingRule', parameters('resourceSuffix')))]"
                                        }
                                      ]
                                    }
                                  }
                                ],
                                "privateLinkConfigurations": []
                              }
                            }
                          ],
                          "outputs": {
                            "applicationGatewayPrivateIpAddress": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '2023-06-01').frontendIPConfigurations[1].properties.privateIPAddress]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('desired-state-configuration-{0}', parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "adminPassword": {
                            "value": "[parameters('adminPassword')]"
                          },
                          "adminUsername": {
                            "value": "[parameters('adminUsername')]"
                          },
                          "arcgisServiceAccountIsDomainAccount": {
                            "value": "[parameters('arcgisServiceAccountIsDomainAccount')]"
                          },
                          "arcgisServiceAccountPassword": {
                            "value": "[parameters('arcgisServiceAccountPassword')]"
                          },
                          "arcgisServiceAccountUserName": {
                            "value": "[parameters('arcgisServiceAccountUserName')]"
                          },
                          "cloudStorageAccountCredentialsUserName": {
                            "value": "[parameters('cloudStorageAccountCredentialsUserName')]"
                          },
                          "dataStoreTypesForBaseDeploymentServers": {
                            "value": "[parameters('dataStoreTypesForBaseDeploymentServers')]"
                          },
                          "debugMode": {
                            "value": "[parameters('debugMode')]"
                          },
                          "dscConfiguration": {
                            "value": "[parameters('dscConfiguration')]"
                          },
                          "dscScript": {
                            "value": "[parameters('dscScript')]"
                          },
                          "enableServerLogHarvesterPlugin": {
                            "value": "[parameters('enableServerLogHarvesterPlugin')]"
                          },
                          "enableVirtualMachineDataDisk": {
                            "value": "[parameters('enableVirtualMachineDataDisk')]"
                          },
                          "hostname": {
                            "value": "[parameters('hostname')]"
                          },
                          "isTileCacheDataStoreClustered": {
                            "value": "[parameters('isTileCacheDataStoreClustered')]"
                          },
                          "isUpdatingCertificates": {
                            "value": "[parameters('isUpdatingCertificates')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "portalContext": {
                            "value": "[parameters('portalContext')]"
                          },
                          "portalLicenseFileName": {
                            "value": "[parameters('portalLicenseFileName')]"
                          },
                          "portalLicenseUserTypeId": {
                            "value": "[parameters('portalLicenseUserTypeId')]"
                          },
                          "primarySiteAdministratorAccountPassword": {
                            "value": "[parameters('primarySiteAdministratorAccountPassword')]"
                          },
                          "primarySiteAdministratorAccountUserName": {
                            "value": "[parameters('primarySiteAdministratorAccountUserName')]"
                          },
                          "publicKeySSLCertificateFileName": {
                            "value": "[parameters('publicKeySSLCertificateFileName')]"
                          },
                          "serverContext": {
                            "value": "[parameters('serverContext')]"
                          },
                          "serverLicenseFileName": {
                            "value": "[parameters('serverLicenseFileName')]"
                          },
                          "storageUriPrefix": {
                            "value": "[parameters('storageUriPrefix')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "useAzureFiles": {
                            "value": "[parameters('useAzureFiles')]"
                          },
                          "useCloudStorage": {
                            "value": "[parameters('useCloudStorage')]"
                          },
                          "virtualMachineNames": {
                            "value": "[parameters('virtualMachineName')]"
                          },
                          "virtualMachineOSDiskSize": {
                            "value": "[parameters('virtualMachineOSDiskSize')]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "selfSignedSSLCertificatePassword": {
                            "value": "[parameters('selfSignedSSLCertificatePassword')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "2650438546048809750"
                            }
                          },
                          "parameters": {
                            "adminPassword": {
                              "type": "securestring"
                            },
                            "adminUsername": {
                              "type": "string"
                            },
                            "arcgisServiceAccountIsDomainAccount": {
                              "type": "bool"
                            },
                            "arcgisServiceAccountPassword": {
                              "type": "securestring"
                            },
                            "arcgisServiceAccountUserName": {
                              "type": "string"
                            },
                            "cloudStorageAccountCredentialsUserName": {
                              "type": "string"
                            },
                            "convertedEpoch": {
                              "type": "int",
                              "defaultValue": "[dateTimeToEpoch(dateTimeAdd(utcNow(), 'P1D'))]"
                            },
                            "dataStoreTypesForBaseDeploymentServers": {
                              "type": "string"
                            },
                            "debugMode": {
                              "type": "bool"
                            },
                            "dscConfiguration": {
                              "type": "string"
                            },
                            "dscScript": {
                              "type": "string"
                            },
                            "enableServerLogHarvesterPlugin": {
                              "type": "bool"
                            },
                            "enableVirtualMachineDataDisk": {
                              "type": "bool"
                            },
                            "fileShareName": {
                              "type": "string",
                              "defaultValue": "fileshare"
                            },
                            "hostname": {
                              "type": "string"
                            },
                            "isTileCacheDataStoreClustered": {
                              "type": "bool"
                            },
                            "isUpdatingCertificates": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "portalContext": {
                              "type": "string"
                            },
                            "portalLicenseFileName": {
                              "type": "string"
                            },
                            "portalLicenseUserTypeId": {
                              "type": "string"
                            },
                            "primarySiteAdministratorAccountPassword": {
                              "type": "securestring"
                            },
                            "primarySiteAdministratorAccountUserName": {
                              "type": "string"
                            },
                            "publicKeySSLCertificateFileName": {
                              "type": "string"
                            },
                            "serverContext": {
                              "type": "string"
                            },
                            "serverLicenseFileName": {
                              "type": "string"
                            },
                            "storageUriPrefix": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "useAzureFiles": {
                              "type": "bool"
                            },
                            "useCloudStorage": {
                              "type": "bool"
                            },
                            "useSelfSignedInternalSSLCertificate": {
                              "type": "bool",
                              "defaultValue": true
                            },
                            "virtualMachineNames": {
                              "type": "string"
                            },
                            "virtualMachineOSDiskSize": {
                              "type": "int"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "selfSignedSSLCertificatePassword": {
                              "type": "securestring"
                            }
                          },
                          "variables": {
                            "dscModuleUrl": "[format('{0}DSC.zip', parameters('storageUriPrefix'))]",
                            "convertedDatetime": "[dateTimeFromEpoch(parameters('convertedEpoch'))]",
                            "sasProperties": {
                              "signedProtocol": "https",
                              "signedResourceTypes": "sco",
                              "signedPermission": "rl",
                              "signedServices": "b",
                              "signedExpiry": "[variables('convertedDatetime')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2018-10-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineNames'), 'DSCConfiguration')]",
                              "location": "[parameters('location')]",
                              "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                              "properties": {
                                "autoUpgradeMinorVersion": true,
                                "publisher": "Microsoft.Powershell",
                                "type": "DSC",
                                "typeHandlerVersion": "2.77",
                                "settings": {
                                  "wmfVersion": "latest",
                                  "configuration": {
                                    "url": "[variables('dscModuleUrl')]",
                                    "script": "[parameters('dscScript')]",
                                    "function": "[parameters('dscConfiguration')]"
                                  },
                                  "configurationArguments": {
                                    "ServiceCredentialIsDomainAccount": "[parameters('arcgisServiceAccountIsDomainAccount')]",
                                    "PortalLicenseUserTypeId": "[parameters('portalLicenseUserTypeId')]",
                                    "MachineName": "[parameters('virtualMachineNames')]",
                                    "PeerMachineName": "[parameters('virtualMachineNames')]",
                                    "ExternalDNSHostName": "[parameters('hostname')]",
                                    "PrivateDNSHostName": "",
                                    "DataStoreTypes": "[parameters('dataStoreTypesForBaseDeploymentServers')]",
                                    "IsTileCacheDataStoreClustered": "[parameters('isTileCacheDataStoreClustered')]",
                                    "FileShareName": "[parameters('fileShareName')]",
                                    "UseCloudStorage": "[parameters('useCloudStorage')]",
                                    "UseAzureFiles": "[parameters('useAzureFiles')]",
                                    "OSDiskSize": "[parameters('virtualMachineOSDiskSize')]",
                                    "EnableDataDisk": "[string(parameters('enableVirtualMachineDataDisk'))]",
                                    "EnableLogHarvesterPlugin": "[string(parameters('enableServerLogHarvesterPlugin'))]",
                                    "DebugMode": "[string(parameters('debugMode'))]",
                                    "ServerContext": "[parameters('serverContext')]",
                                    "PortalContext": "[parameters('portalContext')]",
                                    "IsUpdatingCertificates": "[parameters('isUpdatingCertificates')]"
                                  }
                                },
                                "protectedSettings": {
                                  "configurationUrlSasToken": "[format('?{0}', listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                  "configurationArguments": {
                                    "PublicKeySSLCertificateFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('publicKeySSLCertificateFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                    "ServerLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('serverLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                    "PortalLicenseFileUrl": "[format('{0}{1}?{2}', parameters('storageUriPrefix'), parameters('portalLicenseFileName'), listAccountSAS(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01', variables('sasProperties')).accountSasToken)]",
                                    "ServiceCredential": {
                                      "userName": "[parameters('arcgisServiceAccountUserName')]",
                                      "password": "[parameters('arcgisServiceAccountPassword')]"
                                    },
                                    "MachineAdministratorCredential": {
                                      "userName": "[parameters('adminUsername')]",
                                      "password": "[parameters('adminPassword')]"
                                    },
                                    "ServerInternalCertificatePassword": {
                                      "userName": "Placeholder",
                                      "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), '')]"
                                    },
                                    "PortalInternalCertificatePassword": {
                                      "userName": "Placeholder",
                                      "password": "[if(parameters('useSelfSignedInternalSSLCertificate'), parameters('selfSignedSSLCertificatePassword'), '')]"
                                    },
                                    "SiteAdministratorCredential": {
                                      "userName": "[parameters('primarySiteAdministratorAccountUserName')]",
                                      "password": "[parameters('primarySiteAdministratorAccountPassword')]"
                                    },
                                    "StorageAccountCredential": {
                                      "userName": "[if(parameters('useCloudStorage'), parameters('cloudStorageAccountCredentialsUserName'), 'placeholder')]",
                                      "password": "[if(parameters('useCloudStorage'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, resourceGroup().name), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-04-01').keys[0].value, 'placeholder')]"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-applicationgateway-{0}', parameters('deploymentNameSuffix')))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('create-certificates-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-management-vm-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-pip-address-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', variables('resourceGroupName'))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-single-tier-datastore-types-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-virtual-machine-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-storage-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-tier3-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-uami-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-mission-landing-zone-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ]
}