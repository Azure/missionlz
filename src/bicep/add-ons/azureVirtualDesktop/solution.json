{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.25.53.49325",
      "templateHash": "7871696901103463946"
    }
  },
  "parameters": {
    "activeDirectorySolution": {
      "type": "string",
      "allowedValues": [
        "ActiveDirectoryDomainServices",
        "MicrosoftEntraDomainServices",
        "MicrosoftEntraId",
        "MicrosoftEntraIdIntuneEnrollment"
      ],
      "metadata": {
        "description": "The service providing domain services for Azure Virtual Desktop.  This is needed to properly configure the session hosts and if applicable, the Azure Storage Account."
      }
    },
    "artifactsContainerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Blobs container hosting the required artifacts."
      }
    },
    "artifactsStorageAccountResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the storage account hosting the artifacts in Blob storage."
      }
    },
    "availability": {
      "type": "string",
      "defaultValue": "AvailabilityZones",
      "allowedValues": [
        "AvailabilitySets",
        "AvailabilityZones",
        "None"
      ],
      "metadata": {
        "description": "The desired availability option when deploying a pooled host pool. The best practice is to deploy to availability zones for the highest resilency and service level agreement."
      }
    },
    "avdAgentMsiName": {
      "type": "string",
      "metadata": {
        "description": "The blob name of the MSI file for the AVD Agent installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
      }
    },
    "avdAgentBootLoaderMsiName": {
      "type": "string",
      "metadata": {
        "description": "The blob name of the MSI file for the AVD Agent Boot Loader installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
      }
    },
    "avdObjectId": {
      "type": "string",
      "metadata": {
        "description": "The object ID for the Azure Virtual Desktop enterprise application in Microsoft Entra ID.  The object ID can found by selecting Microsoft Applications using the Application type filter in the Enterprise Applications blade of Microsoft Entra ID."
      }
    },
    "azureNetAppFilesSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The subnet address prefix for the Azure NetApp Files delegated subnet."
      }
    },
    "azurePowerShellModuleMsiName": {
      "type": "string",
      "metadata": {
        "description": "The blob name of the MSI file for the  Azure PowerShell Module installer. The file must be hosted in an Azure Blobs container with the other deployment artifacts."
      }
    },
    "customRdpProperty": {
      "type": "string",
      "defaultValue": "audiocapturemode:i:1;camerastoredirect:s:*;use multimon:i:0;drivestoredirect:s:;encode redirected video capture:i:1;redirected video capture encoding quality:i:1;audiomode:i:0;devicestoredirect:s:;redirectclipboard:i:0;redirectcomports:i:0;redirectlocation:i:1;redirectprinters:i:0;redirectsmartcards:i:1;redirectwebauthn:i:1;usbdevicestoredirect:s:;keyboardhook:i:2;",
      "metadata": {
        "description": "The RDP properties to add or remove RDP functionality on the AVD host pool. The string must end with a semi-colon. Settings reference: https://learn.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files"
      }
    },
    "desktopFriendlyName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The friendly name for the SessionDesktop application in the desktop application group."
      }
    },
    "disableBgpRoutePropagation": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Disabling BGP route propagation is a route table configuration that prevents the propagation of on-premises routes to network interfaces in the associated subnets."
      }
    },
    "diskSku": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Standard_LRS",
        "StandardSSD_LRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The storage SKU for the managed disks on the AVD session hosts. Production deployments should use Premium_LRS."
      }
    },
    "domainJoinPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "The password for the account to domain join the AVD session hosts."
      }
    },
    "domainJoinUserPrincipalName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The user principal name for the account to domain join the AVD session hosts."
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the domain that provides ADDS to the AVD session hosts."
      }
    },
    "drainMode": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "The drain mode option enables drain mode for the sessions hosts in this deployment to prevent users from accessing the hosts until they have been validated."
      }
    },
    "environmentAbbreviation": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "prod",
        "test"
      ],
      "metadata": {
        "description": "The abbreviation for the target environment."
      }
    },
    "fslogixShareSizeInGB": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {
        "description": "The file share size(s) in GB for the Fslogix storage solution."
      }
    },
    "fslogixContainerType": {
      "type": "string",
      "defaultValue": "ProfileContainer",
      "allowedValues": [
        "CloudCacheProfileContainer",
        "CloudCacheProfileOfficeContainer",
        "ProfileContainer",
        "ProfileOfficeContainer"
      ],
      "metadata": {
        "description": "If deploying FSLogix, select the desired type of container for user profiles. https://learn.microsoft.com/en-us/fslogix/concepts-container-types"
      }
    },
    "fslogixStorageService": {
      "type": "string",
      "defaultValue": "AzureFiles Standard",
      "allowedValues": [
        "AzureNetAppFiles Premium",
        "AzureNetAppFiles Standard",
        "AzureFiles Premium",
        "AzureFiles Standard",
        "None"
      ],
      "metadata": {
        "description": "Enable an Fslogix storage option to manage user profiles for the AVD session hosts. The selected service & SKU should provide sufficient IOPS for all of your users. https://docs.microsoft.com/en-us/azure/architecture/example-scenario/wvd/windows-virtual-desktop-fslogix#performance-requirements"
      }
    },
    "hostPoolPublicNetworkAccess": {
      "type": "string",
      "allowedValues": [
        "Disabled",
        "Enabled",
        "EnabledForClientsOnly",
        "EnabledForSessionHostsOnly"
      ],
      "metadata": {
        "description": "The type of public network access for the host pool."
      }
    },
    "hostPoolType": {
      "type": "string",
      "defaultValue": "Pooled DepthFirst",
      "allowedValues": [
        "Pooled DepthFirst",
        "Pooled BreadthFirst",
        "Personal Automatic",
        "Personal Direct"
      ],
      "metadata": {
        "description": "These options specify the host pool type and depending on the type provides the load balancing options and assignment types."
      }
    },
    "hubAzureFirewallResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the Azure Firewall in the HUB subscription"
      }
    },
    "hubSubnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the subnet in the Shared Services subscription. This is required for the private endpoint on the AVD Global Workspace."
      }
    },
    "hubVirtualNetworkResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID for the Azure Virtual Network in the HUB subscription."
      }
    },
    "identifier": {
      "type": "string",
      "defaultValue": "avd",
      "maxLength": 3,
      "metadata": {
        "description": "The unique identifier between each business unit or project supporting AVD in your tenant. This is the unique naming component between each AVD stamp."
      }
    },
    "imageDefinitionResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID for the Compute Gallery Image Version. Do not set this value if using a marketplace image."
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "office-365",
      "metadata": {
        "description": "Offer for the virtual machine image"
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsDesktop",
      "metadata": {
        "description": "Publisher for the virtual machine image"
      }
    },
    "imageSku": {
      "type": "string",
      "defaultValue": "win11-22h2-avd-m365",
      "metadata": {
        "description": "SKU for the virtual machine image"
      }
    },
    "locationControlPlane": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The deployment location for the AVD management resources."
      }
    },
    "locationVirtualMachines": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The deployment location for the AVD sessions hosts."
      }
    },
    "logAnalyticsWorkspaceRetention": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 30,
      "maxValue": 730,
      "metadata": {
        "description": "The retention for the Log Analytics Workspace to setup the AVD monitoring solution"
      }
    },
    "logAnalyticsWorkspaceSku": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "allowedValues": [
        "Free",
        "Standard",
        "Premium",
        "PerNode",
        "PerGB2018",
        "Standalone",
        "CapacityReservation"
      ],
      "metadata": {
        "description": "The SKU for the Log Analytics Workspace to setup the AVD monitoring solution"
      }
    },
    "monitoring": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploys the required monitoring resources to enable AVD Insights and monitor features in the automation account."
      }
    },
    "organizationalUnitPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The distinguished name for the target Organization Unit in Active Directory Domain Services."
      }
    },
    "recoveryServices": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable backups to an Azure Recovery Services vault.  For a pooled host pool this will enable backups on the Azure file share.  For a personal host pool this will enable backups on the AVD sessions hosts."
      }
    },
    "scalingBeginPeakTime": {
      "type": "string",
      "defaultValue": "9:00",
      "metadata": {
        "description": "The time when session hosts will scale up and continue to stay on to support peak demand; Format 24 hours e.g. 9:00 for 9am"
      }
    },
    "scalingEndPeakTime": {
      "type": "string",
      "defaultValue": "17:00",
      "metadata": {
        "description": "The time when session hosts will scale down and stay off to support low demand; Format 24 hours e.g. 17:00 for 5pm"
      }
    },
    "scalingLimitSecondsToForceLogOffUser": {
      "type": "string",
      "defaultValue": "0",
      "metadata": {
        "description": "The number of seconds to wait before automatically signing out users. If set to 0 any session host that has user sessions will be left untouched"
      }
    },
    "scalingMinimumNumberOfRdsh": {
      "type": "string",
      "defaultValue": "0",
      "metadata": {
        "description": "The minimum number of session host VMs to keep running during off-peak hours. The scaling tool will not work if all virtual machines are turned off and the Start VM On Connect solution is not enabled."
      }
    },
    "scalingSessionThresholdPerCPU": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "The maximum number of sessions per CPU that will be used as a threshold to determine when new session host VMs need to be started during peak hours"
      }
    },
    "scalingTool": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploys the required resources for the Scaling Tool. https://docs.microsoft.com/en-us/azure/virtual-desktop/scaling-automation-logic-apps"
      }
    },
    "securityLogAnalyticsWorkspaceResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource ID of the log analytics workspace used for Azure Sentinel and / or Defender for Cloud. When using the Microsoft monitoring Agent, this allows you to multihome the agent to reduce unnecessary log collection and reduce cost."
      }
    },
    "securityPrincipals": {
      "type": "array",
      "metadata": {
        "description": "The array of Security Principals with their object IDs and display names to assign to the AVD Application Group and FSLogix Storage."
      }
    },
    "sessionHostCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 5000,
      "metadata": {
        "description": "The number of session hosts to deploy in the host pool. Ensure you have the approved quota to deploy the desired count."
      }
    },
    "sessionHostIndex": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 4999,
      "metadata": {
        "description": "The starting number for the session hosts. This is important when adding virtual machines to ensure an update deployment is not performed on an existing, active session host."
      }
    },
    "stampIndex": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 9,
      "metadata": {
        "description": "The stamp index allows for multiple AVD stamps with the same business unit or project to support different use cases. For example, \"0\" could be used for an office workers host pool and \"1\" could be used for a developers host pool within the \"finance\" business unit."
      }
    },
    "storageCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 0,
      "maxValue": 100,
      "metadata": {
        "description": "The number of storage accounts to deploy to support sharding across multiple storage accounts. https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding"
      }
    },
    "storageIndex": {
      "type": "int",
      "defaultValue": 0,
      "minValue": 0,
      "maxValue": 99,
      "metadata": {
        "description": "The starting number for the names of the storage accounts to support sharding across multiple storage accounts. https://docs.microsoft.com/en-us/azure/architecture/patterns/sharding"
      }
    },
    "subnetAddressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.140.0/24"
      ],
      "minLength": 1,
      "maxLength": 2,
      "metadata": {
        "description": "The address prefix(es) for the new subnet(s) that will be created in the spoke virtual network(s). Specify only one address prefix in the array if the session hosts location and the control plan location are the same. If different locations are specified, add a second address prefix for the hosts virtual network."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The Key / value pairs of metadata for the Azure resource groups and resources."
      }
    },
    "timestamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddhhmmss')]",
      "metadata": {
        "description": "DO NOT MODIFY THIS VALUE! The timestamp is needed to differentiate deployments for certain Azure resources and must be set using a parameter."
      }
    },
    "usersPerCore": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of users per core is used to determine the maximum number of users per session host."
      }
    },
    "validationEnvironment": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "The validation environment setting on the AVD host pool determines whether the hostpool should receive AVD preview features for testing."
      }
    },
    "virtualMachineVirtualCpuCount": {
      "type": "int",
      "metadata": {
        "description": "The number of virtual CPUs per virtual machine for the selected virtual machine size."
      }
    },
    "virtualMachineMonitoringAgent": {
      "type": "string",
      "defaultValue": "LogAnalyticsAgent",
      "allowedValues": [
        "AzureMonitorAgent",
        "LogAnalyticsAgent"
      ],
      "metadata": {
        "description": "Input the desired monitoring agent to send events and performance counters to a log analytics workspace."
      }
    },
    "virtualMachinePassword": {
      "type": "securestring",
      "metadata": {
        "description": "The local administrator password for the AVD session hosts"
      }
    },
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_D4ads_v5",
      "metadata": {
        "description": "The virtual machine SKU for the AVD session hosts."
      }
    },
    "virtualMachineUsername": {
      "type": "string",
      "metadata": {
        "description": "The local administrator username for the AVD session hosts"
      }
    },
    "virtualNetworkAddressPrefixes": {
      "type": "array",
      "defaultValue": [
        "10.0.140.0/24"
      ],
      "minLength": 1,
      "maxLength": 2,
      "metadata": {
        "description": "The address prefix for the new spoke virtual network(s). Specify only one address prefix in the array if the session hosts location and the control plan location are the same. If different locations are specified, add a second address prefix for the hosts virtual network."
      }
    },
    "workspaceFriendlyName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The friendly name for the AVD workspace that is displayed in the end-user client."
      }
    },
    "workspacePublicNetworkAccess": {
      "type": "string",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "The public network access setting on the AVD workspace either disables public network access or allows both public and private network access."
      }
    }
  },
  "variables": {
    "artifactsUri": "[format('https://{0}.blob.{1}/{2}/', variables('artifactsStorageAccountName'), environment().suffixes.storage, parameters('artifactsContainerName'))]",
    "artifactsStorageAccountName": "[split(parameters('artifactsStorageAccountResourceId'), '/')[8]]",
    "privateDnsZoneResourceIdPrefix": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/privateDnsZones/', split(parameters('hubVirtualNetworkResourceId'), '/')[2], split(parameters('hubVirtualNetworkResourceId'), '/')[4])]",
    "deploymentLocations": "[union(createArray(parameters('locationControlPlane')), createArray(parameters('locationVirtualMachines')))]",
    "resourceGroupsCount": "[add(add(4, length(variables('deploymentLocations'))), if(equals(parameters('fslogixStorageService'), 'None'), 0, 1))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Names_{0}', parameters('timestamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "locationControlPlane": {
            "value": "[parameters('locationControlPlane')]"
          },
          "locationVirtualMachines": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "stampIndex": {
            "value": "[parameters('stampIndex')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "1132830422672341823"
            }
          },
          "parameters": {
            "environmentAbbreviation": {
              "type": "string"
            },
            "identifier": {
              "type": "string"
            },
            "locationControlPlane": {
              "type": "string"
            },
            "locationVirtualMachines": {
              "type": "string"
            },
            "stampIndex": {
              "type": "int"
            }
          },
          "variables": {
            "$fxv#0": {
              "AzureChina": {
                "chinaeast": {
                  "abbreviation": "cne",
                  "recoveryServicesGeo": "sha",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "chinaeast2": {
                  "abbreviation": "cne2",
                  "recoveryServicesGeo": "sha2",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "chinanorth": {
                  "abbreviation": "cnn",
                  "recoveryServicesGeo": "bjb",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "chinanorth2": {
                  "abbreviation": "cnn2",
                  "recoveryServicesGeo": "bjb2",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                }
              },
              "AzureCloud": {
                "australiacentral": {
                  "abbreviation": "auc",
                  "recoveryServicesGeo": "acl",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "australiacentral2": {
                  "abbreviation": "auc2",
                  "recoveryServicesGeo": "acl2",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "australiaeast": {
                  "abbreviation": "aue",
                  "recoveryServicesGeo": "ae",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "australiasoutheast": {
                  "abbreviation": "ause",
                  "recoveryServicesGeo": "ase",
                  "timeDifference": "+10:00",
                  "timeZone": "AUS Eastern Standard Time"
                },
                "brazilsouth": {
                  "abbreviation": "brs",
                  "recoveryServicesGeo": "brs",
                  "timeDifference": "-3:00",
                  "timeZone": "E. South America Standard Time"
                },
                "brazilsoutheast": {
                  "abbreviation": "brse",
                  "recoveryServicesGeo": "bse",
                  "timeDifference": "-3:00",
                  "timeZone": "E. South America Standard Time"
                },
                "canadacentral": {
                  "abbreviation": "cac",
                  "recoveryServicesGeo": "cnc",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "canadaeast": {
                  "abbreviation": "cae",
                  "recoveryServicesGeo": "cne",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "centralindia": {
                  "abbreviation": "inc",
                  "recoveryServicesGeo": "inc",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "centralus": {
                  "abbreviation": "usc",
                  "recoveryServicesGeo": "cus",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "eastasia": {
                  "abbreviation": "ase",
                  "recoveryServicesGeo": "ea",
                  "timeDifference": "+8:00",
                  "timeZone": "China Standard Time"
                },
                "eastus": {
                  "abbreviation": "use",
                  "recoveryServicesGeo": "eus",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "eastus2": {
                  "abbreviation": "use2",
                  "recoveryServicesGeo": "eus2",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "francecentral": {
                  "abbreviation": "frc",
                  "recoveryServicesGeo": "frc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "francesouth": {
                  "abbreviation": "frs",
                  "recoveryServicesGeo": "frs",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "germanynorth": {
                  "abbreviation": "den",
                  "recoveryServicesGeo": "gn",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "germanywestcentral": {
                  "abbreviation": "dewc",
                  "recoveryServicesGeo": "gwc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "israelcentral": {
                  "abbreviation": "ilc",
                  "recoveryServicesGeo": "ilc",
                  "timeDifference": "+2:00",
                  "timeZone": "Israel Standard Time"
                },
                "italynorth": {
                  "abbreviation": "itn",
                  "recoveryServicesGeo": "itn",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "japaneast": {
                  "abbreviation": "jpe",
                  "recoveryServicesGeo": "jpe",
                  "timeDifference": "+9:00",
                  "timeZone": "Tokyo Standard Time"
                },
                "japanwest": {
                  "abbreviation": "jpw",
                  "recoveryServicesGeo": "jpw",
                  "timeDifference": "+9:00",
                  "timeZone": "Tokyo Standard Time"
                },
                "jioindiacentral": {
                  "abbreviation": "injc",
                  "recoveryServicesGeo": "jic",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "jioindiawest": {
                  "abbreviation": "injw",
                  "recoveryServicesGeo": "jiw",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "koreacentral": {
                  "abbreviation": "krc",
                  "recoveryServicesGeo": "krc",
                  "timeDifference": "+9:00",
                  "timeZone": "Korea Standard Time"
                },
                "koreasouth": {
                  "abbreviation": "krs",
                  "recoveryServicesGeo": "krs",
                  "timeDifference": "+9:00",
                  "timeZone": "Korea Standard Time"
                },
                "northcentralus": {
                  "abbreviation": "usnc",
                  "recoveryServicesGeo": "ncus",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "northeurope": {
                  "abbreviation": "eun",
                  "recoveryServicesGeo": "ne",
                  "timeDifference": "0:00",
                  "timeZone": "GMT Standard Time"
                },
                "norwayeast": {
                  "abbreviation": "noe",
                  "recoveryServicesGeo": "nwe",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "norwaywest": {
                  "abbreviation": "now",
                  "recoveryServicesGeo": "nww",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "polandcentral": {
                  "abbreviation": "plc",
                  "recoveryServicesGeo": "plc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "qatarcentral": {
                  "abbreviation": "qac",
                  "recoveryServicesGeo": "qac",
                  "timeDifference": "+3:00",
                  "timeZone": "Arabian Standard Time"
                },
                "southafricanorth": {
                  "abbreviation": "zan",
                  "recoveryServicesGeo": "san",
                  "timeDifference": "+2:00",
                  "timeZone": "South Africa Standard Time"
                },
                "southafricawest": {
                  "abbreviation": "zaw",
                  "recoveryServicesGeo": "saw",
                  "timeDifference": "+2:00",
                  "timeZone": "South Africa Standard Time"
                },
                "southcentralus": {
                  "abbreviation": "ussc",
                  "recoveryServicesGeo": "scus",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "southeastasia": {
                  "abbreviation": "asse",
                  "recoveryServicesGeo": "sea",
                  "timeDifference": "+8:00",
                  "timeZone": "Singapore Standard Time"
                },
                "southindia": {
                  "abbreviation": "ins",
                  "recoveryServicesGeo": "ins",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "swedencentral": {
                  "abbreviation": "sec",
                  "recoveryServicesGeo": "sdc",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "switzerlandnorth": {
                  "abbreviation": "chn",
                  "recoveryServicesGeo": "szn",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "switzerlandwest": {
                  "abbreviation": "chw",
                  "recoveryServicesGeo": "szw",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "uaecentral": {
                  "abbreviation": "aec",
                  "recoveryServicesGeo": "uac",
                  "timeDifference": "+3:00",
                  "timeZone": "Arabian Standard Time"
                },
                "uaenorth": {
                  "abbreviation": "aen",
                  "recoveryServicesGeo": "uan",
                  "timeDifference": "+3:00",
                  "timeZone": "Arabian Standard Time"
                },
                "uksouth": {
                  "abbreviation": "uks",
                  "recoveryServicesGeo": "uks",
                  "timeDifference": "0:00",
                  "timeZone": "GMT Standard Time"
                },
                "ukwest": {
                  "abbreviation": "ukw",
                  "recoveryServicesGeo": "ukw",
                  "timeDifference": "0:00",
                  "timeZone": "GMT Standard Time"
                },
                "westcentralus": {
                  "abbreviation": "uswc",
                  "recoveryServicesGeo": "wcus",
                  "timeDifference": "-7:00",
                  "timeZone": "Mountain Standard Time"
                },
                "westeurope": {
                  "abbreviation": "euw",
                  "recoveryServicesGeo": "we",
                  "timeDifference": "+1:00",
                  "timeZone": "Central Europe Standard Time"
                },
                "westindia": {
                  "abbreviation": "inw",
                  "recoveryServicesGeo": "inw",
                  "timeDifference": "+5:30",
                  "timeZone": "India Standard Time"
                },
                "westus": {
                  "abbreviation": "usw",
                  "recoveryServicesGeo": "wus",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                },
                "westus2": {
                  "abbreviation": "usw2",
                  "recoveryServicesGeo": "wus2",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                },
                "westus3": {
                  "abbreviation": "usw3",
                  "recoveryServicesGeo": "wus3",
                  "timeDifference": "-7:00",
                  "timeZone": "Mountain Standard Time"
                }
              },
              "AzureUSGovernment": {
                "usdodcentral": {
                  "abbreviation": "dodc",
                  "recoveryServicesGeo": "udc",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "usdodeast": {
                  "abbreviation": "dode",
                  "recoveryServicesGeo": "ude",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "usgovarizona": {
                  "abbreviation": "az",
                  "recoveryServicesGeo": "uga",
                  "timeDifference": "-7:00",
                  "timeZone": "Mountain Standard Time"
                },
                "usgovtexas": {
                  "abbreviation": "tx",
                  "recoveryServicesGeo": "ugt",
                  "timeDifference": "-6:00",
                  "timeZone": "Central Standard Time"
                },
                "usgovvirginia": {
                  "abbreviation": "va",
                  "recoveryServicesGeo": "ugv",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                }
              },
              "USNat": {
                "usnateast": {
                  "abbreviation": "east",
                  "recoveryServicesGeo": "exe",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "usnatwest": {
                  "abbreviation": "west",
                  "recoveryServicesGeo": "exw",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                }
              },
              "USSec": {
                "usseceast": {
                  "abbreviation": "east",
                  "recoveryServicesGeo": "rxe",
                  "timeDifference": "-5:00",
                  "timeZone": "Eastern Standard Time"
                },
                "ussecwest": {
                  "abbreviation": "west",
                  "recoveryServicesGeo": "rxw",
                  "timeDifference": "-8:00",
                  "timeZone": "Pacific Standard Time"
                }
              }
            },
            "$fxv#1": {
              "automationAccounts": "aa",
              "availabilitySets": "avail",
              "dataCollectionRuleAssociations": "dcra",
              "dataCollectionRules": "dcr",
              "desktopApplicationGroups": "vdag",
              "diagnosticSettings": "diag",
              "diskAccesses": "da",
              "diskEncryptionSets": "des",
              "disks": "disk",
              "hostPools": "vdpool",
              "keyVaults": "kv",
              "logAnalyticsWorkspaces": "log",
              "netAppAccounts": "naa",
              "netAppCapacityPools": "nacp",
              "networkInterfaces": "nic",
              "networkSecurityGroups": "nsg",
              "privateEndpoints": "pe",
              "recoveryServicesVaults": "rsv",
              "remoteApplicationGroups": "vdag",
              "resourceGroups": "rg",
              "routeTables": "rt",
              "storageAccounts": "st",
              "userAssignedIdentities": "id",
              "virtualMachines": "vm",
              "virtualNetworks": "vnet",
              "workspaces": "vdws"
            },
            "resourceAbbreviation": "resourceAbbreviation",
            "serviceName": "serviceName",
            "networkName": "avd",
            "locationAbbreviation": "locationAbbreviation",
            "namingConvention": "[format('{0}-{1}-{2}-{3}-{4}-{5}-{6}', parameters('identifier'), parameters('stampIndex'), variables('resourceAbbreviation'), variables('serviceName'), variables('networkName'), parameters('environmentAbbreviation'), variables('locationAbbreviation'))]",
            "namingConvention_Global": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceAbbreviation'), variables('serviceName'), variables('networkName'), parameters('environmentAbbreviation'), variables('locationAbbreviation'))]",
            "namingConvention_Shared": "[format('{0}-{1}-{2}-{3}-{4}-{5}', parameters('identifier'), variables('resourceAbbreviation'), variables('serviceName'), variables('networkName'), parameters('environmentAbbreviation'), variables('locationAbbreviation'))]",
            "cloudEndpointSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]",
            "privateDnsZoneSuffixes_AzureAutomation": {
              "AzureCloud": "net",
              "AzureUSGovernment": "us"
            },
            "privateDnsZoneSuffixes_AzureVirtualDesktop": {
              "AzureCloud": "microsoft.com",
              "AzureUSGovernment": "azure.us"
            },
            "privateDnsZoneSuffixes_Backup": {
              "AzureCloud": "windowsazure.com",
              "AzureUSGovernment": "windowsazure.us"
            },
            "privateDnsZoneSuffixes_Monitor": {
              "AzureCloud": "azure.com",
              "AzureUSGovernment": "azure.us"
            },
            "locations": "[variables('$fxv#0')[environment().name]]",
            "resourceAbbreviations": "[variables('$fxv#1')]",
            "resources": {
              "agentSvcPrivateDnsZoneName": "[format('privatelink.agentsvc.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudEndpointSuffix')))]",
              "automationAccountDiagnosticSettingName": "[replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').diagnosticSettings), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "automationAccountName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').automationAccounts), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "automationAccountNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), format('DSCAndHybridWorker-{0}', variables('resourceAbbreviations').automationAccounts)), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "automationAccountPrivateEndpointName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), format('DSCAndHybridWorker-{0}', variables('resourceAbbreviations').automationAccounts)), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "availabilitySetNamePrefix": "[format('{0}-', replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').availabilitySets), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation))]",
              "avdGlobalPrivateDnsZoneName": "[format('privatelink-global.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudEndpointSuffix')))]",
              "avdPrivateDnsZoneName": "[format('privatelink.wvd.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureVirtualDesktop')[environment().name], variables('cloudEndpointSuffix')))]",
              "azureAutomationPrivateDnsZoneName": "[format('privatelink.azure-automation.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureAutomation')[environment().name], variables('cloudEndpointSuffix')))]",
              "backupPrivateDnsZoneName": "[format('privatelink.{0}.backup.{1}', variables('locations')[parameters('locationVirtualMachines')].recoveryServicesGeo, coalesce(variables('privateDnsZoneSuffixes_Backup')[environment().name], variables('cloudEndpointSuffix')))]",
              "blobPrivateDnsZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
              "dataCollectionRuleAssociationName": "[format('{0}-avdi', replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').dataCollectionRuleAssociations), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation))]",
              "dataCollectionRuleName": "[format('microsoft-avdi-{0}', variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "desktopApplicationGroupName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').desktopApplicationGroups), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "diskAccessName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').diskAccesses), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "diskEncryptionSetName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').diskEncryptionSets), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "diskNamePrefix": "[replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').disks), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "filePrivateDnsZoneName": "[format('privatelink.file.{0}', environment().suffixes.storage)]",
              "fileShareNames": {
                "CloudCacheProfileContainer": [
                  "profile-containers"
                ],
                "CloudCacheProfileOfficeContainer": [
                  "office-containers",
                  "profile-containers"
                ],
                "ProfileContainer": [
                  "profile-containers"
                ],
                "ProfileOfficeContainer": [
                  "office-containers",
                  "profile-containers"
                ]
              },
              "hostPoolDiagnosticSettingName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').diagnosticSettings), variables('serviceName'), variables('resourceAbbreviations').hostPools), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "hostPoolName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').hostPools), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "hostPoolNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), variables('resourceAbbreviations').hostPools), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "hostPoolPrivateEndpointName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), variables('resourceAbbreviations').hostPools), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "keyVaultName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').keyVaults), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "keyVaultNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), variables('resourceAbbreviations').keyVaults), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "keyVaultPrivateDnsZoneName": "[replace(format('privatelink{0}', environment().suffixes.keyvaultDns), 'vault', 'vaultcore')]",
              "keyVaultPrivateEndpointName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), variables('resourceAbbreviations').keyVaults), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "logAnalyticsWorkspaceName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').logAnalyticsWorkspaces), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "netAppAccountName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').netAppAccounts), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "netAppCapacityPoolName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').netAppCapacityPools), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "networkInterfaceNamePrefix": "[replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "networkSecurityGroupNames": [
                "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkSecurityGroups), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkSecurityGroups), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]"
              ],
              "monitorPrivateDnsZoneName": "[format('privatelink.monitor.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudEndpointSuffix')))]",
              "odsOpinsightsPrivateDnsZoneName": "[format('privatelink.ods.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudEndpointSuffix')))]",
              "omsOpinsightsPrivateDnsZoneName": "[format('privatelink.oms.opinsights.{0}', coalesce(variables('privateDnsZoneSuffixes_Monitor')[environment().name], variables('cloudEndpointSuffix')))]",
              "queuePrivateDnsZoneName": "[format('privatelink.queue.{0}', environment().suffixes.storage)]",
              "recoveryServicesVaultName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').recoveryServicesVaults), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "recoveryServicesVaultNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), variables('resourceAbbreviations').recoveryServicesVaults), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "recoveryServicesVaultPrivateEndpointName": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), variables('resourceAbbreviations').recoveryServicesVaults), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "resourceGroupControlPlane": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'controlPlane'), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "resourceGroupFeedWorkspace": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'feedWorkspace'), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "resourceGroupGlobalWorkspace": "[replace(replace(replace(variables('namingConvention_Global'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'globalWorkspace'), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "resourceGroupHosts": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'sessionHosts'), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "resourceGroupManagement": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'management'), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "resourceGroupsNetwork": [
                "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'network'), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'network'), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]"
              ],
              "resourceGroupStorage": "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').resourceGroups), variables('serviceName'), 'profileStorage'), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "routeTableNames": [
                "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').routeTables), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').routeTables), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]"
              ],
              "storageAccountNamePrefix": "[replace(replace(replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').storageAccounts), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), '-', '')]",
              "storageAccountNetworkInterfaceNamePrefix": "[replace(replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), variables('resourceAbbreviations').storageAccounts), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation')))]",
              "storageAccountPrivateEndpointNamePrefix": "[replace(replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), variables('resourceAbbreviations').storageAccounts), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation')))]",
              "userAssignedIdentityNamePrefix": "[replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').userAssignedIdentities), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]",
              "virtualMachineNamePrefix": "[replace(replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').virtualMachines), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), '-', '')]",
              "virtualNetworkNames": [
                "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').virtualNetworks), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
                "[replace(replace(replace(variables('namingConvention'), variables('resourceAbbreviation'), variables('resourceAbbreviations').virtualNetworks), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationVirtualMachines')].abbreviation)]"
              ],
              "workspaceFeedDiagnosticSettingName": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), variables('resourceAbbreviations').diagnosticSettings), variables('serviceName'), format('feed-{0}', variables('resourceAbbreviations').workspaces)), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "workspaceFeedName": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), format('feed-{0}', variables('resourceAbbreviations').workspaces)), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "workspaceFeedNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), format('feed-{0}', variables('resourceAbbreviations').workspaces)), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "workspaceFeedPrivateEndpointName": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), format('feed-{0}', variables('resourceAbbreviations').workspaces)), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "workspaceFriendlyName": "[replace(replace(replace(variables('namingConvention_Shared'), variables('resourceAbbreviation'), variables('resourceAbbreviations').workspaces), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "workspaceGlobalName": "[replace(replace(replace(variables('namingConvention_Global'), variables('resourceAbbreviation'), format('global-{0}', variables('resourceAbbreviations').workspaces)), format('-{0}', variables('serviceName')), ''), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "workspaceGlobalNetworkInterfaceName": "[replace(replace(replace(variables('namingConvention_Global'), variables('resourceAbbreviation'), variables('resourceAbbreviations').networkInterfaces), variables('serviceName'), format('global-{0}', variables('resourceAbbreviations').workspaces)), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]",
              "workspaceGlobalPrivateEndpointName": "[replace(replace(replace(variables('namingConvention_Global'), variables('resourceAbbreviation'), variables('resourceAbbreviations').privateEndpoints), variables('serviceName'), format('global-{0}', variables('resourceAbbreviations').workspaces)), variables('locationAbbreviation'), variables('locations')[parameters('locationControlPlane')].abbreviation)]"
            }
          },
          "resources": [],
          "outputs": {
            "locations": {
              "type": "object",
              "value": "[variables('locations')]"
            },
            "networkName": {
              "type": "string",
              "value": "[variables('networkName')]"
            },
            "resources": {
              "type": "object",
              "value": "[variables('resources')]"
            },
            "serviceName": {
              "type": "string",
              "value": "[variables('serviceName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Logic_{0}', parameters('timestamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "deploymentLocations": {
            "value": "[variables('deploymentLocations')]"
          },
          "diskSku": {
            "value": "[parameters('diskSku')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "fileShareNames": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.fileShareNames]"
          },
          "fslogixContainerType": {
            "value": "[parameters('fslogixContainerType')]"
          },
          "fslogixStorageService": {
            "value": "[parameters('fslogixStorageService')]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "imageOffer": {
            "value": "[parameters('imageOffer')]"
          },
          "imagePublisher": {
            "value": "[parameters('imagePublisher')]"
          },
          "imageSku": {
            "value": "[parameters('imageSku')]"
          },
          "locations": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.locations.value]"
          },
          "locationVirtualMachines": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "resourceGroupControlPlane": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupControlPlane]"
          },
          "resourceGroupFeedWorkspace": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupFeedWorkspace]"
          },
          "resourceGroupHosts": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupHosts]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
          },
          "resourceGroupsNetwork": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupsNetwork]"
          },
          "resourceGroupStorage": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupStorage]"
          },
          "securityPrincipals": {
            "value": "[parameters('securityPrincipals')]"
          },
          "sessionHostCount": {
            "value": "[parameters('sessionHostCount')]"
          },
          "sessionHostIndex": {
            "value": "[parameters('sessionHostIndex')]"
          },
          "virtualMachineNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.virtualMachineNamePrefix]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "8083796976584417321"
            }
          },
          "parameters": {
            "activeDirectorySolution": {
              "type": "string"
            },
            "deploymentLocations": {
              "type": "array"
            },
            "diskSku": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "fileShareNames": {
              "type": "object"
            },
            "fslogixContainerType": {
              "type": "string"
            },
            "fslogixStorageService": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "imageOffer": {
              "type": "string"
            },
            "imagePublisher": {
              "type": "string"
            },
            "imageSku": {
              "type": "string"
            },
            "locations": {
              "type": "object"
            },
            "locationVirtualMachines": {
              "type": "string"
            },
            "resourceGroupControlPlane": {
              "type": "string"
            },
            "resourceGroupFeedWorkspace": {
              "type": "string"
            },
            "resourceGroupHosts": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "resourceGroupsNetwork": {
              "type": "array"
            },
            "resourceGroupStorage": {
              "type": "string"
            },
            "securityPrincipals": {
              "type": "array"
            },
            "sessionHostCount": {
              "type": "int"
            },
            "sessionHostIndex": {
              "type": "int"
            },
            "virtualMachineNamePrefix": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            }
          },
          "variables": {
            "maxResourcesPerTemplateDeployment": 88,
            "divisionValue": "[div(parameters('sessionHostCount'), variables('maxResourcesPerTemplateDeployment'))]",
            "divisionRemainderValue": "[mod(parameters('sessionHostCount'), variables('maxResourcesPerTemplateDeployment'))]",
            "sessionHostBatchCount": "[if(greater(variables('divisionRemainderValue'), 0), add(variables('divisionValue'), 1), variables('divisionValue'))]",
            "maxAvSetMembers": 200,
            "beginAvSetRange": "[div(parameters('sessionHostIndex'), variables('maxAvSetMembers'))]",
            "endAvSetRange": "[div(add(parameters('sessionHostCount'), parameters('sessionHostIndex')), variables('maxAvSetMembers'))]",
            "availabilitySetsCount": "[length(range(variables('beginAvSetRange'), add(sub(variables('endAvSetRange'), variables('beginAvSetRange')), 1)))]",
            "fileShares": "[parameters('fileShareNames')[parameters('fslogixContainerType')]]",
            "fslogix": "[if(or(equals(parameters('fslogixStorageService'), 'None'), not(contains(parameters('activeDirectorySolution'), 'DomainServices'))), false(), true())]",
            "netbios": "[split(parameters('domainName'), '.')[0]]",
            "pooledHostPool": "[if(equals(split(parameters('hostPoolType'), ' ')[0], 'Pooled'), true(), false())]",
            "resourceGroups": "[union(variables('resourceGroupsCommon'), variables('resourceGroupsNetworking'), variables('resourceGroupsStorage'))]",
            "resourceGroupsCommon": [
              "[parameters('resourceGroupControlPlane')]",
              "[parameters('resourceGroupFeedWorkspace')]",
              "[parameters('resourceGroupHosts')]",
              "[parameters('resourceGroupManagement')]"
            ],
            "resourceGroupsNetworking": "[if(equals(length(parameters('deploymentLocations')), 2), parameters('resourceGroupsNetwork'), createArray(parameters('resourceGroupsNetwork')[0]))]",
            "resourceGroupsStorage": "[if(variables('fslogix'), createArray(parameters('resourceGroupStorage')), createArray())]",
            "roleDefinitions": {
              "DesktopVirtualizationPowerOnContributor": "489581de-a3bd-480d-9518-53dea7416b33",
              "DesktopVirtualizationUser": "1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
              "Reader": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
              "VirtualMachineUserLogin": "fb879df8-f326-4884-b1cf-06f3ad86be52"
            },
            "securityPrincipalsCount": "[length(parameters('securityPrincipals'))]",
            "smbServerLocation": "[parameters('locations')[parameters('locationVirtualMachines')].abbreviation]",
            "storageSku": "[if(equals(parameters('fslogixStorageService'), 'None'), 'None', split(parameters('fslogixStorageService'), ' ')[1])]",
            "storageService": "[split(parameters('fslogixStorageService'), ' ')[0]]",
            "storageSuffix": "[environment().suffixes.storage]",
            "timeDifference": "[parameters('locations')[parameters('locationVirtualMachines')].timeDifference]",
            "timeZone": "[parameters('locations')[parameters('locationVirtualMachines')].timeZone]",
            "vmTemplate": "[format('{{\"domain\":\"{0}\",\"galleryImageOffer\":\"{1}\",\"galleryImagePublisher\":\"{2}\",\"galleryImageSKU\":\"{3}\",\"imageType\":\"Gallery\",\"imageUri\":null,\"customImageId\":null,\"namePrefix\":\"{4}\",\"osDiskType\":\"{5}\",\"useManagedDisks\":true,\"VirtualMachineSize\":{{\"id\":\"{6}\",\"cores\":null,\"ram\":null}},\"galleryItemId\":\"{7}.{8}{9}\"}}', parameters('domainName'), parameters('imageOffer'), parameters('imagePublisher'), parameters('imageSku'), parameters('virtualMachineNamePrefix'), parameters('diskSku'), parameters('virtualMachineSize'), parameters('imagePublisher'), parameters('imageOffer'), parameters('imageSku'))]"
          },
          "resources": [],
          "outputs": {
            "availabilitySetsCount": {
              "type": "int",
              "value": "[variables('availabilitySetsCount')]"
            },
            "beginAvSetRange": {
              "type": "int",
              "value": "[variables('beginAvSetRange')]"
            },
            "divisionRemainderValue": {
              "type": "int",
              "value": "[variables('divisionRemainderValue')]"
            },
            "fileShares": {
              "type": "array",
              "value": "[variables('fileShares')]"
            },
            "fslogix": {
              "type": "bool",
              "value": "[variables('fslogix')]"
            },
            "maxResourcesPerTemplateDeployment": {
              "type": "int",
              "value": "[variables('maxResourcesPerTemplateDeployment')]"
            },
            "netbios": {
              "type": "string",
              "value": "[variables('netbios')]"
            },
            "pooledHostPool": {
              "type": "bool",
              "value": "[variables('pooledHostPool')]"
            },
            "resourceGroups": {
              "type": "array",
              "value": "[variables('resourceGroups')]"
            },
            "roleDefinitions": {
              "type": "object",
              "value": "[variables('roleDefinitions')]"
            },
            "sessionHostBatchCount": {
              "type": "int",
              "value": "[variables('sessionHostBatchCount')]"
            },
            "securityPrincipalsCount": {
              "type": "int",
              "value": "[variables('securityPrincipalsCount')]"
            },
            "smbServerLocation": {
              "type": "string",
              "value": "[variables('smbServerLocation')]"
            },
            "storageSku": {
              "type": "string",
              "value": "[variables('storageSku')]"
            },
            "storageService": {
              "type": "string",
              "value": "[variables('storageService')]"
            },
            "storageSuffix": {
              "type": "string",
              "value": "[variables('storageSuffix')]"
            },
            "timeDifference": {
              "type": "string",
              "value": "[variables('timeDifference')]"
            },
            "timeZone": {
              "type": "string",
              "value": "[variables('timeZone')]"
            },
            "vmTemplate": {
              "type": "string",
              "value": "[variables('vmTemplate')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]"
      ]
    },
    {
      "copy": {
        "name": "rgs",
        "count": "[length(range(0, variables('resourceGroupsCount')))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ResourceGroup_{0}_{1}', range(0, variables('resourceGroupsCount'))[copyIndex()], parameters('timestamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": "[if(or(contains(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceGroups.value[range(0, variables('resourceGroupsCount'))[copyIndex()]], 'controlPlane'), contains(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceGroups.value[range(0, variables('resourceGroupsCount'))[copyIndex()]], 'feedWorkspace')), createObject('value', parameters('locationControlPlane')), createObject('value', parameters('locationVirtualMachines')))]",
          "resourceGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceGroups.value[range(0, variables('resourceGroupsCount'))[copyIndex()]]]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "3692510243196711336"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2020-10-01",
              "name": "[parameters('resourceGroupName')]",
              "location": "[parameters('location')]",
              "tags": "[if(contains(parameters('tags'), 'Microsoft.Resources/resourceGroups'), parameters('tags')['Microsoft.Resources/resourceGroups'], createObject())]"
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Network_ControlPlane_{0}', parameters('timestamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "azureNetAppFilesSubnetAddressPrefix": "[if(and(not(empty(parameters('azureNetAppFilesSubnetAddressPrefix'))), equals(length(variables('deploymentLocations')), 1)), createObject('value', parameters('azureNetAppFilesSubnetAddressPrefix')), createObject('value', ''))]",
          "disableBgpRoutePropagation": {
            "value": "[parameters('disableBgpRoutePropagation')]"
          },
          "hubAzureFirewallResourceId": {
            "value": "[parameters('hubAzureFirewallResourceId')]"
          },
          "hubVirtualNetworkResourceId": {
            "value": "[parameters('hubVirtualNetworkResourceId')]"
          },
          "index": {
            "value": 0
          },
          "location": {
            "value": "[variables('deploymentLocations')[0]]"
          },
          "networkSecurityGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.networkSecurityGroupNames[0]]"
          },
          "resourceGroupNetwork": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupsNetwork[0]]"
          },
          "routeTableName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.routeTableNames[0]]"
          },
          "subnetAddressPrefixes": {
            "value": "[parameters('subnetAddressPrefixes')]"
          },
          "timestamp": {
            "value": "[parameters('timestamp')]"
          },
          "virtualNetworkAddressPrefixes": {
            "value": "[parameters('virtualNetworkAddressPrefixes')]"
          },
          "virtualNetworkName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.virtualNetworkNames[0]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "14600767802117569441"
            }
          },
          "parameters": {
            "azureNetAppFilesSubnetAddressPrefix": {
              "type": "string"
            },
            "disableBgpRoutePropagation": {
              "type": "bool"
            },
            "hubAzureFirewallResourceId": {
              "type": "string"
            },
            "hubVirtualNetworkResourceId": {
              "type": "string"
            },
            "index": {
              "type": "int"
            },
            "location": {
              "type": "string"
            },
            "networkSecurityGroupName": {
              "type": "string"
            },
            "subnetAddressPrefixes": {
              "type": "array"
            },
            "resourceGroupNetwork": {
              "type": "string"
            },
            "routeTableName": {
              "type": "string"
            },
            "timestamp": {
              "type": "string"
            },
            "virtualNetworkAddressPrefixes": {
              "type": "array"
            },
            "virtualNetworkName": {
              "type": "string"
            }
          },
          "variables": {
            "hubSubscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
            "hubVirtualNetworkName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]",
            "hubVirtualNetworkResourceGroupName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
            "networkSecurityGroupSecurityRules": [],
            "spokeResourceGroup": "[parameters('resourceGroupNetwork')]",
            "spokeSubscriptionId": "[subscription().subscriptionId]",
            "subnets": "[union(variables('subnetWorkload'), variables('subnetAnf'))]",
            "subnetAnf": "[if(empty(parameters('azureNetAppFilesSubnetAddressPrefix')), createArray(), createArray(createObject('name', 'AzureNetAppFiles', 'addressPrefix', parameters('azureNetAppFilesSubnetAddressPrefix'), 'delegations', createArray(createObject('name', 'Microsoft.Netapp.volumes', 'id', format('{0}/delegations/Microsoft.Netapp.volumes', resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'AzureNetAppFiles')), 'properties', createObject('serviceName', 'Microsoft.Netapp/volumes'), 'type', 'Microsoft.Network/virtualNetworks/subnets/delegations')), 'privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled', 'networkSecurityGroupName', parameters('networkSecurityGroupName'))))]",
            "subnetWorkload": [
              {
                "name": "AzureVirtualDesktop",
                "addressPrefix": "[parameters('subnetAddressPrefixes')[parameters('index')]]",
                "delegations": [],
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Disabled",
                "networkSecurityGroupName": "[parameters('networkSecurityGroupName')]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp'))]",
              "subscriptionId": "[variables('spokeSubscriptionId')]",
              "resourceGroup": "[variables('spokeResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureFirewallIpAddress": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubAzureFirewallResourceId'), '/')[2], split(parameters('hubAzureFirewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('hubAzureFirewallResourceId'), '/')[8]), '2023-05-01').ipConfigurations[0].properties.privateIPAddress]"
                  },
                  "disableBgpRoutePropagation": {
                    "value": "[parameters('disableBgpRoutePropagation')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "udrName": {
                    "value": "[parameters('routeTableName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "1262370072191481480"
                    }
                  },
                  "parameters": {
                    "azureFirewallIpAddress": {
                      "type": "string"
                    },
                    "disableBgpRoutePropagation": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "udrName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/routeTables",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('udrName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                        "routes": [
                          {
                            "name": "default",
                            "properties": {
                              "addressPrefix": "0.0.0.0/0",
                              "hasBgpOverride": false,
                              "nextHopIpAddress": "[parameters('azureFirewallIpAddress')]",
                              "nextHopType": "VirtualAppliance"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('udrName')]"
                    },
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('udrName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('NetworkSecurityGroup_{0}_{1}', parameters('index'), parameters('timestamp'))]",
              "subscriptionId": "[variables('spokeSubscriptionId')]",
              "resourceGroup": "[variables('spokeResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[parameters('networkSecurityGroupName')]"
                  },
                  "networkSecurityGroupSecurityRules": {
                    "value": "[variables('networkSecurityGroupSecurityRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "8818014171405387289"
                    }
                  },
                  "parameters": {
                    "networkSecurityGroupSecurityRules": {
                      "type": "array"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[parameters('networkSecurityGroupName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(parameters('networkSecurityGroupSecurityRules'))]",
                            "input": {
                              "name": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].name]",
                              "properties": {
                                "access": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.access]",
                                "destinationAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                                "destinationAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes)]",
                                "destinationPortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges)]",
                                "destinationPortRange": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange)]",
                                "direction": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.direction]",
                                "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                                "protocol": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.protocol]",
                                "sourceAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                                "sourcePortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges)]",
                                "sourcePortRange": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRange]"
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))]",
              "subscriptionId": "[variables('spokeSubscriptionId')]",
              "resourceGroup": "[variables('spokeResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dnsServers": "[if(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubVirtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVirtualNetworkName')), '2023-05-01'), 'dhcpOptions'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubVirtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVirtualNetworkName')), '2023-05-01').dhcpOptions.dnsServers), createObject('value', createArray()))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "subnets": {
                    "value": "[variables('subnets')]"
                  },
                  "udrName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.name.value]"
                  },
                  "virtualNetworkName": {
                    "value": "[parameters('virtualNetworkName')]"
                  },
                  "vNetAddressPrefixes": {
                    "value": [
                      "[parameters('virtualNetworkAddressPrefixes')[parameters('index')]]"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "5243757084811322015"
                    }
                  },
                  "parameters": {
                    "dnsServers": {
                      "type": "array"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "subnets": {
                      "type": "array"
                    },
                    "udrName": {
                      "type": "string"
                    },
                    "vNetAddressPrefixes": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2020-11-01",
                      "name": "[parameters('virtualNetworkName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "delegations": "[parameters('subnets')[copyIndex('subnets')].delegations]",
                                "networkSecurityGroup": "[if(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), null(), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName))))]",
                                "privateEndpointNetworkPolicies": "[parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies]",
                                "privateLinkServiceNetworkPolicies": "[parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies]",
                                "routeTable": {
                                  "id": "[resourceId('Microsoft.Network/routeTables', parameters('udrName'))]"
                                }
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('vNetAddressPrefixes')]"
                        },
                        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "virtualNetworkName": {
                      "type": "string",
                      "value": "[parameters('virtualNetworkName')]"
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2020-11-01').subnets[0].id]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('VirtualNetworkPeer_Hub_{0}_{1}', parameters('index'), parameters('timestamp'))]",
              "subscriptionId": "[variables('spokeSubscriptionId')]",
              "resourceGroup": "[variables('spokeResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "existingLocalVirtualNetworkName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  },
                  "existingRemoteVirtualNetworkName": {
                    "value": "[variables('hubVirtualNetworkName')]"
                  },
                  "existingRemoteVirtualNetworkResourceGroupName": {
                    "value": "[variables('hubVirtualNetworkResourceGroupName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "8500581818052885172"
                    }
                  },
                  "parameters": {
                    "existingLocalVirtualNetworkName": {
                      "type": "string"
                    },
                    "existingRemoteVirtualNetworkName": {
                      "type": "string"
                    },
                    "existingRemoteVirtualNetworkResourceGroupName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('existingLocalVirtualNetworkName'), parameters('existingRemoteVirtualNetworkName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('VirtualNetworkPeer_Spoke_{0}_{1}', parameters('index'), parameters('timestamp'))]",
              "subscriptionId": "[variables('hubSubscriptionId')]",
              "resourceGroup": "[variables('hubVirtualNetworkResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "existingLocalVirtualNetworkName": {
                    "value": "[variables('hubVirtualNetworkName')]"
                  },
                  "existingRemoteVirtualNetworkName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  },
                  "existingRemoteVirtualNetworkResourceGroupName": {
                    "value": "[variables('spokeResourceGroup')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "8500581818052885172"
                    }
                  },
                  "parameters": {
                    "existingLocalVirtualNetworkName": {
                      "type": "string"
                    },
                    "existingRemoteVirtualNetworkName": {
                      "type": "string"
                    },
                    "existingRemoteVirtualNetworkResourceGroupName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('existingLocalVirtualNetworkName'), parameters('existingRemoteVirtualNetworkName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetworkPeer_Hub_{0}_{1}', parameters('index'), parameters('timestamp')))]"
              ]
            }
          ],
          "outputs": {
            "subnetResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
        "rgs"
      ]
    },
    {
      "condition": "[equals(length(variables('deploymentLocations')), 2)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Network_Hosts_{0}', parameters('timestamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "azureNetAppFilesSubnetAddressPrefix": "[if(and(not(empty(parameters('azureNetAppFilesSubnetAddressPrefix'))), equals(length(variables('deploymentLocations')), 2)), createObject('value', parameters('azureNetAppFilesSubnetAddressPrefix')), createObject('value', ''))]",
          "disableBgpRoutePropagation": {
            "value": "[parameters('disableBgpRoutePropagation')]"
          },
          "hubAzureFirewallResourceId": {
            "value": "[parameters('hubAzureFirewallResourceId')]"
          },
          "hubVirtualNetworkResourceId": {
            "value": "[parameters('hubVirtualNetworkResourceId')]"
          },
          "index": {
            "value": 1
          },
          "location": {
            "value": "[variables('deploymentLocations')[1]]"
          },
          "networkSecurityGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.networkSecurityGroupNames[1]]"
          },
          "resourceGroupNetwork": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupsNetwork[0]), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupsNetwork[1]))]",
          "routeTableName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.routeTableNames[1]]"
          },
          "subnetAddressPrefixes": {
            "value": "[parameters('subnetAddressPrefixes')]"
          },
          "timestamp": {
            "value": "[parameters('timestamp')]"
          },
          "virtualNetworkAddressPrefixes": {
            "value": "[parameters('virtualNetworkAddressPrefixes')]"
          },
          "virtualNetworkName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.virtualNetworkNames[1]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "14600767802117569441"
            }
          },
          "parameters": {
            "azureNetAppFilesSubnetAddressPrefix": {
              "type": "string"
            },
            "disableBgpRoutePropagation": {
              "type": "bool"
            },
            "hubAzureFirewallResourceId": {
              "type": "string"
            },
            "hubVirtualNetworkResourceId": {
              "type": "string"
            },
            "index": {
              "type": "int"
            },
            "location": {
              "type": "string"
            },
            "networkSecurityGroupName": {
              "type": "string"
            },
            "subnetAddressPrefixes": {
              "type": "array"
            },
            "resourceGroupNetwork": {
              "type": "string"
            },
            "routeTableName": {
              "type": "string"
            },
            "timestamp": {
              "type": "string"
            },
            "virtualNetworkAddressPrefixes": {
              "type": "array"
            },
            "virtualNetworkName": {
              "type": "string"
            }
          },
          "variables": {
            "hubSubscriptionId": "[split(parameters('hubVirtualNetworkResourceId'), '/')[2]]",
            "hubVirtualNetworkName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[8]]",
            "hubVirtualNetworkResourceGroupName": "[split(parameters('hubVirtualNetworkResourceId'), '/')[4]]",
            "networkSecurityGroupSecurityRules": [],
            "spokeResourceGroup": "[parameters('resourceGroupNetwork')]",
            "spokeSubscriptionId": "[subscription().subscriptionId]",
            "subnets": "[union(variables('subnetWorkload'), variables('subnetAnf'))]",
            "subnetAnf": "[if(empty(parameters('azureNetAppFilesSubnetAddressPrefix')), createArray(), createArray(createObject('name', 'AzureNetAppFiles', 'addressPrefix', parameters('azureNetAppFilesSubnetAddressPrefix'), 'delegations', createArray(createObject('name', 'Microsoft.Netapp.volumes', 'id', format('{0}/delegations/Microsoft.Netapp.volumes', resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'AzureNetAppFiles')), 'properties', createObject('serviceName', 'Microsoft.Netapp/volumes'), 'type', 'Microsoft.Network/virtualNetworks/subnets/delegations')), 'privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled', 'networkSecurityGroupName', parameters('networkSecurityGroupName'))))]",
            "subnetWorkload": [
              {
                "name": "AzureVirtualDesktop",
                "addressPrefix": "[parameters('subnetAddressPrefixes')[parameters('index')]]",
                "delegations": [],
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Disabled",
                "networkSecurityGroupName": "[parameters('networkSecurityGroupName')]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp'))]",
              "subscriptionId": "[variables('spokeSubscriptionId')]",
              "resourceGroup": "[variables('spokeResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureFirewallIpAddress": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hubAzureFirewallResourceId'), '/')[2], split(parameters('hubAzureFirewallResourceId'), '/')[4]), 'Microsoft.Network/azureFirewalls', split(parameters('hubAzureFirewallResourceId'), '/')[8]), '2023-05-01').ipConfigurations[0].properties.privateIPAddress]"
                  },
                  "disableBgpRoutePropagation": {
                    "value": "[parameters('disableBgpRoutePropagation')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "udrName": {
                    "value": "[parameters('routeTableName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "1262370072191481480"
                    }
                  },
                  "parameters": {
                    "azureFirewallIpAddress": {
                      "type": "string"
                    },
                    "disableBgpRoutePropagation": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "udrName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/routeTables",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('udrName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                        "routes": [
                          {
                            "name": "default",
                            "properties": {
                              "addressPrefix": "0.0.0.0/0",
                              "hasBgpOverride": false,
                              "nextHopIpAddress": "[parameters('azureFirewallIpAddress')]",
                              "nextHopType": "VirtualAppliance"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('udrName')]"
                    },
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('udrName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('NetworkSecurityGroup_{0}_{1}', parameters('index'), parameters('timestamp'))]",
              "subscriptionId": "[variables('spokeSubscriptionId')]",
              "resourceGroup": "[variables('spokeResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[parameters('networkSecurityGroupName')]"
                  },
                  "networkSecurityGroupSecurityRules": {
                    "value": "[variables('networkSecurityGroupSecurityRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "8818014171405387289"
                    }
                  },
                  "parameters": {
                    "networkSecurityGroupSecurityRules": {
                      "type": "array"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[parameters('networkSecurityGroupName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(parameters('networkSecurityGroupSecurityRules'))]",
                            "input": {
                              "name": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].name]",
                              "properties": {
                                "access": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.access]",
                                "destinationAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                                "destinationAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes)]",
                                "destinationPortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges)]",
                                "destinationPortRange": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange)]",
                                "direction": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.direction]",
                                "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                                "protocol": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.protocol]",
                                "sourceAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                                "sourcePortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges)]",
                                "sourcePortRange": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRange]"
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))]",
              "subscriptionId": "[variables('spokeSubscriptionId')]",
              "resourceGroup": "[variables('spokeResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dnsServers": "[if(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubVirtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVirtualNetworkName')), '2023-05-01'), 'dhcpOptions'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hubSubscriptionId'), variables('hubVirtualNetworkResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('hubVirtualNetworkName')), '2023-05-01').dhcpOptions.dnsServers), createObject('value', createArray()))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "subnets": {
                    "value": "[variables('subnets')]"
                  },
                  "udrName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.name.value]"
                  },
                  "virtualNetworkName": {
                    "value": "[parameters('virtualNetworkName')]"
                  },
                  "vNetAddressPrefixes": {
                    "value": [
                      "[parameters('virtualNetworkAddressPrefixes')[parameters('index')]]"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "5243757084811322015"
                    }
                  },
                  "parameters": {
                    "dnsServers": {
                      "type": "array"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "subnets": {
                      "type": "array"
                    },
                    "udrName": {
                      "type": "string"
                    },
                    "vNetAddressPrefixes": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2020-11-01",
                      "name": "[parameters('virtualNetworkName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "delegations": "[parameters('subnets')[copyIndex('subnets')].delegations]",
                                "networkSecurityGroup": "[if(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), null(), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName))))]",
                                "privateEndpointNetworkPolicies": "[parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies]",
                                "privateLinkServiceNetworkPolicies": "[parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies]",
                                "routeTable": {
                                  "id": "[resourceId('Microsoft.Network/routeTables', parameters('udrName'))]"
                                }
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('vNetAddressPrefixes')]"
                        },
                        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "virtualNetworkName": {
                      "type": "string",
                      "value": "[parameters('virtualNetworkName')]"
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2020-11-01').subnets[0].id]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('UserDefinedRoute_{0}_{1}', parameters('index'), parameters('timestamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('VirtualNetworkPeer_Hub_{0}_{1}', parameters('index'), parameters('timestamp'))]",
              "subscriptionId": "[variables('spokeSubscriptionId')]",
              "resourceGroup": "[variables('spokeResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "existingLocalVirtualNetworkName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  },
                  "existingRemoteVirtualNetworkName": {
                    "value": "[variables('hubVirtualNetworkName')]"
                  },
                  "existingRemoteVirtualNetworkResourceGroupName": {
                    "value": "[variables('hubVirtualNetworkResourceGroupName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "8500581818052885172"
                    }
                  },
                  "parameters": {
                    "existingLocalVirtualNetworkName": {
                      "type": "string"
                    },
                    "existingRemoteVirtualNetworkName": {
                      "type": "string"
                    },
                    "existingRemoteVirtualNetworkResourceGroupName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('existingLocalVirtualNetworkName'), parameters('existingRemoteVirtualNetworkName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('VirtualNetworkPeer_Spoke_{0}_{1}', parameters('index'), parameters('timestamp'))]",
              "subscriptionId": "[variables('hubSubscriptionId')]",
              "resourceGroup": "[variables('hubVirtualNetworkResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "existingLocalVirtualNetworkName": {
                    "value": "[variables('hubVirtualNetworkName')]"
                  },
                  "existingRemoteVirtualNetworkName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  },
                  "existingRemoteVirtualNetworkResourceGroupName": {
                    "value": "[variables('spokeResourceGroup')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "8500581818052885172"
                    }
                  },
                  "parameters": {
                    "existingLocalVirtualNetworkName": {
                      "type": "string"
                    },
                    "existingRemoteVirtualNetworkName": {
                      "type": "string"
                    },
                    "existingRemoteVirtualNetworkResourceGroupName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', parameters('existingLocalVirtualNetworkName'), parameters('existingRemoteVirtualNetworkName'))]",
                      "properties": {
                        "allowVirtualNetworkAccess": true,
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": false,
                        "useRemoteGateways": false,
                        "remoteVirtualNetwork": {
                          "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetworkPeer_Hub_{0}_{1}', parameters('index'), parameters('timestamp')))]"
              ]
            }
          ],
          "outputs": {
            "subnetResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('VirtualNetwork_{0}_{1}', parameters('index'), parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
        "rgs"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Management_{0}', parameters('timestamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "artifactsStorageAccountResourceId": {
            "value": "[parameters('artifactsStorageAccountResourceId')]"
          },
          "artifactsUri": {
            "value": "[variables('artifactsUri')]"
          },
          "automationAccountDiagnosticSettingName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountDiagnosticSettingName]"
          },
          "automationAccountName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountName]"
          },
          "automationAccountNetworkInterfaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountNetworkInterfaceName]"
          },
          "automationAccountPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.azureAutomationPrivateDnsZoneName)]"
          },
          "automationAccountPrivateEndpointName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountPrivateEndpointName]"
          },
          "availability": {
            "value": "[parameters('availability')]"
          },
          "avdObjectId": {
            "value": "[parameters('avdObjectId')]"
          },
          "azureBlobsPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.blobPrivateDnsZoneName)]"
          },
          "azurePowerShellModuleMsiName": {
            "value": "[parameters('azurePowerShellModuleMsiName')]"
          },
          "azureQueueStoragePrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.queuePrivateDnsZoneName)]"
          },
          "dataCollectionRuleName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.dataCollectionRuleName]"
          },
          "diskEncryptionSetName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.diskEncryptionSetName]"
          },
          "diskNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.diskNamePrefix]"
          },
          "diskSku": {
            "value": "[parameters('diskSku')]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "enableMonitoring": {
            "value": "[parameters('monitoring')]"
          },
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "fslogix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.fslogix.value]"
          },
          "fslogixStorageService": {
            "value": "[parameters('fslogixStorageService')]"
          },
          "hostPoolName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolName]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "imageDefinitionResourceId": {
            "value": "[parameters('imageDefinitionResourceId')]"
          },
          "keyVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.keyVaultName]"
          },
          "keyVaultNetworkInterfaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.keyVaultNetworkInterfaceName]"
          },
          "keyVaultPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.keyVaultPrivateDnsZoneName)]"
          },
          "keyVaultPrivateEndpointName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.keyVaultPrivateEndpointName]"
          },
          "locationVirtualMachines": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.logAnalyticsWorkspaceName]"
          },
          "logAnalyticsWorkspaceRetention": {
            "value": "[parameters('logAnalyticsWorkspaceRetention')]"
          },
          "logAnalyticsWorkspaceSku": {
            "value": "[parameters('logAnalyticsWorkspaceSku')]"
          },
          "networkInterfaceNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.networkInterfaceNamePrefix]"
          },
          "networkName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.networkName.value]"
          },
          "organizationalUnitPath": {
            "value": "[parameters('organizationalUnitPath')]"
          },
          "recoveryServices": {
            "value": "[parameters('recoveryServices')]"
          },
          "recoveryServicesPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.backupPrivateDnsZoneName)]"
          },
          "recoveryServicesVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.recoveryServicesVaultName]"
          },
          "recoveryServicesVaultNetworkInterfaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.recoveryServicesVaultNetworkInterfaceName]"
          },
          "recoveryServicesVaultPrivateEndpointName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.recoveryServicesVaultPrivateEndpointName]"
          },
          "resourceGroupControlPlane": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupControlPlane]"
          },
          "resourceGroupFeedWorkspace": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupFeedWorkspace]"
          },
          "resourceGroupHosts": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupHosts]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
          },
          "resourceGroupStorage": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupStorage]"
          },
          "roleDefinitions": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.roleDefinitions.value]"
          },
          "scalingTool": {
            "value": "[parameters('scalingTool')]"
          },
          "securityLogAnalyticsWorkspaceResourceId": {
            "value": "[parameters('securityLogAnalyticsWorkspaceResourceId')]"
          },
          "serviceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.serviceName.value]"
          },
          "sessionHostCount": {
            "value": "[parameters('sessionHostCount')]"
          },
          "storageService": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageService.value]"
          },
          "subnetResourceId": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timestamp": {
            "value": "[parameters('timestamp')]"
          },
          "timeZone": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.timeZone.value]"
          },
          "userAssignedIdentityNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.userAssignedIdentityNamePrefix]"
          },
          "virtualMachineMonitoringAgent": {
            "value": "[parameters('virtualMachineMonitoringAgent')]"
          },
          "virtualMachineNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.virtualMachineNamePrefix]"
          },
          "virtualMachinePassword": {
            "value": "[parameters('virtualMachinePassword')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "virtualMachineUsername": {
            "value": "[parameters('virtualMachineUsername')]"
          },
          "workspaceFeedName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFeedName]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "4665746455222440988"
            }
          },
          "parameters": {
            "activeDirectorySolution": {
              "type": "string"
            },
            "artifactsUri": {
              "type": "string"
            },
            "artifactsStorageAccountResourceId": {
              "type": "string"
            },
            "automationAccountDiagnosticSettingName": {
              "type": "string"
            },
            "automationAccountName": {
              "type": "string"
            },
            "automationAccountNetworkInterfaceName": {
              "type": "string"
            },
            "automationAccountPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "automationAccountPrivateEndpointName": {
              "type": "string"
            },
            "availability": {
              "type": "string"
            },
            "avdObjectId": {
              "type": "string"
            },
            "azureBlobsPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azurePowerShellModuleMsiName": {
              "type": "string"
            },
            "azureQueueStoragePrivateDnsZoneResourceId": {
              "type": "string"
            },
            "dataCollectionRuleName": {
              "type": "string"
            },
            "diskNamePrefix": {
              "type": "string"
            },
            "diskEncryptionSetName": {
              "type": "string"
            },
            "diskSku": {
              "type": "string"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "enableMonitoring": {
              "type": "bool"
            },
            "environmentAbbreviation": {
              "type": "string"
            },
            "fslogix": {
              "type": "bool"
            },
            "fslogixStorageService": {
              "type": "string"
            },
            "hostPoolName": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "imageDefinitionResourceId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultNetworkInterfaceName": {
              "type": "string"
            },
            "keyVaultPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "keyVaultPrivateEndpointName": {
              "type": "string"
            },
            "locationVirtualMachines": {
              "type": "string"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "logAnalyticsWorkspaceRetention": {
              "type": "int"
            },
            "logAnalyticsWorkspaceSku": {
              "type": "string"
            },
            "networkInterfaceNamePrefix": {
              "type": "string"
            },
            "networkName": {
              "type": "string"
            },
            "organizationalUnitPath": {
              "type": "string"
            },
            "recoveryServices": {
              "type": "bool"
            },
            "recoveryServicesPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "recoveryServicesVaultName": {
              "type": "string"
            },
            "recoveryServicesVaultNetworkInterfaceName": {
              "type": "string"
            },
            "recoveryServicesVaultPrivateEndpointName": {
              "type": "string"
            },
            "resourceGroupControlPlane": {
              "type": "string"
            },
            "resourceGroupFeedWorkspace": {
              "type": "string"
            },
            "resourceGroupHosts": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "resourceGroupStorage": {
              "type": "string"
            },
            "roleDefinitions": {
              "type": "object"
            },
            "scalingTool": {
              "type": "bool"
            },
            "securityLogAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "serviceName": {
              "type": "string"
            },
            "sessionHostCount": {
              "type": "int"
            },
            "storageService": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timestamp": {
              "type": "string"
            },
            "timeZone": {
              "type": "string"
            },
            "userAssignedIdentityNamePrefix": {
              "type": "string"
            },
            "virtualMachineMonitoringAgent": {
              "type": "string"
            },
            "virtualMachineNamePrefix": {
              "type": "string"
            },
            "virtualMachinePassword": {
              "type": "securestring"
            },
            "virtualMachineUsername": {
              "type": "string"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "workspaceFeedName": {
              "type": "string"
            }
          },
          "variables": {
            "CpuCountMax": "[if(contains(parameters('hostPoolType'), 'Pooled'), 32, 128)]",
            "CpuCountMin": "[if(contains(parameters('hostPoolType'), 'Pooled'), 4, 2)]",
            "roleAssignments": "[union(variables('roleAssignmentsCommon'), variables('roleAssignmentStorage'))]",
            "roleAssignmentsCommon": [
              {
                "roleDefinitionId": "f353d9bd-d4a6-484e-a77a-8050b599b867",
                "resourceGroup": "[parameters('resourceGroupManagement')]",
                "subscription": "[subscription().subscriptionId]"
              },
              {
                "roleDefinitionId": "86240b0e-9422-4c43-887b-b61143f32ba8",
                "resourceGroup": "[parameters('resourceGroupControlPlane')]",
                "subscription": "[subscription().subscriptionId]"
              },
              {
                "roleDefinitionId": "2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                "resourceGroup": "[parameters('resourceGroupControlPlane')]",
                "subscription": "[subscription().subscriptionId]"
              },
              {
                "roleDefinitionId": "a959dbd1-f747-45e3-8ba6-dd80f235f97c",
                "resourceGroup": "[parameters('resourceGroupManagement')]",
                "subscription": "[subscription().subscriptionId]"
              },
              {
                "roleDefinitionId": "21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                "resourceGroup": "[parameters('resourceGroupFeedWorkspace')]",
                "subscription": "[subscription().subscriptionId]"
              },
              {
                "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                "resourceGroup": "[split(parameters('artifactsStorageAccountResourceId'), '/')[4]]",
                "subscription": "[split(parameters('artifactsStorageAccountResourceId'), '/')[2]]"
              }
            ],
            "roleAssignmentStorage": "[if(parameters('fslogix'), createArray(createObject('roleDefinitionId', '17d1049b-9a84-46fb-8f53-869881c3d3ab', 'resourceGroup', parameters('resourceGroupStorage'), 'subscription', subscription().subscriptionId)), createArray())]",
            "VirtualNetworkName": "[split(parameters('subnetResourceId'), '/')[8]]",
            "VirtualNetworkResourceGroupName": "[split(parameters('subnetResourceId'), '/')[4]]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(format('{0}-deployment', parameters('userAssignedIdentityNamePrefix')), parameters('roleDefinitions').Reader, subscription().id)]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitions').Reader)]",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('avdObjectId'), parameters('roleDefinitions').DesktopVirtualizationPowerOnContributor, subscription().id)]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitions').DesktopVirtualizationPowerOnContributor)]",
                "principalId": "[parameters('avdObjectId')]"
              }
            },
            {
              "condition": "[and(contains(parameters('hostPoolType'), 'Pooled'), parameters('recoveryServices'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Policy_{0}', parameters('timestamp'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupHosts')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "3970864007292025875"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/policyDefinitions",
                      "apiVersion": "2021-06-01",
                      "name": "DiskNetworkAccess",
                      "properties": {
                        "description": "[format('Disable network access to managed disks in the {0} resource group', parameters('resourceGroupName'))]",
                        "displayName": "[format('Disable Disk Access ({0})', parameters('resourceGroupName'))]",
                        "mode": "All",
                        "parameters": {},
                        "policyRule": {
                          "if": {
                            "field": "type",
                            "equals": "Microsoft.Compute/disks"
                          },
                          "then": {
                            "effect": "modify",
                            "details": {
                              "roleDefinitionIds": [
                                "/providers/Microsoft.Authorization/roleDefinitions/60fc6e62-5479-42d4-8bf4-67625fcc2840"
                              ],
                              "operations": [
                                {
                                  "operation": "addOrReplace",
                                  "field": "Microsoft.Compute/disks/networkAccessPolicy",
                                  "value": "DenyAll"
                                },
                                {
                                  "operation": "addOrReplace",
                                  "field": "Microsoft.Compute/disks/publicNetworkAccess",
                                  "value": "Disabled"
                                }
                              ]
                            }
                          }
                        },
                        "policyType": "Custom"
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "DiskNetworkAccess",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "policyDefinitionId": {
                            "value": "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess')]"
                          },
                          "policyDisplayName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess'), '2021-06-01').displayName]"
                          },
                          "policyName": {
                            "value": "[reference(subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess'), '2021-06-01').displayName]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "12137033153038649507"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "policyDefinitionId": {
                              "type": "string"
                            },
                            "policyDisplayName": {
                              "type": "string"
                            },
                            "policyName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/policyAssignments",
                              "apiVersion": "2022-06-01",
                              "name": "[parameters('policyName')]",
                              "location": "[parameters('location')]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "properties": {
                                "displayName": "[parameters('policyDisplayName')]",
                                "policyDefinitionId": "[parameters('policyDefinitionId')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Authorization/policyDefinitions', 'DiskNetworkAccess')]"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('UserAssignedIdentity_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "name": {
                    "value": "[replace(parameters('userAssignedIdentityNamePrefix'), parameters('serviceName'), 'deployment')]"
                  },
                  "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject('value', parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities']), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "6012909480462064287"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "clientId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    },
                    "principalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "roleAssignments_deployment",
                "count": "[length(range(0, length(variables('roleAssignments'))))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('RoleAssignment_{0}_{1}', range(0, length(variables('roleAssignments')))[copyIndex()], parameters('timestamp'))]",
              "subscriptionId": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].subscription]",
              "resourceGroup": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].resourceGroup]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "PrincipalId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]"
                  },
                  "PrincipalType": {
                    "value": "ServicePrincipal"
                  },
                  "RoleDefinitionId": {
                    "value": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]].roleDefinitionId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "1695210669952082012"
                    }
                  },
                  "parameters": {
                    "PrincipalId": {
                      "type": "string"
                    },
                    "PrincipalType": {
                      "type": "string"
                    },
                    "RoleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                        "principalId": "[parameters('PrincipalId')]",
                        "principalType": "[parameters('PrincipalType')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Artifacts_{0}', parameters('timestamp'))]",
              "subscriptionId": "[split(parameters('artifactsStorageAccountResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('artifactsStorageAccountResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "serviceName": {
                    "value": "[parameters('serviceName')]"
                  },
                  "storageAccountName": {
                    "value": "[split(parameters('artifactsStorageAccountResourceId'), '/')[8]]"
                  },
                  "subscriptionId": {
                    "value": "[subscription().subscriptionId]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "userAssignedIdentityNamePrefix": {
                    "value": "[parameters('userAssignedIdentityNamePrefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "14387451683496107501"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "serviceName": {
                      "type": "string"
                    },
                    "storageAccountName": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "userAssignedIdentityNamePrefix": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "name": "[replace(parameters('userAssignedIdentityNamePrefix'), parameters('serviceName'), 'artifacts')]",
                    "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
                      "name": "[guid(variables('name'), variables('roleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UAI_Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UAI_Artifacts_{0}', parameters('timestamp')))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('UAI_Artifacts_{0}', parameters('timestamp'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[variables('name')]"
                          },
                          "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject('value', parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities']), createObject('value', createObject()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6012909480462064287"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "clientId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "principalId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "userAssignedIdentityClientId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UAI_Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value]"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UAI_Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UAI_Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('CustomerManagedKeys_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "environment": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "keyVaultNetworkInterfaceName": {
                    "value": "[parameters('keyVaultNetworkInterfaceName')]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                  },
                  "keyVaultPrivateEndpointName": {
                    "value": "[parameters('keyVaultPrivateEndpointName')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "serviceName": {
                    "value": "[parameters('serviceName')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "userAssignedIdentityNamePrefix": {
                    "value": "[parameters('userAssignedIdentityNamePrefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "17712750199523131727"
                    }
                  },
                  "parameters": {
                    "diskEncryptionKeyExpirationInDays": {
                      "type": "int",
                      "defaultValue": 30
                    },
                    "environment": {
                      "type": "string"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "keyVaultNetworkInterfaceName": {
                      "type": "string"
                    },
                    "keyVaultPrivateEndpointName": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "serviceName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "userAssignedIdentityNamePrefix": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('keyVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.KeyVault/vaults'), parameters('tags')['Microsoft.KeyVault/vaults'], createObject())]",
                      "properties": {
                        "enabledForDeployment": false,
                        "enabledForDiskEncryption": true,
                        "enabledForTemplateDeployment": false,
                        "enablePurgeProtection": true,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": true,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "publicNetworkAccess": "Disabled",
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "softDeleteRetentionInDays": "[if(or(equals(parameters('environment'), 'dev'), equals(parameters('environment'), 'test')), 7, 90)]",
                        "tenantId": "[subscription().tenantId]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('keyVaultPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('keyVaultNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('keyVaultPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                              "groupIds": [
                                "vault"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultPrivateEndpointName'), parameters('keyVaultName'))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('keyVaultPrivateEndpointName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'DiskEncryptionKey')]",
                      "properties": {
                        "attributes": {
                          "enabled": true
                        },
                        "keySize": 4096,
                        "kty": "RSA",
                        "rotationPolicy": {
                          "attributes": {
                            "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                          },
                          "lifetimeActions": [
                            {
                              "action": {
                                "type": "Notify"
                              },
                              "trigger": {
                                "timeBeforeExpiry": "P10D"
                              }
                            },
                            {
                              "action": {
                                "type": "Rotate"
                              },
                              "trigger": {
                                "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageEncryptionKey')]",
                      "properties": {
                        "attributes": {
                          "enabled": true
                        },
                        "keySize": 4096,
                        "kty": "RSA",
                        "rotationPolicy": {
                          "attributes": {
                            "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                          },
                          "lifetimeActions": [
                            {
                              "action": {
                                "type": "Notify"
                              },
                              "trigger": {
                                "timeBeforeExpiry": "P10D"
                              }
                            },
                            {
                              "action": {
                                "type": "Rotate"
                              },
                              "trigger": {
                                "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('UAI_Encryption_{0}', parameters('timestamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "[replace(parameters('userAssignedIdentityNamePrefix'), parameters('serviceName'), 'encryption')]"
                          },
                          "tags": "[if(contains(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject('value', parameters('tags')['Microsoft.ManagedIdentity/userAssignedIdentities']), createObject('value', createObject()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6012909480462064287"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2018-11-30",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            }
                          ],
                          "outputs": {
                            "clientId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').clientId]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "principalId": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2018-11-30').principalId]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RoleAssignment_Encryption_{0}', parameters('timestamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrincipalId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]"
                          },
                          "PrincipalType": {
                            "value": "ServicePrincipal"
                          },
                          "RoleDefinitionId": {
                            "value": "e147488a-f6f5-4113-8e2d-b22465e65bf6"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "1695210669952082012"
                            }
                          },
                          "parameters": {
                            "PrincipalId": {
                              "type": "string"
                            },
                            "PrincipalType": {
                              "type": "string"
                            },
                            "RoleDefinitionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                                "principalId": "[parameters('PrincipalId')]",
                                "principalType": "[parameters('PrincipalType')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timestamp')))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyUriWithVersion": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
                    },
                    "keyVaultResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
                    },
                    "keyVaultUri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri]"
                    },
                    "storageKeyName": {
                      "type": "string",
                      "value": "StorageEncryptionKey"
                    },
                    "encryptionUserAssignedIdentityClientId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value]"
                    },
                    "encryptionUserAssignedIdentityPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]"
                    },
                    "encryptionUserAssignedIdentityResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('UAI_Encryption_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('DiskEncryptionSet_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diskEncryptionSetName": {
                    "value": "[parameters('diskEncryptionSetName')]"
                  },
                  "keyUrl": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.keyUriWithVersion.value]"
                  },
                  "keyVaultResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), createObject('value', parameters('tags')['Microsoft.Compute/diskEncryptionSets']), createObject('value', createObject()))]",
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "6129727575814112536"
                    }
                  },
                  "parameters": {
                    "diskEncryptionSetName": {
                      "type": "string"
                    },
                    "keyVaultResourceId": {
                      "type": "string"
                    },
                    "keyUrl": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/diskEncryptionSets",
                      "apiVersion": "2023-04-02",
                      "name": "[parameters('diskEncryptionSetName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "activeKey": {
                          "sourceVault": {
                            "id": "[parameters('keyVaultResourceId')]"
                          },
                          "keyUrl": "[parameters('keyUrl')]"
                        },
                        "encryptionType": "EncryptionAtRestWithPlatformAndCustomerKeys",
                        "rotationToLatestKeyVersionEnabled": true
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RoleAssignment_Encryption_{0}', parameters('timestamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrincipalId": {
                            "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')), '2023-04-02', 'full').identity.principalId]"
                          },
                          "PrincipalType": {
                            "value": "ServicePrincipal"
                          },
                          "RoleDefinitionId": {
                            "value": "e147488a-f6f5-4113-8e2d-b22465e65bf6"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "1695210669952082012"
                            }
                          },
                          "parameters": {
                            "PrincipalId": {
                              "type": "string"
                            },
                            "PrincipalType": {
                              "type": "string"
                            },
                            "RoleDefinitionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                                "principalId": "[parameters('PrincipalId')]",
                                "principalType": "[parameters('PrincipalType')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('ManagementVirtualMachine_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "azurePowerShellModuleMsiName": {
                    "value": "[parameters('azurePowerShellModuleMsiName')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value]"
                  },
                  "deploymentUserAssignedIdentityResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DiskEncryptionSet_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "diskNamePrefix": {
                    "value": "[parameters('diskNamePrefix')]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "networkInterfaceNamePrefix": {
                    "value": "[parameters('networkInterfaceNamePrefix')]"
                  },
                  "networkName": {
                    "value": "[parameters('networkName')]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "securityLogAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('securityLogAnalyticsWorkspaceResourceId')]"
                  },
                  "serviceName": {
                    "value": "[parameters('serviceName')]"
                  },
                  "subnet": {
                    "value": "[split(parameters('subnetResourceId'), '/')[10]]"
                  },
                  "tagsNetworkInterfaces": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject('value', parameters('tags')['Microsoft.Network/networkInterfaces']), createObject('value', createObject()))]",
                  "tagsVirtualMachines": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject('value', parameters('tags')['Microsoft.Compute/virtualMachines']), createObject('value', createObject()))]",
                  "virtualMachineMonitoringAgent": {
                    "value": "[parameters('virtualMachineMonitoringAgent')]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[parameters('virtualMachineNamePrefix')]"
                  },
                  "virtualMachinePassword": {
                    "value": "[parameters('virtualMachinePassword')]"
                  },
                  "virtualMachineUsername": {
                    "value": "[parameters('virtualMachineUsername')]"
                  },
                  "virtualNetwork": {
                    "value": "[variables('VirtualNetworkName')]"
                  },
                  "virtualNetworkResourceGroup": {
                    "value": "[variables('VirtualNetworkResourceGroupName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "11815660497434289508"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "azurePowerShellModuleMsiName": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "diskNamePrefix": {
                      "type": "string"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networkInterfaceNamePrefix": {
                      "type": "string"
                    },
                    "networkName": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "securityLogAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "serviceName": {
                      "type": "string"
                    },
                    "subnet": {
                      "type": "string"
                    },
                    "tagsNetworkInterfaces": {
                      "type": "object"
                    },
                    "tagsVirtualMachines": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                    },
                    "virtualNetwork": {
                      "type": "string"
                    },
                    "virtualNetworkResourceGroup": {
                      "type": "string"
                    },
                    "virtualMachineMonitoringAgent": {
                      "type": "string"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    },
                    "virtualMachinePassword": {
                      "type": "securestring"
                    },
                    "virtualMachineUsername": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "networkInterfaceName": "[replace(parameters('networkInterfaceNamePrefix'), parameters('serviceName'), 'mgt-vm')]",
                    "securitylogAnalyticsWorkspaceName": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[8], '')]",
                    "securityLogAnalyticsWorkspaceResourceGroupName": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[4], resourceGroup().name)]",
                    "securityLogAnalyticsWorkspaceSubscriptionId": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[2], subscription().subscriptionId)]",
                    "securityMonitoring": "[if(empty(parameters('securityLogAnalyticsWorkspaceResourceId')), false(), true())]",
                    "virtualMachineName": "[replace(replace(parameters('virtualMachineNamePrefix'), parameters('serviceName'), 'mgt'), parameters('networkName'), '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-05-01",
                      "name": "[variables('networkInterfaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetworkInterfaces')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork'), parameters('subnet'))]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": false,
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-11-01",
                      "name": "[variables('virtualMachineName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "Standard_B2s"
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2019-datacenter-core-g2",
                            "version": "latest"
                          },
                          "osDisk": {
                            "deleteOption": "Delete",
                            "osType": "Windows",
                            "createOption": "FromImage",
                            "caching": "None",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "[parameters('diskSku')]"
                            },
                            "name": "[replace(parameters('diskNamePrefix'), parameters('serviceName'), 'mgt-vm')]"
                          },
                          "dataDisks": []
                        },
                        "osProfile": {
                          "computerName": "[variables('virtualMachineName')]",
                          "adminUsername": "[parameters('virtualMachineUsername')]",
                          "adminPassword": "[parameters('virtualMachinePassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "securityProfile": {
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "TrustedLaunch",
                          "encryptionAtHost": true
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "licenseType": "Windows_Server"
                      },
                      "identity": {
                        "type": "SystemAssigned, UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('deploymentUserAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', variables('virtualMachineName'), 'IaaSAntimalware')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": false,
                        "settings": {
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "7",
                            "time": "120",
                            "scanType": "Quick"
                          },
                          "Exclusions": {}
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', variables('virtualMachineName'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]"
                      ]
                    },
                    {
                      "condition": "[and(variables('securityMonitoring'), equals(parameters('virtualMachineMonitoringAgent'), 'LogAnalyticsAgent'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', variables('virtualMachineName'), 'MicrosoftmonitoringAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.monitoring",
                        "type": "MicrosoftmonitoringAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[if(variables('securityMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('securityLogAnalyticsWorkspaceSubscriptionId'), variables('securityLogAnalyticsWorkspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', variables('securitylogAnalyticsWorkspaceName')), '2022-10-01').customerId, null())]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[if(variables('securityMonitoring'), listKeys(parameters('securityLogAnalyticsWorkspaceResourceId'), '2021-06-01').primarySharedKey, null())]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('virtualMachineName'), 'IaaSAntimalware')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2019-07-01",
                      "name": "[format('{0}/{1}', variables('virtualMachineName'), 'JsonADDomainExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "forceUpdateTag": "[parameters('timestamp')]",
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('domainName')]",
                          "Options": "3",
                          "OUPath": "[parameters('organizationalUnitPath')]",
                          "Restart": "true",
                          "User": "[parameters('domainJoinUserPrincipalName')]"
                        },
                        "protectedSettings": {
                          "Password": "[parameters('domainJoinPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('CSE_InstallAzurePowerShellAzModule_{0}', parameters('timestamp')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('CSE_InstallAzurePowerShellAzModule_{0}', parameters('timestamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}{1}', parameters('artifactsUri'), parameters('azurePowerShellModuleMsiName'))]",
                              "[format('{0}Install-AzurePowerShellAzModule.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "parameters": {
                            "value": "[format('-Installer {0}', parameters('azurePowerShellModuleMsiName'))]"
                          },
                          "scriptFileName": {
                            "value": "Install-AzurePowerShellAzModule.ps1"
                          },
                          "tags": {
                            "value": "[parameters('tagsVirtualMachines')]"
                          },
                          "virtualMachineName": {
                            "value": "[variables('virtualMachineName')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6814716050578615031"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('virtualMachineName'), 'MicrosoftmonitoringAgent')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "Name": {
                      "type": "string",
                      "value": "[variables('virtualMachineName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DiskEncryptionSet_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Validations_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "fileUris": {
                    "value": [
                      "[format('{0}Get-Validations.ps1', parameters('artifactsUri'))]"
                    ]
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "parameters": {
                    "value": "[format('-ActiveDirectorySolution {0} -CpuCountMax {1} -CpuCountMin {2} -DomainName {3} -Environment {4} -ImageDefinitionResourceId {5} -Location {6} -SessionHostCount {7} -StorageService {8} -SubscriptionId {9} -TenantId {10} -UserAssignedIdentityClientId {11} -VirtualMachineSize {12} -VirtualNetworkName {13} -VirtualNetworkResourceGroupName {14} -WorkspaceFeedName {15} -WorkspaceResourceGroupName {16}', parameters('activeDirectorySolution'), variables('CpuCountMax'), variables('CpuCountMin'), if(empty(parameters('domainName')), 'NotApplicable', parameters('domainName')), environment().name, if(empty(parameters('imageDefinitionResourceId')), 'NotApplicable', parameters('imageDefinitionResourceId')), parameters('locationVirtualMachines'), parameters('sessionHostCount'), parameters('storageService'), subscription().subscriptionId, tenant().tenantId, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value, parameters('virtualMachineSize'), variables('VirtualNetworkName'), variables('VirtualNetworkResourceGroupName'), parameters('workspaceFeedName'), parameters('resourceGroupFeedWorkspace'))]"
                  },
                  "scriptFileName": {
                    "value": "Get-Validations.ps1"
                  },
                  "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject('value', parameters('tags')['Microsoft.Compute/virtualMachines']), createObject('value', createObject()))]",
                  "userAssignedIdentityClientId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value]"
                  },
                  "virtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('ManagementVirtualMachine_{0}', parameters('timestamp'))), '2022-09-01').outputs.Name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "6814716050578615031"
                    }
                  },
                  "parameters": {
                    "fileUris": {
                      "type": "array"
                    },
                    "location": {
                      "type": "string"
                    },
                    "parameters": {
                      "type": "securestring"
                    },
                    "scriptFileName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "timestamp": "[parameters('timestamp')]"
                        },
                        "protectedSettings": {
                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                          "fileUris": "[parameters('fileUris')]",
                          "managedIdentity": {
                            "clientId": "[parameters('userAssignedIdentityClientId')]"
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "value": {
                      "type": "object",
                      "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('ManagementVirtualMachine_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "condition": "[parameters('enableMonitoring')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('Monitoring_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dataCollectionRuleName": {
                    "value": "[parameters('dataCollectionRuleName')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('logAnalyticsWorkspaceName')]"
                  },
                  "logAnalyticsWorkspaceRetention": {
                    "value": "[parameters('logAnalyticsWorkspaceRetention')]"
                  },
                  "logAnalyticsWorkspaceSku": {
                    "value": "[parameters('logAnalyticsWorkspaceSku')]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualMachineMonitoringAgent": {
                    "value": "[parameters('virtualMachineMonitoringAgent')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "5352022586362038120"
                    }
                  },
                  "parameters": {
                    "dataCollectionRuleName": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceRetention": {
                      "type": "int"
                    },
                    "logAnalyticsWorkspaceSku": {
                      "type": "string"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineMonitoringAgent": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "WindowsEvents": [
                      {
                        "name": "Microsoft-FSLogix-Apps/Operational",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          },
                          {
                            "eventType": "Information"
                          }
                        ]
                      },
                      {
                        "name": "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          },
                          {
                            "eventType": "Information"
                          }
                        ]
                      },
                      {
                        "name": "System",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          }
                        ]
                      },
                      {
                        "name": "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Admin",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          },
                          {
                            "eventType": "Information"
                          }
                        ]
                      },
                      {
                        "name": "Microsoft-FSLogix-Apps/Admin",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          },
                          {
                            "eventType": "Information"
                          }
                        ]
                      },
                      {
                        "name": "Application",
                        "types": [
                          {
                            "eventType": "Error"
                          },
                          {
                            "eventType": "Warning"
                          }
                        ]
                      }
                    ],
                    "WindowsPerformanceCounters": [
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Disk Transfers/sec"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Current Disk Queue Length"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Disk Reads/sec"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "% Free Space"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk sec/Read"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Disk Writes/sec"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk sec/Write"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Free Megabytes"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "C:",
                        "intervalSeconds": 60,
                        "counterName": "% Free Space"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "C:",
                        "intervalSeconds": 30,
                        "counterName": "Avg. Disk Queue Length"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "C:",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk sec/Transfer"
                      },
                      {
                        "objectName": "LogicalDisk",
                        "instanceName": "C:",
                        "intervalSeconds": 30,
                        "counterName": "Current Disk Queue Length"
                      },
                      {
                        "objectName": "Memory",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "% Committed Bytes In Use"
                      },
                      {
                        "objectName": "Memory",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Available MBytes"
                      },
                      {
                        "objectName": "Memory",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Available Mbytes"
                      },
                      {
                        "objectName": "Memory",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Page Faults/sec"
                      },
                      {
                        "objectName": "Memory",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Pages/sec"
                      },
                      {
                        "objectName": "Network Adapter",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Bytes Sent/sec"
                      },
                      {
                        "objectName": "Network Adapter",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Bytes Received/sec"
                      },
                      {
                        "objectName": "Network Interface",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Bytes Total/sec"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk Bytes/Transfer"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk Bytes/Read"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk sec/Write"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk sec/Read"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk Bytes/Write"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Avg. Disk sec/Transfer"
                      },
                      {
                        "objectName": "PhysicalDisk",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Avg. Disk Queue Length"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "IO Write Operations/sec"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "IO Read Operations/sec"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Thread Count"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "% User Time"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Working Set"
                      },
                      {
                        "objectName": "Process",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "% Processor Time"
                      },
                      {
                        "objectName": "Processor",
                        "instanceName": "_Total",
                        "intervalSeconds": 60,
                        "counterName": "% Processor Time"
                      },
                      {
                        "objectName": "Processor Information",
                        "instanceName": "_Total",
                        "intervalSeconds": 30,
                        "counterName": "% Processor Time"
                      },
                      {
                        "objectName": "RemoteFX Graphics",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Frames Skipped/Second - Insufficient Server Resources"
                      },
                      {
                        "objectName": "RemoteFX Graphics",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Average Encoding Time"
                      },
                      {
                        "objectName": "RemoteFX Graphics",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Frames Skipped/Second - Insufficient Client Resources"
                      },
                      {
                        "objectName": "RemoteFX Graphics",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Frames Skipped/Second - Insufficient Network Resources"
                      },
                      {
                        "objectName": "RemoteFX Network",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Current UDP Bandwidth"
                      },
                      {
                        "objectName": "RemoteFX Network",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Current TCP Bandwidth"
                      },
                      {
                        "objectName": "RemoteFX Network",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Current TCP RTT"
                      },
                      {
                        "objectName": "RemoteFX Network",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Current UDP RTT"
                      },
                      {
                        "objectName": "System",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Processor Queue Length"
                      },
                      {
                        "objectName": "Terminal Services",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Inactive Sessions"
                      },
                      {
                        "objectName": "Terminal Services",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Total Sessions"
                      },
                      {
                        "objectName": "Terminal Services",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "Active Sessions"
                      },
                      {
                        "objectName": "Terminal Services Session",
                        "instanceName": "*",
                        "intervalSeconds": 60,
                        "counterName": "% Processor Time"
                      },
                      {
                        "objectName": "User Input Delay per Process",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Max Input Delay"
                      },
                      {
                        "objectName": "User Input Delay per Session",
                        "instanceName": "*",
                        "intervalSeconds": 30,
                        "counterName": "Max Input Delay"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('tags')['Microsoft.OperationalInsights/workspaces'], createObject()))]",
                      "properties": {
                        "sku": {
                          "name": "[parameters('logAnalyticsWorkspaceSku')]"
                        },
                        "retentionInDays": "[parameters('logAnalyticsWorkspaceRetention')]",
                        "workspaceCapping": {
                          "dailyQuotaGb": -1
                        },
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled"
                      }
                    },
                    {
                      "copy": {
                        "name": "windowsEvents",
                        "count": "[length(variables('WindowsEvents'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[equals(parameters('virtualMachineMonitoringAgent'), 'LogAnalyticsAgent')]",
                      "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                      "apiVersion": "2020-08-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), format('WindowsEvent{0}', copyIndex()))]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('tags')['Microsoft.OperationalInsights/workspaces'], createObject()))]",
                      "kind": "WindowsEvent",
                      "properties": {
                        "eventLogName": "[variables('WindowsEvents')[copyIndex()].name]",
                        "eventTypes": "[variables('WindowsEvents')[copyIndex()].types]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "windowsPerformanceCounters",
                        "count": "[length(variables('WindowsPerformanceCounters'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[equals(parameters('virtualMachineMonitoringAgent'), 'LogAnalyticsAgent')]",
                      "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                      "apiVersion": "2020-08-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), format('WindowsPerformanceCounter{0}', copyIndex()))]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.OperationalInsights/workspaces'), parameters('tags')['Microsoft.OperationalInsights/workspaces'], createObject()))]",
                      "kind": "WindowsPerformanceCounter",
                      "properties": {
                        "objectName": "[variables('WindowsPerformanceCounters')[copyIndex()].objectName]",
                        "instanceName": "[variables('WindowsPerformanceCounters')[copyIndex()].instanceName]",
                        "intervalSeconds": "[variables('WindowsPerformanceCounters')[copyIndex()].intervalSeconds]",
                        "counterName": "[variables('WindowsPerformanceCounters')[copyIndex()].counterName]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                        "windowsEvents"
                      ]
                    },
                    {
                      "condition": "[equals(parameters('virtualMachineMonitoringAgent'), 'AzureMonitorAgent')]",
                      "type": "Microsoft.Insights/dataCollectionRules",
                      "apiVersion": "2022-06-01",
                      "name": "[parameters('dataCollectionRuleName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Insights/dataCollectionRules'), parameters('tags')['Microsoft.Insights/dataCollectionRules'], createObject()))]",
                      "kind": "Windows",
                      "properties": {
                        "dataSources": {
                          "performanceCounters": [
                            {
                              "streams": [
                                "Microsoft-Perf"
                              ],
                              "samplingFrequencyInSeconds": 30,
                              "counterSpecifiers": [
                                "\\LogicalDisk(C:)\\Avg. Disk Queue Length",
                                "\\LogicalDisk(C:)\\Current Disk Queue Length",
                                "\\Memory\\Available Mbytes",
                                "\\Memory\\Page Faults/sec",
                                "\\Memory\\Pages/sec",
                                "\\Memory\\% Committed Bytes In Use",
                                "\\PhysicalDisk(*)\\Avg. Disk Queue Length",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Read",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Transfer",
                                "\\PhysicalDisk(*)\\Avg. Disk sec/Write",
                                "\\Processor Information(_Total)\\% Processor Time",
                                "\\User Input Delay per Process(*)\\Max Input Delay",
                                "\\User Input Delay per Session(*)\\Max Input Delay",
                                "\\RemoteFX Network(*)\\Current TCP RTT",
                                "\\RemoteFX Network(*)\\Current UDP Bandwidth"
                              ],
                              "name": "perfCounterDataSource10"
                            },
                            {
                              "streams": [
                                "Microsoft-Perf"
                              ],
                              "samplingFrequencyInSeconds": 60,
                              "counterSpecifiers": [
                                "\\LogicalDisk(C:)\\% Free Space",
                                "\\LogicalDisk(C:)\\Avg. Disk sec/Transfer",
                                "\\Terminal Services(*)\\Active Sessions",
                                "\\Terminal Services(*)\\Inactive Sessions",
                                "\\Terminal Services(*)\\Total Sessions"
                              ],
                              "name": "perfCounterDataSource30"
                            }
                          ],
                          "windowsEventLogs": [
                            {
                              "streams": [
                                "Microsoft-Event"
                              ],
                              "xPathQueries": [
                                "Microsoft-Windows-TerminalServices-RemoteConnectionManager/Admin!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "System!*",
                                "Microsoft-FSLogix-Apps/Operational!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]",
                                "Application!*[System[(Level=2 or Level=3)]]",
                                "Microsoft-FSLogix-Apps/Admin!*[System[(Level=2 or Level=3 or Level=4 or Level=0)]]"
                              ],
                              "name": "eventLogsDataSource"
                            }
                          ]
                        },
                        "destinations": {
                          "logAnalytics": [
                            {
                              "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                              "name": "la-workspace"
                            }
                          ]
                        },
                        "dataFlows": [
                          {
                            "streams": [
                              "Microsoft-Perf",
                              "Microsoft-Event"
                            ],
                            "destinations": [
                              "la-workspace"
                            ]
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                    },
                    "dataCollectionRuleResourceId": {
                      "type": "string",
                      "value": "[if(equals(parameters('virtualMachineMonitoringAgent'), 'AzureMonitorAgent'), resourceId('Microsoft.Insights/dataCollectionRules', parameters('dataCollectionRuleName')), '')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[or(parameters('scalingTool'), equals(parameters('fslogixStorageService'), 'AzureFiles Premium'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('AutomationAccount_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "automationAccountDiagnosticSettingName": {
                    "value": "[parameters('automationAccountDiagnosticSettingName')]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('automationAccountName')]"
                  },
                  "automationAccountNetworkInterfaceName": {
                    "value": "[parameters('automationAccountNetworkInterfaceName')]"
                  },
                  "automationAccountPrivateDnsZoneResourceId": {
                    "value": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
                  },
                  "automationAccountPrivateEndpointName": {
                    "value": "[parameters('automationAccountPrivateEndpointName')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceResourceId": "[if(parameters('enableMonitoring'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Monitoring_{0}', parameters('timestamp'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value), createObject('value', ''))]",
                  "monitoring": {
                    "value": "[parameters('enableMonitoring')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": "[if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), createObject('value', parameters('tags')['Microsoft.Automation/automationAccounts']), createObject('value', createObject()))]",
                  "virtualMachineName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('ManagementVirtualMachine_{0}', parameters('timestamp'))), '2022-09-01').outputs.Name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "5859793233717836863"
                    }
                  },
                  "parameters": {
                    "automationAccountDiagnosticSettingName": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "automationAccountNetworkInterfaceName": {
                      "type": "string"
                    },
                    "automationAccountPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "automationAccountPrivateEndpointName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "monitoring": {
                      "type": "bool"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Automation/automationAccounts",
                      "apiVersion": "2021-06-22",
                      "name": "[parameters('automationAccountName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject())]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "sku": {
                          "name": "Free"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('automationAccountPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('automationAccountNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('automationAccountPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                              "groupIds": [
                                "DSCAndHybridWorker"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('automationAccountPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(split(parameters('automationAccountPrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('automationAccountPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('automationAccountPrivateEndpointName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), 'Scaling Tool')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups/hybridRunbookWorkers",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}/{2}', parameters('automationAccountName'), 'Scaling Tool', guid(resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Scaling Tool')))]",
                      "properties": {
                        "vmResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups', parameters('automationAccountName'), 'Scaling Tool')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'HybridWorkerForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject())]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Automation.HybridWorker",
                        "type": "HybridWorkerForWindows",
                        "typeHandlerVersion": "1.1",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "AutomationAccountURL": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2021-06-22').automationHybridServiceUrl]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('monitoring')]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('automationAccountName'))]",
                      "name": "[parameters('automationAccountDiagnosticSettingName')]",
                      "properties": {
                        "logs": [
                          {
                            "category": "DscNodeStatus",
                            "enabled": true
                          },
                          {
                            "category": "JobLogs",
                            "enabled": true
                          },
                          {
                            "category": "JobStreams",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "hybridRunbookWorkerGroupName": {
                      "type": "string",
                      "value": "Scaling Tool"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Monitoring_{0}', parameters('timestamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('ManagementVirtualMachine_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "condition": "[and(parameters('recoveryServices'), or(and(and(contains(parameters('activeDirectorySolution'), 'DomainServices'), contains(parameters('hostPoolType'), 'Pooled')), contains(parameters('fslogixStorageService'), 'AzureFiles')), contains(parameters('hostPoolType'), 'Personal')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('RecoveryServicesVault_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureBlobsPrivateDnsZoneResourceId": {
                    "value": "[parameters('azureBlobsPrivateDnsZoneResourceId')]"
                  },
                  "fslogix": {
                    "value": "[parameters('fslogix')]"
                  },
                  "location": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "azureQueueStoragePrivateDnsZoneResourceId": {
                    "value": "[parameters('azureQueueStoragePrivateDnsZoneResourceId')]"
                  },
                  "recoveryServicesPrivateDnsZoneResourceId": {
                    "value": "[parameters('recoveryServicesPrivateDnsZoneResourceId')]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[parameters('recoveryServicesVaultName')]"
                  },
                  "recoveryServicesVaultNetworkInterfaceName": {
                    "value": "[parameters('recoveryServicesVaultNetworkInterfaceName')]"
                  },
                  "recoveryServicesVaultPrivateEndpointName": {
                    "value": "[parameters('recoveryServicesVaultPrivateEndpointName')]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "16940919335346319475"
                    }
                  },
                  "parameters": {
                    "azureBlobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "azureQueueStoragePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "fslogix": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "recoveryServicesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "recoveryServicesVaultNetworkInterfaceName": {
                      "type": "string"
                    },
                    "recoveryServicesVaultPrivateEndpointName": {
                      "type": "string"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeZone": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.RecoveryServices/vaults",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('recoveryServicesVaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), parameters('tags')['Microsoft.RecoveryServices/vaults'], createObject())]",
                      "sku": {
                        "name": "RS0",
                        "tier": "Standard"
                      },
                      "properties": {}
                    },
                    {
                      "condition": "[and(parameters('fslogix'), equals(parameters('storageService'), 'AzureFiles'))]",
                      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('recoveryServicesVaultName'), 'AvdPolicyStorage')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), parameters('tags')['Microsoft.RecoveryServices/vaults'], createObject())]",
                      "properties": {
                        "backupManagementType": "AzureStorage",
                        "schedulePolicy": {
                          "scheduleRunFrequency": "Daily",
                          "scheduleRunTimes": [
                            "23:00"
                          ],
                          "schedulePolicyType": "SimpleSchedulePolicy"
                        },
                        "retentionPolicy": {
                          "retentionPolicyType": "LongTermRetentionPolicy",
                          "dailySchedule": {
                            "retentionTimes": [
                              "23:00"
                            ],
                            "retentionDuration": {
                              "count": 30,
                              "durationType": "Days"
                            }
                          }
                        },
                        "timeZone": "[parameters('timeZone')]",
                        "workLoadType": "AzureFileShare"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('fslogix'))]",
                      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
                      "apiVersion": "2022-03-01",
                      "name": "[format('{0}/{1}', parameters('recoveryServicesVaultName'), 'AvdPolicyVm')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.RecoveryServices/vaults'), parameters('tags')['Microsoft.RecoveryServices/vaults'], createObject())]",
                      "properties": {
                        "backupManagementType": "AzureIaasVM",
                        "instantRpRetentionRangeInDays": 2,
                        "policyType": "V2",
                        "retentionPolicy": {
                          "retentionPolicyType": "LongTermRetentionPolicy",
                          "dailySchedule": {
                            "retentionTimes": [
                              "23:00"
                            ],
                            "retentionDuration": {
                              "count": 30,
                              "durationType": "Days"
                            }
                          }
                        },
                        "schedulePolicy": {
                          "schedulePolicyType": "SimpleSchedulePolicyV2",
                          "scheduleRunFrequency": "Daily",
                          "dailySchedule": {
                            "scheduleRunTimes": [
                              "23:00"
                            ]
                          }
                        },
                        "timeZone": "[parameters('timeZone')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('recoveryServicesVaultPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject())]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('recoveryServicesVaultNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('recoveryServicesVaultPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]",
                              "groupIds": [
                                "AzureBackup"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', parameters('recoveryServicesVaultPrivateEndpointName'), parameters('recoveryServicesVaultName'))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(parameters('recoveryServicesPrivateDnsZoneResourceId'), '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('recoveryServicesPrivateDnsZoneResourceId')]"
                            }
                          },
                          {
                            "name": "[replace(parameters('azureQueueStoragePrivateDnsZoneResourceId'), '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('azureQueueStoragePrivateDnsZoneResourceId')]"
                            }
                          },
                          {
                            "name": "[replace(parameters('azureBlobsPrivateDnsZoneResourceId'), '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('azureBlobsPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('recoveryServicesVaultPrivateEndpointName'))]",
                        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryServicesVaultName'))]"
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "artifactsUserAssignedIdentityClientId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('artifactsStorageAccountResourceId'), '/')[2], split(parameters('artifactsStorageAccountResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.userAssignedIdentityClientId.value]"
            },
            "artifactsUserAssignedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('artifactsStorageAccountResourceId'), '/')[2], split(parameters('artifactsStorageAccountResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.userAssignedIdentityPrincipalId.value]"
            },
            "artifactsUserAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('artifactsStorageAccountResourceId'), '/')[2], split(parameters('artifactsStorageAccountResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('Artifacts_{0}', parameters('timestamp'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
            },
            "dataCollectionRuleResourceId": {
              "type": "string",
              "value": "[if(parameters('enableMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Monitoring_{0}', parameters('timestamp'))), '2022-09-01').outputs.dataCollectionRuleResourceId.value, '')]"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.clientId.value]"
            },
            "deploymentUserAssignedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.principalId.value]"
            },
            "deploymentUserAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('UserAssignedIdentity_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
            },
            "diskEncryptionSetResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('DiskEncryptionSet_{0}', parameters('timestamp'))), '2022-09-01').outputs.resourceId.value]"
            },
            "encryptionUserAssignedIdentityClientId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.encryptionUserAssignedIdentityClientId.value]"
            },
            "encryptionUserAssignedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.encryptionUserAssignedIdentityPrincipalId.value]"
            },
            "encryptionUserAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.encryptionUserAssignedIdentityResourceId.value]"
            },
            "existingFeedWorkspace": {
              "type": "bool",
              "value": "[if(equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.existingWorkspace, 'true'), true(), false())]"
            },
            "hybridRunbookWorkerGroupName": {
              "type": "string",
              "value": "[if(or(parameters('scalingTool'), equals(parameters('fslogixStorageService'), 'AzureFiles Premium')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('AutomationAccount_{0}', parameters('timestamp'))), '2022-09-01').outputs.hybridRunbookWorkerGroupName.value, '')]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.keyVaultUri.value]"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[if(parameters('enableMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Monitoring_{0}', parameters('timestamp'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value, '')]"
            },
            "storageEncryptionKeyName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CustomerManagedKeys_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageKeyName.value]"
            },
            "validateAcceleratedNetworking": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.acceleratedNetworking]"
            },
            "validateANFDnsServers": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.anfDnsServers]"
            },
            "validateANFfActiveDirectory": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.anfActiveDirectory]"
            },
            "validateANFSubnetId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.anfSubnetId]"
            },
            "validateAvailabilityZones": {
              "type": "array",
              "value": "[if(equals(parameters('availability'), 'AvailabilityZones'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('Validations_{0}', parameters('timestamp'))), '2022-09-01').outputs.value.value.availabilityZones, createArray('1'))]"
            },
            "virtualMachineName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('ManagementVirtualMachine_{0}', parameters('timestamp'))), '2022-09-01').outputs.Name.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp')))]",
        "rgs"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('Hub_{0}', parameters('timestamp'))]",
      "subscriptionId": "[split(parameters('hubSubnetResourceId'), '/')[2]]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "existingWorkspace": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.existingFeedWorkspace.value]"
          },
          "globalWorkspacePrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.avdGlobalPrivateDnsZoneName)]"
          },
          "hubSubnetResourceId": {
            "value": "[parameters('hubSubnetResourceId')]"
          },
          "resourceGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupGlobalWorkspace]"
          },
          "timestamp": {
            "value": "[parameters('timestamp')]"
          },
          "workspaceGlobalName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceGlobalName]"
          },
          "workspaceGlobalNetworkInterfaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceGlobalNetworkInterfaceName]"
          },
          "workspaceGlobalPrivateEndpointName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceGlobalPrivateEndpointName]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "11138211346746681068"
            }
          },
          "parameters": {
            "existingWorkspace": {
              "type": "bool"
            },
            "globalWorkspacePrivateDnsZoneResourceId": {
              "type": "string"
            },
            "hubSubnetResourceId": {
              "type": "string"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "timestamp": {
              "type": "string"
            },
            "workspaceGlobalName": {
              "type": "string"
            },
            "workspaceGlobalNetworkInterfaceName": {
              "type": "string"
            },
            "workspaceGlobalPrivateEndpointName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[not(parameters('existingWorkspace'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('SharedServices_VirtualNetwork_{0}', parameters('timestamp'))]",
              "resourceGroup": "[split(parameters('hubSubnetResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[split(parameters('hubSubnetResourceId'), '/')[8]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "3527752056835491901"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2023-06-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[not(parameters('existingWorkspace'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('ResourceGroup_WorkspaceGlobal_{0}', parameters('timestamp'))]",
              "subscriptionId": "[split(parameters('hubSubnetResourceId'), '/')[2]]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": "[if(not(parameters('existingWorkspace')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hubSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('SharedServices_VirtualNetwork_{0}', parameters('timestamp'))), '2022-09-01').outputs.location.value), createObject('value', ''))]",
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "tags": {
                    "value": {}
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "3692510243196711336"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('resourceGroupName')]",
                      "location": "[parameters('location')]",
                      "tags": "[if(contains(parameters('tags'), 'Microsoft.Resources/resourceGroups'), parameters('tags')['Microsoft.Resources/resourceGroups'], createObject())]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hubSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('SharedServices_VirtualNetwork_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "condition": "[not(parameters('existingWorkspace'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('WorkspaceGlobal_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "globalWorkspacePrivateDnsZoneResourceId": {
                    "value": "[parameters('globalWorkspacePrivateDnsZoneResourceId')]"
                  },
                  "location": "[if(not(parameters('existingWorkspace')), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hubSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('SharedServices_VirtualNetwork_{0}', parameters('timestamp'))), '2022-09-01').outputs.location.value), createObject('value', ''))]",
                  "subnetResourceId": {
                    "value": "[parameters('hubSubnetResourceId')]"
                  },
                  "workspaceGlobalName": {
                    "value": "[parameters('workspaceGlobalName')]"
                  },
                  "workspaceGlobalNetworkInterfaceName": {
                    "value": "[parameters('workspaceGlobalNetworkInterfaceName')]"
                  },
                  "workspaceGlobalPrivateEndpointName": {
                    "value": "[parameters('workspaceGlobalPrivateEndpointName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "3075430875299122579"
                    }
                  },
                  "parameters": {
                    "globalWorkspacePrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "workspaceGlobalName": {
                      "type": "string"
                    },
                    "workspaceGlobalNetworkInterfaceName": {
                      "type": "string"
                    },
                    "workspaceGlobalPrivateEndpointName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/workspaces",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('workspaceGlobalName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "properties": {}
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('workspaceGlobalPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": {},
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('workspaceGlobalNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('workspaceGlobalPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceGlobalName'))]",
                              "groupIds": [
                                "global"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceGlobalName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('workspaceGlobalPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(split(parameters('globalWorkspacePrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('globalWorkspacePrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('workspaceGlobalPrivateEndpointName'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(split(parameters('hubSubnetResourceId'), '/')[2], 'Microsoft.Resources/deployments', format('ResourceGroup_WorkspaceGlobal_{0}', parameters('timestamp')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('hubSubnetResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('SharedServices_VirtualNetwork_{0}', parameters('timestamp')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ControlPlane_{0}', parameters('timestamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "artifactsUri": {
            "value": "[variables('artifactsUri')]"
          },
          "avdPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.avdPrivateDnsZoneName)]"
          },
          "customRdpProperty": {
            "value": "[parameters('customRdpProperty')]"
          },
          "deploymentUserAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "desktopApplicationGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.desktopApplicationGroupName]"
          },
          "desktopFriendlyName": "[if(empty(parameters('desktopFriendlyName')), createObject('value', string(parameters('stampIndex'))), createObject('value', parameters('desktopFriendlyName')))]",
          "existingFeedWorkspace": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.existingFeedWorkspace.value]"
          },
          "hostPoolDiagnosticSettingName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolDiagnosticSettingName]"
          },
          "hostPoolName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolName]"
          },
          "hostPoolNetworkInterfaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolNetworkInterfaceName]"
          },
          "hostPoolPrivateEndpointName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolPrivateEndpointName]"
          },
          "hostPoolPublicNetworkAccess": {
            "value": "[parameters('hostPoolPublicNetworkAccess')]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "locationControlPlane": {
            "value": "[parameters('locationControlPlane')]"
          },
          "locationVirtualMachines": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "logAnalyticsWorkspaceResourceId": "[if(parameters('monitoring'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value), createObject('value', ''))]",
          "managementVirtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.virtualMachineName.value]"
          },
          "maxSessionLimit": {
            "value": "[mul(parameters('usersPerCore'), parameters('virtualMachineVirtualCpuCount'))]"
          },
          "monitoring": {
            "value": "[parameters('monitoring')]"
          },
          "resourceGroupControlPlane": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupControlPlane]"
          },
          "resourceGroupFeedWorkspace": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupFeedWorkspace]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
          },
          "roleDefinitions": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.roleDefinitions.value]"
          },
          "securityPrincipalObjectIds": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timestamp": {
            "value": "[parameters('timestamp')]"
          },
          "validationEnvironment": {
            "value": "[parameters('validationEnvironment')]"
          },
          "vmTemplate": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.vmTemplate.value]"
          },
          "workspaceFeedDiagnoticSettingName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFeedDiagnosticSettingName]"
          },
          "workspaceFeedName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFeedName]"
          },
          "workspaceFeedNetworkInterfaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFeedNetworkInterfaceName]"
          },
          "workspaceFeedPrivateEndpointName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFeedPrivateEndpointName]"
          },
          "workspaceFriendlyName": "[if(empty(parameters('workspaceFriendlyName')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.workspaceFriendlyName), createObject('value', format('{0} ({1})', parameters('workspaceFriendlyName'), parameters('locationControlPlane'))))]",
          "workspacePublicNetworkAccess": {
            "value": "[parameters('workspacePublicNetworkAccess')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "8562591390584308199"
            }
          },
          "parameters": {
            "activeDirectorySolution": {
              "type": "string"
            },
            "artifactsUri": {
              "type": "string"
            },
            "avdPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "customRdpProperty": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "desktopApplicationGroupName": {
              "type": "string"
            },
            "desktopFriendlyName": {
              "type": "string"
            },
            "existingFeedWorkspace": {
              "type": "bool"
            },
            "hostPoolDiagnosticSettingName": {
              "type": "string"
            },
            "hostPoolName": {
              "type": "string"
            },
            "hostPoolNetworkInterfaceName": {
              "type": "string"
            },
            "hostPoolPrivateEndpointName": {
              "type": "string"
            },
            "hostPoolPublicNetworkAccess": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "locationControlPlane": {
              "type": "string"
            },
            "locationVirtualMachines": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "maxSessionLimit": {
              "type": "int"
            },
            "monitoring": {
              "type": "bool"
            },
            "resourceGroupControlPlane": {
              "type": "string"
            },
            "resourceGroupFeedWorkspace": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "roleDefinitions": {
              "type": "object"
            },
            "securityPrincipalObjectIds": {
              "type": "array"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timestamp": {
              "type": "string"
            },
            "validationEnvironment": {
              "type": "bool"
            },
            "vmTemplate": {
              "type": "string"
            },
            "workspaceFeedDiagnoticSettingName": {
              "type": "string"
            },
            "workspaceFeedName": {
              "type": "string"
            },
            "workspaceFeedNetworkInterfaceName": {
              "type": "string"
            },
            "workspaceFeedPrivateEndpointName": {
              "type": "string"
            },
            "workspaceFriendlyName": {
              "type": "string"
            },
            "workspacePublicNetworkAccess": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('HostPool_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupControlPlane')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "avdPrivateDnsZoneResourceId": {
                    "value": "[parameters('avdPrivateDnsZoneResourceId')]"
                  },
                  "customRdpProperty": {
                    "value": "[parameters('customRdpProperty')]"
                  },
                  "hostPoolDiagnosticSettingName": {
                    "value": "[parameters('hostPoolDiagnosticSettingName')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "hostPoolNetworkInterfaceName": {
                    "value": "[parameters('hostPoolNetworkInterfaceName')]"
                  },
                  "hostPoolPrivateEndpointName": {
                    "value": "[parameters('hostPoolPrivateEndpointName')]"
                  },
                  "hostPoolPublicNetworkAccess": {
                    "value": "[parameters('hostPoolPublicNetworkAccess')]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "location": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "maxSessionLimit": {
                    "value": "[parameters('maxSessionLimit')]"
                  },
                  "monitoring": {
                    "value": "[parameters('monitoring')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "validationEnvironment": {
                    "value": "[parameters('validationEnvironment')]"
                  },
                  "vmTemplate": {
                    "value": "[parameters('vmTemplate')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "525666459151879140"
                    }
                  },
                  "parameters": {
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "avdPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "customRdpProperty": {
                      "type": "string"
                    },
                    "hostPoolDiagnosticSettingName": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolNetworkInterfaceName": {
                      "type": "string"
                    },
                    "hostPoolPrivateEndpointName": {
                      "type": "string"
                    },
                    "hostPoolPublicNetworkAccess": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "maxSessionLimit": {
                      "type": "int"
                    },
                    "monitoring": {
                      "type": "bool"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]"
                    },
                    "validationEnvironment": {
                      "type": "bool"
                    },
                    "vmTemplate": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "customRdpProperty_Complete": "[if(contains(parameters('activeDirectorySolution'), 'MicrosoftEntraId'), format('{0}targetisaadjoined:i:1;enablerdsaadauth:i:1;', parameters('customRdpProperty')), parameters('customRdpProperty'))]",
                    "hostPoolLogs": [
                      {
                        "category": "Checkpoint",
                        "enabled": true
                      },
                      {
                        "category": "Error",
                        "enabled": true
                      },
                      {
                        "category": "Management",
                        "enabled": true
                      },
                      {
                        "category": "Connection",
                        "enabled": true
                      },
                      {
                        "category": "HostRegistration",
                        "enabled": true
                      },
                      {
                        "category": "AgentHealthStatus",
                        "enabled": true
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/hostPools",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('hostPoolName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.DesktopVirtualization/hostPools'), parameters('tags')['Microsoft.DesktopVirtualization/hostPools'], createObject()))]",
                      "properties": {
                        "customRdpProperty": "[variables('customRdpProperty_Complete')]",
                        "hostPoolType": "[split(parameters('hostPoolType'), ' ')[0]]",
                        "loadBalancerType": "[if(contains(parameters('hostPoolType'), 'Pooled'), split(parameters('hostPoolType'), ' ')[1], 'Persistent')]",
                        "maxSessionLimit": "[parameters('maxSessionLimit')]",
                        "personalDesktopAssignmentType": "[if(contains(parameters('hostPoolType'), 'Personal'), split(parameters('hostPoolType'), ' ')[1], null())]",
                        "preferredAppGroupType": "Desktop",
                        "publicNetworkAccess": "[parameters('hostPoolPublicNetworkAccess')]",
                        "registrationInfo": {
                          "expirationTime": "[dateTimeAdd(parameters('time'), 'PT2H')]",
                          "registrationTokenOperation": "Update"
                        },
                        "startVMOnConnect": true,
                        "validationEnvironment": "[parameters('validationEnvironment')]",
                        "vmTemplate": "[parameters('vmTemplate')]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('hostPoolPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()))]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('hostPoolNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('hostPoolPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]",
                              "groupIds": [
                                "connection"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('hostPoolPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(split(parameters('avdPrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('avdPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('hostPoolPrivateEndpointName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('monitoring')]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', parameters('hostPoolName'))]",
                      "name": "[parameters('hostPoolDiagnosticSettingName')]",
                      "properties": {
                        "logs": "[variables('hostPoolLogs')]",
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "ResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/hostPools', parameters('hostPoolName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('ApplicationGroup_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupControlPlane')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "desktopApplicationGroupName": {
                    "value": "[parameters('desktopApplicationGroupName')]"
                  },
                  "hostPoolResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('HostPool_{0}', parameters('timestamp'))), '2022-09-01').outputs.ResourceId.value]"
                  },
                  "locationControlPlane": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "locationVirtualMachines": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "roleDefinitions": {
                    "value": "[parameters('roleDefinitions')]"
                  },
                  "securityPrincipalObjectIds": {
                    "value": "[parameters('securityPrincipalObjectIds')]"
                  },
                  "desktopFriendlyName": {
                    "value": "[parameters('desktopFriendlyName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "10886749631694476537"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "desktopApplicationGroupName": {
                      "type": "string"
                    },
                    "desktopFriendlyName": {
                      "type": "string"
                    },
                    "hostPoolResourceId": {
                      "type": "string"
                    },
                    "locationControlPlane": {
                      "type": "string"
                    },
                    "locationVirtualMachines": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "roleDefinitions": {
                      "type": "object"
                    },
                    "securityPrincipalObjectIds": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DesktopVirtualization/applicationGroups",
                      "apiVersion": "2021-03-09-preview",
                      "name": "[parameters('desktopApplicationGroupName')]",
                      "location": "[parameters('locationControlPlane')]",
                      "tags": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), if(contains(parameters('tags'), 'Microsoft.DesktopVirtualization/applicationGroups'), parameters('tags')['Microsoft.DesktopVirtualization/applicationGroups'], createObject()))]",
                      "properties": {
                        "hostPoolArmPath": "[parameters('hostPoolResourceId')]",
                        "applicationGroupType": "Desktop"
                      }
                    },
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(range(0, length(parameters('securityPrincipalObjectIds'))))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DesktopVirtualization/applicationGroups/{0}', parameters('desktopApplicationGroupName'))]",
                      "name": "[guid(parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]], parameters('roleDefinitions').DesktopVirtualizationUser, parameters('desktopApplicationGroupName'))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitions').DesktopVirtualizationUser)]",
                        "principalId": "[parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]]]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('desktopFriendlyName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('ApplicationFriendlyName_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}Update-AvdDesktop.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "parameters": {
                            "value": "[format('-ApplicationGroupName {0} -Environment {1} -FriendlyName \"{2}\" -ResourceGroupName {3} -SubscriptionId {4} -Tenant {5} -UserAssignedIdentityClientId {6}', parameters('desktopApplicationGroupName'), environment().name, parameters('desktopFriendlyName'), resourceGroup().name, subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedIdentityClientId'))]"
                          },
                          "scriptFileName": {
                            "value": "Update-AvdDesktop.ps1"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', parameters('hostPoolResourceId')), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()))]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('virtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6814716050578615031"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "applicationGroupReference": {
                      "type": "array",
                      "value": [
                        "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                      ]
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DesktopVirtualization/applicationGroups', parameters('desktopApplicationGroupName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('HostPool_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('WorkspaceFeed_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupFeedWorkspace')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationGroupReferences": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('ApplicationGroup_{0}', parameters('timestamp'))), '2022-09-01').outputs.applicationGroupReference.value]"
                  },
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "avdPrivateDnsZoneResourceId": {
                    "value": "[parameters('avdPrivateDnsZoneResourceId')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "existing": {
                    "value": "[parameters('existingFeedWorkspace')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "locationControlPlane": {
                    "value": "[parameters('locationControlPlane')]"
                  },
                  "locationVirtualMachines": {
                    "value": "[parameters('locationVirtualMachines')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "monitoring": {
                    "value": "[parameters('monitoring')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "virtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "workspaceFeedDiagnoticSettingName": {
                    "value": "[parameters('workspaceFeedDiagnoticSettingName')]"
                  },
                  "workspaceFeedName": {
                    "value": "[parameters('workspaceFeedName')]"
                  },
                  "workspaceFeedNetworkInterfaceName": {
                    "value": "[parameters('workspaceFeedNetworkInterfaceName')]"
                  },
                  "workspaceFeedPrivateEndpointName": {
                    "value": "[parameters('workspaceFeedPrivateEndpointName')]"
                  },
                  "workspaceFriendlyName": {
                    "value": "[parameters('workspaceFriendlyName')]"
                  },
                  "workspacePublicNetworkAccess": {
                    "value": "[parameters('workspacePublicNetworkAccess')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "13068066753709662450"
                    }
                  },
                  "parameters": {
                    "applicationGroupReferences": {
                      "type": "array"
                    },
                    "artifactsUri": {
                      "type": "string"
                    },
                    "avdPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "existing": {
                      "type": "bool"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "locationControlPlane": {
                      "type": "string"
                    },
                    "locationVirtualMachines": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "monitoring": {
                      "type": "bool"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "virtualMachineName": {
                      "type": "string"
                    },
                    "workspaceFeedDiagnoticSettingName": {
                      "type": "string"
                    },
                    "workspaceFeedName": {
                      "type": "string"
                    },
                    "workspaceFeedNetworkInterfaceName": {
                      "type": "string"
                    },
                    "workspaceFeedPrivateEndpointName": {
                      "type": "string"
                    },
                    "workspaceFriendlyName": {
                      "type": "string"
                    },
                    "workspacePublicNetworkAccess": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[not(parameters('existing'))]",
                      "type": "Microsoft.DesktopVirtualization/workspaces",
                      "apiVersion": "2023-09-05",
                      "name": "[parameters('workspaceFeedName')]",
                      "location": "[parameters('locationControlPlane')]",
                      "tags": {},
                      "properties": {
                        "applicationGroupReferences": "[parameters('applicationGroupReferences')]",
                        "friendlyName": "[parameters('workspaceFriendlyName')]",
                        "publicNetworkAccess": "[parameters('workspacePublicNetworkAccess')]"
                      }
                    },
                    {
                      "condition": "[not(parameters('existing'))]",
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('workspaceFeedPrivateEndpointName')]",
                      "location": "[parameters('locationControlPlane')]",
                      "tags": {},
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('workspaceFeedNetworkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('workspaceFeedPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]",
                              "groupIds": [
                                "feed"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]"
                      ]
                    },
                    {
                      "condition": "[not(parameters('existing'))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-05-01",
                      "name": "[format('{0}/{1}', parameters('workspaceFeedPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[replace(split(parameters('avdPrivateDnsZoneResourceId'), '/')[8], '.', '-')]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('avdPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('workspaceFeedPrivateEndpointName'))]"
                      ]
                    },
                    {
                      "condition": "[and(not(parameters('existing')), parameters('monitoring'))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DesktopVirtualization/workspaces/{0}', parameters('workspaceFeedName'))]",
                      "name": "[parameters('workspaceFeedDiagnoticSettingName')]",
                      "properties": {
                        "logs": [
                          {
                            "category": "Checkpoint",
                            "enabled": true
                          },
                          {
                            "category": "Error",
                            "enabled": true
                          },
                          {
                            "category": "Management",
                            "enabled": true
                          },
                          {
                            "category": "Feed",
                            "enabled": true
                          }
                        ],
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DesktopVirtualization/workspaces', parameters('workspaceFeedName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('existing')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('AddApplicationGroupReferences_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}Update-AvdWorkspace.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('locationVirtualMachines')]"
                          },
                          "parameters": {
                            "value": "[format('-ApplicationGroupReferences \"{0}\" -Environment {1} -ResourceGroupName {2} -SubscriptionId {3} -TenantId {4} -UserAssignedIdentityClientId {5} -WorkspaceName {6}', parameters('applicationGroupReferences'), environment().name, resourceGroup().name, subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedIdentityClientId'), parameters('workspaceFeedName'))]"
                          },
                          "scriptFileName": {
                            "value": "Update-AvdWorkspace.ps1"
                          },
                          "tags": {
                            "value": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, resourceGroup().name, parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()))]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('virtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6814716050578615031"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupControlPlane')), 'Microsoft.Resources/deployments', format('ApplicationGroup_{0}', parameters('timestamp')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp')))]",
        "rgs"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('FSLogix_{0}', parameters('timestamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "activeDirectoryConnection": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.validateANFfActiveDirectory.value]"
          },
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "artifactsUri": {
            "value": "[variables('artifactsUri')]"
          },
          "automationAccountName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountName]"
          },
          "availability": {
            "value": "[parameters('availability')]"
          },
          "azureFilesPrivateDnsZoneResourceId": {
            "value": "[format('{0}{1}', variables('privateDnsZoneResourceIdPrefix'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.filePrivateDnsZoneName)]"
          },
          "delegatedSubnetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.validateANFSubnetId.value]"
          },
          "deploymentUserAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "dnsServers": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.validateANFDnsServers.value]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "encryptionUserAssignedIdentityResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.encryptionUserAssignedIdentityResourceId.value]"
          },
          "fileShares": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.fileShares.value]"
          },
          "fslogixContainerType": {
            "value": "[parameters('fslogixContainerType')]"
          },
          "fslogixShareSizeInGB": {
            "value": "[parameters('fslogixShareSizeInGB')]"
          },
          "fslogixStorageService": {
            "value": "[parameters('fslogixStorageService')]"
          },
          "hostPoolName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolName]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "keyVaultUri": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.keyVaultUri.value]"
          },
          "location": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "managementVirtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.virtualMachineName.value]"
          },
          "netAppAccountName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.netAppAccountName]"
          },
          "netAppCapacityPoolName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.netAppCapacityPoolName]"
          },
          "netbios": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.netbios.value]"
          },
          "organizationalUnitPath": {
            "value": "[parameters('organizationalUnitPath')]"
          },
          "recoveryServices": {
            "value": "[parameters('recoveryServices')]"
          },
          "recoveryServicesVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.recoveryServicesVaultName]"
          },
          "resourceGroupControlPlane": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupControlPlane]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
          },
          "resourceGroupStorage": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupStorage]"
          },
          "securityPrincipalNames": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').name))]"
          },
          "securityPrincipalObjectIds": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
          },
          "serviceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.serviceName.value]"
          },
          "smbServerLocation": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.smbServerLocation.value]"
          },
          "storageAccountNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.storageAccountNamePrefix]"
          },
          "storageAccountNetworkInterfaceNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.storageAccountNetworkInterfaceNamePrefix]"
          },
          "storageAccountPrivateEndpointNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.storageAccountPrivateEndpointNamePrefix]"
          },
          "storageCount": {
            "value": "[parameters('storageCount')]"
          },
          "storageEncryptionKeyName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageEncryptionKeyName.value]"
          },
          "storageIndex": {
            "value": "[parameters('storageIndex')]"
          },
          "storageService": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageService.value]"
          },
          "storageSku": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageSku.value]"
          },
          "subnet": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[10]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[10]))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timestamp": {
            "value": "[parameters('timestamp')]"
          },
          "timeZone": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.timeZone.value]"
          },
          "virtualNetwork": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[8]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[8]))]",
          "virtualNetworkResourceGroup": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[4]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[4]))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "12328484626420061182"
            }
          },
          "parameters": {
            "artifactsUri": {
              "type": "string"
            },
            "activeDirectoryConnection": {
              "type": "string"
            },
            "activeDirectorySolution": {
              "type": "string"
            },
            "automationAccountName": {
              "type": "string"
            },
            "availability": {
              "type": "string"
            },
            "azureFilesPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "delegatedSubnetId": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "dnsServers": {
              "type": "string"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "encryptionUserAssignedIdentityResourceId": {
              "type": "string"
            },
            "fileShares": {
              "type": "array"
            },
            "fslogixShareSizeInGB": {
              "type": "int"
            },
            "fslogixContainerType": {
              "type": "string"
            },
            "fslogixStorageService": {
              "type": "string"
            },
            "hostPoolName": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "netAppAccountName": {
              "type": "string"
            },
            "netAppCapacityPoolName": {
              "type": "string"
            },
            "netbios": {
              "type": "string"
            },
            "organizationalUnitPath": {
              "type": "string"
            },
            "recoveryServices": {
              "type": "bool"
            },
            "recoveryServicesVaultName": {
              "type": "string"
            },
            "resourceGroupControlPlane": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "resourceGroupStorage": {
              "type": "string"
            },
            "securityPrincipalObjectIds": {
              "type": "array"
            },
            "securityPrincipalNames": {
              "type": "array"
            },
            "serviceName": {
              "type": "string"
            },
            "smbServerLocation": {
              "type": "string"
            },
            "storageAccountNamePrefix": {
              "type": "string"
            },
            "storageAccountNetworkInterfaceNamePrefix": {
              "type": "string"
            },
            "storageAccountPrivateEndpointNamePrefix": {
              "type": "string"
            },
            "storageCount": {
              "type": "int"
            },
            "storageEncryptionKeyName": {
              "type": "string"
            },
            "storageIndex": {
              "type": "int"
            },
            "storageSku": {
              "type": "string"
            },
            "storageService": {
              "type": "string"
            },
            "subnet": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timestamp": {
              "type": "string"
            },
            "timeZone": {
              "type": "string"
            },
            "virtualNetwork": {
              "type": "string"
            },
            "virtualNetworkResourceGroup": {
              "type": "string"
            }
          },
          "variables": {
            "tagsAutomationAccounts": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject()))]",
            "tagsNetAppAccount": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.NetApp/netAppAccounts'), parameters('tags')['Microsoft.NetApp/netAppAccounts'], createObject()))]",
            "tagsPrivateEndpoints": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/privateEndpoints'), parameters('tags')['Microsoft.Network/privateEndpoints'], createObject()))]",
            "tagsStorageAccounts": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Storage/storageAccounts'), parameters('tags')['Microsoft.Storage/storageAccounts'], createObject()))]",
            "tagsRecoveryServicesVault": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.recoveryServices/vaults'), parameters('tags')['Microsoft.recoveryServices/vaults'], createObject()))]",
            "tagsVirtualMachines": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupControlPlane'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()))]"
          },
          "resources": [
            {
              "condition": "[and(equals(parameters('storageService'), 'AzureNetAppFiles'), contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('AzureNetAppFiles_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupStorage')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "activeDirectoryConnection": {
                    "value": "[parameters('activeDirectoryConnection')]"
                  },
                  "delegatedSubnetId": {
                    "value": "[parameters('delegatedSubnetId')]"
                  },
                  "dnsServers": {
                    "value": "[parameters('dnsServers')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "fileShares": {
                    "value": "[parameters('fileShares')]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "netAppAccountName": {
                    "value": "[parameters('netAppAccountName')]"
                  },
                  "netAppCapacityPoolName": {
                    "value": "[parameters('netAppCapacityPoolName')]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "securityPrincipalNames": {
                    "value": "[parameters('securityPrincipalNames')]"
                  },
                  "smbServerLocation": {
                    "value": "[parameters('smbServerLocation')]"
                  },
                  "storageSku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "tagsNetAppAccount": {
                    "value": "[variables('tagsNetAppAccount')]"
                  },
                  "tagsVirtualMachines": {
                    "value": "[variables('tagsVirtualMachines')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "9859498295282338467"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "activeDirectoryConnection": {
                      "type": "string"
                    },
                    "delegatedSubnetId": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "dnsServers": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "fileShares": {
                      "type": "array"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "netAppAccountName": {
                      "type": "string"
                    },
                    "netAppCapacityPoolName": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "securityPrincipalNames": {
                      "type": "array"
                    },
                    "smbServerLocation": {
                      "type": "string"
                    },
                    "storageSku": {
                      "type": "string"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "tagsNetAppAccount": {
                      "type": "object"
                    },
                    "tagsVirtualMachines": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.NetApp/netAppAccounts",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('netAppAccountName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "activeDirectories": "[if(equals(parameters('activeDirectoryConnection'), 'false'), null(), createArray(createObject('aesEncryption', true(), 'domain', parameters('domainName'), 'dns', parameters('dnsServers'), 'organizationalUnit', parameters('organizationalUnitPath'), 'password', parameters('domainJoinPassword'), 'smbServerName', format('anf-{0}', parameters('smbServerLocation')), 'username', split(parameters('domainJoinUserPrincipalName'), '@')[0])))]",
                        "encryption": {
                          "keySource": "Microsoft.NetApp"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "coolAccess": false,
                        "encryptionType": "Single",
                        "qosType": "Auto",
                        "serviceLevel": "[parameters('storageSku')]",
                        "size": 4398046511104
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.NetApp/netAppAccounts', parameters('netAppAccountName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "volumes",
                        "count": "[length(range(0, length(parameters('fileShares'))))]"
                      },
                      "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]])]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetAppAccount')]",
                      "properties": {
                        "avsDataStore": "Disabled",
                        "coolAccess": false,
                        "creationToken": "[parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]]]",
                        "defaultGroupQuotaInKiBs": 0,
                        "defaultUserQuotaInKiBs": 0,
                        "encryptionKeySource": "Microsoft.NetApp",
                        "isDefaultQuotaEnabled": false,
                        "kerberosEnabled": false,
                        "ldapEnabled": false,
                        "networkFeatures": "Standard",
                        "protocolTypes": [
                          "CIFS"
                        ],
                        "securityStyle": "ntfs",
                        "serviceLevel": "[parameters('storageSku')]",
                        "smbContinuouslyAvailable": true,
                        "smbEncryption": true,
                        "snapshotDirectoryVisible": true,
                        "subnetId": "[parameters('delegatedSubnetId')]",
                        "usageThreshold": 107374182400
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('FslogixNtfsPermissions_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}Set-NtfsPermissions.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "parameters": {
                            "value": "[format('-domainJoinPassword \"{0}\" -domainJoinUserPrincipalName {1} -fslogixContainerType {2} -securityPrincipalNames \"{3}\" -smbServerLocation {4} -storageService {5}', parameters('domainJoinPassword'), parameters('domainJoinUserPrincipalName'), parameters('fslogixContainerType'), parameters('securityPrincipalNames'), parameters('smbServerLocation'), parameters('storageService'))]"
                          },
                          "scriptFileName": {
                            "value": "Set-NtfsPermissions.ps1"
                          },
                          "tags": {
                            "value": "[parameters('tagsVirtualMachines')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6814716050578615031"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "volumes"
                      ]
                    }
                  ],
                  "outputs": {
                    "fileShares": {
                      "type": "array",
                      "value": "[if(contains(parameters('fslogixContainerType'), 'Office'), createArray(reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[0]]), '2021-06-01').mountTargets[0].smbServerFqdn, reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[1]]), '2021-06-01').mountTargets[0].smbServerFqdn), createArray(reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', parameters('netAppAccountName'), parameters('netAppCapacityPoolName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[0]]), '2021-06-01').mountTargets[0].smbServerFqdn))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(equals(parameters('storageService'), 'AzureFiles'), contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('AzureFiles_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupStorage')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('automationAccountName')]"
                  },
                  "availability": {
                    "value": "[parameters('availability')]"
                  },
                  "azureFilesPrivateDnsZoneResourceId": {
                    "value": "[parameters('azureFilesPrivateDnsZoneResourceId')]"
                  },
                  "deploymentUserAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "enableRecoveryServices": {
                    "value": "[parameters('recoveryServices')]"
                  },
                  "encryptionUserAssignedIdentityResourceId": {
                    "value": "[parameters('encryptionUserAssignedIdentityResourceId')]"
                  },
                  "fileShares": {
                    "value": "[parameters('fileShares')]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "fslogixShareSizeInGB": {
                    "value": "[parameters('fslogixShareSizeInGB')]"
                  },
                  "fslogixStorageService": {
                    "value": "[parameters('fslogixStorageService')]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "keyVaultUri": {
                    "value": "[parameters('keyVaultUri')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "netbios": {
                    "value": "[parameters('netbios')]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[parameters('recoveryServicesVaultName')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "resourceGroupStorage": {
                    "value": "[parameters('resourceGroupStorage')]"
                  },
                  "securityPrincipalNames": {
                    "value": "[parameters('securityPrincipalNames')]"
                  },
                  "securityPrincipalObjectIds": {
                    "value": "[parameters('securityPrincipalObjectIds')]"
                  },
                  "serviceName": {
                    "value": "[parameters('serviceName')]"
                  },
                  "storageAccountNamePrefix": {
                    "value": "[parameters('storageAccountNamePrefix')]"
                  },
                  "storageAccountNetworkInterfaceNamePrefix": {
                    "value": "[parameters('storageAccountNetworkInterfaceNamePrefix')]"
                  },
                  "storageAccountPrivateEndpointNamePrefix": {
                    "value": "[parameters('storageAccountPrivateEndpointNamePrefix')]"
                  },
                  "storageCount": {
                    "value": "[parameters('storageCount')]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[parameters('storageEncryptionKeyName')]"
                  },
                  "storageIndex": {
                    "value": "[parameters('storageIndex')]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "storageSku": {
                    "value": "[parameters('storageSku')]"
                  },
                  "subnet": {
                    "value": "[parameters('subnet')]"
                  },
                  "tagsAutomationAccounts": {
                    "value": "[variables('tagsAutomationAccounts')]"
                  },
                  "tagsPrivateEndpoints": {
                    "value": "[variables('tagsPrivateEndpoints')]"
                  },
                  "tagsRecoveryServicesVault": {
                    "value": "[variables('tagsRecoveryServicesVault')]"
                  },
                  "tagsStorageAccounts": {
                    "value": "[variables('tagsStorageAccounts')]"
                  },
                  "tagsVirtualMachines": {
                    "value": "[variables('tagsVirtualMachines')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  },
                  "virtualNetwork": {
                    "value": "[parameters('virtualNetwork')]"
                  },
                  "virtualNetworkResourceGroup": {
                    "value": "[parameters('virtualNetworkResourceGroup')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "11173412579254800621"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "availability": {
                      "type": "string"
                    },
                    "azureFilesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "deploymentUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "enableRecoveryServices": {
                      "type": "bool"
                    },
                    "encryptionUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "fileShares": {
                      "type": "array"
                    },
                    "fslogixShareSizeInGB": {
                      "type": "int"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "fslogixStorageService": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "netbios": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "resourceGroupStorage": {
                      "type": "string"
                    },
                    "securityPrincipalObjectIds": {
                      "type": "array"
                    },
                    "securityPrincipalNames": {
                      "type": "array"
                    },
                    "serviceName": {
                      "type": "string"
                    },
                    "storageAccountNamePrefix": {
                      "type": "string",
                      "minLength": 3
                    },
                    "storageAccountNetworkInterfaceNamePrefix": {
                      "type": "string"
                    },
                    "storageAccountPrivateEndpointNamePrefix": {
                      "type": "string"
                    },
                    "storageCount": {
                      "type": "int"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "storageIndex": {
                      "type": "int"
                    },
                    "storageSku": {
                      "type": "string"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "subnet": {
                      "type": "string"
                    },
                    "tagsAutomationAccounts": {
                      "type": "object"
                    },
                    "tagsPrivateEndpoints": {
                      "type": "object"
                    },
                    "tagsRecoveryServicesVault": {
                      "type": "object"
                    },
                    "tagsStorageAccounts": {
                      "type": "object"
                    },
                    "tagsVirtualMachines": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "timeZone": {
                      "type": "string"
                    },
                    "virtualNetwork": {
                      "type": "string"
                    },
                    "virtualNetworkResourceGroup": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleDefinitionId": "0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                    "smbMultiChannel": {
                      "multichannel": {
                        "enabled": true
                      }
                    },
                    "smbSettings": {
                      "versions": "SMB3.1.1;",
                      "authenticationMethods": "NTLMv2;Kerberos;",
                      "kerberosTicketEncryption": "AES-256;",
                      "channelEncryption": "AES-128-GCM;AES-256-GCM;"
                    },
                    "storageRedundancy": "[if(equals(parameters('availability'), 'availabilityZones'), '_ZRS', '_LRS')]",
                    "subnetId": "[resourceId(parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork'), parameters('subnet'))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "storageAccounts",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsStorageAccounts')]",
                      "sku": {
                        "name": "[format('{0}{1}', parameters('storageSku'), variables('storageRedundancy'))]"
                      },
                      "kind": "[if(equals(parameters('storageSku'), 'Standard'), 'StorageV2', 'FileStorage')]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('encryptionUserAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowCrossTenantReplication": false,
                        "allowedCopyScope": "PrivateLink",
                        "allowSharedKeyAccess": true,
                        "azureFilesIdentityBasedAuthentication": {
                          "directoryServiceOptions": "[if(equals(parameters('activeDirectorySolution'), 'MicrosoftEntraDomainServices'), 'AADDS', 'None')]"
                        },
                        "defaultToOAuthAuthentication": false,
                        "dnsEndpointType": "Standard",
                        "encryption": {
                          "identity": {
                            "userAssignedIdentity": "[parameters('encryptionUserAssignedIdentityResourceId')]"
                          },
                          "requireInfrastructureEncryption": true,
                          "keyvaultproperties": {
                            "keyvaulturi": "[parameters('keyVaultUri')]",
                            "keyname": "[parameters('storageEncryptionKeyName')]"
                          },
                          "services": "[if(equals(parameters('storageSku'), 'Standard'), createObject('file', createObject('keyType', 'Account', 'enabled', true()), 'table', createObject('keyType', 'Account', 'enabled', true()), 'queue', createObject('keyType', 'Account', 'enabled', true()), 'blob', createObject('keyType', 'Account', 'enabled', true())), createObject('file', createObject('keyType', 'Account', 'enabled', true())))]",
                          "keySource": "Microsoft.KeyVault"
                        },
                        "largeFileSharesState": "[if(equals(parameters('storageSku'), 'Standard'), 'Enabled', null())]",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "virtualNetworkRules": [],
                          "ipRules": [],
                          "defaultAction": "Deny"
                        },
                        "publicNetworkAccess": "Disabled",
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]",
                      "name": "[guid(parameters('securityPrincipalObjectIds')[range(0, parameters('storageCount'))[copyIndex()]], variables('roleDefinitionId'), resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                        "principalId": "[parameters('securityPrincipalObjectIds')[range(0, parameters('storageCount'))[copyIndex()]]]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "fileServices",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), 'default')]",
                      "properties": {
                        "protocolSettings": {
                          "smb": "[if(equals(parameters('storageSku'), 'Standard'), variables('smbSettings'), union(variables('smbSettings'), variables('smbMultiChannel')))]"
                        },
                        "shareDeleteRetentionPolicy": {
                          "enabled": false
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateEndpoints",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsPrivateEndpoints')]",
                      "properties": {
                        "customNetworkInterfaceName": "[format('{0}-{1}', replace(parameters('storageAccountNetworkInterfaceNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]",
                              "groupIds": [
                                "file"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[variables('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneGroups",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), format('{0}-{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('azureFilesPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', replace(parameters('storageAccountPrivateEndpointNamePrefix'), parameters('serviceName'), 'file'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]",
                        "storageAccounts"
                      ]
                    },
                    {
                      "copy": {
                        "name": "shares",
                        "count": "[length(range(0, parameters('storageCount')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('fileShares_{0}_{1}', range(0, parameters('storageCount'))[copyIndex()], parameters('timestamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileShares": {
                            "value": "[parameters('fileShares')]"
                          },
                          "fslogixShareSizeInGB": {
                            "value": "[parameters('fslogixShareSizeInGB')]"
                          },
                          "storageAccountName": {
                            "value": "[format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))]"
                          },
                          "storageSku": {
                            "value": "[parameters('storageSku')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "853975277277099136"
                            }
                          },
                          "parameters": {
                            "fileShares": {
                              "type": "array"
                            },
                            "fslogixShareSizeInGB": {
                              "type": "int"
                            },
                            "storageAccountName": {
                              "type": "string"
                            },
                            "storageSku": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "shares",
                                "count": "[length(range(0, length(parameters('fileShares'))))]"
                              },
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/default/{1}', parameters('storageAccountName'), parameters('fileShares')[range(0, length(parameters('fileShares')))[copyIndex()]])]",
                              "properties": {
                                "accessTier": "[if(equals(parameters('storageSku'), 'Premium'), 'Premium', 'TransactionOptimized')]",
                                "shareQuota": "[parameters('fslogixShareSizeInGB')]",
                                "enabledProtocols": "SMB"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "roleAssignment",
                        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('activeDirectorySolution'), 'DomainServices')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('FslogixNtfsPermissions_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}Set-NtfsPermissions.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "parameters": {
                            "value": "[format('-domainJoinPassword \"{0}\" -domainJoinUserPrincipalName {1} -activeDirectorySolution {2} -Environment {3} -fslogixContainerType {4} -netbios {5} -organizationalUnitPath \"{6}\" -securityPrincipalNames \"{7}\" -StorageAccountPrefix {8} -StorageAccountResourceGroupName {9} -storageCount {10} -storageIndex {11} -storageService {12} -StorageSuffix {13} -SubscriptionId {14} -TenantId {15} -UserAssignedIdentityClientId {16}', parameters('domainJoinPassword'), parameters('domainJoinUserPrincipalName'), parameters('activeDirectorySolution'), environment().name, parameters('fslogixContainerType'), parameters('netbios'), parameters('organizationalUnitPath'), parameters('securityPrincipalNames'), parameters('storageAccountNamePrefix'), parameters('resourceGroupStorage'), parameters('storageCount'), parameters('storageIndex'), parameters('storageService'), environment().suffixes.storage, subscription().subscriptionId, subscription().tenantId, parameters('deploymentUserAssignedIdentityClientId'))]"
                          },
                          "scriptFileName": {
                            "value": "Set-NtfsPermissions.ps1"
                          },
                          "tags": {
                            "value": "[parameters('tagsVirtualMachines')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6814716050578615031"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateDnsZoneGroups",
                        "privateEndpoints",
                        "shares"
                      ]
                    },
                    {
                      "condition": "[and(parameters('enableRecoveryServices'), contains(parameters('hostPoolType'), 'Pooled'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('recoveryServices_AzureFiles_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileShares": {
                            "value": "[parameters('fileShares')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "recoveryServicesVaultName": {
                            "value": "[parameters('recoveryServicesVaultName')]"
                          },
                          "resourceGroupStorage": {
                            "value": "[parameters('resourceGroupStorage')]"
                          },
                          "storageAccountNamePrefix": {
                            "value": "[parameters('storageAccountNamePrefix')]"
                          },
                          "storageCount": {
                            "value": "[parameters('storageCount')]"
                          },
                          "storageIndex": {
                            "value": "[parameters('storageIndex')]"
                          },
                          "tagsRecoveryServicesVault": {
                            "value": "[parameters('tagsRecoveryServicesVault')]"
                          },
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "12498938023142091017"
                            }
                          },
                          "parameters": {
                            "fileShares": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "recoveryServicesVaultName": {
                              "type": "string"
                            },
                            "resourceGroupStorage": {
                              "type": "string"
                            },
                            "storageAccountNamePrefix": {
                              "type": "string"
                            },
                            "storageCount": {
                              "type": "int"
                            },
                            "storageIndex": {
                              "type": "int"
                            },
                            "tagsRecoveryServicesVault": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "protectionContainers",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers",
                              "apiVersion": "2022-03-01",
                              "name": "[format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0'))]",
                              "properties": {
                                "backupManagementType": "AzureStorage",
                                "containerType": "StorageContainer",
                                "sourceResourceId": "[resourceId(parameters('resourceGroupStorage'), 'Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]"
                              }
                            },
                            {
                              "copy": {
                                "name": "protectedItems_fileShares",
                                "count": "[length(range(0, parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('BackupProtectedItems_fileShares_{0}_{1}', add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), parameters('timestamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileShares": {
                                    "value": "[parameters('fileShares')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "protectionContainerName": {
                                    "value": "[format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0'))]"
                                  },
                                  "policyId": {
                                    "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('recoveryServicesVaultName'), 'AvdPolicyStorage')]"
                                  },
                                  "sourceResourceId": {
                                    "value": "[resourceId(parameters('resourceGroupStorage'), 'Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[copyIndex()], parameters('storageIndex')), 2, '0')))]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tagsRecoveryServicesVault')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "17886978288386126422"
                                    }
                                  },
                                  "parameters": {
                                    "fileShares": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "policyId": {
                                      "type": "string"
                                    },
                                    "protectionContainerName": {
                                      "type": "string"
                                    },
                                    "sourceResourceId": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "protectedItems_FileShare",
                                        "count": "[length(parameters('fileShares'))]"
                                      },
                                      "condition": "[contains(parameters('fileShares')[copyIndex()], 'profile')]",
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                      "apiVersion": "2022-03-01",
                                      "name": "[format('{0}/AzureFileShare;{1}', parameters('protectionContainerName'), parameters('fileShares')[copyIndex()])]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "protectedItemType": "AzureFileShareProtectedItem",
                                        "policyId": "[parameters('policyId')]",
                                        "sourceResourceId": "[parameters('sourceResourceId')]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers', split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[0], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[1], split(format('{0}/Azure/storagecontainer;Storage;{1};{2}{3}', parameters('recoveryServicesVaultName'), parameters('resourceGroupStorage'), parameters('storageAccountNamePrefix'), padLeft(add(range(0, parameters('storageCount'))[range(0, parameters('storageCount'))[copyIndex()]], parameters('storageIndex')), 2, '0')), '/')[2])]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "shares"
                      ]
                    },
                    {
                      "condition": "[and(equals(parameters('fslogixStorageService'), 'AzureFiles Premium'), greater(parameters('storageCount'), 0))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('AutoIncreasePremiumFileShareQuota_{0}', parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "artifactsUri": {
                            "value": "[parameters('artifactsUri')]"
                          },
                          "automationAccountName": {
                            "value": "[parameters('automationAccountName')]"
                          },
                          "deploymentUserAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                          },
                          "fslogixContainerType": {
                            "value": "[parameters('fslogixContainerType')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "managementVirtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          },
                          "storageAccountNamePrefix": {
                            "value": "[parameters('storageAccountNamePrefix')]"
                          },
                          "storageCount": {
                            "value": "[parameters('storageCount')]"
                          },
                          "storageIndex": {
                            "value": "[parameters('storageIndex')]"
                          },
                          "storageResourceGroupName": {
                            "value": "[parameters('resourceGroupStorage')]"
                          },
                          "tags": {
                            "value": "[parameters('tagsAutomationAccounts')]"
                          },
                          "timestamp": {
                            "value": "[parameters('timestamp')]"
                          },
                          "timeZone": {
                            "value": "[parameters('timeZone')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "16960262352413853280"
                            }
                          },
                          "parameters": {
                            "artifactsUri": {
                              "type": "string"
                            },
                            "automationAccountName": {
                              "type": "string"
                            },
                            "deploymentUserAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "fslogixContainerType": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "managementVirtualMachineName": {
                              "type": "string"
                            },
                            "storageAccountNamePrefix": {
                              "type": "string"
                            },
                            "storageCount": {
                              "type": "int"
                            },
                            "storageIndex": {
                              "type": "int"
                            },
                            "storageResourceGroupName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string"
                            },
                            "timeZone": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "runbookFileName": "Set-FileShareScaling.ps1",
                            "scriptFileName": "Set-AutomationRunbook.ps1",
                            "subscriptionId": "[subscription().subscriptionId]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Runbook_QuotaScaling_{0}', parameters('timestamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileUris": {
                                    "value": [
                                      "[format('{0}{1}', parameters('artifactsUri'), variables('runbookFileName'))]",
                                      "[format('{0}{1}', parameters('artifactsUri'), variables('scriptFileName'))]"
                                    ]
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "parameters": {
                                    "value": "[format('-AutomationAccountName {0} -Environment {1} -ResourceGroupName {2} -RunbookFileName {3} -SubscriptionId {4} -TenantId {5} -UserAssignedIdentityClientId {6}', parameters('automationAccountName'), environment().name, resourceGroup().name, variables('runbookFileName'), subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedIdentityClientId'))]"
                                  },
                                  "scriptFileName": {
                                    "value": "[variables('scriptFileName')]"
                                  },
                                  "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject('value', parameters('tags')['Microsoft.Compute/virtualMachines']), createObject('value', createObject()))]",
                                  "userAssignedIdentityClientId": {
                                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                                  },
                                  "virtualMachineName": {
                                    "value": "[parameters('managementVirtualMachineName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "6814716050578615031"
                                    }
                                  },
                                  "parameters": {
                                    "fileUris": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "securestring"
                                    },
                                    "scriptFileName": {
                                      "type": "string"
                                    },
                                    "tags": {
                                      "type": "object"
                                    },
                                    "timestamp": {
                                      "type": "string",
                                      "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                                    },
                                    "userAssignedIdentityClientId": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2021-03-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "Microsoft.Compute",
                                        "type": "CustomScriptExtension",
                                        "typeHandlerVersion": "1.10",
                                        "autoUpgradeMinorVersion": true,
                                        "settings": {
                                          "timestamp": "[parameters('timestamp')]"
                                        },
                                        "protectedSettings": {
                                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                          "fileUris": "[parameters('fileUris')]",
                                          "managedIdentity": {
                                            "clientId": "[parameters('userAssignedIdentityClientId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "value": {
                                      "type": "object",
                                      "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "schedules",
                                "count": "[length(range(parameters('storageIndex'), parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('Schedules_{0}_{1}', range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], parameters('timestamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "automationAccountName": {
                                    "value": "[parameters('automationAccountName')]"
                                  },
                                  "fslogixContainerType": {
                                    "value": "[parameters('fslogixContainerType')]"
                                  },
                                  "storageAccountName": {
                                    "value": "[format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], 2, '0'))]"
                                  },
                                  "timeZone": {
                                    "value": "[parameters('timeZone')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "8039429053775027338"
                                    }
                                  },
                                  "parameters": {
                                    "automationAccountName": {
                                      "type": "string"
                                    },
                                    "fslogixContainerType": {
                                      "type": "string"
                                    },
                                    "storageAccountName": {
                                      "type": "string"
                                    },
                                    "time": {
                                      "type": "string",
                                      "defaultValue": "[utcNow()]"
                                    },
                                    "timeZone": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "schedules_ProfileContainers",
                                        "count": "[length(range(0, 4))]"
                                      },
                                      "type": "Microsoft.Automation/automationAccounts/schedules",
                                      "apiVersion": "2022-08-08",
                                      "name": "[format('{0}/{1}', parameters('automationAccountName'), format('{0}_ProfileContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                      "properties": {
                                        "advancedSchedule": {},
                                        "description": null,
                                        "expiryTime": null,
                                        "frequency": "Hour",
                                        "interval": 1,
                                        "startTime": "[dateTimeAdd(parameters('time'), format('PT{0}M', mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                        "timeZone": "[parameters('timeZone')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "schedules_OfficeContainers",
                                        "count": "[length(range(0, 4))]"
                                      },
                                      "condition": "[contains(parameters('fslogixContainerType'), 'Office')]",
                                      "type": "Microsoft.Automation/automationAccounts/schedules",
                                      "apiVersion": "2022-08-08",
                                      "name": "[format('{0}/{1}', parameters('automationAccountName'), format('{0}_OfficeContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                      "properties": {
                                        "advancedSchedule": {},
                                        "description": null,
                                        "expiryTime": null,
                                        "frequency": "Hour",
                                        "interval": 1,
                                        "startTime": "[dateTimeAdd(parameters('time'), format('PT{0}M', mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                                        "timeZone": "[parameters('timeZone')]"
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "jobSchedules",
                                "count": "[length(range(parameters('storageIndex'), parameters('storageCount')))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('JobSchedules_{0}_{1}', range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], parameters('timestamp'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "automationAccountName": {
                                    "value": "[parameters('automationAccountName')]"
                                  },
                                  "environment": {
                                    "value": "[environment().name]"
                                  },
                                  "fslogixContainerType": {
                                    "value": "[parameters('fslogixContainerType')]"
                                  },
                                  "runbookName": {
                                    "value": "[replace(variables('runbookFileName'), '.ps1', '')]"
                                  },
                                  "resourceGroupName": {
                                    "value": "[parameters('storageResourceGroupName')]"
                                  },
                                  "storageAccountName": {
                                    "value": "[format('{0}{1}', parameters('storageAccountNamePrefix'), padLeft(range(parameters('storageIndex'), parameters('storageCount'))[copyIndex()], 2, '0'))]"
                                  },
                                  "subscriptionId": {
                                    "value": "[variables('subscriptionId')]"
                                  },
                                  "timestamp": {
                                    "value": "[parameters('timestamp')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "3586684128522335267"
                                    }
                                  },
                                  "parameters": {
                                    "automationAccountName": {
                                      "type": "string"
                                    },
                                    "environment": {
                                      "type": "string"
                                    },
                                    "fslogixContainerType": {
                                      "type": "string"
                                    },
                                    "resourceGroupName": {
                                      "type": "string"
                                    },
                                    "runbookName": {
                                      "type": "string"
                                    },
                                    "storageAccountName": {
                                      "type": "string"
                                    },
                                    "subscriptionId": {
                                      "type": "string"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "jobSchedules_ProfileContainers",
                                        "count": "[length(range(0, 4))]"
                                      },
                                      "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                                      "apiVersion": "2022-08-08",
                                      "name": "[format('{0}/{1}', parameters('automationAccountName'), guid(parameters('timestamp'), parameters('runbookName'), parameters('storageAccountName'), 'ProfileContainers', string(range(0, 4)[copyIndex()])))]",
                                      "properties": {
                                        "parameters": {
                                          "environment": "[parameters('environment')]",
                                          "FileShareName": "profile-containers",
                                          "resourceGroupName": "[parameters('resourceGroupName')]",
                                          "storageAccountName": "[parameters('storageAccountName')]",
                                          "subscriptionId": "[parameters('subscriptionId')]"
                                        },
                                        "runbook": {
                                          "name": "[parameters('runbookName')]"
                                        },
                                        "runOn": null,
                                        "schedule": {
                                          "name": "[format('{0}_ProfileContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15))]"
                                        }
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "jobSchedules_OfficeContainers",
                                        "count": "[length(range(0, 4))]"
                                      },
                                      "condition": "[contains(parameters('fslogixContainerType'), 'Office')]",
                                      "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                                      "apiVersion": "2022-08-08",
                                      "name": "[format('{0}/{1}', parameters('automationAccountName'), guid(parameters('timestamp'), parameters('runbookName'), parameters('storageAccountName'), 'OfficeContainers', string(range(0, 4)[copyIndex()])))]",
                                      "properties": {
                                        "parameters": {
                                          "environment": "[parameters('environment')]",
                                          "FileShareName": "office-containers",
                                          "resourceGroupName": "[parameters('resourceGroupName')]",
                                          "storageAccountName": "[parameters('storageAccountName')]",
                                          "subscriptionId": "[parameters('subscriptionId')]"
                                        },
                                        "runbook": {
                                          "name": "[parameters('runbookName')]"
                                        },
                                        "runOn": null,
                                        "schedule": {
                                          "name": "[format('{0}_OfficeContainers_{1}min', parameters('storageAccountName'), mul(add(range(0, 4)[copyIndex()], 1), 15))]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('Runbook_QuotaScaling_{0}', parameters('timestamp')))]",
                                "schedules"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('RoleAssignment_Storage_{0}', parameters('timestamp'))]",
                              "resourceGroup": "[parameters('storageResourceGroupName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "PrincipalId": {
                                    "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2022-08-08', 'full').identity.principalId]"
                                  },
                                  "PrincipalType": {
                                    "value": "ServicePrincipal"
                                  },
                                  "RoleDefinitionId": {
                                    "value": "17d1049b-9a84-46fb-8f53-869881c3d3ab"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "1695210669952082012"
                                    }
                                  },
                                  "parameters": {
                                    "PrincipalId": {
                                      "type": "string"
                                    },
                                    "PrincipalType": {
                                      "type": "string"
                                    },
                                    "RoleDefinitionId": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                                      "properties": {
                                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                                        "principalId": "[parameters('PrincipalId')]",
                                        "principalType": "[parameters('PrincipalType')]"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('FslogixNtfsPermissions_{0}', parameters('timestamp')))]"
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "netAppShares": {
              "type": "array",
              "value": "[if(equals(parameters('storageService'), 'AzureNetAppFiles'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupStorage')), 'Microsoft.Resources/deployments', format('AzureNetAppFiles_{0}', parameters('timestamp'))), '2022-09-01').outputs.fileShares.value, createArray('None'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('ControlPlane_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp')))]",
        "rgs"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('SessionHosts_{0}', parameters('timestamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "acceleratedNetworking": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.validateAcceleratedNetworking.value]"
          },
          "activeDirectorySolution": {
            "value": "[parameters('activeDirectorySolution')]"
          },
          "artifactsUri": {
            "value": "[variables('artifactsUri')]"
          },
          "artifactsUserAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.artifactsUserAssignedIdentityClientId.value]"
          },
          "artifactsUserAssignedIdentityResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.artifactsUserAssignedIdentityResourceId.value]"
          },
          "automationAccountName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.automationAccountName]"
          },
          "availability": {
            "value": "[parameters('availability')]"
          },
          "availabilitySetNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.availabilitySetNamePrefix]"
          },
          "availabilitySetsCount": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.availabilitySetsCount.value]"
          },
          "availabilitySetsIndex": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.beginAvSetRange.value]"
          },
          "availabilityZones": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.validateAvailabilityZones.value]"
          },
          "avdAgentBootLoaderMsiName": {
            "value": "[parameters('avdAgentBootLoaderMsiName')]"
          },
          "avdAgentMsiName": {
            "value": "[parameters('avdAgentMsiName')]"
          },
          "dataCollectionRuleAssociationName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.dataCollectionRuleAssociationName]"
          },
          "dataCollectionRuleResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.dataCollectionRuleResourceId.value]"
          },
          "deploymentUserAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
          },
          "diskNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.diskNamePrefix]"
          },
          "diskSku": {
            "value": "[parameters('diskSku')]"
          },
          "divisionRemainderValue": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.divisionRemainderValue.value]"
          },
          "domainJoinPassword": {
            "value": "[parameters('domainJoinPassword')]"
          },
          "domainJoinUserPrincipalName": {
            "value": "[parameters('domainJoinUserPrincipalName')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "drainMode": {
            "value": "[parameters('drainMode')]"
          },
          "enableRecoveryServices": {
            "value": "[parameters('recoveryServices')]"
          },
          "enableScalingTool": {
            "value": "[parameters('scalingTool')]"
          },
          "fslogix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.fslogix.value]"
          },
          "fslogixContainerType": {
            "value": "[parameters('fslogixContainerType')]"
          },
          "hostPoolName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.hostPoolName]"
          },
          "hostPoolType": {
            "value": "[parameters('hostPoolType')]"
          },
          "hybridRunbookWorkerGroupName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.hybridRunbookWorkerGroupName.value]"
          },
          "imageOffer": {
            "value": "[parameters('imageOffer')]"
          },
          "imagePublisher": {
            "value": "[parameters('imagePublisher')]"
          },
          "imageSku": {
            "value": "[parameters('imageSku')]"
          },
          "imageDefinitionResourceId": {
            "value": "[parameters('imageDefinitionResourceId')]"
          },
          "location": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.logAnalyticsWorkspaceName]"
          },
          "managementVirtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.virtualMachineName.value]"
          },
          "maxResourcesPerTemplateDeployment": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.maxResourcesPerTemplateDeployment.value]"
          },
          "monitoring": {
            "value": "[parameters('monitoring')]"
          },
          "netAppFileShares": "[if(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.fslogix.value, createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('FSLogix_{0}', parameters('timestamp'))), '2022-09-01').outputs.netAppShares.value), createObject('value', createArray('None')))]",
          "networkInterfaceNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.networkInterfaceNamePrefix]"
          },
          "networkName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.networkName.value]"
          },
          "organizationalUnitPath": {
            "value": "[parameters('organizationalUnitPath')]"
          },
          "pooledHostPool": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.pooledHostPool.value]"
          },
          "recoveryServicesVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.recoveryServicesVaultName]"
          },
          "resourceGroupControlPlane": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupControlPlane]"
          },
          "resourceGroupHosts": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupHosts]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
          },
          "roleDefinitions": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.roleDefinitions.value]"
          },
          "scalingBeginPeakTime": {
            "value": "[parameters('scalingBeginPeakTime')]"
          },
          "scalingEndPeakTime": {
            "value": "[parameters('scalingEndPeakTime')]"
          },
          "scalingLimitSecondsToForceLogOffUser": {
            "value": "[parameters('scalingLimitSecondsToForceLogOffUser')]"
          },
          "scalingMinimumNumberOfRdsh": {
            "value": "[parameters('scalingMinimumNumberOfRdsh')]"
          },
          "scalingSessionThresholdPerCPU": {
            "value": "[parameters('scalingSessionThresholdPerCPU')]"
          },
          "securityPrincipalObjectIds": {
            "value": "[map(parameters('securityPrincipals'), lambda('item', lambdaVariables('item').objectId))]"
          },
          "securityLogAnalyticsWorkspaceResourceId": {
            "value": "[parameters('securityLogAnalyticsWorkspaceResourceId')]"
          },
          "serviceName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.serviceName.value]"
          },
          "sessionHostBatchCount": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.sessionHostBatchCount.value]"
          },
          "sessionHostIndex": {
            "value": "[parameters('sessionHostIndex')]"
          },
          "storageAccountPrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.storageAccountNamePrefix]"
          },
          "storageCount": {
            "value": "[parameters('storageCount')]"
          },
          "storageIndex": {
            "value": "[parameters('storageIndex')]"
          },
          "storageService": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageService.value]"
          },
          "storageSuffix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.storageSuffix.value]"
          },
          "subnet": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[10]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[10]))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timeDifference": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.timeDifference.value]"
          },
          "timestamp": {
            "value": "[parameters('timestamp')]"
          },
          "timeZone": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp'))), '2022-09-01').outputs.timeZone.value]"
          },
          "virtualMachineMonitoringAgent": {
            "value": "[parameters('virtualMachineMonitoringAgent')]"
          },
          "virtualMachineNamePrefix": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.virtualMachineNamePrefix]"
          },
          "virtualMachinePassword": {
            "value": "[parameters('virtualMachinePassword')]"
          },
          "virtualMachineSize": {
            "value": "[parameters('virtualMachineSize')]"
          },
          "virtualMachineUsername": {
            "value": "[parameters('virtualMachineUsername')]"
          },
          "virtualNetwork": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[8]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[8]))]",
          "virtualNetworkResourceGroup": "[if(equals(length(variables('deploymentLocations')), 1), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[4]), createObject('value', split(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetResourceId.value, '/')[4]))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "9143027877243604216"
            }
          },
          "parameters": {
            "acceleratedNetworking": {
              "type": "string"
            },
            "activeDirectorySolution": {
              "type": "string"
            },
            "artifactsUri": {
              "type": "string"
            },
            "artifactsUserAssignedIdentityClientId": {
              "type": "string"
            },
            "artifactsUserAssignedIdentityResourceId": {
              "type": "string"
            },
            "automationAccountName": {
              "type": "string"
            },
            "availability": {
              "type": "string"
            },
            "availabilitySetNamePrefix": {
              "type": "string"
            },
            "availabilitySetsCount": {
              "type": "int"
            },
            "availabilitySetsIndex": {
              "type": "int"
            },
            "availabilityZones": {
              "type": "array"
            },
            "avdAgentBootLoaderMsiName": {
              "type": "string"
            },
            "avdAgentMsiName": {
              "type": "string"
            },
            "dataCollectionRuleAssociationName": {
              "type": "string"
            },
            "dataCollectionRuleResourceId": {
              "type": "string"
            },
            "deploymentUserAssignedIdentityClientId": {
              "type": "string"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "diskNamePrefix": {
              "type": "string"
            },
            "diskSku": {
              "type": "string"
            },
            "divisionRemainderValue": {
              "type": "int"
            },
            "domainJoinPassword": {
              "type": "securestring"
            },
            "domainJoinUserPrincipalName": {
              "type": "string"
            },
            "domainName": {
              "type": "string"
            },
            "drainMode": {
              "type": "bool"
            },
            "fslogix": {
              "type": "bool"
            },
            "fslogixContainerType": {
              "type": "string"
            },
            "hostPoolName": {
              "type": "string"
            },
            "hostPoolType": {
              "type": "string"
            },
            "hybridRunbookWorkerGroupName": {
              "type": "string"
            },
            "imageDefinitionResourceId": {
              "type": "string"
            },
            "imageOffer": {
              "type": "string"
            },
            "imagePublisher": {
              "type": "string"
            },
            "imageSku": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "managementVirtualMachineName": {
              "type": "string"
            },
            "maxResourcesPerTemplateDeployment": {
              "type": "int"
            },
            "monitoring": {
              "type": "bool"
            },
            "netAppFileShares": {
              "type": "array"
            },
            "networkInterfaceNamePrefix": {
              "type": "string"
            },
            "networkName": {
              "type": "string"
            },
            "organizationalUnitPath": {
              "type": "string"
            },
            "pooledHostPool": {
              "type": "bool"
            },
            "enableRecoveryServices": {
              "type": "bool"
            },
            "enableScalingTool": {
              "type": "bool"
            },
            "recoveryServicesVaultName": {
              "type": "string"
            },
            "resourceGroupControlPlane": {
              "type": "string"
            },
            "resourceGroupHosts": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "roleDefinitions": {
              "type": "object"
            },
            "scalingBeginPeakTime": {
              "type": "string"
            },
            "scalingEndPeakTime": {
              "type": "string"
            },
            "scalingLimitSecondsToForceLogOffUser": {
              "type": "string"
            },
            "scalingMinimumNumberOfRdsh": {
              "type": "string"
            },
            "scalingSessionThresholdPerCPU": {
              "type": "string"
            },
            "securityPrincipalObjectIds": {
              "type": "array"
            },
            "securityLogAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "serviceName": {
              "type": "string"
            },
            "sessionHostBatchCount": {
              "type": "int"
            },
            "sessionHostIndex": {
              "type": "int"
            },
            "storageAccountPrefix": {
              "type": "string"
            },
            "storageCount": {
              "type": "int"
            },
            "storageIndex": {
              "type": "int"
            },
            "storageService": {
              "type": "string"
            },
            "storageSuffix": {
              "type": "string"
            },
            "subnet": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timeDifference": {
              "type": "string"
            },
            "timestamp": {
              "type": "string"
            },
            "timeZone": {
              "type": "string"
            },
            "virtualMachineMonitoringAgent": {
              "type": "string"
            },
            "virtualMachineNamePrefix": {
              "type": "string"
            },
            "virtualMachinePassword": {
              "type": "securestring"
            },
            "virtualMachineSize": {
              "type": "string"
            },
            "virtualMachineUsername": {
              "type": "string"
            },
            "virtualNetwork": {
              "type": "string"
            },
            "virtualNetworkResourceGroup": {
              "type": "string"
            }
          },
          "variables": {
            "tagsAutomationAccounts": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Automation/automationAccounts'), parameters('tags')['Microsoft.Automation/automationAccounts'], createObject()))]",
            "tagsAvailabilitySets": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/availabilitySets'), parameters('tags')['Microsoft.Compute/availabilitySets'], createObject()))]",
            "tagsNetworkInterfaces": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], createObject()))]",
            "tagsRecoveryServicesVault": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.recoveryServices/vaults'), parameters('tags')['Microsoft.recoveryServices/vaults'], createObject()))]",
            "tagsVirtualMachines": "[union(createObject('cm-resource-parent', format('{0}}}/resourceGroups/{1}/providers/Microsoft.DesktopVirtualization/hostpools/{2}', subscription().id, parameters('resourceGroupManagement'), parameters('hostPoolName'))), if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), parameters('tags')['Microsoft.Compute/virtualMachines'], createObject()))]"
          },
          "resources": [
            {
              "condition": "[and(parameters('pooledHostPool'), equals(parameters('availability'), 'availabilitySets'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('availabilitySets_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "availabilitySetNamePrefix": {
                    "value": "[parameters('availabilitySetNamePrefix')]"
                  },
                  "availabilitySetsCount": {
                    "value": "[parameters('availabilitySetsCount')]"
                  },
                  "availabilitySetsIndex": {
                    "value": "[parameters('availabilitySetsIndex')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tagsAvailabilitySets": {
                    "value": "[variables('tagsAvailabilitySets')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "16136818856151416169"
                    }
                  },
                  "parameters": {
                    "availabilitySetNamePrefix": {
                      "type": "string"
                    },
                    "availabilitySetsCount": {
                      "type": "int"
                    },
                    "availabilitySetsIndex": {
                      "type": "int"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tagsAvailabilitySets": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "availabilitySets",
                        "count": "[length(range(0, parameters('availabilitySetsCount')))]"
                      },
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2019-07-01",
                      "name": "[format('{0}{1}', parameters('availabilitySetNamePrefix'), padLeft(add(range(0, parameters('availabilitySetsCount'))[copyIndex()], parameters('availabilitySetsIndex')), 2, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsAvailabilitySets')]",
                      "sku": {
                        "name": "Aligned"
                      },
                      "properties": {
                        "platformUpdateDomainCount": 5,
                        "platformFaultDomainCount": 2
                      }
                    }
                  ]
                }
              }
            },
            {
              "copy": {
                "name": "roleAssignments",
                "count": "[length(range(0, length(parameters('securityPrincipalObjectIds'))))]"
              },
              "condition": "[not(contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('RoleAssignments_{0}_{1}', range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()], parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "PrincipalId": {
                    "value": "[parameters('securityPrincipalObjectIds')[range(0, length(parameters('securityPrincipalObjectIds')))[copyIndex()]]]"
                  },
                  "PrincipalType": {
                    "value": "Group"
                  },
                  "RoleDefinitionId": {
                    "value": "[parameters('roleDefinitions').VirtualMachineUserLogin]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "1695210669952082012"
                    }
                  },
                  "parameters": {
                    "PrincipalId": {
                      "type": "string"
                    },
                    "PrincipalType": {
                      "type": "string"
                    },
                    "RoleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                        "principalId": "[parameters('PrincipalId')]",
                        "principalType": "[parameters('PrincipalType')]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "copy": {
                "name": "virtualMachines",
                "count": "[length(range(1, parameters('sessionHostBatchCount')))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('VirtualMachines_{0}_{1}', sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupHosts')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "acceleratedNetworking": {
                    "value": "[parameters('acceleratedNetworking')]"
                  },
                  "activeDirectorySolution": {
                    "value": "[parameters('activeDirectorySolution')]"
                  },
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "artifactsUserAssignedIdentityClientId": {
                    "value": "[parameters('artifactsUserAssignedIdentityClientId')]"
                  },
                  "artifactsUserAssignedIdentityResourceId": {
                    "value": "[parameters('artifactsUserAssignedIdentityResourceId')]"
                  },
                  "availability": {
                    "value": "[parameters('availability')]"
                  },
                  "availabilitySetNamePrefix": {
                    "value": "[parameters('availabilitySetNamePrefix')]"
                  },
                  "availabilityZones": {
                    "value": "[parameters('availabilityZones')]"
                  },
                  "avdAgentBootLoaderMsiName": {
                    "value": "[parameters('avdAgentBootLoaderMsiName')]"
                  },
                  "avdAgentMsiName": {
                    "value": "[parameters('avdAgentMsiName')]"
                  },
                  "batchCount": {
                    "value": "[range(1, parameters('sessionHostBatchCount'))[copyIndex()]]"
                  },
                  "dataCollectionRuleAssociationName": {
                    "value": "[parameters('dataCollectionRuleAssociationName')]"
                  },
                  "dataCollectionRuleResourceId": {
                    "value": "[parameters('dataCollectionRuleResourceId')]"
                  },
                  "deploymentUserAssignedidentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "diskNamePrefix": {
                    "value": "[parameters('diskNamePrefix')]"
                  },
                  "diskSku": {
                    "value": "[parameters('diskSku')]"
                  },
                  "domainJoinPassword": {
                    "value": "[parameters('domainJoinPassword')]"
                  },
                  "domainJoinUserPrincipalName": {
                    "value": "[parameters('domainJoinUserPrincipalName')]"
                  },
                  "domainName": {
                    "value": "[parameters('domainName')]"
                  },
                  "enableDrainMode": {
                    "value": "[parameters('drainMode')]"
                  },
                  "fslogix": {
                    "value": "[parameters('fslogix')]"
                  },
                  "fslogixContainerType": {
                    "value": "[parameters('fslogixContainerType')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "hostPoolType": {
                    "value": "[parameters('hostPoolType')]"
                  },
                  "imageDefinitionResourceId": {
                    "value": "[parameters('imageDefinitionResourceId')]"
                  },
                  "imageOffer": {
                    "value": "[parameters('imageOffer')]"
                  },
                  "imagePublisher": {
                    "value": "[parameters('imagePublisher')]"
                  },
                  "imageSku": {
                    "value": "[parameters('imageSku')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('logAnalyticsWorkspaceName')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "monitoring": {
                    "value": "[parameters('monitoring')]"
                  },
                  "netAppFileShares": {
                    "value": "[parameters('netAppFileShares')]"
                  },
                  "networkInterfaceNamePrefix": {
                    "value": "[parameters('networkInterfaceNamePrefix')]"
                  },
                  "networkName": {
                    "value": "[parameters('networkName')]"
                  },
                  "organizationalUnitPath": {
                    "value": "[parameters('organizationalUnitPath')]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "securityLogAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('securityLogAnalyticsWorkspaceResourceId')]"
                  },
                  "serviceName": {
                    "value": "[parameters('serviceName')]"
                  },
                  "sessionHostCount": "[if(and(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], parameters('sessionHostBatchCount')), greater(parameters('divisionRemainderValue'), 0)), createObject('value', parameters('divisionRemainderValue')), createObject('value', parameters('maxResourcesPerTemplateDeployment')))]",
                  "sessionHostIndex": "[if(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), createObject('value', parameters('sessionHostIndex')), createObject('value', add(mul(sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('maxResourcesPerTemplateDeployment')), parameters('sessionHostIndex'))))]",
                  "storageAccountPrefix": {
                    "value": "[parameters('storageAccountPrefix')]"
                  },
                  "storageCount": {
                    "value": "[parameters('storageCount')]"
                  },
                  "storageIndex": {
                    "value": "[parameters('storageIndex')]"
                  },
                  "storageService": {
                    "value": "[parameters('storageService')]"
                  },
                  "storageSuffix": {
                    "value": "[parameters('storageSuffix')]"
                  },
                  "subnet": {
                    "value": "[parameters('subnet')]"
                  },
                  "tagsNetworkInterfaces": {
                    "value": "[variables('tagsNetworkInterfaces')]"
                  },
                  "tagsVirtualMachines": {
                    "value": "[variables('tagsVirtualMachines')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "virtualMachineMonitoringAgent": {
                    "value": "[parameters('virtualMachineMonitoringAgent')]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[parameters('virtualMachineNamePrefix')]"
                  },
                  "virtualMachinePassword": {
                    "value": "[parameters('virtualMachinePassword')]"
                  },
                  "virtualMachineSize": {
                    "value": "[parameters('virtualMachineSize')]"
                  },
                  "virtualMachineUsername": {
                    "value": "[parameters('virtualMachineUsername')]"
                  },
                  "virtualNetwork": {
                    "value": "[parameters('virtualNetwork')]"
                  },
                  "virtualNetworkResourceGroup": {
                    "value": "[parameters('virtualNetworkResourceGroup')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "6881053167990712936"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "artifactsUserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "artifactsUserAssignedIdentityResourceId": {
                      "type": "string"
                    },
                    "acceleratedNetworking": {
                      "type": "string"
                    },
                    "activeDirectorySolution": {
                      "type": "string"
                    },
                    "availability": {
                      "type": "string"
                    },
                    "availabilitySetNamePrefix": {
                      "type": "string"
                    },
                    "availabilityZones": {
                      "type": "array"
                    },
                    "avdAgentBootLoaderMsiName": {
                      "type": "string"
                    },
                    "avdAgentMsiName": {
                      "type": "string"
                    },
                    "batchCount": {
                      "type": "int"
                    },
                    "dataCollectionRuleAssociationName": {
                      "type": "string"
                    },
                    "dataCollectionRuleResourceId": {
                      "type": "string"
                    },
                    "deploymentUserAssignedidentityClientId": {
                      "type": "string"
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "diskNamePrefix": {
                      "type": "string"
                    },
                    "diskSku": {
                      "type": "string"
                    },
                    "domainJoinPassword": {
                      "type": "securestring"
                    },
                    "domainJoinUserPrincipalName": {
                      "type": "string"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "enableDrainMode": {
                      "type": "bool"
                    },
                    "fslogix": {
                      "type": "bool"
                    },
                    "fslogixContainerType": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolType": {
                      "type": "string"
                    },
                    "imageDefinitionResourceId": {
                      "type": "string"
                    },
                    "imageOffer": {
                      "type": "string"
                    },
                    "imagePublisher": {
                      "type": "string"
                    },
                    "imageSku": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "monitoring": {
                      "type": "bool"
                    },
                    "netAppFileShares": {
                      "type": "array"
                    },
                    "networkInterfaceNamePrefix": {
                      "type": "string"
                    },
                    "networkName": {
                      "type": "string"
                    },
                    "organizationalUnitPath": {
                      "type": "string"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "securityLogAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "serviceName": {
                      "type": "string"
                    },
                    "sessionHostCount": {
                      "type": "int"
                    },
                    "sessionHostIndex": {
                      "type": "int"
                    },
                    "storageAccountPrefix": {
                      "type": "string"
                    },
                    "storageCount": {
                      "type": "int"
                    },
                    "storageIndex": {
                      "type": "int"
                    },
                    "storageService": {
                      "type": "string"
                    },
                    "storageSuffix": {
                      "type": "string"
                    },
                    "subnet": {
                      "type": "string"
                    },
                    "tagsNetworkInterfaces": {
                      "type": "object"
                    },
                    "tagsVirtualMachines": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "virtualMachineMonitoringAgent": {
                      "type": "string"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    },
                    "virtualMachinePassword": {
                      "type": "securestring"
                    },
                    "virtualMachineSize": {
                      "type": "string"
                    },
                    "virtualMachineUsername": {
                      "type": "string"
                    },
                    "virtualNetwork": {
                      "type": "string"
                    },
                    "virtualNetworkResourceGroup": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "amdVmSize": "[contains(variables('amdVmSizes'), parameters('virtualMachineSize'))]",
                    "amdVmSizes": [
                      "Standard_NV4as_v4",
                      "Standard_NV8as_v4",
                      "Standard_NV16as_v4",
                      "Standard_NV32as_v4"
                    ],
                    "fslogixExclusions": "[format('\"%TEMP%\\*\\*.VHDX\";\"%Windir%\\TEMP\\*\\*.VHDX\"{0}{1}{2}', variables('fslogixExclusionsCloudCache'), variables('fslogixExclusionsProfileContainers'), variables('fslogixExclusionsOfficeContainers'))]",
                    "fslogixExclusionsCloudCache": "[if(contains(parameters('fslogixContainerType'), 'CloudCache'), ';\"%ProgramData%\\fslogix\\Cache\\*\";\"%ProgramData%\\fslogix\\Proxy\\*\"', '')]",
                    "fslogixExclusionsOfficeContainers": "[if(contains(parameters('fslogixContainerType'), 'Office'), format(';\"{0}\";\"{1}.lock\";\"{2}.meta\";\"{3}.metadata\"', variables('fslogixOfficeShare'), variables('fslogixOfficeShare'), variables('fslogixOfficeShare'), variables('fslogixOfficeShare')), '')]",
                    "fslogixExclusionsProfileContainers": "[format(';\"{0}\";\"{1}.lock\";\"{2}.meta\";\"{3}.metadata\"', variables('fslogixProfileShare'), variables('fslogixProfileShare'), variables('fslogixProfileShare'), variables('fslogixProfileShare'))]",
                    "fslogixOfficeShare": "[format('\\\\{0}??.file.{1}\\office-containers\\*\\*.VHDX', parameters('storageAccountPrefix'), parameters('storageSuffix'))]",
                    "fslogixProfileShare": "[format('\\\\{0}??.file.{1}\\profile-containers\\*\\*.VHDX', parameters('storageAccountPrefix'), parameters('storageSuffix'))]",
                    "imageReference": "[if(empty(parameters('imageDefinitionResourceId')), createObject('publisher', parameters('imagePublisher'), 'offer', parameters('imageOffer'), 'sku', parameters('imageSku'), 'version', 'latest'), createObject('id', parameters('imageDefinitionResourceId')))]",
                    "intune": "[contains(parameters('activeDirectorySolution'), 'intuneEnrollment')]",
                    "nvidiaVmSize": "[contains(variables('nvidiaVmSizes'), parameters('virtualMachineSize'))]",
                    "nvidiaVmSizes": [
                      "Standard_NV6",
                      "Standard_NV12",
                      "Standard_NV24",
                      "Standard_NV12s_v3",
                      "Standard_NV24s_v3",
                      "Standard_NV48s_v3",
                      "Standard_NC4as_T4_v3",
                      "Standard_NC8as_T4_v3",
                      "Standard_NC16as_T4_v3",
                      "Standard_NC64as_T4_v3",
                      "Standard_NV6ads_A10_v5",
                      "Standard_NV12ads_A10_v5",
                      "Standard_NV18ads_A10_v5",
                      "Standard_NV36ads_A10_v5",
                      "Standard_NV36adms_A10_v5",
                      "Standard_NV72ads_A10_v5"
                    ],
                    "pooledHostPool": "[equals(split(parameters('hostPoolType'), ' ')[0], 'Pooled')]",
                    "securitylogAnalyticsWorkspaceName": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[8], '')]",
                    "securityLogAnalyticsWorkspaceResourceGroupName": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[4], resourceGroup().name)]",
                    "securityLogAnalyticsWorkspaceSubscriptionId": "[if(variables('securityMonitoring'), split(parameters('securityLogAnalyticsWorkspaceResourceId'), '/')[2], subscription().subscriptionId)]",
                    "securityMonitoring": "[if(empty(parameters('securityLogAnalyticsWorkspaceResourceId')), false(), true())]",
                    "sessionHostNamePrefix": "[replace(parameters('virtualMachineNamePrefix'), format('{0}{1}', parameters('serviceName'), parameters('networkName')), '')]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "networkInterface",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2020-05-01",
                      "name": "[format('{0}-{1}', replace(parameters('networkInterfaceNamePrefix'), format('-{0}', parameters('serviceName')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsNetworkInterfaces')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[resourceId(subscription().subscriptionId, parameters('virtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork'), parameters('subnet'))]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ],
                        "enableAcceleratedNetworking": "[if(equals(parameters('acceleratedNetworking'), 'True'), true(), false())]",
                        "enableIPForwarding": false
                      }
                    },
                    {
                      "copy": {
                        "name": "virtualMachine",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "zones": "[if(equals(parameters('availability'), 'AvailabilityZones'), createArray(parameters('availabilityZones')[mod(range(0, parameters('sessionHostCount'))[copyIndex()], length(parameters('availabilityZones')))]), null())]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('artifactsUserAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "properties": {
                        "availabilitySet": "[if(equals(parameters('availability'), 'AvailabilitySets'), createObject('id', resourceId('Microsoft.Compute/availabilitySets', format('{0}{1}', parameters('availabilitySetNamePrefix'), padLeft(div(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 200), 2, '0')))), null())]",
                        "hardwareProfile": {
                          "vmSize": "[parameters('virtualMachineSize')]"
                        },
                        "storageProfile": {
                          "imageReference": "[variables('imageReference')]",
                          "osDisk": {
                            "name": "[format('{0}-{1}', replace(parameters('diskNamePrefix'), format('-{0}', parameters('serviceName')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                            "osType": "Windows",
                            "createOption": "FromImage",
                            "caching": "ReadWrite",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "[parameters('diskSku')]"
                            }
                          },
                          "dataDisks": []
                        },
                        "osProfile": {
                          "computerName": "[format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                          "adminUsername": "[parameters('virtualMachineUsername')]",
                          "adminPassword": "[parameters('virtualMachinePassword')]",
                          "windowsConfiguration": {
                            "provisionVMAgent": true,
                            "enableAutomaticUpdates": false
                          },
                          "secrets": [],
                          "allowExtensionOperations": true
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}', replace(parameters('networkInterfaceNamePrefix'), format('-{0}', parameters('serviceName')), ''), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "securityProfile": {
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "trustedLaunch",
                          "encryptionAtHost": true
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "licenseType": "[if(equals(parameters('imagePublisher'), 'MicrosoftWindowsDesktop'), 'Windows_Client', 'Windows_Server')]"
                      },
                      "dependsOn": [
                        "networkInterface"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_IaasAntimalware",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'IaaSAntimalware')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security",
                        "type": "IaaSAntimalware",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": false,
                        "settings": {
                          "AntimalwareEnabled": true,
                          "RealtimeProtectionEnabled": "true",
                          "ScheduledScanSettings": {
                            "isEnabled": "true",
                            "day": "7",
                            "time": "120",
                            "scanType": "Quick"
                          },
                          "Exclusions": "[if(parameters('fslogix'), createObject('Paths', variables('fslogixExclusions')), createObject())]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_GuestAttestation",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_MicrosoftMonitoringAgent",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[and(parameters('monitoring'), equals(parameters('virtualMachineMonitoringAgent'), 'LogAnalyticsAgent'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'MicrosoftmonitoringAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.monitoring",
                        "type": "MicrosoftmonitoringAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "workspaceId": "[if(parameters('monitoring'), reference(resourceId(parameters('resourceGroupManagement'), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2015-03-20').customerId, null())]"
                        },
                        "protectedSettings": {
                          "workspaceKey": "[if(parameters('monitoring'), listKeys(resourceId(parameters('resourceGroupManagement'), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2015-03-20').primarySharedKey, null())]"
                        }
                      },
                      "dependsOn": [
                        "extension_IaasAntimalware",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AzureMonitorWindowsAgent",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[and(parameters('monitoring'), equals(parameters('virtualMachineMonitoringAgent'), 'AzureMonitorAgent'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dataCollectionRuleAssociation",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[and(parameters('monitoring'), equals(parameters('virtualMachineMonitoringAgent'), 'AzureMonitorAgent'))]",
                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                      "apiVersion": "2022-06-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]",
                      "name": "[parameters('dataCollectionRuleAssociationName')]",
                      "properties": {
                        "dataCollectionRuleId": "[parameters('dataCollectionRuleResourceId')]",
                        "description": "AVD Insights data collection rule association"
                      },
                      "dependsOn": [
                        "extension_AzureMonitorWindowsAgent",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_CustomScriptExtension",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'CustomScriptExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.10",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "fileUris": [
                            "[format('{0}{1}', parameters('artifactsUri'), parameters('avdAgentBootLoaderMsiName'))]",
                            "[format('{0}{1}', parameters('artifactsUri'), parameters('avdAgentMsiName'))]",
                            "[format('{0}Set-SessionHostConfiguration.ps1', parameters('artifactsUri'))]"
                          ],
                          "timestamp": "[parameters('timestamp')]"
                        },
                        "protectedSettings": {
                          "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File Set-SessionHostConfiguration.ps1 -activeDirectorySolution {0} -amdVmSize {1} -avdAgentBootLoaderMsiName \"{2}\" -avdAgentMsiName \"{3}\" -Environment {4} -fslogix {5} -fslogixContainerType {6} -hostPoolName {7} -HostPoolRegistrationToken \"{8}\" -imageOffer {9} -imagePublisher {10} -netAppFileShares {11} -nvidiaVmSize {12} -pooledHostPool {13} -securityMonitoring {14} -SecurityWorkspaceId {15} -securityWorkspaceKey \"{16}\" -storageAccountPrefix {17} -storageCount {18} -storageIndex {19} -storageService {20} -storageSuffix {21}', parameters('activeDirectorySolution'), variables('amdVmSize'), parameters('avdAgentBootLoaderMsiName'), parameters('avdAgentMsiName'), environment().name, parameters('fslogix'), parameters('fslogixContainerType'), parameters('hostPoolName'), reference(resourceId(parameters('resourceGroupControlPlane'), 'Microsoft.DesktopVirtualization/hostpools', parameters('hostPoolName')), '2019-12-10-preview').registrationInfo.token, parameters('imageOffer'), parameters('imagePublisher'), parameters('netAppFileShares'), variables('nvidiaVmSize'), variables('pooledHostPool'), variables('securityMonitoring'), if(variables('securityMonitoring'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('securityLogAnalyticsWorkspaceSubscriptionId'), variables('securityLogAnalyticsWorkspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', variables('securitylogAnalyticsWorkspaceName')), '2021-06-01').customerId, 'NotApplicable'), if(variables('securityMonitoring'), listKeys(parameters('securityLogAnalyticsWorkspaceResourceId'), '2021-06-01').primarySharedKey, 'NotApplicable'), parameters('storageAccountPrefix'), parameters('storageCount'), parameters('storageIndex'), parameters('storageService'), parameters('storageSuffix'))]",
                          "managedidentity": {
                            "clientId": "[parameters('artifactsUserAssignedIdentityClientId')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "dataCollectionRuleAssociation",
                        "extension_MicrosoftMonitoringAgent",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_JsonADDomainExtension",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[contains(parameters('activeDirectorySolution'), 'DomainServices')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'JsonADDomainExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "forceUpdateTag": "[parameters('timestamp')]",
                        "publisher": "Microsoft.Compute",
                        "type": "JsonADDomainExtension",
                        "typeHandlerVersion": "1.3",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "Name": "[parameters('domainName')]",
                          "Options": "3",
                          "OUPath": "[parameters('organizationalUnitPath')]",
                          "Restart": "true",
                          "User": "[parameters('domainJoinUserPrincipalName')]"
                        },
                        "protectedSettings": {
                          "Password": "[parameters('domainJoinPassword')]"
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CSE_DrainMode_{0}_{1}', parameters('batchCount'), parameters('timestamp')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AADLoginForWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[not(contains(parameters('activeDirectorySolution'), 'DomainServices'))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AADLoginForWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.ActiveDirectory",
                        "type": "AADLoginForWindows",
                        "typeHandlerVersion": "2.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": "[if(variables('intune'), createObject('mdmId', '0000000a-0000-0000-c000-000000000000'), null())]"
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('CSE_DrainMode_{0}_{1}', parameters('batchCount'), parameters('timestamp')))]",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_AmdGpuDriverWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[variables('amdVmSize')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'AmdGpuDriverWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.HpcCompute",
                        "type": "AmdGpuDriverWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_JsonADDomainExtension",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "extension_NvidiaGpuDriverWindows",
                        "count": "[length(range(0, parameters('sessionHostCount')))]"
                      },
                      "condition": "[variables('nvidiaVmSize')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')), 'NvidiaGpuDriverWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tagsVirtualMachines')]",
                      "properties": {
                        "publisher": "Microsoft.HpcCompute",
                        "type": "NvidiaGpuDriverWindows",
                        "typeHandlerVersion": "1.2",
                        "autoUpgradeMinorVersion": true,
                        "settings": {}
                      },
                      "dependsOn": [
                        "extension_AADLoginForWindows",
                        "extension_JsonADDomainExtension",
                        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', variables('sessionHostNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[range(0, parameters('sessionHostCount'))[copyIndex()]], parameters('sessionHostIndex')), 4, '0')))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableDrainMode')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('CSE_DrainMode_{0}_{1}', parameters('batchCount'), parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}Set-AvdDrainMode.ps1', parameters('artifactsUri'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "parameters": {
                            "value": "[format('-Environment {0} -hostPoolName {1} -HostPoolResourceGroupName {2} -sessionHostCount {3} -sessionHostIndex {4} -SubscriptionId {5} -TenantId {6} -userAssignedidentityClientId {7} -virtualMachineNamePrefix {8}', environment().name, parameters('hostPoolName'), parameters('resourceGroupControlPlane'), parameters('sessionHostCount'), parameters('sessionHostIndex'), subscription().subscriptionId, tenant().tenantId, parameters('deploymentUserAssignedidentityClientId'), variables('sessionHostNamePrefix'))]"
                          },
                          "scriptFileName": {
                            "value": "Set-AvdDrainMode.ps1"
                          },
                          "tags": {
                            "value": "[parameters('tagsVirtualMachines')]"
                          },
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('deploymentUserAssignedidentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6814716050578615031"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "extension_CustomScriptExtension"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupHosts')), 'Microsoft.Resources/deployments', format('availabilitySets_{0}', parameters('timestamp')))]"
              ]
            },
            {
              "condition": "[and(parameters('enableRecoveryServices'), contains(parameters('hostPoolType'), 'Personal'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('RecoveryServices_VirtualMachines_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "divisionRemainderValue": {
                    "value": "[parameters('divisionRemainderValue')]"
                  },
                  "fslogix": {
                    "value": "[parameters('fslogix')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "maxResourcesPerTemplateDeployment": {
                    "value": "[parameters('maxResourcesPerTemplateDeployment')]"
                  },
                  "recoveryServicesVaultName": {
                    "value": "[parameters('recoveryServicesVaultName')]"
                  },
                  "resourceGroupHosts": {
                    "value": "[parameters('resourceGroupHosts')]"
                  },
                  "resourceGroupManagement": {
                    "value": "[parameters('resourceGroupManagement')]"
                  },
                  "sessionHostBatchCount": {
                    "value": "[parameters('sessionHostBatchCount')]"
                  },
                  "sessionHostIndex": {
                    "value": "[parameters('sessionHostIndex')]"
                  },
                  "tagsRecoveryServicesVault": {
                    "value": "[variables('tagsRecoveryServicesVault')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "virtualMachineNamePrefix": {
                    "value": "[parameters('virtualMachineNamePrefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "2682876394077186264"
                    }
                  },
                  "parameters": {
                    "divisionRemainderValue": {
                      "type": "int"
                    },
                    "fslogix": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "maxResourcesPerTemplateDeployment": {
                      "type": "int"
                    },
                    "recoveryServicesVaultName": {
                      "type": "string"
                    },
                    "resourceGroupHosts": {
                      "type": "string"
                    },
                    "resourceGroupManagement": {
                      "type": "string"
                    },
                    "sessionHostBatchCount": {
                      "type": "int"
                    },
                    "sessionHostIndex": {
                      "type": "int"
                    },
                    "tagsRecoveryServicesVault": {
                      "type": "object"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "virtualMachineNamePrefix": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "protectedItems_Vm",
                        "count": "[length(range(1, parameters('sessionHostBatchCount')))]"
                      },
                      "condition": "[not(parameters('fslogix'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('BackupProtectedItems_VirtualMachines_{0}_{1}', sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('timestamp'))]",
                      "resourceGroup": "[parameters('resourceGroupManagement')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "policyId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.RecoveryServices/vaults/backupPolicies', parameters('recoveryServicesVaultName'), 'AvdPolicyVm')]"
                          },
                          "recoveryServicesVaultName": {
                            "value": "[parameters('recoveryServicesVaultName')]"
                          },
                          "sessionHostCount": "[if(and(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], parameters('sessionHostBatchCount')), greater(parameters('divisionRemainderValue'), 0)), createObject('value', parameters('divisionRemainderValue')), createObject('value', parameters('maxResourcesPerTemplateDeployment')))]",
                          "sessionHostIndex": "[if(equals(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), createObject('value', parameters('sessionHostIndex')), createObject('value', add(mul(sub(range(1, parameters('sessionHostBatchCount'))[copyIndex()], 1), parameters('maxResourcesPerTemplateDeployment')), parameters('sessionHostIndex'))))]",
                          "tags": {
                            "value": "[parameters('tagsRecoveryServicesVault')]"
                          },
                          "virtualMachineNamePrefix": {
                            "value": "[parameters('virtualMachineNamePrefix')]"
                          },
                          "virtualMachineResourceGroupName": {
                            "value": "[parameters('resourceGroupHosts')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "964116440233493769"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "policyId": {
                              "type": "string"
                            },
                            "recoveryServicesVaultName": {
                              "type": "string"
                            },
                            "sessionHostCount": {
                              "type": "int"
                            },
                            "sessionHostIndex": {
                              "type": "int"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "virtualMachineNamePrefix": {
                              "type": "string"
                            },
                            "virtualMachineResourceGroupName": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "v2VmContainer": "iaasvmcontainer;iaasvmcontainerv2;",
                            "v2Vm": "vm;iaasvmcontainerv2;"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "protectedItems_Vm",
                                "count": "[length(range(0, parameters('sessionHostCount')))]"
                              },
                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                              "apiVersion": "2021-08-01",
                              "name": "[format('{0}/Azure/{1}{2};{3}{4}/{5}{6};{7}{8}', parameters('recoveryServicesVaultName'), variables('v2VmContainer'), parameters('virtualMachineResourceGroupName'), parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'), variables('v2Vm'), parameters('virtualMachineResourceGroupName'), parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "protectedItemType": "Microsoft.Compute/virtualMachines",
                                "policyId": "[parameters('policyId')]",
                                "sourceResourceId": "[resourceId(parameters('virtualMachineResourceGroupName'), 'Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('virtualMachineNamePrefix'), padLeft(add(range(0, parameters('sessionHostCount'))[copyIndex()], parameters('sessionHostIndex')), 4, '0')))]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "virtualMachines"
              ]
            },
            {
              "condition": "[and(parameters('enableScalingTool'), parameters('pooledHostPool'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('ScalingTool_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "artifactsUri": {
                    "value": "[parameters('artifactsUri')]"
                  },
                  "automationAccountName": {
                    "value": "[parameters('automationAccountName')]"
                  },
                  "beginPeakTime": {
                    "value": "[parameters('scalingBeginPeakTime')]"
                  },
                  "endPeakTime": {
                    "value": "[parameters('scalingEndPeakTime')]"
                  },
                  "hostPoolName": {
                    "value": "[parameters('hostPoolName')]"
                  },
                  "hostPoolResourceGroupName": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "hybridRunbookWorkerGroupName": {
                    "value": "[parameters('hybridRunbookWorkerGroupName')]"
                  },
                  "limitSecondsToForceLogOffUser": {
                    "value": "[parameters('scalingLimitSecondsToForceLogOffUser')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managementVirtualMachineName": {
                    "value": "[parameters('managementVirtualMachineName')]"
                  },
                  "minimumNumberOfRdsh": {
                    "value": "[parameters('scalingMinimumNumberOfRdsh')]"
                  },
                  "resourceGroupControlPlane": {
                    "value": "[parameters('resourceGroupControlPlane')]"
                  },
                  "resourceGroupHosts": {
                    "value": "[parameters('resourceGroupHosts')]"
                  },
                  "sessionThresholdPerCPU": {
                    "value": "[parameters('scalingSessionThresholdPerCPU')]"
                  },
                  "tags": {
                    "value": "[variables('tagsAutomationAccounts')]"
                  },
                  "timeDifference": {
                    "value": "[parameters('timeDifference')]"
                  },
                  "timestamp": {
                    "value": "[parameters('timestamp')]"
                  },
                  "timeZone": {
                    "value": "[parameters('timeZone')]"
                  },
                  "userAssignedIdentityClientId": {
                    "value": "[parameters('deploymentUserAssignedIdentityClientId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "633254809050304901"
                    }
                  },
                  "parameters": {
                    "artifactsUri": {
                      "type": "string"
                    },
                    "automationAccountName": {
                      "type": "string"
                    },
                    "beginPeakTime": {
                      "type": "string"
                    },
                    "endPeakTime": {
                      "type": "string"
                    },
                    "hostPoolName": {
                      "type": "string"
                    },
                    "hostPoolResourceGroupName": {
                      "type": "string"
                    },
                    "hybridRunbookWorkerGroupName": {
                      "type": "string"
                    },
                    "limitSecondsToForceLogOffUser": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "managementVirtualMachineName": {
                      "type": "string"
                    },
                    "minimumNumberOfRdsh": {
                      "type": "string"
                    },
                    "resourceGroupControlPlane": {
                      "type": "string"
                    },
                    "resourceGroupHosts": {
                      "type": "string"
                    },
                    "sessionThresholdPerCPU": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "timeDifference": {
                      "type": "string"
                    },
                    "time": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "timeZone": {
                      "type": "string"
                    },
                    "userAssignedIdentityClientId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "roleAssignments": [
                      "[parameters('resourceGroupControlPlane')]",
                      "[parameters('resourceGroupHosts')]"
                    ],
                    "runbookFileName": "Set-HostPoolScaling.ps1",
                    "scriptFileName": "Set-AutomationRunbook.ps1"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "schedules",
                        "count": "[length(range(0, 4))]"
                      },
                      "type": "Microsoft.Automation/automationAccounts/schedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), format('{0}_{1}min', parameters('hostPoolName'), mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                      "properties": {
                        "advancedSchedule": {},
                        "description": null,
                        "expiryTime": null,
                        "frequency": "Hour",
                        "interval": 1,
                        "startTime": "[dateTimeAdd(parameters('time'), format('PT{0}M', mul(add(range(0, 4)[copyIndex()], 1), 15)))]",
                        "timeZone": "[parameters('timeZone')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "jobSchedules",
                        "count": "[length(range(0, 4))]"
                      },
                      "type": "Microsoft.Automation/automationAccounts/jobSchedules",
                      "apiVersion": "2022-08-08",
                      "name": "[format('{0}/{1}', parameters('automationAccountName'), guid(parameters('time'), variables('runbookFileName'), parameters('hostPoolName'), string(range(0, 4)[copyIndex()])))]",
                      "properties": {
                        "parameters": {
                          "beginPeakTime": "[parameters('beginPeakTime')]",
                          "endPeakTime": "[parameters('endPeakTime')]",
                          "EnvironmentName": "[environment().name]",
                          "hostPoolName": "[parameters('hostPoolName')]",
                          "limitSecondsToForceLogOffUser": "[parameters('limitSecondsToForceLogOffUser')]",
                          "LogOffMessageBody": "Your session will be logged off. Please save and close everything.",
                          "LogOffMessageTitle": "Machine is about to shutdown.",
                          "MaintenanceTagName": "Maintenance",
                          "minimumNumberOfRdsh": "[parameters('minimumNumberOfRdsh')]",
                          "ResourceGroupName": "[parameters('hostPoolResourceGroupName')]",
                          "sessionThresholdPerCPU": "[parameters('sessionThresholdPerCPU')]",
                          "SubscriptionId": "[subscription().subscriptionId]",
                          "TenantId": "[subscription().tenantId]",
                          "timeDifference": "[parameters('timeDifference')]"
                        },
                        "runbook": {
                          "name": "[replace(variables('runbookFileName'), '.ps1', '')]"
                        },
                        "runOn": "[parameters('hybridRunbookWorkerGroupName')]",
                        "schedule": {
                          "name": "[format('{0}_{1}min', parameters('hostPoolName'), mul(add(range(0, 4)[range(0, 4)[copyIndex()]], 1), 15))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('Runbook_{0}', parameters('timestamp')))]",
                        "[resourceId('Microsoft.Automation/automationAccounts/schedules', parameters('automationAccountName'), format('{0}_{1}min', parameters('hostPoolName'), mul(add(range(0, 4)[range(0, 4)[copyIndex()]], 1), 15)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Runbook_{0}', parameters('timestamp'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "fileUris": {
                            "value": [
                              "[format('{0}{1}', parameters('artifactsUri'), variables('runbookFileName'))]",
                              "[format('{0}{1}', parameters('artifactsUri'), variables('scriptFileName'))]"
                            ]
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "parameters": {
                            "value": "[format('-AutomationAccountName {0} -Environment {1} -ResourceGroupName {2} -RunbookFileName {3} -SubscriptionId {4} -TenantId {5} -UserAssignedIdentityClientId {6}', parameters('automationAccountName'), environment().name, resourceGroup().name, variables('runbookFileName'), subscription().subscriptionId, tenant().tenantId, parameters('userAssignedIdentityClientId'))]"
                          },
                          "scriptFileName": {
                            "value": "[variables('scriptFileName')]"
                          },
                          "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject('value', parameters('tags')['Microsoft.Compute/virtualMachines']), createObject('value', createObject()))]",
                          "userAssignedIdentityClientId": {
                            "value": "[parameters('userAssignedIdentityClientId')]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('managementVirtualMachineName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6814716050578615031"
                            }
                          },
                          "parameters": {
                            "fileUris": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "parameters": {
                              "type": "securestring"
                            },
                            "scriptFileName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "timestamp": {
                              "type": "string",
                              "defaultValue": "[utcNow('yyyyMMddhhmmss')]"
                            },
                            "userAssignedIdentityClientId": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-03-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'CustomScriptExtension')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.10",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "timestamp": "[parameters('timestamp')]"
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell -ExecutionPolicy Unrestricted -File {0} {1}', parameters('scriptFileName'), parameters('parameters'))]",
                                  "fileUris": "[parameters('fileUris')]",
                                  "managedIdentity": {
                                    "clientId": "[parameters('userAssignedIdentityClientId')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "value": {
                              "type": "object",
                              "value": "[json(filter(reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), 'CustomScriptExtension'), '2021-03-01').instanceView.substatuses, lambda('item', equals(lambdaVariables('item').code, 'ComponentStatus/StdOut/succeeded')))[0].message)]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(range(0, length(variables('roleAssignments'))))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('RoleAssignment_{0}_{1}', range(0, length(variables('roleAssignments')))[copyIndex()], variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]])]",
                      "resourceGroup": "[variables('roleAssignments')[range(0, length(variables('roleAssignments')))[copyIndex()]]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "PrincipalId": {
                            "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2022-08-08', 'full').identity.principalId]"
                          },
                          "PrincipalType": {
                            "value": "ServicePrincipal"
                          },
                          "RoleDefinitionId": {
                            "value": "40c5ff49-9181-41f8-ae61-143b0e78555e"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "1695210669952082012"
                            }
                          },
                          "parameters": {
                            "PrincipalId": {
                              "type": "string"
                            },
                            "PrincipalType": {
                              "type": "string"
                            },
                            "RoleDefinitionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('PrincipalId'), parameters('RoleDefinitionId'), resourceGroup().id)]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
                                "principalId": "[parameters('PrincipalId')]",
                                "principalType": "[parameters('PrincipalType')]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupManagement')), 'Microsoft.Resources/deployments', format('RecoveryServices_VirtualMachines_{0}', parameters('timestamp')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('FSLogix_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Logic_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_ControlPlane_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Network_Hosts_{0}', parameters('timestamp')))]",
        "rgs"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('CleanUp_{0}', parameters('timestamp'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "fslogixStorageService": {
            "value": "[parameters('fslogixStorageService')]"
          },
          "location": {
            "value": "[parameters('locationVirtualMachines')]"
          },
          "resourceGroupManagement": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp'))), '2022-09-01').outputs.resources.value.resourceGroupManagement]"
          },
          "scalingTool": {
            "value": "[parameters('scalingTool')]"
          },
          "timestamp": {
            "value": "[parameters('timestamp')]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.deploymentUserAssignedIdentityClientId.value]"
          },
          "virtualMachineName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp'))), '2022-09-01').outputs.virtualMachineName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "10502117176680159809"
            }
          },
          "parameters": {
            "fslogixStorageService": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "resourceGroupManagement": {
              "type": "string"
            },
            "scalingTool": {
              "type": "bool"
            },
            "timestamp": {
              "type": "string"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[and(not(parameters('scalingTool')), not(equals(parameters('fslogixStorageService'), 'AzureFiles Premium')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('RemoveManagementVirtualMachine_{0}', parameters('timestamp'))]",
              "resourceGroup": "[parameters('resourceGroupManagement')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "Location": {
                    "value": "[parameters('location')]"
                  },
                  "UserAssignedIdentityClientId": {
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  },
                  "VirtualMachineName": {
                    "value": "[parameters('virtualMachineName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "13599098506645097680"
                    }
                  },
                  "parameters": {
                    "Location": {
                      "type": "string"
                    },
                    "UserAssignedIdentityClientId": {
                      "type": "string"
                    },
                    "VirtualMachineName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines/runCommands",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('VirtualMachineName'), 'RunCommand')]",
                      "location": "[parameters('Location')]",
                      "properties": {
                        "treatFailureAsDeploymentFailure": true,
                        "asyncExecution": true,
                        "parameters": [
                          {
                            "name": "Environment",
                            "value": "[environment().name]"
                          },
                          {
                            "name": "ResourceGroupName",
                            "value": "[resourceGroup().name]"
                          },
                          {
                            "name": "SubscriptionId",
                            "value": "[subscription().subscriptionId]"
                          },
                          {
                            "name": "TenantId",
                            "value": "[tenant().tenantId]"
                          },
                          {
                            "name": "UserAssignedIdentityClientId",
                            "value": "[parameters('UserAssignedIdentityClientId')]"
                          },
                          {
                            "name": "VirtualMachineName",
                            "value": "[parameters('VirtualMachineName')]"
                          }
                        ],
                        "source": {
                          "script": "        param(\r\n          [string]$Environment,\r\n          [string]$ResourceGroupName,\r\n          [string]$SubscriptionId,\r\n          [string]$TenantId,\r\n          [string]$UserAssignedIdentityClientId,\r\n          [string]$VirtualMachineName\r\n        )\r\n        Start-Sleep -Seconds 30\r\n        Connect-AzAccount -Environment $Environment -Tenant $TenantId -Subscription $SubscriptionId -Identity -AccountId $UserAssignedIdentityClientId\r\n        Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $VirtualMachineName -NoWait -Force\r\n      "
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('FSLogix_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Management_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('Names_{0}', parameters('timestamp')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('SessionHosts_{0}', parameters('timestamp')))]"
      ]
    }
  ]
}