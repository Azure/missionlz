{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.35.1.17967",
      "templateHash": "6699563380374554490"
    }
  },
  "parameters": {
    "azureGatewaySubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.129.192/26",
      "metadata": {
        "description": "The CIDR Subnet Address Prefix for the Azure Gateway Subnet. It must be in the Hub Virtual Network space. It must be /26."
      }
    },
    "bastionDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "BastionAuditLogs",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Bastion Diagnostic Logs categories to collect. See the following URL for valid values: https://learn.microsoft.com/azure/bastion/monitor-bastion#collect-data-with-azure-monitor."
      }
    },
    "bastionDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Bastion Diagnostic Metrics categories to collect. See the following URL for valid values: https://learn.microsoft.com/azure/bastion/monitor-bastion#collect-data-with-azure-monitor."
      }
    },
    "bastionHostPublicIPAddressAvailabilityZones": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The Azure Bastion Public IP Address Availability Zones. Default value = \"No-Zone\" because Availability Zones are not available in every cloud. See the following URL for valid settings: https://learn.microsoft.com/azure/virtual-network/ip-services/public-ip-addresses#sku."
      }
    },
    "bastionHostSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.128.192/26",
      "metadata": {
        "description": "The CIDR Subnet Address Prefix for the Azure Bastion Subnet. It must be in the Hub Virtual Network space \"hubVirtualNetworkAddressPrefix\" parameter value. It must be /27 or larger."
      }
    },
    "customFirewallRuleCollectionGroups": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The firewall rules that will be applied to the Azure Firewall."
      }
    },
    "defenderSkuTier": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": [
        "Standard",
        "Free"
      ],
      "metadata": {
        "description": "[Standard/Free] The SKU for Defender for Cloud. Default value = \"Free\"."
      }
    },
    "deployAzureGatewaySubnet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "When set to \"true\", provisions Azure Gateway Subnet only. Default value = \"false\"."
      }
    },
    "deployBastion": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "When set to \"true\", provisions Azure Bastion Host using the Standard SKU. Default value = \"false\"."
      }
    },
    "deployDefender": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "When set to \"true\", enables Microsoft Defender for Cloud for the subscriptions used in the deployment. Default value = \"false\"."
      }
    },
    "deployDefenderPlans": {
      "type": "array",
      "defaultValue": [
        "VirtualMachines"
      ],
      "metadata": {
        "description": "The Paid Workload Protection plans for Defender for Cloud. Default value = \"VirtualMachines\". See the following URL for valid settings: https://learn.microsoft.com/rest/api/defenderforcloud-composite/pricings/update?view=rest-defenderforcloud-composite-latest&tabs=HTTP."
      }
    },
    "deployIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Choose to deploy the identity resources. The identity resoures are not required if you plan to use cloud identities."
      }
    },
    "deployLinuxVirtualMachine": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "When set to \"true\", provisions Linux Virtual Machine Host only. Default value = \"false\"."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "A suffix to use for naming deployments uniquely. Default value = \"utcNow()\"."
      }
    },
    "deployNetworkWatcherTrafficAnalytics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "When set to true, deploys Network Watcher Traffic Analytics. Default value = \"false\"."
      }
    },
    "deployPolicy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "When set to \"true\", deploys the Azure Policy set defined at by the parameter \"policy\" to the resource groups generated in the deployment. Default value = \"false\"."
      }
    },
    "deploySentinel": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "When set to \"true\", enables Microsoft Sentinel within the Log Analytics Workspace created in this deployment. Default value = \"false\"."
      }
    },
    "deployWindowsVirtualMachine": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "When set to \"true\", provisions Windows Virtual Machine Host only. Default value = \"false\"."
      }
    },
    "dnsServers": {
      "type": "array",
      "defaultValue": [
        "168.63.129.16"
      ],
      "metadata": {
        "description": "The Azure Firewall DNS Proxy will forward all DNS traffic. When this value is set to true, you must provide a value for \"servers\". This should be a comma separated list of IP addresses to forward DNS traffic."
      }
    },
    "emailSecurityContact": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The email address for Defender for Cloud alert notifications, in the form of john@contoso.com."
      }
    },
    "enableProxy": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "The Azure Firewall DNS Proxy will forward all DNS traffic. Default value = \"true\"."
      }
    },
    "environmentAbbreviation": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "prod",
        "test"
      ],
      "metadata": {
        "description": "[dev/prod/test] The abbreviation for the target environment."
      }
    },
    "firewallClientPublicIPAddressAvailabilityZones": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of Azure Firewall Public IP Address Availability Zones. Default value = \"[]\" because Availability Zones are not available in every cloud. See the following URL for valid settings: https://learn.microsoft.com/azure/virtual-network/ip-services/public-ip-addresses#sku."
      }
    },
    "firewallClientSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.128.0/26",
      "metadata": {
        "description": "The CIDR Subnet Address Prefix for the Azure Firewall Subnet. It must be in the Hub Virtual Network space. It must be /26."
      }
    },
    "firewallDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AzureFirewallApplicationRule",
          "enabled": true
        },
        {
          "category": "AzureFirewallNetworkRule",
          "enabled": true
        },
        {
          "category": "AzureFirewallDnsProxy",
          "enabled": "[parameters('enableProxy')]"
        },
        {
          "category": "AZFWNetworkRule",
          "enabled": true
        },
        {
          "category": "AZFWApplicationRule",
          "enabled": true
        },
        {
          "category": "AZFWNatRule",
          "enabled": true
        },
        {
          "category": "AZFWThreatIntel",
          "enabled": true
        },
        {
          "category": "AZFWIdpsSignature",
          "enabled": true
        },
        {
          "category": "AZFWDnsQuery",
          "enabled": true
        },
        {
          "category": "AZFWFqdnResolveFailure",
          "enabled": true
        },
        {
          "category": "AZFWFatFlow",
          "enabled": true
        },
        {
          "category": "AZFWFlowTrace",
          "enabled": true
        },
        {
          "category": "AZFWApplicationRuleAggregation",
          "enabled": true
        },
        {
          "category": "AZFWNetworkRuleAggregation",
          "enabled": true
        },
        {
          "category": "AZFWNatRuleAggregation",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Firewall Diagnostic Logs categories to collect. See the following URL for valid values: https://learn.microsoft.com/azure/firewall/monitor-firewall#enable-diagnostic-logging-through-the-azure-portal."
      }
    },
    "firewallDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Firewall Diagnostic Metrics categories to collect. See the following URL for valid values: https://learn.microsoft.com/azure/firewall/monitor-firewall#enable-diagnostic-logging-through-the-azure-portal."
      }
    },
    "firewallIntrusionDetectionMode": {
      "type": "string",
      "defaultValue": "Alert",
      "allowedValues": [
        "Alert",
        "Deny",
        "Off"
      ],
      "metadata": {
        "description": "[Alert/Deny/Off] The Azure Firewall Intrusion Detection mode. Valid values are \"Alert\", \"Deny\", or \"Off\". The default value is \"Alert\"."
      }
    },
    "firewallManagementPublicIPAddressAvailabilityZones": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of Azure Firewall Public IP Address Availability Zones. Default value = \"[]\" because Availability Zones are not available in every cloud. See the following URL for valid settings: https://learn.microsoft.com/azure/virtual-network/ip-services/public-ip-addresses#sku."
      }
    },
    "firewallManagementSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.128.64/26",
      "metadata": {
        "description": "The CIDR Subnet Address Prefix for the Azure Firewall Management Subnet. It must be in the Hub Virtual Network space. It must be /26."
      }
    },
    "firewallSkuTier": {
      "type": "string",
      "defaultValue": "Premium",
      "allowedValues": [
        "Premium",
        "Standard"
      ],
      "metadata": {
        "description": "[Premium/Standard] The SKU for Azure Firewall. Default value = \"Premium\". Selecting a value other than Premium is not recommended for environments that are required to be SCCA compliant."
      }
    },
    "firewallSupernetIPAddress": {
      "type": "string",
      "defaultValue": "10.0.128.0/18",
      "metadata": {
        "description": "Supernet CIDR address for the entire network of vnets, this address allows for communication between spokes. Recommended to use a Supernet calculator if modifying vnet addresses."
      }
    },
    "firewallThreatIntelMode": {
      "type": "string",
      "defaultValue": "Alert",
      "allowedValues": [
        "Alert",
        "Deny",
        "Off"
      ],
      "metadata": {
        "description": "[Alert/Deny/Off] The Azure Firewall Threat Intelligence Rule triggered logging behavior. Valid values are \"Alert\", \"Deny\", or \"Off\". The default value is \"Alert\"."
      }
    },
    "hubNetworkSecurityGroupDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "NetworkSecurityGroupEvent",
          "enabled": true
        },
        {
          "category": "NetworkSecurityGroupRuleCounter",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Security Group diagnostic logs to apply to the Hub Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/virtual-network/virtual-network-nsg-manage-log#log-categories."
      }
    },
    "hubNetworkSecurityGroupRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of Network Security Group Rules to apply to the Hub Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/templates/microsoft.network/networksecuritygroups/securityrules?tabs=bicep&pivots=deployment-language-bicep#securityrulepropertiesformat."
      }
    },
    "hubSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.128.128/26",
      "metadata": {
        "description": "The CIDR Subnet Address Prefix for the default Hub subnet. It must be in the Hub Virtual Network space."
      }
    },
    "hubSubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "The subscription ID for the Hub Network and resources. Default value = \"subscription().subscriptionId\"."
      }
    },
    "hubVirtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.128.0/23",
      "metadata": {
        "description": "The CIDR Virtual Network Address Prefix for the Hub Virtual Network."
      }
    },
    "hubVirtualNetworkDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "VMProtectionAlerts",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Diagnostic Logs to enable for the Hub Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#logs."
      }
    },
    "hubVirtualNetworkDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Diagnostic Metrics to enable for the Hub Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics."
      }
    },
    "hybridUseBenefit": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "The hybrid use benefit provides a discount on virtual machines when a customer has an on-premises Windows Server license with Software Assurance. Default value = \"false\"."
      }
    },
    "identifier": {
      "type": "string",
      "minLength": 1,
      "maxLength": 6,
      "metadata": {
        "description": "1-6 alphanumeric characters without whitespace, used to name resources and generate uniqueness for resources within your subscription. Ideally, the value should represent an organization, department, or business unit."
      }
    },
    "identityNetworkSecurityGroupDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "NetworkSecurityGroupEvent",
          "enabled": true
        },
        {
          "category": "NetworkSecurityGroupRuleCounter",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Security Group diagnostic logs to apply to the Identity Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/virtual-network/virtual-network-nsg-manage-log#log-categories."
      }
    },
    "identityNetworkSecurityGroupRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of Network Security Group Rules to apply to the Identity Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/templates/microsoft.network/networksecuritygroups/securityrules?tabs=bicep#securityrulepropertiesformat."
      }
    },
    "identitySubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.130.0/24",
      "metadata": {
        "description": "The CIDR Subnet Address Prefix for the default Identity subnet. It must be in the Identity Virtual Network space."
      }
    },
    "identitySubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "The subscription ID for the Identity Network and resources. Default value = \"subscription().subscriptionId\"."
      }
    },
    "identityVirtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.130.0/24",
      "metadata": {
        "description": "The CIDR Virtual Network Address Prefix for the Identity Virtual Network."
      }
    },
    "identityVirtualNetworkDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "VMProtectionAlerts",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Diagnostic Logs to enable for the Identity Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#logs."
      }
    },
    "identityVirtualNetworkDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Diagnostic Metrics to enable for the Identity Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics."
      }
    },
    "keyVaultDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AuditEvent",
          "enabled": true
        },
        {
          "category": "AzurePolicyEvaluationDetails",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Key Vault Diagnostic Logs categories to collect. See the following URL for valid settings: \"https://learn.microsoft.com/azure/key-vault/general/logging?tabs=Vault\"."
      }
    },
    "keyVaultDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "The Key Vault Diagnostic Metrics to collect. See the following URL for valid settings: \"https://learn.microsoft.com/azure/key-vault/general/logging?tabs=Vault\"."
      }
    },
    "linuxNetworkInterfacePrivateIPAddressAllocationMethod": {
      "type": "string",
      "defaultValue": "Dynamic",
      "allowedValues": [
        "Static",
        "Dynamic"
      ],
      "metadata": {
        "description": "[Static/Dynamic] The public IP Address allocation method for the Linux virtual machine. Default value = \"Dynamic\"."
      }
    },
    "linuxVmAdminPasswordOrKey": {
      "type": "securestring",
      "defaultValue": "[if(parameters('deployLinuxVirtualMachine'), '', newGuid())]",
      "minLength": 12,
      "metadata": {
        "description": "The administrator password or public SSH key for the Linux Virtual Machine for remote access. See the following URL for valid settings: https://learn.microsoft.com/azure/virtual-machines/linux/faq#what-are-the-password-requirements-when-creating-a-vm-."
      }
    },
    "linuxVmAdminUsername": {
      "type": "string",
      "defaultValue": "xadmin",
      "metadata": {
        "description": "The administrator username for the Linux Virtual Machine for remote access. Default value = \"xadmin\"."
      }
    },
    "linuxVmAuthenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "[sshPublicKey/password] The authentication type for the Linux Virtual Machine for remote access. Default value = \"password\"."
      }
    },
    "linuxVmImageOffer": {
      "type": "string",
      "defaultValue": "0001-com-ubuntu-server-focal",
      "allowedValues": [
        "ubuntuserver",
        "0001-com-ubuntu-server-focal",
        "0001-com-ubuntu-server-jammy",
        "RHEL",
        "Debian-12"
      ],
      "metadata": {
        "description": "[ubuntuserver/0001-com-ubuntu-server-focal/0001-com-ubuntu-server-jammy/RHEL/Debian-12] The Linux image offer in the Azure marketplace. Default value = \"0001-com-ubuntu-server-focal\"."
      }
    },
    "linuxVmImagePublisher": {
      "type": "string",
      "defaultValue": "Canonical",
      "allowedValues": [
        "Canonical",
        "RedHat",
        "Debian"
      ],
      "metadata": {
        "description": "[Canonical/RedHat/Debian] The Linux image publisher in the Azure marketplace. Default value = \"Canonical\"."
      }
    },
    "linuxVmImageSku": {
      "type": "string",
      "defaultValue": "20_04-lts-gen2",
      "metadata": {
        "description": "The Linux image SKU in the Azure marketplace. Default value = \"20_04-lts-gen2\"."
      }
    },
    "linuxVmOsDiskCreateOption": {
      "type": "string",
      "defaultValue": "FromImage",
      "metadata": {
        "description": "The disk creation option of the Linux Virtual Machine for remote access. Default value = \"FromImage\"."
      }
    },
    "linuxVmOsDiskType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The disk type of the Linux Virtual Machine for remote access. Default value = \"Standard_LRS\"."
      }
    },
    "linuxVmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "The size of the Linux virtual machine. Default value = \"Standard_D2s_v3\"."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The region to deploy resources into. Default value = \"deployment().location\"."
      }
    },
    "logAnalyticsWorkspaceCappingDailyQuotaGb": {
      "type": "int",
      "defaultValue": -1,
      "metadata": {
        "description": "The daily quota for Log Analytics Workspace logs in Gigabytes. Default value = \"-1\", meaning no quota."
      }
    },
    "logAnalyticsWorkspaceRetentionInDays": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "The number of days to retain Log Analytics Workspace logs without Sentinel. Default value = \"30\"."
      }
    },
    "logAnalyticsWorkspaceSkuName": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "allowedValues": [
        "Free",
        "Standard",
        "Premium",
        "PerNode",
        "PerGB2018",
        "Standalone"
      ],
      "metadata": {
        "description": "[Free/Standard/Premium/PerNode/PerGB2018/Standalone] The SKU for the Log Analytics Workspace. Default value = \"PerGB2018\". See the following URL for valid settings: https://learn.microsoft.com/azure/azure-monitor/logs/resource-manager-workspace."
      }
    },
    "logStorageSkuName": {
      "type": "string",
      "defaultValue": "Standard_GRS",
      "metadata": {
        "description": "The Storage Account SKU to use for log storage. Default value = \"Standard_GRS\". See the following URL for valid settings: https://learn.microsoft.com/rest/api/storagerp/srp_sku_types."
      }
    },
    "networkInterfaceDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of metrics to enable on the diagnostic setting for network interfaces."
      }
    },
    "networkWatcherFlowLogsRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "The number of days to retain Network Watcher Flow Logs. Default value = \"30\"."
      }
    },
    "networkWatcherFlowLogsType": {
      "type": "string",
      "defaultValue": "VirtualNetwork",
      "allowedValues": [
        "NetworkSecurityGroup",
        "VirtualNetwork"
      ],
      "metadata": {
        "description": "[NetworkSecurityGroup/VirtualNetwork] The type of network watcher flow logs to enable. Default value = \"VirtualNetwork\" since they provide more data and NSG flow logs will be deprecated in June 2025."
      }
    },
    "operationsNetworkSecurityGroupDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "NetworkSecurityGroupEvent",
          "enabled": true
        },
        {
          "category": "NetworkSecurityGroupRuleCounter",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Security Group diagnostic logs to apply to the Operations Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/virtual-network/virtual-network-nsg-manage-log#log-categories."
      }
    },
    "operationsNetworkSecurityGroupRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of Network Security Group rules to apply to the Operations Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/templates/microsoft.network/networksecuritygroups/securityrules?tabs=bicep#securityrulepropertiesformat."
      }
    },
    "operationsSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.131.0/24",
      "metadata": {
        "description": "The CIDR Subnet Address Prefix for the default Operations subnet. It must be in the Operations Virtual Network space."
      }
    },
    "operationsSubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "The subscription ID for the Operations Network and resources. Default value = \"subscription().subscriptionId\"."
      }
    },
    "operationsVirtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.131.0/24",
      "metadata": {
        "description": "The CIDR Virtual Network Address Prefix for the Operations Virtual Network."
      }
    },
    "operationsVirtualNetworkDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "VMProtectionAlerts",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Diagnostic Logs to enable for the Operations Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#logs."
      }
    },
    "operationsVirtualNetworkDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Diagnostic Metrics to enable for the Operations Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics."
      }
    },
    "policy": {
      "type": "string",
      "defaultValue": "NISTRev4",
      "allowedValues": [
        "NISTRev4",
        "NISTRev5",
        "IL5",
        "CMMC"
      ],
      "metadata": {
        "description": "[NISTRev4/NISTRev5/IL5/CMMC] Built-in policy assignments to assign, Default value = \"NISTRev4\". IL5 is only available for AzureUsGovernment and will switch to NISTRev4 if tried in AzureCloud."
      }
    },
    "publicIPAddressDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "DDoSProtectionNotifications",
          "enabled": true
        },
        {
          "category": "DDoSMitigationFlowLogs",
          "enabled": true
        },
        {
          "category": "DDoSMitigationReports",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Public IP Address Diagnostic Logs for the Azure Firewall. See the following URL for valid settings: https://learn.microsoft.com/azure/azure-monitor/essentials/tutorial-resource-logs?tabs=DDoSProtectionNotifications#configure-ddos-diagnostic-logs."
      }
    },
    "publicIPAddressDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Public IP Address Diagnostic Metrics for the Azure Firewall. See the following URL for valid settings: https://learn.microsoft.com/azure/azure-monitor/essentials/tutorial-resource-logs?tabs=DDoSProtectionNotifications."
      }
    },
    "sharedServicesNetworkSecurityGroupDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "NetworkSecurityGroupEvent",
          "enabled": true
        },
        {
          "category": "NetworkSecurityGroupRuleCounter",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Security Group diagnostic logs to apply to the SharedServices Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/virtual-network/virtual-network-nsg-manage-log#log-categories."
      }
    },
    "sharedServicesNetworkSecurityGroupRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "An array of Network Security Group rules to apply to the SharedServices Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/templates/microsoft.network/networksecuritygroups/securityrules?tabs=bicep#securityrulepropertiesformat."
      }
    },
    "sharedServicesSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.132.0/24",
      "metadata": {
        "description": "The CIDR Subnet Address Prefix for the default Shared Services subnet. It must be in the Shared Services Virtual Network space. Default value = \"10.0.132.0/24\"."
      }
    },
    "sharedServicesSubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "The subscription ID for the Shared Services Network and resources. Default value = \"subscription().subscriptionId\"."
      }
    },
    "sharedServicesVirtualNetworkAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.132.0/24",
      "metadata": {
        "description": "The CIDR Virtual Network Address Prefix for the Shared Services Virtual Network. Default value = \"10.0.132.0/24\"."
      }
    },
    "sharedServicesVirtualNetworkDiagnosticsLogs": {
      "type": "array",
      "defaultValue": [
        {
          "category": "VMProtectionAlerts",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Diagnostic Logs to enable for the SharedServices Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#logs."
      }
    },
    "sharedServicesVirtualNetworkDiagnosticsMetrics": {
      "type": "array",
      "defaultValue": [
        {
          "category": "AllMetrics",
          "enabled": true
        }
      ],
      "metadata": {
        "description": "An array of Network Diagnostic Metrics to enable for the SharedServices Virtual Network. See the following URL for valid settings: https://learn.microsoft.com/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics."
      }
    },
    "supportedClouds": {
      "type": "array",
      "defaultValue": [
        "AzureCloud",
        "AzureUSGovernment"
      ],
      "metadata": {
        "description": "The Azure clouds that support specific service features. Default value = \"['AzureCloud','AzureUSGovernment']\"."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "A string dictionary of tags to add to deployed resources. See the following URL for valid settings: https://learn.microsoft.com/azure/azure-resource-manager/management/tag-resources?tabs=json#arm-templates."
      }
    },
    "windowsVmAdminPassword": {
      "type": "securestring",
      "defaultValue": "[if(parameters('deployWindowsVirtualMachine'), '', newGuid())]",
      "minLength": 12,
      "metadata": {
        "description": "The administrator password the Windows Virtual Machine for remote access. It must be > 12 characters in length. See the following URL for valid settings: https://learn.microsoft.com/azure/virtual-machines/windows/faq#what-are-the-password-requirements-when-creating-a-vm-."
      }
    },
    "windowsVmAdminUsername": {
      "type": "string",
      "defaultValue": "xadmin",
      "metadata": {
        "description": "The administrator username for the Windows Virtual Machine for remote access. Default value = \"xadmin\"."
      }
    },
    "windowsVmCreateOption": {
      "type": "string",
      "defaultValue": "FromImage",
      "metadata": {
        "description": "The disk creation option of the Windows Virtual Machine for remote access. Default value = \"FromImage\"."
      }
    },
    "windowsVmImageOffer": {
      "type": "string",
      "defaultValue": "WindowsServer",
      "metadata": {
        "description": "The Windows image offer in the Azure marketplace. Default value = \"WindowsServer\"."
      }
    },
    "windowsVmImagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer",
      "metadata": {
        "description": "The Windows image publisher in the Azure marketplace. Default value = \"MicrosoftWindowsServer\"."
      }
    },
    "windowsVmImageSku": {
      "type": "string",
      "defaultValue": "2019-datacenter-gensecond",
      "allowedValues": [
        "2019-datacenter-gensecond",
        "2022-datacenter-g2"
      ],
      "metadata": {
        "description": "[2019-datacenter-gensecond/2022-datacenter-g2] The Windows image SKU in the Azure marketplace. Default value = \"2019-datacenter-gensecond\"."
      }
    },
    "windowsVmNetworkInterfacePrivateIPAddressAllocationMethod": {
      "type": "string",
      "defaultValue": "Dynamic",
      "allowedValues": [
        "Static",
        "Dynamic"
      ],
      "metadata": {
        "description": "[Static/Dynamic] The public IP Address allocation method for the Windows virtual machine. Default value = \"Dynamic\"."
      }
    },
    "windowsVmSize": {
      "type": "string",
      "defaultValue": "Standard_DS1_v2",
      "metadata": {
        "description": "The size of the Windows Virtual Machine for remote access. Default value = \"Standard_DS1_v2\"."
      }
    },
    "windowsVmStorageAccountType": {
      "type": "string",
      "defaultValue": "StandardSSD_LRS",
      "metadata": {
        "description": "The storage account type of the Windows Virtual Machine for remote access. Default value = \"StandardSSD_LRS\"."
      }
    },
    "windowsVmVersion": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "The version of the Windows Virtual Machine for remote access. Default value = \"latest\"."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "firewallClientUsableIpAddresses",
        "count": "[length(range(0, 4))]",
        "input": "[cidrHost(parameters('firewallClientSubnetAddressPrefix'), range(0, 4)[copyIndex('firewallClientUsableIpAddresses')])]"
      }
    ],
    "firewallClientPrivateIpAddress": "[variables('firewallClientUsableIpAddresses')[3]]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('get-logic-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "identifier": {
            "value": "[parameters('identifier')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "networks": {
            "value": "[union(createArray(createObject('name', 'hub', 'shortName', 'hub', 'subscriptionId', parameters('hubSubscriptionId'), 'nsgDiagLogs', parameters('hubNetworkSecurityGroupDiagnosticsLogs'), 'nsgRules', parameters('hubNetworkSecurityGroupRules'), 'vnetAddressPrefix', parameters('hubVirtualNetworkAddressPrefix'), 'vnetDiagLogs', parameters('hubVirtualNetworkDiagnosticsLogs'), 'vnetDiagMetrics', parameters('hubVirtualNetworkDiagnosticsMetrics'), 'subnetAddressPrefix', parameters('hubSubnetAddressPrefix')), createObject('name', 'operations', 'shortName', 'ops', 'subscriptionId', parameters('operationsSubscriptionId'), 'nsgDiagLogs', parameters('operationsNetworkSecurityGroupDiagnosticsLogs'), 'nsgRules', parameters('operationsNetworkSecurityGroupRules'), 'vnetAddressPrefix', parameters('operationsVirtualNetworkAddressPrefix'), 'vnetDiagLogs', parameters('operationsVirtualNetworkDiagnosticsLogs'), 'vnetDiagMetrics', parameters('operationsVirtualNetworkDiagnosticsMetrics'), 'subnetAddressPrefix', parameters('operationsSubnetAddressPrefix')), createObject('name', 'sharedServices', 'shortName', 'svcs', 'subscriptionId', parameters('sharedServicesSubscriptionId'), 'nsgDiagLogs', parameters('sharedServicesNetworkSecurityGroupDiagnosticsLogs'), 'nsgRules', parameters('sharedServicesNetworkSecurityGroupRules'), 'vnetAddressPrefix', parameters('sharedServicesVirtualNetworkAddressPrefix'), 'vnetDiagLogs', parameters('sharedServicesVirtualNetworkDiagnosticsLogs'), 'vnetDiagMetrics', parameters('sharedServicesVirtualNetworkDiagnosticsMetrics'), 'subnetAddressPrefix', parameters('sharedServicesSubnetAddressPrefix'))), if(parameters('deployIdentity'), createArray(createObject('name', 'identity', 'shortName', 'id', 'subscriptionId', parameters('identitySubscriptionId'), 'nsgDiagLogs', parameters('identityNetworkSecurityGroupDiagnosticsLogs'), 'nsgRules', parameters('identityNetworkSecurityGroupRules'), 'vnetAddressPrefix', parameters('identityVirtualNetworkAddressPrefix'), 'vnetDiagLogs', parameters('identityVirtualNetworkDiagnosticsLogs'), 'vnetDiagMetrics', parameters('identityVirtualNetworkDiagnosticsMetrics'), 'subnetAddressPrefix', parameters('identitySubnetAddressPrefix'))), createArray()))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "382273146619927959"
            }
          },
          "parameters": {
            "deploymentNameSuffix": {
              "type": "string"
            },
            "environmentAbbreviation": {
              "type": "string"
            },
            "identifier": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "networks": {
              "type": "array"
            },
            "stampIndex": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "$fxv#0": "1.0.0",
            "environmentName": {
              "dev": "Development",
              "prod": "Production",
              "test": "Test"
            },
            "mlzTags": {
              "environment": "[variables('environmentName')[parameters('environmentAbbreviation')]]",
              "identifier": "[parameters('identifier')]",
              "landingZoneName": "MissionLandingZone",
              "landingZoneVersion": "[variables('$fxv#0')]"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "namingConventions",
                "count": "[length(parameters('networks'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('naming-convention-{0}-{1}', parameters('networks')[copyIndex()].shortName, parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "identifier": {
                    "value": "[parameters('identifier')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "networkName": {
                    "value": "[parameters('networks')[copyIndex()].name]"
                  },
                  "stampIndex": {
                    "value": "[parameters('stampIndex')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "8940763995032978193"
                    }
                  },
                  "parameters": {
                    "delimiter": {
                      "type": "string",
                      "defaultValue": "-",
                      "allowedValues": [
                        "",
                        "-"
                      ]
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networkName": {
                      "type": "string"
                    },
                    "identifier": {
                      "type": "string"
                    },
                    "stampIndex": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "AzureChina": {
                        "chinaeast": {
                          "abbreviation": "cne",
                          "recoveryServicesGeo": "sha",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinaeast2": {
                          "abbreviation": "cne2",
                          "recoveryServicesGeo": "sha2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth": {
                          "abbreviation": "cnn",
                          "recoveryServicesGeo": "bjb",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth2": {
                          "abbreviation": "cnn2",
                          "recoveryServicesGeo": "bjb2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        }
                      },
                      "AzureCloud": {
                        "australiacentral": {
                          "abbreviation": "auc",
                          "recoveryServicesGeo": "acl",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiacentral2": {
                          "abbreviation": "auc2",
                          "recoveryServicesGeo": "acl2",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiaeast": {
                          "abbreviation": "aue",
                          "recoveryServicesGeo": "ae",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiasoutheast": {
                          "abbreviation": "ause",
                          "recoveryServicesGeo": "ase",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "brazilsouth": {
                          "abbreviation": "brs",
                          "recoveryServicesGeo": "brs",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "brazilsoutheast": {
                          "abbreviation": "brse",
                          "recoveryServicesGeo": "bse",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "canadacentral": {
                          "abbreviation": "cac",
                          "recoveryServicesGeo": "cnc",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "canadaeast": {
                          "abbreviation": "cae",
                          "recoveryServicesGeo": "cne",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "centralindia": {
                          "abbreviation": "inc",
                          "recoveryServicesGeo": "inc",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "centralus": {
                          "abbreviation": "usc",
                          "recoveryServicesGeo": "cus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "eastasia": {
                          "abbreviation": "ase",
                          "recoveryServicesGeo": "ea",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "eastus": {
                          "abbreviation": "use",
                          "recoveryServicesGeo": "eus",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "eastus2": {
                          "abbreviation": "use2",
                          "recoveryServicesGeo": "eus2",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "francecentral": {
                          "abbreviation": "frc",
                          "recoveryServicesGeo": "frc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "francesouth": {
                          "abbreviation": "frs",
                          "recoveryServicesGeo": "frs",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanynorth": {
                          "abbreviation": "den",
                          "recoveryServicesGeo": "gn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanywestcentral": {
                          "abbreviation": "dewc",
                          "recoveryServicesGeo": "gwc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "israelcentral": {
                          "abbreviation": "ilc",
                          "recoveryServicesGeo": "ilc",
                          "timeDifference": "+2:00",
                          "timeZone": "Israel Standard Time"
                        },
                        "italynorth": {
                          "abbreviation": "itn",
                          "recoveryServicesGeo": "itn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "japaneast": {
                          "abbreviation": "jpe",
                          "recoveryServicesGeo": "jpe",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "japanwest": {
                          "abbreviation": "jpw",
                          "recoveryServicesGeo": "jpw",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "jioindiacentral": {
                          "abbreviation": "injc",
                          "recoveryServicesGeo": "jic",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "jioindiawest": {
                          "abbreviation": "injw",
                          "recoveryServicesGeo": "jiw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "koreacentral": {
                          "abbreviation": "krc",
                          "recoveryServicesGeo": "krc",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "koreasouth": {
                          "abbreviation": "krs",
                          "recoveryServicesGeo": "krs",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "northcentralus": {
                          "abbreviation": "usnc",
                          "recoveryServicesGeo": "ncus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "northeurope": {
                          "abbreviation": "eun",
                          "recoveryServicesGeo": "ne",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "norwayeast": {
                          "abbreviation": "noe",
                          "recoveryServicesGeo": "nwe",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "norwaywest": {
                          "abbreviation": "now",
                          "recoveryServicesGeo": "nww",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "polandcentral": {
                          "abbreviation": "plc",
                          "recoveryServicesGeo": "plc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "qatarcentral": {
                          "abbreviation": "qac",
                          "recoveryServicesGeo": "qac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "southafricanorth": {
                          "abbreviation": "zan",
                          "recoveryServicesGeo": "san",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southafricawest": {
                          "abbreviation": "zaw",
                          "recoveryServicesGeo": "saw",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southcentralus": {
                          "abbreviation": "ussc",
                          "recoveryServicesGeo": "scus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "southeastasia": {
                          "abbreviation": "asse",
                          "recoveryServicesGeo": "sea",
                          "timeDifference": "+8:00",
                          "timeZone": "Singapore Standard Time"
                        },
                        "southindia": {
                          "abbreviation": "ins",
                          "recoveryServicesGeo": "ins",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "swedencentral": {
                          "abbreviation": "sec",
                          "recoveryServicesGeo": "sdc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandnorth": {
                          "abbreviation": "chn",
                          "recoveryServicesGeo": "szn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandwest": {
                          "abbreviation": "chw",
                          "recoveryServicesGeo": "szw",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "uaecentral": {
                          "abbreviation": "aec",
                          "recoveryServicesGeo": "uac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uaenorth": {
                          "abbreviation": "aen",
                          "recoveryServicesGeo": "uan",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uksouth": {
                          "abbreviation": "uks",
                          "recoveryServicesGeo": "uks",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "ukwest": {
                          "abbreviation": "ukw",
                          "recoveryServicesGeo": "ukw",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "westcentralus": {
                          "abbreviation": "uswc",
                          "recoveryServicesGeo": "wcus",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "westeurope": {
                          "abbreviation": "euw",
                          "recoveryServicesGeo": "we",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "westindia": {
                          "abbreviation": "inw",
                          "recoveryServicesGeo": "inw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "westus": {
                          "abbreviation": "usw",
                          "recoveryServicesGeo": "wus",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus2": {
                          "abbreviation": "usw2",
                          "recoveryServicesGeo": "wus2",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus3": {
                          "abbreviation": "usw3",
                          "recoveryServicesGeo": "wus3",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        }
                      },
                      "AzureUSGovernment": {
                        "usdodcentral": {
                          "abbreviation": "dodc",
                          "recoveryServicesGeo": "udc",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usdodeast": {
                          "abbreviation": "dode",
                          "recoveryServicesGeo": "ude",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usgovarizona": {
                          "abbreviation": "az",
                          "recoveryServicesGeo": "uga",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "usgovtexas": {
                          "abbreviation": "tx",
                          "recoveryServicesGeo": "ugt",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usgovvirginia": {
                          "abbreviation": "va",
                          "recoveryServicesGeo": "ugv",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        }
                      }
                    },
                    "$fxv#1": {
                      "actionGroups": "ag",
                      "applicationGroups": "vdag",
                      "applicationInsights": "appi",
                      "appServicePlans": "asp",
                      "automationAccounts": "aa",
                      "availabilitySets": "avail",
                      "azureFirewalls": "afw",
                      "bastionHosts": "bas",
                      "computeGallieries": "cg",
                      "dataCollectionEndpoints": "dce",
                      "dataCollectionRuleAssociations": "dcra",
                      "dataCollectionRules": "dcr",
                      "diagnosticSettings": "diag",
                      "diskAccesses": "da",
                      "diskEncryptionSets": "des",
                      "disks": "disk",
                      "firewallPolicies": "afwp",
                      "functionApps": "func",
                      "hostPools": "vdpool",
                      "ipConfigurations": "ipconf",
                      "keyVaults": "kv",
                      "localNetworkGateways": "lgw",
                      "logAnalyticsWorkspaces": "log",
                      "netAppAccounts": "naa",
                      "netAppAccountsCapacityPools": "cp",
                      "networkInterfaces": "nic",
                      "networkSecurityGroups": "nsg",
                      "networkWatchers": "nw",
                      "networkWatchersFlowLogs": "fl",
                      "privateEndpoints": "pe",
                      "privateLinkScopes": "pls",
                      "publicIPAddresses": "pip",
                      "recoveryServicesVaults": "rsv",
                      "remoteApplicationGroups": "vdag",
                      "resourceGroups": "rg",
                      "routeTables": "rt",
                      "scalingPlans": "vdscaling",
                      "storageAccounts": "st",
                      "subnets": "snet",
                      "userAssignedIdentities": "id",
                      "virtualMachines": "vm",
                      "virtualNetworkGateways": "vgw",
                      "virtualNetworks": "vnet",
                      "workspaces": "vdws"
                    },
                    "directionShortNames": {
                      "east": "e",
                      "eastcentral": "ec",
                      "north": "n",
                      "northcentral": "nc",
                      "south": "s",
                      "southcentral": "sc",
                      "west": "w",
                      "westcentral": "wc"
                    },
                    "locations": "[coalesce(tryGet(variables('$fxv#0'), environment().name), createObject(format('{0}', parameters('location')), createObject('abbreviation', variables('directionShortNames')[skip(parameters('location'), sub(length(parameters('location')), 5))], 'timeDifference', if(contains(parameters('location'), 'east'), '-5:00', if(contains(parameters('location'), 'west'), '-8:00', '0:00')), 'timeZone', if(contains(parameters('location'), 'east'), 'Eastern Standard Time', if(contains(parameters('location'), 'west'), 'Pacific Standard Time', 'GMT Standard Time')))))]",
                    "locationAbbreviation": "[variables('locations')[parameters('location')].abbreviation]",
                    "resourceAbbreviations": "[variables('$fxv#1')]",
                    "tokens": {
                      "resource": "resource_token",
                      "service": "service_token"
                    },
                    "namingConvention": "[format('{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}', toLower(parameters('identifier')), parameters('delimiter'), parameters('environmentAbbreviation'), parameters('delimiter'), variables('locationAbbreviation'), parameters('delimiter'), parameters('networkName'), parameters('delimiter'), variables('tokens').resource, if(empty(parameters('stampIndex')), '', format('{0}{1}', parameters('delimiter'), parameters('stampIndex'))))]",
                    "namingConvention_Service": "[format('{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}', toLower(parameters('identifier')), parameters('delimiter'), parameters('environmentAbbreviation'), parameters('delimiter'), variables('locationAbbreviation'), parameters('delimiter'), parameters('networkName'), parameters('delimiter'), variables('tokens').service, parameters('delimiter'), variables('tokens').resource, if(empty(parameters('stampIndex')), '', format('{0}{1}', parameters('delimiter'), parameters('stampIndex'))))]",
                    "names": {
                      "actionGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').actionGroups)]",
                      "applicationGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').applicationGroups)]",
                      "applicationInsights": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').applicationInsights)]",
                      "appServicePlan": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').appServicePlans)]",
                      "automationAccount": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').automationAccounts)]",
                      "automationAccountDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                      "automationAccountNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                      "automationAccountPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                      "availabilitySet": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').availabilitySets)]",
                      "azureFirewall": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').azureFirewalls)]",
                      "azureFirewallPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), variables('tokens').service, variables('resourceAbbreviations').azureFirewalls)]",
                      "azureFirewallPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').publicIPAddresses, parameters('delimiter'), variables('resourceAbbreviations').azureFirewalls))]",
                      "azureFirewallDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').azureFirewalls)]",
                      "azureFirewallPolicy": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').firewallPolicies)]",
                      "bastionHost": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').bastionHosts)]",
                      "bastionHostDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                      "bastionHostNetworkSecurityGroup": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkSecurityGroups), variables('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                      "bastionHostNetworkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').networkSecurityGroups, parameters('delimiter'), variables('resourceAbbreviations').bastionHosts))]",
                      "bastionHostPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), variables('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                      "bastionHostPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').publicIPAddresses, parameters('delimiter'), variables('resourceAbbreviations').bastionHosts))]",
                      "computeGallery": "[replace(replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').computeGallieries), parameters('delimiter'), if(empty(parameters('delimiter')), '', '_'))]",
                      "dataCollectionEndpoint": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').dataCollectionEndpoints)]",
                      "dataCollectionRuleAssociation": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').dataCollectionRuleAssociations)]",
                      "dataCollectionRule": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').dataCollectionRules)]",
                      "diskAccess": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').diskAccesses)]",
                      "diskAccessNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').diskAccesses)]",
                      "diskAccessPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').diskAccesses)]",
                      "diskEncryptionSet": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').diskEncryptionSets)]",
                      "functionApp": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').functionApps)]",
                      "functionAppNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').functionApps)]",
                      "functionAppPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').functionApps)]",
                      "hostPool": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').hostPools)]",
                      "hostPoolDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').hostPools)]",
                      "hostPoolNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').hostPools)]",
                      "hostPoolPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').hostPools)]",
                      "keyVault": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').keyVaults)]",
                      "keyVaultDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').keyVaults)]",
                      "keyVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').keyVaults)]",
                      "keyVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').keyVaults)]",
                      "localNetworkGateway": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').localNetworkGateways)]",
                      "logAnalyticsWorkspace": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
                      "logAnalyticsWorkspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
                      "netAppAccount": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').netAppAccounts)]",
                      "netAppAccountCapacityPool": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').netAppAccountsCapacityPools), variables('tokens').service, variables('resourceAbbreviations').netAppAccounts)]",
                      "netAppAccountSmbServer": "[replace(replace(replace(replace(variables('namingConvention'), variables('tokens').resource, ''), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), parameters('delimiter'), '')]",
                      "networkSecurityGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').networkSecurityGroups)]",
                      "networkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').networkSecurityGroups)]",
                      "networkWatcherFlowLogsNetworkSecurityGroup": "[replace(variables('namingConvention'), variables('tokens').resource, format('{0}{1}{2}{3}{4}', variables('resourceAbbreviations').networkWatchers, parameters('delimiter'), variables('resourceAbbreviations').networkWatchersFlowLogs, parameters('delimiter'), variables('resourceAbbreviations').networkSecurityGroups))]",
                      "networkWatcherFlowLogsVirtualNetwork": "[replace(variables('namingConvention'), variables('tokens').resource, format('{0}{1}{2}{3}{4}', variables('resourceAbbreviations').networkWatchers, parameters('delimiter'), variables('resourceAbbreviations').networkWatchersFlowLogs, parameters('delimiter'), variables('resourceAbbreviations').virtualNetworks))]",
                      "privateLinkScope": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').privateLinkScopes)]",
                      "privateLinkScopeNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').privateLinkScopes)]",
                      "privateLinkScopePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').privateLinkScopes)]",
                      "recoveryServicesVault": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').recoveryServicesVaults)]",
                      "recoveryServicesVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').recoveryServicesVaults)]",
                      "recoveryServicesVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').recoveryServicesVaults)]",
                      "resourceGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').resourceGroups)]",
                      "routeTable": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').routeTables)]",
                      "scalingPlan": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').scalingPlans)]",
                      "scalingPlanDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').scalingPlans)]",
                      "storageAccount": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').storageAccounts)]",
                      "storageAccountBlobDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}blob', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountBlobNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}blob', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountBlobPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}blob', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountFileDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}file', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountFileNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}file', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountFilePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}file', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountQueueDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}queue', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountQueueNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}queue', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountQueuePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}queue', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountTableDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}table', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountTableNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}table', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountTablePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}table', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "subnet": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').subnets)]",
                      "userAssignedIdentity": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').userAssignedIdentities)]",
                      "virtualMachine": "[replace(replace(replace(replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').virtualMachines), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), parameters('delimiter'), '')]",
                      "virtualMachineDisk": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').disks), variables('tokens').service, format('{0}', variables('resourceAbbreviations').virtualMachines))]",
                      "virtualMachineNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').virtualMachines)]",
                      "virtualMachineNetworkInterfaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').networkInterfaces, parameters('delimiter'), variables('resourceAbbreviations').virtualMachines))]",
                      "virtualNetwork": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').virtualNetworks)]",
                      "virtualNetworkDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').virtualNetworks)]",
                      "virtualNetworkGateway": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').virtualNetworkGateways)]",
                      "workspace": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').workspaces)]",
                      "workspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').workspaces)]",
                      "workspaceNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').workspaces)]",
                      "workspacePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').workspaces)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "delimiter": {
                      "type": "string",
                      "value": "[parameters('delimiter')]"
                    },
                    "locations": {
                      "type": "object",
                      "value": "[variables('locations')]"
                    },
                    "names": {
                      "type": "object",
                      "value": "[variables('names')]"
                    },
                    "resourceAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceAbbreviations')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('private-dns-zones-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "12115812372137973423"
                    }
                  },
                  "variables": {
                    "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]",
                    "privateDnsZoneNames": "[union(createArray(format('privatelink.agentsvc.azure-automation.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureAutomation'), environment().name), variables('cloudSuffix'))), format('privatelink.azure-automation.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureAutomation'), environment().name), variables('cloudSuffix'))), format('privatelink.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureWebSites'), environment().name), format('appservice.{0}', variables('cloudSuffix')))), format('scm.privatelink.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureWebSites'), environment().name), format('appservice.{0}', variables('cloudSuffix')))), format('privatelink.wvd.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureVirtualDesktop'), environment().name), variables('cloudSuffix'))), format('privatelink-global.wvd.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_AzureVirtualDesktop'), environment().name), variables('cloudSuffix'))), format('privatelink.file.{0}', environment().suffixes.storage), format('privatelink.queue.{0}', environment().suffixes.storage), format('privatelink.table.{0}', environment().suffixes.storage), format('privatelink.blob.{0}', environment().suffixes.storage), format('privatelink{0}', replace(environment().suffixes.keyvaultDns, 'vault', 'vaultcore')), format('privatelink.monitor.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_Monitor'), environment().name), variables('cloudSuffix'))), format('privatelink.ods.opinsights.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_Monitor'), environment().name), variables('cloudSuffix'))), format('privatelink.oms.opinsights.{0}', coalesce(tryGet(variables('privateDnsZoneSuffixes_Monitor'), environment().name), variables('cloudSuffix'))), format('privatelink{0}', environment().suffixes.sqlServerHostname)), createArray())]",
                    "privateDnsZoneSuffixes_AzureAutomation": {
                      "AzureCloud": "net",
                      "AzureUSGovernment": "us"
                    },
                    "privateDnsZoneSuffixes_AzureVirtualDesktop": {
                      "AzureCloud": "microsoft.com",
                      "AzureUSGovernment": "azure.us"
                    },
                    "privateDnsZoneSuffixes_AzureWebSites": {
                      "AzureCloud": "azurewebsites.net",
                      "AzureUSGovernment": "azurewebsites.us"
                    },
                    "privateDnsZoneSuffixes_Monitor": {
                      "AzureCloud": "azure.com",
                      "AzureUSGovernment": "azure.us"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "names": {
                      "type": "array",
                      "value": "[variables('privateDnsZoneNames')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "delimiter": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[0].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.delimiter.value]"
            },
            "locationProperties": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[0].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locations.value[parameters('location')]]"
            },
            "mlzTags": {
              "type": "object",
              "value": "[variables('mlzTags')]"
            },
            "privateDnsZones": {
              "type": "array",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
            },
            "resourceAbbreviations": {
              "type": "object",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[0].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceAbbreviations.value]"
            },
            "tiers": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('networks'))]",
                "input": {
                  "name": "[parameters('networks')[copyIndex()].name]",
                  "shortName": "[parameters('networks')[copyIndex()].shortName]",
                  "subscriptionId": "[parameters('networks')[copyIndex()].subscriptionId]",
                  "nsgDiagLogs": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'nsgDiagLogs'), createArray())]",
                  "nsgRules": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'nsgRules'), createArray())]",
                  "vnetAddressPrefix": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'vnetAddressPrefix'), '')]",
                  "vnetDiagLogs": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'vnetDiagLogs'), createArray())]",
                  "vnetDiagMetrics": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'vnetDiagMetrics'), createArray())]",
                  "subnetAddressPrefix": "[coalesce(tryGet(parameters('networks')[copyIndex()], 'subnetAddressPrefix'), '')]",
                  "namingConvention": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-convention-{0}-{1}', parameters('networks')[copyIndex()].shortName, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "delimiter": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.delimiter.value]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "tiers": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "10049295279779826440"
            }
          },
          "parameters": {
            "delimiter": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "tiers": {
              "type": "array"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "resourceGroups",
                "count": "[length(parameters('tiers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-rg-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('tiers')[copyIndex()].subscriptionId]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "name": {
                    "value": "[format('{0}{1}network', parameters('tiers')[copyIndex()].namingConvention.resourceGroup, parameters('delimiter'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "17739099961151144722"
                    }
                  },
                  "parameters": {
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Resources/resourceGroups'), createObject()), parameters('mlzTags'))]"
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
                    },
                    "tags": {
                      "type": "object",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').tags]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "names": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('tiers'))]",
                "input": "[reference(subscriptionResourceId(parameters('tiers')[copyIndex()].subscriptionId, 'Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-networking-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "bastionHostSubnetAddressPrefix": {
            "value": "[parameters('bastionHostSubnetAddressPrefix')]"
          },
          "azureGatewaySubnetAddressPrefix": {
            "value": "[parameters('azureGatewaySubnetAddressPrefix')]"
          },
          "delimiter": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.delimiter.value]"
          },
          "deployIdentity": {
            "value": "[parameters('deployIdentity')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "deployBastion": {
            "value": "[parameters('deployBastion')]"
          },
          "deployAzureGatewaySubnet": {
            "value": "[parameters('deployAzureGatewaySubnet')]"
          },
          "dnsServers": {
            "value": "[parameters('dnsServers')]"
          },
          "enableProxy": {
            "value": "[parameters('enableProxy')]"
          },
          "firewallSettings": {
            "value": {
              "clientPrivateIpAddress": "[variables('firewallClientPrivateIpAddress')]",
              "clientPublicIPAddressAvailabilityZones": "[parameters('firewallClientPublicIPAddressAvailabilityZones')]",
              "clientSubnetAddressPrefix": "[parameters('firewallClientSubnetAddressPrefix')]",
              "intrusionDetectionMode": "[parameters('firewallIntrusionDetectionMode')]",
              "managementPublicIPAddressAvailabilityZones": "[parameters('firewallManagementPublicIPAddressAvailabilityZones')]",
              "managementSubnetAddressPrefix": "[parameters('firewallManagementSubnetAddressPrefix')]",
              "skuTier": "[parameters('firewallSkuTier')]",
              "supernetIPAddress": "[parameters('firewallSupernetIPAddress')]",
              "threatIntelMode": "[parameters('firewallThreatIntelMode')]"
            }
          },
          "firewallRuleCollectionGroups": "[if(empty(parameters('customFirewallRuleCollectionGroups')), createObject('value', createArray(createObject('name', 'MLZ-NetworkCollectionGroup', 'properties', createObject('priority', 150, 'ruleCollections', createArray(createObject('name', 'AzureMonitor', 'priority', 150, 'ruleCollectionType', 'FirewallPolicyFilterRuleCollection', 'action', createObject('type', 'Allow'), 'rules', createArray(createObject('name', 'AllowMonitorToLAW', 'ruleType', 'NetworkRule', 'ipProtocols', createArray('Tcp'), 'sourceAddresses', concat(createArray(parameters('hubVirtualNetworkAddressPrefix')), createArray(parameters('sharedServicesVirtualNetworkAddressPrefix')), if(empty(parameters('identityVirtualNetworkAddressPrefix')), createArray(), createArray(parameters('identityVirtualNetworkAddressPrefix')))), 'destinationAddresses', createArray(cidrHost(parameters('operationsVirtualNetworkAddressPrefix'), 3)), 'destinationPorts', createArray('443'), 'sourceIpGroups', createArray(), 'destinationIpGroups', createArray(), 'destinationFqdns', createArray())))))))), createObject('value', parameters('customFirewallRuleCollectionGroups')))]",
          "location": {
            "value": "[parameters('location')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "privateDnsZoneNames": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZones.value]"
          },
          "resourceGroupNames": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "tiers": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "15510177258588756383"
            }
          },
          "parameters": {
            "azureGatewaySubnetAddressPrefix": {
              "type": "string"
            },
            "bastionHostSubnetAddressPrefix": {
              "type": "string"
            },
            "delimiter": {
              "type": "string"
            },
            "deployAzureGatewaySubnet": {
              "type": "bool"
            },
            "deployBastion": {
              "type": "bool"
            },
            "deployIdentity": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "dnsServers": {
              "type": "array"
            },
            "enableProxy": {
              "type": "bool"
            },
            "firewallSettings": {
              "type": "object"
            },
            "firewallRuleCollectionGroups": {
              "type": "array"
            },
            "location": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "privateDnsZoneNames": {
              "type": "array"
            },
            "resourceGroupNames": {
              "type": "array"
            },
            "tags": {
              "type": "object"
            },
            "tiers": {
              "type": "array"
            }
          },
          "variables": {
            "hub": "[filter(parameters('tiers'), lambda('tier', equals(lambdaVariables('tier').name, 'hub')))[0]]",
            "hubResourceGroupName": "[filter(parameters('resourceGroupNames'), lambda('name', contains(lambdaVariables('name'), 'hub')))[0]]",
            "spokes": "[filter(parameters('tiers'), lambda('tier', not(equals(lambdaVariables('tier').name, 'hub'))))]",
            "spokeResourceGroupNames": "[filter(parameters('resourceGroupNames'), lambda('name', not(contains(lambdaVariables('name'), 'hub'))))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('hub').subscriptionId]",
              "resourceGroup": "[variables('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "azureGatewaySubnetAddressPrefix": {
                    "value": "[parameters('azureGatewaySubnetAddressPrefix')]"
                  },
                  "bastionHostNetworkSecurityGroup": {
                    "value": "[variables('hub').namingConvention.bastionHostNetworkSecurityGroup]"
                  },
                  "bastionHostSubnetAddressPrefix": {
                    "value": "[parameters('bastionHostSubnetAddressPrefix')]"
                  },
                  "deployAzureGatewaySubnet": {
                    "value": "[parameters('deployAzureGatewaySubnet')]"
                  },
                  "deployBastion": {
                    "value": "[parameters('deployBastion')]"
                  },
                  "dnsServers": {
                    "value": "[parameters('dnsServers')]"
                  },
                  "enableProxy": {
                    "value": "[parameters('enableProxy')]"
                  },
                  "firewallClientPrivateIpAddress": {
                    "value": "[parameters('firewallSettings').clientPrivateIpAddress]"
                  },
                  "firewallClientPublicIPAddressAvailabilityZones": {
                    "value": "[parameters('firewallSettings').clientPublicIPAddressAvailabilityZones]"
                  },
                  "firewallClientPublicIPAddressName": {
                    "value": "[format('{0}{1}client', variables('hub').namingConvention.azureFirewallPublicIPAddress, parameters('delimiter'))]"
                  },
                  "firewallClientSubnetAddressPrefix": {
                    "value": "[parameters('firewallSettings').clientSubnetAddressPrefix]"
                  },
                  "firewallIntrusionDetectionMode": {
                    "value": "[parameters('firewallSettings').intrusionDetectionMode]"
                  },
                  "firewallManagementPublicIPAddressAvailabilityZones": {
                    "value": "[parameters('firewallSettings').managementPublicIPAddressAvailabilityZones]"
                  },
                  "firewallManagementPublicIPAddressName": {
                    "value": "[format('{0}{1}management', variables('hub').namingConvention.azureFirewallPublicIPAddress, parameters('delimiter'))]"
                  },
                  "firewallManagementSubnetAddressPrefix": {
                    "value": "[parameters('firewallSettings').managementSubnetAddressPrefix]"
                  },
                  "firewallName": {
                    "value": "[variables('hub').namingConvention.azureFirewall]"
                  },
                  "firewallPolicyName": {
                    "value": "[variables('hub').namingConvention.azureFirewallPolicy]"
                  },
                  "firewallSkuTier": {
                    "value": "[parameters('firewallSettings').skuTier]"
                  },
                  "firewallThreatIntelMode": {
                    "value": "[parameters('firewallSettings').threatIntelMode]"
                  },
                  "firewallRuleCollectionGroups": {
                    "value": "[parameters('firewallRuleCollectionGroups')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[variables('hub').namingConvention.networkSecurityGroup]"
                  },
                  "networkSecurityGroupRules": {
                    "value": "[variables('hub').nsgRules]"
                  },
                  "routeTableName": {
                    "value": "[variables('hub').namingConvention.routeTable]"
                  },
                  "subnetAddressPrefix": {
                    "value": "[variables('hub').subnetAddressPrefix]"
                  },
                  "subnetName": {
                    "value": "[variables('hub').namingConvention.subnet]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualNetworkAddressPrefix": {
                    "value": "[variables('hub').vnetAddressPrefix]"
                  },
                  "virtualNetworkName": {
                    "value": "[variables('hub').namingConvention.virtualNetwork]"
                  },
                  "vNetDnsServers": {
                    "value": [
                      "[parameters('firewallSettings').clientPrivateIpAddress]"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "17534724094025973358"
                    }
                  },
                  "parameters": {
                    "azureGatewaySubnetAddressPrefix": {
                      "type": "string"
                    },
                    "bastionHostNetworkSecurityGroup": {
                      "type": "string"
                    },
                    "bastionHostSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "deployAzureGatewaySubnet": {
                      "type": "bool"
                    },
                    "deployBastion": {
                      "type": "bool"
                    },
                    "dnsServers": {
                      "type": "array"
                    },
                    "enableProxy": {
                      "type": "bool"
                    },
                    "firewallClientPrivateIpAddress": {
                      "type": "string"
                    },
                    "firewallClientPublicIPAddressAvailabilityZones": {
                      "type": "array"
                    },
                    "firewallClientPublicIPAddressName": {
                      "type": "string"
                    },
                    "firewallClientSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "firewallIntrusionDetectionMode": {
                      "type": "string",
                      "allowedValues": [
                        "Alert",
                        "Deny",
                        "Off"
                      ]
                    },
                    "firewallManagementPublicIPAddressAvailabilityZones": {
                      "type": "array"
                    },
                    "firewallManagementPublicIPAddressName": {
                      "type": "string"
                    },
                    "firewallManagementSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "firewallName": {
                      "type": "string"
                    },
                    "firewallPolicyName": {
                      "type": "string"
                    },
                    "firewallSkuTier": {
                      "type": "string"
                    },
                    "firewallThreatIntelMode": {
                      "type": "string",
                      "allowedValues": [
                        "Alert",
                        "Deny",
                        "Off"
                      ]
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "networkSecurityGroupRules": {
                      "type": "array"
                    },
                    "routeTableName": {
                      "type": "string"
                    },
                    "subnetAddressPrefix": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "vNetDnsServers": {
                      "type": "array"
                    },
                    "firewallRuleCollectionGroups": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "bastionNetworkSecurityGroupRules": [
                      {
                        "name": "AllowHttpsInBound",
                        "properties": {
                          "protocol": "Tcp",
                          "sourcePortRange": "*",
                          "sourceAddressPrefix": "Internet",
                          "destinationPortRange": "443",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 120,
                          "direction": "Inbound"
                        }
                      },
                      {
                        "name": "AllowGatewayManagerInBound",
                        "properties": {
                          "protocol": "Tcp",
                          "sourcePortRange": "*",
                          "sourceAddressPrefix": "GatewayManager",
                          "destinationPortRange": "443",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 130,
                          "direction": "Inbound"
                        }
                      },
                      {
                        "name": "AllowLoadBalancerInBound",
                        "properties": {
                          "protocol": "Tcp",
                          "sourcePortRange": "*",
                          "sourceAddressPrefix": "AzureLoadBalancer",
                          "destinationPortRange": "443",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 140,
                          "direction": "Inbound"
                        }
                      },
                      {
                        "name": "AllowBastionHostCommunicationInBound",
                        "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "sourceAddressPrefix": "VirtualNetwork",
                          "destinationPortRanges": [
                            "8080",
                            "5701"
                          ],
                          "destinationAddressPrefix": "VirtualNetwork",
                          "access": "Allow",
                          "priority": 150,
                          "direction": "Inbound"
                        }
                      },
                      {
                        "name": "AllowSshRdpOutBound",
                        "properties": {
                          "protocol": "Tcp",
                          "sourcePortRange": "*",
                          "sourceAddressPrefix": "*",
                          "destinationPortRanges": [
                            "22",
                            "3389"
                          ],
                          "destinationAddressPrefix": "VirtualNetwork",
                          "access": "Allow",
                          "priority": 120,
                          "direction": "Outbound"
                        }
                      },
                      {
                        "name": "AllowAzureCloudCommunicationOutBound",
                        "properties": {
                          "protocol": "Tcp",
                          "sourcePortRange": "*",
                          "sourceAddressPrefix": "*",
                          "destinationPortRange": "443",
                          "destinationAddressPrefix": "AzureCloud",
                          "access": "Allow",
                          "priority": 130,
                          "direction": "Outbound"
                        }
                      },
                      {
                        "name": "AllowBastionHostCommunicationOutBound",
                        "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "sourceAddressPrefix": "VirtualNetwork",
                          "destinationPortRanges": [
                            "8080",
                            "5701"
                          ],
                          "destinationAddressPrefix": "VirtualNetwork",
                          "access": "Allow",
                          "priority": 140,
                          "direction": "Outbound"
                        }
                      },
                      {
                        "name": "AllowGetSessionInformationOutBound",
                        "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "sourceAddressPrefix": "*",
                          "destinationAddressPrefix": "Internet",
                          "destinationPortRanges": [
                            "80",
                            "443"
                          ],
                          "access": "Allow",
                          "priority": 150,
                          "direction": "Outbound"
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "networkSecurityGroup",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          },
                          "securityRules": {
                            "value": "[parameters('networkSecurityGroupRules')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "789887257637580479"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "name": {
                              "type": "string"
                            },
                            "securityRules": {
                              "type": "array"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkSecurityGroups'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "securityRules": "[parameters('securityRules')]"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[parameters('deployBastion')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "bastionNSG",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('bastionHostNetworkSecurityGroup')]"
                          },
                          "securityRules": {
                            "value": "[variables('bastionNetworkSecurityGroupRules')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "789887257637580479"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "name": {
                              "type": "string"
                            },
                            "securityRules": {
                              "type": "array"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkSecurityGroups'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "securityRules": "[parameters('securityRules')]"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "routeTable",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "disableBgpRoutePropagation": {
                            "value": false
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('routeTableName')]"
                          },
                          "routeNextHopIpAddress": {
                            "value": "[parameters('firewallClientPrivateIpAddress')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "4179260279635804537"
                            }
                          },
                          "parameters": {
                            "disableBgpRoutePropagation": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "name": {
                              "type": "string"
                            },
                            "routeAddressPrefix": {
                              "type": "string",
                              "defaultValue": "0.0.0.0/0"
                            },
                            "routeName": {
                              "type": "string",
                              "defaultValue": "default_route"
                            },
                            "routeNextHopIpAddress": {
                              "type": "string"
                            },
                            "routeNextHopType": {
                              "type": "string",
                              "defaultValue": "VirtualAppliance"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/routeTables",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/routeTables'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                "routes": [
                                  {
                                    "name": "[parameters('routeName')]",
                                    "properties": {
                                      "addressPrefix": "[parameters('routeAddressPrefix')]",
                                      "nextHopIpAddress": "[parameters('routeNextHopIpAddress')]",
                                      "nextHopType": "[parameters('routeNextHopType')]"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "virtualNetwork",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "addressPrefix": {
                            "value": "[parameters('virtualNetworkAddressPrefix')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "subnets": {
                            "value": "[union(createArray(createObject('name', 'AzureFirewallSubnet', 'properties', createObject('addressPrefix', parameters('firewallClientSubnetAddressPrefix'))), createObject('name', 'AzureFirewallManagementSubnet', 'properties', createObject('addressPrefix', parameters('firewallManagementSubnetAddressPrefix'))), createObject('name', parameters('subnetName'), 'properties', createObject('addressPrefix', parameters('subnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value), 'privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled', 'routeTable', createObject('id', reference(resourceId('Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value)))), if(parameters('deployBastion'), createArray(createObject('name', 'AzureBastionSubnet', 'properties', createObject('addressPrefix', parameters('bastionHostSubnetAddressPrefix'), 'networkSecurityGroup', createObject('id', reference(resourceId('Microsoft.Resources/deployments', 'bastionNSG'), '2022-09-01').outputs.id.value)))), createArray()), if(parameters('deployAzureGatewaySubnet'), createArray(createObject('name', 'GatewaySubnet', 'properties', createObject('addressPrefix', parameters('azureGatewaySubnetAddressPrefix')))), createArray()))]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "vNetDnsServers": {
                            "value": "[parameters('vNetDnsServers')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "7840386815102120323"
                            }
                          },
                          "parameters": {
                            "addressPrefix": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "name": {
                              "type": "string"
                            },
                            "subnets": {
                              "type": "array"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "vNetDnsServers": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/virtualNetworks'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "addressSpace": {
                                  "addressPrefixes": [
                                    "[parameters('addressPrefix')]"
                                  ]
                                },
                                "subnets": "[parameters('subnets')]",
                                "dhcpOptions": {
                                  "dnsServers": "[parameters('vNetDnsServers')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "addressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').addressSpace.addressPrefixes[0]]"
                            },
                            "dnsServers": {
                              "type": "array",
                              "value": "[parameters('vNetDnsServers')]"
                            },
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "subnets": {
                              "type": "array",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').subnets]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'bastionNSG')]",
                        "[resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup')]",
                        "[resourceId('Microsoft.Resources/deployments', 'routeTable')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "firewallClientPublicIPAddress",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "availabilityZones": {
                            "value": "[parameters('firewallClientPublicIPAddressAvailabilityZones')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('firewallClientPublicIPAddressName')]"
                          },
                          "publicIpAllocationMethod": {
                            "value": "Static"
                          },
                          "skuName": {
                            "value": "Standard"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "8397701337397103841"
                            }
                          },
                          "parameters": {
                            "availabilityZones": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "name": {
                              "type": "string"
                            },
                            "publicIpAllocationMethod": {
                              "type": "string"
                            },
                            "skuName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/publicIPAddresses'), createObject()), parameters('mlzTags'))]",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]"
                              },
                              "zones": "[parameters('availabilityZones')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "firewallManagementPublicIPAddress",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "availabilityZones": {
                            "value": "[parameters('firewallManagementPublicIPAddressAvailabilityZones')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('firewallManagementPublicIPAddressName')]"
                          },
                          "publicIpAllocationMethod": {
                            "value": "Static"
                          },
                          "skuName": {
                            "value": "Standard"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "8397701337397103841"
                            }
                          },
                          "parameters": {
                            "availabilityZones": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "name": {
                              "type": "string"
                            },
                            "publicIpAllocationMethod": {
                              "type": "string"
                            },
                            "skuName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/publicIPAddresses'), createObject()), parameters('mlzTags'))]",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]"
                              },
                              "zones": "[parameters('availabilityZones')]"
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "firewall",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "clientIpConfigurationPublicIPAddressResourceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'firewallClientPublicIPAddress'), '2022-09-01').outputs.id.value]"
                          },
                          "clientIpConfigurationSubnetResourceId": {
                            "value": "[format('{0}/subnets/AzureFirewallSubnet', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value)]"
                          },
                          "dnsServers": {
                            "value": "[parameters('dnsServers')]"
                          },
                          "enableProxy": {
                            "value": "[parameters('enableProxy')]"
                          },
                          "firewallPolicyName": {
                            "value": "[parameters('firewallPolicyName')]"
                          },
                          "intrusionDetectionMode": {
                            "value": "[parameters('firewallIntrusionDetectionMode')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "managementIpConfigurationPublicIPAddressResourceId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'firewallManagementPublicIPAddress'), '2022-09-01').outputs.id.value]"
                          },
                          "managementIpConfigurationSubnetResourceId": {
                            "value": "[format('{0}/subnets/AzureFirewallManagementSubnet', reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value)]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('firewallName')]"
                          },
                          "skuTier": {
                            "value": "[parameters('firewallSkuTier')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "threatIntelMode": {
                            "value": "[parameters('firewallThreatIntelMode')]"
                          },
                          "firewallRuleCollectionGroups": {
                            "value": "[parameters('firewallRuleCollectionGroups')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "2314857396402576240"
                            }
                          },
                          "parameters": {
                            "clientIpConfigurationSubnetResourceId": {
                              "type": "string"
                            },
                            "clientIpConfigurationPublicIPAddressResourceId": {
                              "type": "string"
                            },
                            "dnsServers": {
                              "type": "array"
                            },
                            "enableProxy": {
                              "type": "bool"
                            },
                            "firewallPolicyName": {
                              "type": "string"
                            },
                            "intrusionDetectionMode": {
                              "type": "string",
                              "allowedValues": [
                                "Alert",
                                "Deny",
                                "Off"
                              ]
                            },
                            "location": {
                              "type": "string"
                            },
                            "managementIpConfigurationSubnetResourceId": {
                              "type": "string"
                            },
                            "managementIpConfigurationPublicIPAddressResourceId": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "name": {
                              "type": "string"
                            },
                            "skuTier": {
                              "type": "string",
                              "allowedValues": [
                                "Premium",
                                "Standard"
                              ]
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "threatIntelMode": {
                              "type": "string",
                              "allowedValues": [
                                "Alert",
                                "Deny",
                                "Off"
                              ]
                            },
                            "firewallRuleCollectionGroups": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "intrusionDetectionObject": {
                              "mode": "[parameters('intrusionDetectionMode')]"
                            },
                            "dnsSettings": {
                              "enableProxy": "[parameters('enableProxy')]",
                              "servers": "[parameters('dnsServers')]"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/firewallPolicies",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('firewallPolicyName')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/firewallPolicies'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "threatIntelMode": "[parameters('threatIntelMode')]",
                                "intrusionDetection": "[if(equals(parameters('skuTier'), 'Premium'), variables('intrusionDetectionObject'), null())]",
                                "sku": {
                                  "tier": "[parameters('skuTier')]"
                                },
                                "dnsSettings": "[variables('dnsSettings')]"
                              },
                              "metadata": {
                                "description": "Azure Firewall Policy"
                              }
                            },
                            {
                              "type": "Microsoft.Network/azureFirewalls",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/azureFirewalls'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig-client",
                                    "properties": {
                                      "subnet": {
                                        "id": "[parameters('clientIpConfigurationSubnetResourceId')]"
                                      },
                                      "publicIPAddress": {
                                        "id": "[parameters('clientIpConfigurationPublicIPAddressResourceId')]"
                                      }
                                    }
                                  }
                                ],
                                "managementIpConfiguration": {
                                  "name": "ipconfig-management",
                                  "properties": {
                                    "subnet": {
                                      "id": "[parameters('managementIpConfigurationSubnetResourceId')]"
                                    },
                                    "publicIPAddress": {
                                      "id": "[parameters('managementIpConfigurationPublicIPAddressResourceId')]"
                                    }
                                  }
                                },
                                "firewallPolicy": {
                                  "id": "[resourceId('Microsoft.Network/firewallPolicies', parameters('firewallPolicyName'))]"
                                },
                                "sku": {
                                  "tier": "[parameters('skuTier')]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/firewallPolicies', parameters('firewallPolicyName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "defaultRuleCollectionsConfig",
                              "subscriptionId": "[split(resourceId('Microsoft.Network/firewallPolicies', parameters('firewallPolicyName')), '/')[2]]",
                              "resourceGroup": "[split(resourceId('Microsoft.Network/firewallPolicies', parameters('firewallPolicyName')), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "firewallPolicyName": {
                                    "value": "[parameters('firewallPolicyName')]"
                                  },
                                  "firewallRuleCollectionGroups": {
                                    "value": "[parameters('firewallRuleCollectionGroups')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "8037704770039885052"
                                    }
                                  },
                                  "parameters": {
                                    "firewallPolicyName": {
                                      "type": "string"
                                    },
                                    "firewallRuleCollectionGroups": {
                                      "type": "array"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "ruleCreate",
                                        "count": "[length(parameters('firewallRuleCollectionGroups'))]",
                                        "mode": "serial",
                                        "batchSize": 1
                                      },
                                      "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('{0}/{1}', parameters('firewallPolicyName'), parameters('firewallRuleCollectionGroups')[copyIndex()].name)]",
                                      "properties": "[parameters('firewallRuleCollectionGroups')[copyIndex()].properties]"
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]",
                                "[resourceId('Microsoft.Network/firewallPolicies', parameters('firewallPolicyName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2021-02-01').ipConfigurations[0].properties.privateIPAddress]"
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'firewallClientPublicIPAddress')]",
                        "[resourceId('Microsoft.Resources/deployments', 'firewallManagementPublicIPAddress')]",
                        "[resourceId('Microsoft.Resources/deployments', 'virtualNetwork')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "bastionHostSubnetResourceId": {
                      "type": "string",
                      "value": "[if(parameters('deployBastion'), reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[3].id, '')]"
                    },
                    "dnsServers": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.dnsServers.value]"
                    },
                    "firewallName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'firewall'), '2022-09-01').outputs.name.value]"
                    },
                    "firewallPrivateIPAddress": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'firewall'), '2022-09-01').outputs.privateIPAddress.value]"
                    },
                    "firewallResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'firewall'), '2022-09-01').outputs.resourceId.value]"
                    },
                    "networkSecurityGroupName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.name.value]"
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                    },
                    "subnetAddressPrefix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[2].properties.addressPrefix]"
                    },
                    "subnetName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[2].name]"
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value[2].id]"
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.name.value]"
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "spokeNetworks",
                "count": "[length(variables('spokes'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vnet-{0}-{1}', variables('spokes')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[variables('spokes')[copyIndex()].namingConvention.networkSecurityGroup]"
                  },
                  "networkSecurityGroupRules": {
                    "value": "[variables('spokes')[copyIndex()].nsgRules]"
                  },
                  "resourceGroupName": {
                    "value": "[variables('spokeResourceGroupNames')[copyIndex()]]"
                  },
                  "routeTableName": {
                    "value": "[variables('spokes')[copyIndex()].namingConvention.routeTable]"
                  },
                  "routeTableRouteNextHopIpAddress": {
                    "value": "[parameters('firewallSettings').clientPrivateIpAddress]"
                  },
                  "subnetAddressPrefix": {
                    "value": "[variables('spokes')[copyIndex()].subnetAddressPrefix]"
                  },
                  "subnetName": {
                    "value": "[variables('spokes')[copyIndex()].namingConvention.subnet]"
                  },
                  "subscriptionId": {
                    "value": "[variables('spokes')[copyIndex()].subscriptionId]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "virtualNetworkAddressPrefix": {
                    "value": "[variables('spokes')[copyIndex()].vnetAddressPrefix]"
                  },
                  "virtualNetworkName": {
                    "value": "[variables('spokes')[copyIndex()].namingConvention.virtualNetwork]"
                  },
                  "vNetDnsServers": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.dnsServers.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "4871920687708691159"
                    }
                  },
                  "parameters": {
                    "additionalSubnets": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "networkSecurityGroupRules": {
                      "type": "array"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "routeTableName": {
                      "type": "string"
                    },
                    "routeTableRouteNextHopIpAddress": {
                      "type": "string"
                    },
                    "subnetAddressPrefix": {
                      "type": "string"
                    },
                    "subnetName": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    },
                    "vNetDnsServers": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "delegations": {
                      "AzureNetAppFiles": [
                        {
                          "name": "Microsoft.Netapp.volumes",
                          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/delegations', parameters('virtualNetworkName'), 'AzureNetAppFiles', 'delegation')]",
                          "properties": {
                            "serviceName": "Microsoft.Netapp/volumes"
                          },
                          "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                        }
                      ],
                      "FunctionAppOutbound": [
                        {
                          "name": "Microsoft.Web/sites",
                          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/delegations', parameters('virtualNetworkName'), 'FunctionAppOutbound', 'delegation')]",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverfarms"
                          },
                          "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                        }
                      ]
                    },
                    "subnets": "[union(createArray(createObject('name', parameters('subnetName'), 'properties', createObject('addressPrefix', parameters('subnetAddressPrefix')))), parameters('additionalSubnets'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "networkSecurityGroup",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('networkSecurityGroupName')]"
                          },
                          "securityRules": {
                            "value": "[parameters('networkSecurityGroupRules')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "789887257637580479"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "name": {
                              "type": "string"
                            },
                            "securityRules": {
                              "type": "array"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkSecurityGroups'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "securityRules": "[parameters('securityRules')]"
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "routeTable",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "disableBgpRoutePropagation": {
                            "value": true
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('routeTableName')]"
                          },
                          "routeNextHopIpAddress": {
                            "value": "[parameters('routeTableRouteNextHopIpAddress')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "4179260279635804537"
                            }
                          },
                          "parameters": {
                            "disableBgpRoutePropagation": {
                              "type": "bool"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "name": {
                              "type": "string"
                            },
                            "routeAddressPrefix": {
                              "type": "string",
                              "defaultValue": "0.0.0.0/0"
                            },
                            "routeName": {
                              "type": "string",
                              "defaultValue": "default_route"
                            },
                            "routeNextHopIpAddress": {
                              "type": "string"
                            },
                            "routeNextHopType": {
                              "type": "string",
                              "defaultValue": "VirtualAppliance"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/routeTables",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/routeTables'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]",
                                "routes": [
                                  {
                                    "name": "[parameters('routeName')]",
                                    "properties": {
                                      "addressPrefix": "[parameters('routeAddressPrefix')]",
                                      "nextHopIpAddress": "[parameters('routeNextHopIpAddress')]",
                                      "nextHopType": "[parameters('routeNextHopType')]"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "virtualNetwork",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "addressPrefix": {
                            "value": "[parameters('virtualNetworkAddressPrefix')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('virtualNetworkName')]"
                          },
                          "subnets": {
                            "copy": [
                              {
                                "name": "value",
                                "count": "[length(variables('subnets'))]",
                                "input": "[createObject('name', variables('subnets')[copyIndex('value')].name, 'properties', createObject('addressPrefix', variables('subnets')[copyIndex('value')].properties.addressPrefix, 'delegations', coalesce(tryGet(variables('delegations'), variables('subnets')[copyIndex('value')].name), createArray()), 'networkSecurityGroup', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value), 'routeTable', createObject('id', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'routeTable'), '2022-09-01').outputs.id.value), 'privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled'))]"
                              }
                            ]
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "vNetDnsServers": {
                            "value": "[parameters('vNetDnsServers')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "7840386815102120323"
                            }
                          },
                          "parameters": {
                            "addressPrefix": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object"
                            },
                            "name": {
                              "type": "string"
                            },
                            "subnets": {
                              "type": "array"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "vNetDnsServers": {
                              "type": "array"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/virtualNetworks'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "addressSpace": {
                                  "addressPrefixes": [
                                    "[parameters('addressPrefix')]"
                                  ]
                                },
                                "subnets": "[parameters('subnets')]",
                                "dhcpOptions": {
                                  "dnsServers": "[parameters('vNetDnsServers')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "addressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').addressSpace.addressPrefixes[0]]"
                            },
                            "dnsServers": {
                              "type": "array",
                              "value": "[parameters('vNetDnsServers')]"
                            },
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "subnets": {
                              "type": "array",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-02-01').subnets]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup')]",
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'routeTable')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "networkSecurityGroupName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.name.value]"
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'networkSecurityGroup'), '2022-09-01').outputs.id.value]"
                    },
                    "subnets": {
                      "type": "array",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.subnets.value]"
                    },
                    "virtualNetworkAddressPrefix": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.addressPrefix.value]"
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.name.value]"
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'virtualNetwork'), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "hubVirtualNetworkPeerings",
                "count": "[length(variables('spokes'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vnet-peerings-hub-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "hubVirtualNetworkName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  },
                  "resourceGroupName": {
                    "value": "[variables('hubResourceGroupName')]"
                  },
                  "spokeShortName": {
                    "value": "[variables('spokes')[copyIndex()].shortName]"
                  },
                  "spokeVirtualNetworkResourceId": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[copyIndex()].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value]"
                  },
                  "subscriptionId": {
                    "value": "[variables('hub').subscriptionId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "3063202529503134782"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "hubVirtualNetworkName": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "spokeShortName": {
                      "type": "string"
                    },
                    "spokeVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('peer-hub-to-{0}-{1}', parameters('spokeShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "remoteVirtualNetworkResourceId": {
                            "value": "[parameters('spokeVirtualNetworkResourceId')]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('hubVirtualNetworkName')]"
                          },
                          "virtualNetworkPeerName": {
                            "value": "[format('to-{0}', split(parameters('spokeVirtualNetworkResourceId'), '/')[8])]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "15104073959466834076"
                            }
                          },
                          "parameters": {
                            "remoteVirtualNetworkResourceId": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "virtualNetworkPeerName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('virtualNetworkPeerName'))]",
                              "properties": {
                                "allowForwardedTraffic": true,
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[copyIndex()].name, parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "copy": {
                "name": "spokeVirtualNetworkPeerings",
                "count": "[length(variables('spokes'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vnet-peerings-{0}-{1}', variables('spokes')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value]"
                  },
                  "resourceGroupName": {
                    "value": "[variables('spokeResourceGroupNames')[copyIndex()]]"
                  },
                  "spokeShortName": {
                    "value": "[variables('spokes')[copyIndex()].shortName]"
                  },
                  "spokeVirtualNetworkName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[copyIndex()].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
                  },
                  "subscriptionId": {
                    "value": "[variables('spokes')[copyIndex()].subscriptionId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "16138494685201369814"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "resourceGroupName": {
                      "type": "string"
                    },
                    "spokeShortName": {
                      "type": "string"
                    },
                    "spokeVirtualNetworkName": {
                      "type": "string"
                    },
                    "subscriptionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('peer-{0}-to-hub-{1}', parameters('spokeShortName'), parameters('deploymentNameSuffix'))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "remoteVirtualNetworkResourceId": {
                            "value": "[parameters('hubVirtualNetworkResourceId')]"
                          },
                          "virtualNetworkName": {
                            "value": "[parameters('spokeVirtualNetworkName')]"
                          },
                          "virtualNetworkPeerName": {
                            "value": "[format('to-{0}', split(parameters('hubVirtualNetworkResourceId'), '/')[8])]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "15104073959466834076"
                            }
                          },
                          "parameters": {
                            "remoteVirtualNetworkResourceId": {
                              "type": "string"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "virtualNetworkPeerName": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('virtualNetworkPeerName'))]",
                              "properties": {
                                "allowForwardedTraffic": true,
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[copyIndex()].name, parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('hub').subscriptionId]",
              "resourceGroup": "[variables('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deployIdentity": {
                    "value": "[parameters('deployIdentity')]"
                  },
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "hubVirtualNetworkResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value]"
                  },
                  "identityVirtualNetworkResourceId": "[if(parameters('deployIdentity'), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[2].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value), createObject('value', ''))]",
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "privateDnsZoneNames": {
                    "value": "[parameters('privateDnsZoneNames')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "1238096610430697588"
                    }
                  },
                  "parameters": {
                    "deployIdentity": {
                      "type": "bool"
                    },
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "hubVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "identityVirtualNetworkResourceId": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "privateDnsZoneNames": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "virtualNetworks": "[union(createArray(createObject('name', split(parameters('hubVirtualNetworkResourceId'), '/')[8], 'resourceGroupName', split(parameters('hubVirtualNetworkResourceId'), '/')[4], 'subscriptionId', split(parameters('hubVirtualNetworkResourceId'), '/')[2])), if(parameters('deployIdentity'), createArray(createObject('name', split(parameters('identityVirtualNetworkResourceId'), '/')[8], 'resourceGroupName', split(parameters('identityVirtualNetworkResourceId'), '/')[4], 'subscriptionId', split(parameters('identityVirtualNetworkResourceId'), '/')[2])), createArray()))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateDnsZones",
                        "count": "[length(parameters('privateDnsZoneNames'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2018-09-01",
                      "name": "[parameters('privateDnsZoneNames')[copyIndex()]]",
                      "location": "global",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateDnsZones'), createObject()), parameters('mlzTags'))]"
                    },
                    {
                      "copy": {
                        "name": "virtualNetworkLinks",
                        "count": "[length(variables('virtualNetworks'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-virtual-network-links-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneNames": {
                            "value": "[parameters('privateDnsZoneNames')]"
                          },
                          "virtualNetworkName": {
                            "value": "[variables('virtualNetworks')[copyIndex()].name]"
                          },
                          "virtualNetworkResourceGroupName": {
                            "value": "[variables('virtualNetworks')[copyIndex()].resourceGroupName]"
                          },
                          "virtualNetworkSubscriptionId": {
                            "value": "[variables('virtualNetworks')[copyIndex()].subscriptionId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "9577584589866012463"
                            }
                          },
                          "parameters": {
                            "privateDnsZoneNames": {
                              "type": "array"
                            },
                            "virtualNetworkName": {
                              "type": "string"
                            },
                            "virtualNetworkResourceGroupName": {
                              "type": "string"
                            },
                            "virtualNetworkSubscriptionId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "virtualNetworkLinks",
                                "count": "[length(parameters('privateDnsZoneNames'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2018-09-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneNames')[copyIndex()], parameters('virtualNetworkName'))]",
                              "location": "global",
                              "properties": {
                                "registrationEnabled": false,
                                "virtualNetwork": {
                                  "id": "[resourceId(parameters('virtualNetworkSubscriptionId'), parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "privateDnsZones"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZoneResourceIds": {
                      "type": "object",
                      "value": {
                        "agentSvc": "[resourceId('Microsoft.Network/privateDnsZones', filter(parameters('privateDnsZoneNames'), lambda('name', startsWith(lambdaVariables('name'), 'privatelink.agentsvc')))[0])]",
                        "blob": "[resourceId('Microsoft.Network/privateDnsZones', filter(parameters('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'blob')))[0])]",
                        "file": "[resourceId('Microsoft.Network/privateDnsZones', filter(parameters('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'file')))[0])]",
                        "keyVault": "[resourceId('Microsoft.Network/privateDnsZones', filter(parameters('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'vaultcore')))[0])]",
                        "monitor": "[resourceId('Microsoft.Network/privateDnsZones', filter(parameters('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'monitor')))[0])]",
                        "ods": "[resourceId('Microsoft.Network/privateDnsZones', filter(parameters('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'ods.opinsights')))[0])]",
                        "oms": "[resourceId('Microsoft.Network/privateDnsZones', filter(parameters('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'oms.opinsights')))[0])]",
                        "queue": "[resourceId('Microsoft.Network/privateDnsZones', filter(parameters('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'queue')))[0])]",
                        "table": "[resourceId('Microsoft.Network/privateDnsZones', filter(parameters('privateDnsZoneNames'), lambda('name', contains(lambdaVariables('name'), 'table')))[0])]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix')))]",
                "spokeNetworks"
              ]
            }
          ],
          "outputs": {
            "azureFirewallResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.firewallResourceId.value]"
            },
            "bastionHostSubnetResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.bastionHostSubnetResourceId.value]"
            },
            "sharedServicesSubnetResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[1].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].id]"
            },
            "hubNetworkSecurityGroupResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkSecurityGroupResourceId.value]"
            },
            "hubSubnetResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetResourceId.value]"
            },
            "hubVirtualNetworkResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-vnet-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkResourceId.value]"
            },
            "identitySubnetResourceId": {
              "type": "string",
              "value": "[if(parameters('deployIdentity'), reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[2].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].id, '')]"
            },
            "operationsSubnetResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-vnet-{0}-{1}', variables('spokes')[0].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[0].id]"
            },
            "privateDnsZoneResourceIds": {
              "type": "object",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('hub').subscriptionId, variables('hubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-private-dns-zones-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZoneResourceIds.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "environmentAbbreviation": {
            "value": "[parameters('environmentAbbreviation')]"
          },
          "keyVaultPrivateDnsZoneResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZoneResourceIds.value.keyVault]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "resourceAbbreviations": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceAbbreviations.value]"
          },
          "resourceGroupName": {
            "value": "[filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value, lambda('name', contains(lambdaVariables('name'), 'hub')))[0]]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubSubnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "tier": {
            "value": "[filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value, lambda('tier', equals(lambdaVariables('tier').name, 'hub')))[0]]"
          },
          "workloadShortName": {
            "value": "ops"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "12418522013927932955"
            }
          },
          "parameters": {
            "deploymentNameSuffix": {
              "type": "string"
            },
            "environmentAbbreviation": {
              "type": "string"
            },
            "keyVaultPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "resourceAbbreviations": {
              "type": "object"
            },
            "resourceGroupName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "tier": {
              "type": "object"
            },
            "workloadShortName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('tier').subscriptionId]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "environmentAbbreviation": {
                    "value": "[parameters('environmentAbbreviation')]"
                  },
                  "keyVaultPrivateDnsZoneResourceId": {
                    "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "resourceAbbreviations": {
                    "value": "[parameters('resourceAbbreviations')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tier": {
                    "value": "[parameters('tier')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "1244555501661890727"
                    }
                  },
                  "parameters": {
                    "diskEncryptionKeyExpirationInDays": {
                      "type": "int",
                      "defaultValue": 30
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "keyVaultPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "resourceAbbreviations": {
                      "type": "object"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "tier": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "keyVaultPrivateEndpointName": "[parameters('tier').namingConvention.keyVaultPrivateEndpoint]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.KeyVault/vaults'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "enabledForDeployment": false,
                        "enabledForDiskEncryption": false,
                        "enabledForTemplateDeployment": false,
                        "enablePurgeProtection": true,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": true,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "publicNetworkAccess": "Disabled",
                        "sku": {
                          "family": "A",
                          "name": "premium"
                        },
                        "softDeleteRetentionInDays": "[if(or(equals(parameters('environmentAbbreviation'), 'dev'), equals(parameters('environmentAbbreviation'), 'test')), 7, 90)]",
                        "tenantId": "[subscription().tenantId]"
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'DiskEncryptionKey')]",
                      "properties": {
                        "attributes": {
                          "enabled": true
                        },
                        "keySize": 4096,
                        "kty": "RSA-HSM",
                        "rotationPolicy": {
                          "attributes": {
                            "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                          },
                          "lifetimeActions": [
                            {
                              "action": {
                                "type": "Notify"
                              },
                              "trigger": {
                                "timeBeforeExpiry": "P10D"
                              }
                            },
                            {
                              "action": {
                                "type": "Rotate"
                              },
                              "trigger": {
                                "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'StorageEncryptionKey')]",
                      "properties": {
                        "attributes": {
                          "enabled": true
                        },
                        "keySize": 4096,
                        "kty": "RSA-HSM",
                        "rotationPolicy": {
                          "attributes": {
                            "expiryTime": "[format('P{0}D', string(parameters('diskEncryptionKeyExpirationInDays')))]"
                          },
                          "lifetimeActions": [
                            {
                              "action": {
                                "type": "Notify"
                              },
                              "trigger": {
                                "timeBeforeExpiry": "P10D"
                              }
                            },
                            {
                              "action": {
                                "type": "Rotate"
                              },
                              "trigger": {
                                "timeAfterCreate": "[format('P{0}D', string(sub(parameters('diskEncryptionKeyExpirationInDays'), 7)))]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[variables('keyVaultPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('tier').namingConvention.keyVaultNetworkInterface]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('keyVaultPrivateEndpointName')]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]",
                              "groupIds": [
                                "vault"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'DiskEncryptionKey')]",
                        "[resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'StorageEncryptionKey')]",
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', variables('keyVaultPrivateEndpointName'), format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'DiskEncryptionKey')]",
                        "[resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'StorageEncryptionKey')]",
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName'))]",
                        "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyUriWithVersion": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)), 'DiskEncryptionKey'), '2022-07-01').keyUriWithVersion]"
                    },
                    "keyVaultResourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id)))]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "value": "[format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id))]"
                    },
                    "keyVaultUri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', format('{0}{1}', parameters('resourceAbbreviations').keyVaults, uniqueString(parameters('tier').namingConvention.keyVault, resourceGroup().id))), '2022-07-01').vaultUri]"
                    },
                    "networkInterfaceResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName')), '2023-04-01').networkInterfaces[0].id]"
                    },
                    "storageKeyName": {
                      "type": "string",
                      "value": "StorageEncryptionKey"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('tier').subscriptionId]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "diskEncryptionSetName": {
                    "value": "[parameters('tier').namingConvention.diskEncryptionSet]"
                  },
                  "keyUrl": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyUriWithVersion.value]"
                  },
                  "keyVaultResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "workloadShortName": {
                    "value": "[parameters('workloadShortName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "12106267472290920648"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "diskEncryptionSetName": {
                      "type": "string"
                    },
                    "keyUrl": {
                      "type": "string"
                    },
                    "keyVaultResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "workloadShortName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/diskEncryptionSets",
                      "apiVersion": "2023-04-02",
                      "name": "[parameters('diskEncryptionSetName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/diskEncryptionSets'), createObject()), parameters('mlzTags'))]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "activeKey": {
                          "sourceVault": {
                            "id": "[parameters('keyVaultResourceId')]"
                          },
                          "keyUrl": "[parameters('keyUrl')]"
                        },
                        "encryptionType": "EncryptionAtRestWithPlatformAndCustomerKeys",
                        "rotationToLatestKeyVersionEnabled": true
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('assign-role-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName')), '2023-04-02', 'full').identity.principalId]"
                          },
                          "principalType": {
                            "value": "ServicePrincipal"
                          },
                          "roleDefinitionId": {
                            "value": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                          },
                          "targetResourceId": {
                            "value": "[resourceGroup().id]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "7891675450851212838"
                            }
                          },
                          "parameters": {
                            "targetResourceId": {
                              "type": "string"
                            },
                            "roleDefinitionId": {
                              "type": "string"
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "ServicePrincipal",
                              "allowedValues": [
                                "ForeignGroup",
                                "Group",
                                "ServicePrincipal",
                                "User"
                              ]
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                              "properties": {
                                "principalId": "[parameters('principalId')]",
                                "principalType": "[parameters('principalType')]",
                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                "description": "[parameters('description')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('diskEncryptionSetName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-id-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('tier').subscriptionId]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[parameters('tier').namingConvention.userAssignedIdentity]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "7737700727160303532"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedIdentityName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2018-11-30",
                      "name": "[parameters('userAssignedIdentityName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject()), parameters('mlzTags'))]"
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[guid(parameters('userAssignedIdentityName'), 'e147488a-f6f5-4113-8e2d-b22465e65bf6', parameters('keyVaultName'))]",
                      "properties": {
                        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2018-11-30').principalId]",
                        "principalType": "ServicePrincipal",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "diskEncryptionSetResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-des-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
            },
            "keyVaultResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
            },
            "networkInterfaceResourceIds": {
              "type": "array",
              "value": [
                "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceId.value]"
              ]
            },
            "storageKeyName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-kv-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tier').subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-id-{0}-{1}', parameters('workloadShortName'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "deploySentinel": {
            "value": "[parameters('deploySentinel')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceCappingDailyQuotaGb": {
            "value": "[parameters('logAnalyticsWorkspaceCappingDailyQuotaGb')]"
          },
          "logAnalyticsWorkspaceRetentionInDays": {
            "value": "[parameters('logAnalyticsWorkspaceRetentionInDays')]"
          },
          "logAnalyticsWorkspaceSkuName": {
            "value": "[parameters('logAnalyticsWorkspaceSkuName')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "ops": {
            "value": "[filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value, lambda('tier', equals(lambdaVariables('tier').name, 'operations')))[0]]"
          },
          "opsResourceGroupName": {
            "value": "[filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value, lambda('name', contains(lambdaVariables('name'), 'operations')))[0]]"
          },
          "privateDnsZoneResourceIds": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZoneResourceIds.value]"
          },
          "subnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.operationsSubnetResourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "11510332316247668737"
            }
          },
          "parameters": {
            "deploymentNameSuffix": {
              "type": "string"
            },
            "deploySentinel": {
              "type": "bool"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceCappingDailyQuotaGb": {
              "type": "int"
            },
            "logAnalyticsWorkspaceRetentionInDays": {
              "type": "int"
            },
            "logAnalyticsWorkspaceSkuName": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "ops": {
              "type": "object"
            },
            "opsResourceGroupName": {
              "type": "string"
            },
            "privateDnsZoneResourceIds": {
              "type": "object"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-law-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('ops').subscriptionId]",
              "resourceGroup": "[parameters('opsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploySentinel": {
                    "value": "[parameters('deploySentinel')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "name": {
                    "value": "[parameters('ops').namingConvention.logAnalyticsWorkspace]"
                  },
                  "retentionInDays": {
                    "value": "[parameters('logAnalyticsWorkspaceRetentionInDays')]"
                  },
                  "skuName": {
                    "value": "[parameters('logAnalyticsWorkspaceSkuName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "workspaceCappingDailyQuotaGb": {
                    "value": "[parameters('logAnalyticsWorkspaceCappingDailyQuotaGb')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "18274923849559811707"
                    }
                  },
                  "parameters": {
                    "deploySentinel": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "retentionInDays": {
                      "type": "int",
                      "defaultValue": 30
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "PerGB2018"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "workspaceCappingDailyQuotaGb": {
                      "type": "int",
                      "defaultValue": -1
                    }
                  },
                  "variables": {
                    "solutions": [
                      {
                        "deploy": true,
                        "name": "AzureActivity",
                        "product": "OMSGallery/AzureActivity",
                        "publisher": "Microsoft",
                        "promotionCode": ""
                      },
                      {
                        "deploy": "[parameters('deploySentinel')]",
                        "name": "SecurityInsights",
                        "product": "OMSGallery/SecurityInsights",
                        "publisher": "Microsoft",
                        "promotionCode": ""
                      },
                      {
                        "deploy": true,
                        "name": "VMInsights",
                        "product": "OMSGallery/VMInsights",
                        "publisher": "Microsoft",
                        "promotionCode": ""
                      },
                      {
                        "deploy": true,
                        "name": "Security",
                        "product": "OMSGallery/Security",
                        "publisher": "Microsoft",
                        "promotionCode": ""
                      },
                      {
                        "deploy": true,
                        "name": "ServiceMap",
                        "publisher": "Microsoft",
                        "product": "OMSGallery/ServiceMap",
                        "promotionCode": ""
                      },
                      {
                        "deploy": true,
                        "name": "ContainerInsights",
                        "publisher": "Microsoft",
                        "product": "OMSGallery/ContainerInsights",
                        "promotionCode": ""
                      },
                      {
                        "deploy": true,
                        "name": "KeyVaultAnalytics",
                        "publisher": "Microsoft",
                        "product": "OMSGallery/KeyVaultAnalytics",
                        "promotionCode": ""
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.OperationalInsights/workspaces'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "retentionInDays": "[if(and(parameters('deploySentinel'), less(parameters('retentionInDays'), 90)), 90, parameters('retentionInDays'))]",
                        "sku": {
                          "name": "[parameters('skuName')]"
                        },
                        "workspaceCapping": {
                          "dailyQuotaGb": "[parameters('workspaceCappingDailyQuotaGb')]"
                        },
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled"
                      }
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsSolutions",
                        "count": "[length(variables('solutions'))]"
                      },
                      "condition": "[variables('solutions')[copyIndex()].deploy]",
                      "type": "Microsoft.OperationsManagement/solutions",
                      "apiVersion": "2015-11-01-preview",
                      "name": "[format('{0}({1})', variables('solutions')[copyIndex()].name, parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.OperationsManagement/solutions'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      },
                      "plan": {
                        "name": "[format('{0}({1})', variables('solutions')[copyIndex()].name, parameters('name'))]",
                        "product": "[variables('solutions')[copyIndex()].product]",
                        "publisher": "[variables('solutions')[copyIndex()].publisher]",
                        "promotionCode": "[variables('solutions')[copyIndex()].promotionCode]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-private-link-scope-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('ops').subscriptionId]",
              "resourceGroup": "[parameters('opsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('ops').subscriptionId, parameters('opsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-law-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "name": {
                    "value": "[parameters('ops').namingConvention.privateLinkScope]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "14651832724242500913"
                    }
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/privateLinkScopes",
                      "apiVersion": "2021-09-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "properties": {
                        "accessModeSettings": {
                          "ingestionAccessMode": "PrivateOnly",
                          "queryAccessMode": "PrivateOnly"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', parameters('name'), split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]",
                      "properties": {
                        "linkedResourceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Insights/privateLinkScopes', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Insights/privateLinkScopes', parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('ops').subscriptionId, parameters('opsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-law-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-private-endpoint-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('ops').subscriptionId]",
              "resourceGroup": "[parameters('opsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "groupIds": {
                    "value": [
                      "azuremonitor"
                    ]
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "name": {
                    "value": "[parameters('ops').namingConvention.privateLinkScopePrivateEndpoint]"
                  },
                  "networkInterfaceName": {
                    "value": "[parameters('ops').namingConvention.privateLinkScopeNetworkInterface]"
                  },
                  "privateDnsZoneConfigs": {
                    "value": [
                      {
                        "name": "monitor",
                        "properties": {
                          "privateDnsZoneId": "[parameters('privateDnsZoneResourceIds').monitor]"
                        }
                      },
                      {
                        "name": "oms",
                        "properties": {
                          "privateDnsZoneId": "[parameters('privateDnsZoneResourceIds').oms]"
                        }
                      },
                      {
                        "name": "ods",
                        "properties": {
                          "privateDnsZoneId": "[parameters('privateDnsZoneResourceIds').ods]"
                        }
                      },
                      {
                        "name": "agentsvc",
                        "properties": {
                          "privateDnsZoneId": "[parameters('privateDnsZoneResourceIds').agentsvc]"
                        }
                      },
                      {
                        "name": "blob",
                        "properties": {
                          "privateDnsZoneId": "[parameters('privateDnsZoneResourceIds').blob]"
                        }
                      }
                    ]
                  },
                  "privateLinkServiceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('ops').subscriptionId, parameters('opsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-private-link-scope-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('subnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "13641962625773647064"
                    }
                  },
                  "parameters": {
                    "groupIds": {
                      "type": "array"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "privateDnsZoneConfigs": {
                      "type": "array"
                    },
                    "privateLinkServiceId": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[parameters('networkInterfaceName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('name')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[parameters('privateDnsZoneConfigs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "networkInterfaceResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2023-04-01').networkInterfaces[0].id]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('ops').subscriptionId, parameters('opsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-private-link-scope-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('ops').subscriptionId, parameters('opsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-law-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            },
            "networkInterfaceResourceIds": {
              "type": "array",
              "value": [
                "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('ops').subscriptionId, parameters('opsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-private-endpoint-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceId.value]"
              ]
            },
            "privateLinkScopeResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('ops').subscriptionId, parameters('opsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-private-link-scope-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-remote-access-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "bastionHostPublicIPAddressAllocationMethod": {
            "value": "Static"
          },
          "bastionHostPublicIPAddressAvailabilityZones": {
            "value": "[parameters('bastionHostPublicIPAddressAvailabilityZones')]"
          },
          "bastionHostPublicIPAddressSkuName": {
            "value": "Standard"
          },
          "bastionHostSubnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.bastionHostSubnetResourceId.value]"
          },
          "delimiter": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.delimiter.value]"
          },
          "deployBastion": {
            "value": "[parameters('deployBastion')]"
          },
          "deployLinuxVirtualMachine": {
            "value": "[parameters('deployLinuxVirtualMachine')]"
          },
          "deployWindowsVirtualMachine": {
            "value": "[parameters('deployWindowsVirtualMachine')]"
          },
          "diskEncryptionSetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
          },
          "hub": {
            "value": "[filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value, lambda('tier', equals(lambdaVariables('tier').name, 'hub')))[0]]"
          },
          "hubNetworkSecurityGroupResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubNetworkSecurityGroupResourceId.value]"
          },
          "hubResourceGroupName": {
            "value": "[filter(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value, lambda('name', contains(lambdaVariables('name'), 'hub')))[0]]"
          },
          "hubSubnetResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubSubnetResourceId.value]"
          },
          "hybridUseBenefit": {
            "value": "[parameters('hybridUseBenefit')]"
          },
          "linuxNetworkInterfacePrivateIPAddressAllocationMethod": {
            "value": "[parameters('linuxNetworkInterfacePrivateIPAddressAllocationMethod')]"
          },
          "linuxVmAdminPasswordOrKey": {
            "value": "[parameters('linuxVmAdminPasswordOrKey')]"
          },
          "linuxVmAdminUsername": {
            "value": "[parameters('linuxVmAdminUsername')]"
          },
          "linuxVmImagePublisher": {
            "value": "[parameters('linuxVmImagePublisher')]"
          },
          "linuxVmImageOffer": {
            "value": "[parameters('linuxVmImageOffer')]"
          },
          "linuxVmImageSku": {
            "value": "[parameters('linuxVmImageSku')]"
          },
          "linuxVmSize": {
            "value": "[parameters('linuxVmSize')]"
          },
          "linuxVmAuthenticationType": {
            "value": "[parameters('linuxVmAuthenticationType')]"
          },
          "linuxVmOsDiskCreateOption": {
            "value": "[parameters('linuxVmOsDiskCreateOption')]"
          },
          "linuxVmOsDiskType": {
            "value": "[parameters('linuxVmOsDiskType')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "supportedClouds": {
            "value": "[parameters('supportedClouds')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "windowsVmAdminPassword": {
            "value": "[parameters('windowsVmAdminPassword')]"
          },
          "windowsVmAdminUsername": {
            "value": "[parameters('windowsVmAdminUsername')]"
          },
          "windowsVmCreateOption": {
            "value": "[parameters('windowsVmCreateOption')]"
          },
          "windowsVmImageOffer": {
            "value": "[parameters('windowsVmImageOffer')]"
          },
          "windowsVmImagePublisher": {
            "value": "[parameters('windowsVmImagePublisher')]"
          },
          "windowsVmImageSku": {
            "value": "[parameters('windowsVmImageSku')]"
          },
          "windowsVmNetworkInterfacePrivateIPAddressAllocationMethod": {
            "value": "[parameters('windowsVmNetworkInterfacePrivateIPAddressAllocationMethod')]"
          },
          "windowsVmSize": {
            "value": "[parameters('windowsVmSize')]"
          },
          "windowsVmStorageAccountType": {
            "value": "[parameters('windowsVmStorageAccountType')]"
          },
          "windowsVmVersion": {
            "value": "[parameters('windowsVmVersion')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "1438616085507290973"
            }
          },
          "parameters": {
            "bastionHostPublicIPAddressAllocationMethod": {
              "type": "string"
            },
            "bastionHostPublicIPAddressAvailabilityZones": {
              "type": "array"
            },
            "bastionHostPublicIPAddressSkuName": {
              "type": "string"
            },
            "bastionHostSubnetResourceId": {
              "type": "string"
            },
            "delimiter": {
              "type": "string"
            },
            "deployBastion": {
              "type": "bool"
            },
            "deployLinuxVirtualMachine": {
              "type": "bool"
            },
            "deployWindowsVirtualMachine": {
              "type": "bool"
            },
            "diskEncryptionSetResourceId": {
              "type": "string"
            },
            "hub": {
              "type": "object"
            },
            "hubNetworkSecurityGroupResourceId": {
              "type": "string"
            },
            "hubResourceGroupName": {
              "type": "string"
            },
            "hubSubnetResourceId": {
              "type": "string"
            },
            "hybridUseBenefit": {
              "type": "bool"
            },
            "linuxNetworkInterfacePrivateIPAddressAllocationMethod": {
              "type": "string"
            },
            "linuxVmAdminPasswordOrKey": {
              "type": "securestring",
              "minLength": 12
            },
            "linuxVmAdminUsername": {
              "type": "string"
            },
            "linuxVmAuthenticationType": {
              "type": "string",
              "allowedValues": [
                "sshPublicKey",
                "password"
              ]
            },
            "linuxVmImagePublisher": {
              "type": "string"
            },
            "linuxVmImageOffer": {
              "type": "string"
            },
            "linuxVmImageSku": {
              "type": "string"
            },
            "linuxVmSize": {
              "type": "string"
            },
            "linuxVmOsDiskCreateOption": {
              "type": "string"
            },
            "linuxVmOsDiskType": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "supportedClouds": {
              "type": "array"
            },
            "tags": {
              "type": "object"
            },
            "windowsVmAdminPassword": {
              "type": "securestring",
              "minLength": 12
            },
            "windowsVmAdminUsername": {
              "type": "string"
            },
            "windowsVmCreateOption": {
              "type": "string"
            },
            "windowsVmImageOffer": {
              "type": "string"
            },
            "windowsVmImagePublisher": {
              "type": "string"
            },
            "windowsVmImageSku": {
              "type": "string"
            },
            "windowsVmNetworkInterfacePrivateIPAddressAllocationMethod": {
              "type": "string"
            },
            "windowsVmSize": {
              "type": "string"
            },
            "windowsVmStorageAccountType": {
              "type": "string"
            },
            "windowsVmVersion": {
              "type": "string"
            }
          },
          "resources": [
            {
              "condition": "[parameters('deployBastion')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "remoteAccess-bastionHost",
              "subscriptionId": "[parameters('hub').subscriptionId]",
              "resourceGroup": "[parameters('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "bastionHostSubnetResourceId": {
                    "value": "[parameters('bastionHostSubnetResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "name": {
                    "value": "[parameters('hub').namingConvention.bastionHost]"
                  },
                  "publicIPAddressAllocationMethod": {
                    "value": "[parameters('bastionHostPublicIPAddressAllocationMethod')]"
                  },
                  "publicIPAddressAvailabilityZones": {
                    "value": "[parameters('bastionHostPublicIPAddressAvailabilityZones')]"
                  },
                  "publicIPAddressName": {
                    "value": "[parameters('hub').namingConvention.bastionHostPublicIPAddress]"
                  },
                  "publicIPAddressSkuName": {
                    "value": "[parameters('bastionHostPublicIPAddressSkuName')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "15960358214194129788"
                    }
                  },
                  "parameters": {
                    "bastionHostSubnetResourceId": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "publicIPAddressAllocationMethod": {
                      "type": "string"
                    },
                    "publicIPAddressAvailabilityZones": {
                      "type": "array"
                    },
                    "publicIPAddressName": {
                      "type": "string"
                    },
                    "publicIPAddressSkuName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('publicIPAddressName')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/publicIPAddresses'), createObject()), parameters('mlzTags'))]",
                      "sku": {
                        "name": "[parameters('publicIPAddressSkuName')]"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "[parameters('publicIPAddressAllocationMethod')]"
                      },
                      "zones": "[parameters('publicIPAddressAvailabilityZones')]"
                    },
                    {
                      "type": "Microsoft.Network/bastionHosts",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/bastionHosts'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('bastionHostSubnetResourceId')]"
                              },
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "condition": "[parameters('deployLinuxVirtualMachine')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "remoteAccess-linuxVirtualMachine",
              "subscriptionId": "[parameters('hub').subscriptionId]",
              "resourceGroup": "[parameters('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPasswordOrKey": {
                    "value": "[parameters('linuxVmAdminPasswordOrKey')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('linuxVmAdminUsername')]"
                  },
                  "authenticationType": {
                    "value": "[parameters('linuxVmAuthenticationType')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "diskName": {
                    "value": "[format('{0}{1}lra', parameters('hub').namingConvention.virtualMachineDisk, parameters('delimiter'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "name": {
                    "value": "[format('{0}lra', parameters('hub').namingConvention.virtualMachine)]"
                  },
                  "networkInterfaceName": {
                    "value": "[format('{0}{1}lra', parameters('hub').namingConvention.virtualMachineNetworkInterface, parameters('delimiter'))]"
                  },
                  "networkSecurityGroupResourceId": {
                    "value": "[parameters('hubNetworkSecurityGroupResourceId')]"
                  },
                  "osDiskCreateOption": {
                    "value": "[parameters('linuxVmOsDiskCreateOption')]"
                  },
                  "osDiskType": {
                    "value": "[parameters('linuxVmOsDiskType')]"
                  },
                  "privateIPAddressAllocationMethod": {
                    "value": "[parameters('linuxNetworkInterfacePrivateIPAddressAllocationMethod')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('hubSubnetResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "supportedClouds": {
                    "value": "[parameters('supportedClouds')]"
                  },
                  "vmImagePublisher": {
                    "value": "[parameters('linuxVmImagePublisher')]"
                  },
                  "vmImageOffer": {
                    "value": "[parameters('linuxVmImageOffer')]"
                  },
                  "vmImageSku": {
                    "value": "[parameters('linuxVmImageSku')]"
                  },
                  "vmSize": {
                    "value": "[parameters('linuxVmSize')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "6813650321123303683"
                    }
                  },
                  "parameters": {
                    "adminPasswordOrKey": {
                      "type": "securestring",
                      "minLength": 12
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "authenticationType": {
                      "type": "string",
                      "allowedValues": [
                        "sshPublicKey",
                        "password"
                      ]
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "diskName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string"
                    },
                    "osDiskCreateOption": {
                      "type": "string"
                    },
                    "osDiskType": {
                      "type": "string"
                    },
                    "privateIPAddressAllocationMethod": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "supportedClouds": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "vmImagePublisher": {
                      "type": "string"
                    },
                    "vmImageOffer": {
                      "type": "string"
                    },
                    "vmImageSku": {
                      "type": "string"
                    },
                    "vmSize": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "linuxConfiguration": {
                      "disablePasswordAuthentication": true,
                      "ssh": {
                        "publicKeys": [
                          {
                            "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                            "keyData": "[parameters('adminPasswordOrKey')]"
                          }
                        ]
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[reference(resourceId('Microsoft.Resources/deployments', 'remoteAccess-linuxNetworkInterface'), '2022-09-01').outputs.id.value]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "osProfile": {
                          "computerName": "[parameters('name')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPasswordOrKey')]",
                          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), null(), variables('linuxConfiguration'))]"
                        },
                        "securityProfile": {
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "trustedLaunch",
                          "encryptionAtHost": true
                        },
                        "storageProfile": {
                          "osDisk": {
                            "caching": "ReadWrite",
                            "createOption": "[parameters('osDiskCreateOption')]",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "[parameters('osDiskType')]"
                            },
                            "name": "[parameters('diskName')]",
                            "osType": "Linux"
                          },
                          "imageReference": {
                            "publisher": "[parameters('vmImagePublisher')]",
                            "offer": "[parameters('vmImageOffer')]",
                            "sku": "[parameters('vmImageSku')]",
                            "version": "latest"
                          }
                        },
                        "licenseType": null
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'remoteAccess-linuxNetworkInterface')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.LinuxAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'AzurePolicyforLinux')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "ConfigurationforLinux",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'Microsoft.Azure.NetworkWatcher')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentLinux",
                        "typeHandlerVersion": "1.4",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), 'AzurePolicyforLinux')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('supportedClouds'), environment().name)]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-11-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'AzureMonitorLinuxAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorLinuxAgent",
                        "typeHandlerVersion": "1.21",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "stopOnMultipleConnections": true
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), 'Microsoft.Azure.NetworkWatcher')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(contains(parameters('supportedClouds'), environment().name))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'OMSExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "OmsAgentForLinux",
                        "typeHandlerVersion": "1.19",
                        "settings": {
                          "workspaceId": "[reference(parameters('logAnalyticsWorkspaceId'), '2015-11-01-preview').customerId]",
                          "stopOnMultipleConnections": true
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(parameters('logAnalyticsWorkspaceId'), '2015-11-01-preview').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), 'Microsoft.Azure.NetworkWatcher')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(contains(parameters('supportedClouds'), environment().name))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'DependencyAgentLinux')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentLinux",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), 'OMSExtension')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "remoteAccess-linuxNetworkInterface",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('networkInterfaceName')]"
                          },
                          "networkSecurityGroupResourceId": {
                            "value": "[parameters('networkSecurityGroupResourceId')]"
                          },
                          "privateIPAddressAllocationMethod": {
                            "value": "[parameters('privateIPAddressAllocationMethod')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "9471795488854766082"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "name": {
                              "type": "string"
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string"
                            },
                            "privateIPAddressAllocationMethod": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig",
                                    "properties": {
                                      "subnet": {
                                        "id": "[parameters('subnetResourceId')]"
                                      },
                                      "privateIPAllocationMethod": "[parameters('privateIPAddressAllocationMethod')]"
                                    }
                                  }
                                ],
                                "networkSecurityGroup": {
                                  "id": "[parameters('networkSecurityGroupResourceId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "adminUsername": {
                      "type": "string",
                      "value": "[parameters('adminUsername')]"
                    },
                    "authenticationType": {
                      "type": "string",
                      "value": "[parameters('authenticationType')]"
                    },
                    "networkInterfaceResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'remoteAccess-linuxNetworkInterface'), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('deployWindowsVirtualMachine')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "remoteAccess-windowsVirtualMachine",
              "subscriptionId": "[parameters('hub').subscriptionId]",
              "resourceGroup": "[parameters('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('windowsVmAdminPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('windowsVmAdminUsername')]"
                  },
                  "createOption": {
                    "value": "[parameters('windowsVmCreateOption')]"
                  },
                  "diskEncryptionSetResourceId": {
                    "value": "[parameters('diskEncryptionSetResourceId')]"
                  },
                  "diskName": {
                    "value": "[format('{0}{1}wra', parameters('hub').namingConvention.virtualMachineDisk, parameters('delimiter'))]"
                  },
                  "hybridUseBenefit": {
                    "value": "[parameters('hybridUseBenefit')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "name": {
                    "value": "[format('{0}wra', parameters('hub').namingConvention.virtualMachine)]"
                  },
                  "networkInterfaceName": {
                    "value": "[format('{0}{1}wra', parameters('hub').namingConvention.virtualMachineNetworkInterface, parameters('delimiter'))]"
                  },
                  "networkSecurityGroupResourceId": {
                    "value": "[parameters('hubNetworkSecurityGroupResourceId')]"
                  },
                  "offer": {
                    "value": "[parameters('windowsVmImageOffer')]"
                  },
                  "privateIPAddressAllocationMethod": {
                    "value": "[parameters('windowsVmNetworkInterfacePrivateIPAddressAllocationMethod')]"
                  },
                  "publisher": {
                    "value": "[parameters('windowsVmImagePublisher')]"
                  },
                  "size": {
                    "value": "[parameters('windowsVmSize')]"
                  },
                  "sku": {
                    "value": "[parameters('windowsVmImageSku')]"
                  },
                  "storageAccountType": {
                    "value": "[parameters('windowsVmStorageAccountType')]"
                  },
                  "subnetResourceId": {
                    "value": "[parameters('hubSubnetResourceId')]"
                  },
                  "supportedClouds": {
                    "value": "[parameters('supportedClouds')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "version": {
                    "value": "[parameters('windowsVmVersion')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "14788639909173193538"
                    }
                  },
                  "parameters": {
                    "adminPassword": {
                      "type": "securestring",
                      "minLength": 12
                    },
                    "adminUsername": {
                      "type": "string"
                    },
                    "createOption": {
                      "type": "string"
                    },
                    "dataDisks": {
                      "type": "array",
                      "defaultValue": []
                    },
                    "diskEncryptionSetResourceId": {
                      "type": "string"
                    },
                    "diskName": {
                      "type": "string"
                    },
                    "hybridUseBenefit": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "networkInterfaceName": {
                      "type": "string"
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string"
                    },
                    "offer": {
                      "type": "string"
                    },
                    "privateIPAddressAllocationMethod": {
                      "type": "string"
                    },
                    "publisher": {
                      "type": "string"
                    },
                    "size": {
                      "type": "string"
                    },
                    "sku": {
                      "type": "string"
                    },
                    "storageAccountType": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "supportedClouds": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "version": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": false
                          }
                        },
                        "hardwareProfile": {
                          "vmSize": "[parameters('size')]"
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[reference(resourceId('Microsoft.Resources/deployments', 'remoteAccess-windowsNetworkInterface'), '2022-09-01').outputs.id.value]",
                              "properties": {
                                "deleteOption": "Delete"
                              }
                            }
                          ]
                        },
                        "osProfile": {
                          "computerName": "[take(parameters('name'), 15)]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]"
                        },
                        "securityProfile": {
                          "uefiSettings": {
                            "secureBootEnabled": true,
                            "vTpmEnabled": true
                          },
                          "securityType": "trustedLaunch",
                          "encryptionAtHost": true
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "[parameters('publisher')]",
                            "offer": "[parameters('offer')]",
                            "sku": "[parameters('sku')]",
                            "version": "[parameters('version')]"
                          },
                          "osDisk": {
                            "caching": "ReadWrite",
                            "createOption": "[parameters('createOption')]",
                            "deleteOption": "Delete",
                            "managedDisk": {
                              "diskEncryptionSet": {
                                "id": "[parameters('diskEncryptionSetResourceId')]"
                              },
                              "storageAccountType": "[parameters('storageAccountType')]"
                            },
                            "name": "[parameters('diskName')]",
                            "osType": "Windows"
                          },
                          "dataDisks": "[parameters('dataDisks')]"
                        },
                        "licenseType": "[if(parameters('hybridUseBenefit'), 'Windows_Server', null())]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'remoteAccess-windowsNetworkInterface')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2024-03-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'GuestAttestation')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Security.WindowsAttestation",
                        "type": "GuestAttestation",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true,
                        "settings": {
                          "AttestationConfig": {
                            "MaaSettings": {
                              "maaEndpoint": "",
                              "maaTenantName": "GuestAttestation"
                            },
                            "AscSettings": {
                              "ascReportingEndpoint": "",
                              "ascReportingFrequency": ""
                            },
                            "useCustomToken": "false",
                            "disableAlerts": "false"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'AzurePolicyforWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.GuestConfiguration",
                        "type": "ConfigurationforWindows",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'Microsoft.Azure.NetworkWatcher')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.Azure.NetworkWatcher",
                        "type": "NetworkWatcherAgentWindows",
                        "typeHandlerVersion": "1.4"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), 'AzurePolicyforWindows')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[contains(parameters('supportedClouds'), environment().name)]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2023-03-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'AzureMonitorWindowsAgent')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitor",
                        "type": "AzureMonitorWindowsAgent",
                        "typeHandlerVersion": "1.0",
                        "autoUpgradeMinorVersion": true,
                        "enableAutomaticUpgrade": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(contains(parameters('supportedClouds'), environment().name))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'MMAExtension')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                        "type": "MicrosoftMonitoringAgent",
                        "typeHandlerVersion": "1.0",
                        "settings": {
                          "workspaceId": "[reference(parameters('logAnalyticsWorkspaceId'), '2015-11-01-preview').customerId]",
                          "stopOnMultipleConnections": true
                        },
                        "protectedSettings": {
                          "workspaceKey": "[listKeys(parameters('logAnalyticsWorkspaceId'), '2015-11-01-preview').primarySharedKey]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), 'Microsoft.Azure.NetworkWatcher')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(contains(parameters('supportedClouds'), environment().name))]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-04-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'DependencyAgentWindows')]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Compute/virtualMachines'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                        "type": "DependencyAgentWindows",
                        "typeHandlerVersion": "9.5",
                        "autoUpgradeMinorVersion": true
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('name'), 'MMAExtension')]",
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "remoteAccess-windowsNetworkInterface",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "mlzTags": {
                            "value": "[parameters('mlzTags')]"
                          },
                          "name": {
                            "value": "[parameters('networkInterfaceName')]"
                          },
                          "networkSecurityGroupResourceId": {
                            "value": "[parameters('networkSecurityGroupResourceId')]"
                          },
                          "privateIPAddressAllocationMethod": {
                            "value": "[parameters('privateIPAddressAllocationMethod')]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('subnetResourceId')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "9471795488854766082"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "mlzTags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "name": {
                              "type": "string"
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string"
                            },
                            "privateIPAddressAllocationMethod": {
                              "type": "string"
                            },
                            "subnetResourceId": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/networkInterfaces'), createObject()), parameters('mlzTags'))]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig",
                                    "properties": {
                                      "subnet": {
                                        "id": "[parameters('subnetResourceId')]"
                                      },
                                      "privateIPAllocationMethod": "[parameters('privateIPAddressAllocationMethod')]"
                                    }
                                  }
                                ],
                                "networkSecurityGroup": {
                                  "id": "[parameters('networkSecurityGroupResourceId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "id": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "networkInterfaceResourceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'remoteAccess-windowsNetworkInterface'), '2022-09-01').outputs.id.value]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "networkInterfaceResourceIds": {
              "type": "array",
              "value": "[union(if(parameters('deployLinuxVirtualMachine'), createArray(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hub').subscriptionId, parameters('hubResourceGroupName')), 'Microsoft.Resources/deployments', 'remoteAccess-linuxVirtualMachine'), '2022-09-01').outputs.networkInterfaceResourceId.value), createArray()), if(parameters('deployWindowsVirtualMachine'), createArray(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hub').subscriptionId, parameters('hubResourceGroupName')), 'Microsoft.Resources/deployments', 'remoteAccess-windowsVirtualMachine'), '2022-09-01').outputs.networkInterfaceResourceId.value), createArray()))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-log-storage-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "blobsPrivateDnsZoneResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZoneResourceIds.value.blob]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "filesPrivateDnsZoneResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZoneResourceIds.value.file]"
          },
          "keyVaultUri": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logStorageSkuName": {
            "value": "[parameters('logStorageSkuName')]"
          },
          "mlzTags": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.mlzTags.value]"
          },
          "queuesPrivateDnsZoneResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZoneResourceIds.value.queue]"
          },
          "resourceGroupNames": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
          },
          "storageEncryptionKeyName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageKeyName.value]"
          },
          "tablesPrivateDnsZoneResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateDnsZoneResourceIds.value.table]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "tiers": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "592313766740945724"
            }
          },
          "parameters": {
            "blobsPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "filesPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logStorageSkuName": {
              "type": "string"
            },
            "mlzTags": {
              "type": "object"
            },
            "queuesPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "resourceGroupNames": {
              "type": "array"
            },
            "storageEncryptionKeyName": {
              "type": "string"
            },
            "tablesPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "tiers": {
              "type": "array"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "storageAccount",
                "count": "[length(parameters('tiers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-storage-account-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('tiers')[copyIndex()].subscriptionId]",
              "resourceGroup": "[parameters('resourceGroupNames')[copyIndex()]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "blobsPrivateDnsZoneResourceId": {
                    "value": "[parameters('blobsPrivateDnsZoneResourceId')]"
                  },
                  "filesPrivateDnsZoneResourceId": {
                    "value": "[parameters('filesPrivateDnsZoneResourceId')]"
                  },
                  "keyVaultUri": {
                    "value": "[parameters('keyVaultUri')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "mlzTags": {
                    "value": "[parameters('mlzTags')]"
                  },
                  "queuesPrivateDnsZoneResourceId": {
                    "value": "[parameters('queuesPrivateDnsZoneResourceId')]"
                  },
                  "skuName": {
                    "value": "[parameters('logStorageSkuName')]"
                  },
                  "storageEncryptionKeyName": {
                    "value": "[parameters('storageEncryptionKeyName')]"
                  },
                  "subnetResourceId": {
                    "value": "[resourceId(parameters('tiers')[copyIndex()].subscriptionId, parameters('resourceGroupNames')[copyIndex()], 'Microsoft.Network/virtualNetworks/subnets', parameters('tiers')[copyIndex()].namingConvention.virtualNetwork, parameters('tiers')[copyIndex()].namingConvention.subnet)]"
                  },
                  "tablesPrivateDnsZoneResourceId": {
                    "value": "[parameters('tablesPrivateDnsZoneResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "tier": {
                    "value": "[parameters('tiers')[copyIndex()]]"
                  },
                  "userAssignedIdentityResourceId": {
                    "value": "[parameters('userAssignedIdentityResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "1051848627278772577"
                    }
                  },
                  "parameters": {
                    "blobsPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "filesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "keyVaultUri": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "mlzTags": {
                      "type": "object"
                    },
                    "queuesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "skuName": {
                      "type": "string"
                    },
                    "storageEncryptionKeyName": {
                      "type": "string"
                    },
                    "subnetResourceId": {
                      "type": "string"
                    },
                    "tablesPrivateDnsZoneResourceId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "tier": {
                      "type": "object"
                    },
                    "userAssignedIdentityResourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "subResources": [
                      {
                        "id": "[parameters('blobsPrivateDnsZoneResourceId')]",
                        "nic": "[format('{0}', parameters('tier').namingConvention.storageAccountBlobNetworkInterface)]",
                        "pe": "[format('{0}', parameters('tier').namingConvention.storageAccountBlobPrivateEndpoint)]"
                      },
                      {
                        "id": "[parameters('filesPrivateDnsZoneResourceId')]",
                        "nic": "[format('{0}', parameters('tier').namingConvention.storageAccountFileNetworkInterface)]",
                        "pe": "[format('{0}', parameters('tier').namingConvention.storageAccountFilePrivateEndpoint)]"
                      },
                      {
                        "id": "[parameters('queuesPrivateDnsZoneResourceId')]",
                        "nic": "[format('{0}', parameters('tier').namingConvention.storageAccountQueueNetworkInterface)]",
                        "pe": "[format('{0}', parameters('tier').namingConvention.storageAccountQueuePrivateEndpoint)]"
                      },
                      {
                        "id": "[parameters('tablesPrivateDnsZoneResourceId')]",
                        "nic": "[format('{0}', parameters('tier').namingConvention.storageAccountTableNetworkInterface)]",
                        "pe": "[format('{0}', parameters('tier').namingConvention.storageAccountTablePrivateEndpoint)]"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2023-01-01",
                      "name": "[uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id)]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject()), parameters('mlzTags'))]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                        }
                      },
                      "kind": "StorageV2",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowCrossTenantReplication": false,
                        "allowedCopyScope": "PrivateLink",
                        "allowSharedKeyAccess": false,
                        "defaultToOAuthAuthentication": false,
                        "dnsEndpointType": "Standard",
                        "encryption": {
                          "identity": {
                            "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId')]"
                          },
                          "keySource": "Microsoft.KeyVault",
                          "keyvaultproperties": {
                            "keyvaulturi": "[parameters('keyVaultUri')]",
                            "keyname": "[parameters('storageEncryptionKeyName')]"
                          },
                          "requireInfrastructureEncryption": true,
                          "services": {
                            "blob": {
                              "keyType": "Account",
                              "enabled": true
                            },
                            "file": {
                              "keyType": "Account",
                              "enabled": true
                            },
                            "queue": {
                              "keyType": "Account",
                              "enabled": true
                            },
                            "table": {
                              "keyType": "Account",
                              "enabled": true
                            }
                          }
                        },
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "virtualNetworkRules": [],
                          "ipRules": [],
                          "defaultAction": "Deny"
                        },
                        "publicNetworkAccess": "Disabled",
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "copy": {
                        "name": "privateEndpoints",
                        "count": "[length(variables('subResources'))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[variables('subResources')[copyIndex()].pe]",
                      "location": "[parameters('location')]",
                      "tags": "[union(coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject()), parameters('mlzTags'))]",
                      "properties": {
                        "customNetworkInterfaceName": "[variables('subResources')[copyIndex()].nic]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('subResources')[copyIndex()].pe]",
                            "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id))]",
                              "groupIds": [
                                "[split(split(variables('subResources')[copyIndex()].id, '/')[8], '.')[1]]"
                              ]
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneGroups",
                        "count": "[length(variables('subResources'))]"
                      },
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[format('{0}/{1}', variables('subResources')[copyIndex()].pe, uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id))]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateDnsZoneId": "[variables('subResources')[copyIndex()].id]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('subResources')[copyIndex()].pe)]",
                        "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(parameters('tier').namingConvention.storageAccount, resourceGroup().id))]"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(variables('subResources'))]",
                        "input": "[reference(resourceId('Microsoft.Network/privateEndpoints', variables('subResources')[copyIndex()].pe), '2023-04-01').networkInterfaces[0].id]"
                      }
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "networkInterfaceResourceIds": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('tiers'))]",
                "input": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tiers')[copyIndex()].subscriptionId, parameters('resourceGroupNames')[copyIndex()]), 'Microsoft.Resources/deployments', format('deploy-storage-account-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceIds.value]"
              }
            },
            "storageAccountResourceIds": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('tiers'))]",
                "input": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('tiers')[copyIndex()].subscriptionId, parameters('resourceGroupNames')[copyIndex()]), 'Microsoft.Resources/deployments', format('deploy-storage-account-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))), '2022-09-01').outputs.id.value]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-remote-access-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-resource-diag-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "bastionDiagnosticsLogs": {
            "value": "[parameters('bastionDiagnosticsLogs')]"
          },
          "bastionDiagnosticsMetrics": {
            "value": "[parameters('bastionDiagnosticsMetrics')]"
          },
          "delimiter": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.delimiter.value]"
          },
          "deployBastion": {
            "value": "[parameters('deployBastion')]"
          },
          "deployNetworkWatcherTrafficAnalytics": {
            "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "firewallDiagnosticsLogs": {
            "value": "[parameters('firewallDiagnosticsLogs')]"
          },
          "firewallDiagnosticsMetrics": {
            "value": "[parameters('firewallDiagnosticsMetrics')]"
          },
          "keyVaultName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
          },
          "keyVaultDiagnosticLogs": {
            "value": "[parameters('keyVaultDiagnosticsLogs')]"
          },
          "keyVaultDiagnosticMetrics": {
            "value": "[parameters('keyVaultDiagnosticsMetrics')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
          },
          "networkInterfaceDiagnosticsMetrics": {
            "value": "[parameters('networkInterfaceDiagnosticsMetrics')]"
          },
          "networkInterfaceResourceIds": {
            "value": "[union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceIds.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceIds.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-remote-access-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceIds.value, flatten(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-log-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.networkInterfaceResourceIds.value))]"
          },
          "networkWatcherFlowLogsRetentionDays": {
            "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
          },
          "networkWatcherFlowLogsType": {
            "value": "[parameters('networkWatcherFlowLogsType')]"
          },
          "publicIPAddressDiagnosticsLogs": {
            "value": "[parameters('publicIPAddressDiagnosticsLogs')]"
          },
          "publicIPAddressDiagnosticsMetrics": {
            "value": "[parameters('publicIPAddressDiagnosticsMetrics')]"
          },
          "resourceGroupNames": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
          },
          "storageAccountResourceIds": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-log-storage-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountResourceIds.value]"
          },
          "supportedClouds": {
            "value": "[parameters('supportedClouds')]"
          },
          "tiers": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "2472457889047452976"
            }
          },
          "parameters": {
            "bastionDiagnosticsLogs": {
              "type": "array"
            },
            "bastionDiagnosticsMetrics": {
              "type": "array"
            },
            "delimiter": {
              "type": "string"
            },
            "deployBastion": {
              "type": "bool"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "deployNetworkWatcherTrafficAnalytics": {
              "type": "bool"
            },
            "firewallDiagnosticsLogs": {
              "type": "array"
            },
            "firewallDiagnosticsMetrics": {
              "type": "array"
            },
            "keyVaultDiagnosticLogs": {
              "type": "array"
            },
            "keyVaultDiagnosticMetrics": {
              "type": "array"
            },
            "keyVaultName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "networkInterfaceDiagnosticsMetrics": {
              "type": "array"
            },
            "networkInterfaceResourceIds": {
              "type": "array"
            },
            "networkWatcherFlowLogsRetentionDays": {
              "type": "int"
            },
            "networkWatcherFlowLogsType": {
              "type": "string"
            },
            "publicIPAddressDiagnosticsLogs": {
              "type": "array"
            },
            "publicIPAddressDiagnosticsMetrics": {
              "type": "array"
            },
            "resourceGroupNames": {
              "type": "array"
            },
            "storageAccountResourceIds": {
              "type": "array"
            },
            "supportedClouds": {
              "type": "array"
            },
            "tiers": {
              "type": "array"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "networkSecurityGroups_Tiers",
                "count": "[length(parameters('tiers'))]",
                "input": {
                  "diagnosticLogs": "[parameters('tiers')[copyIndex('networkSecurityGroups_Tiers')].nsgDiagLogs]",
                  "diagnosticSettingName": "[parameters('tiers')[copyIndex('networkSecurityGroups_Tiers')].namingConvention.networkSecurityGroupDiagnosticSetting]",
                  "flowLogsName": "[parameters('tiers')[copyIndex('networkSecurityGroups_Tiers')].namingConvention.networkWatcherFlowLogsNetworkSecurityGroup]",
                  "name": "[parameters('tiers')[copyIndex('networkSecurityGroups_Tiers')].namingConvention.networkSecurityGroup]",
                  "namingConvention": "[parameters('tiers')[copyIndex('networkSecurityGroups_Tiers')].namingConvention]",
                  "resourceGroupName": "[parameters('resourceGroupNames')[copyIndex('networkSecurityGroups_Tiers')]]",
                  "storageAccountResourceId": "[parameters('storageAccountResourceIds')[copyIndex('networkSecurityGroups_Tiers')]]",
                  "subscriptionId": "[parameters('tiers')[copyIndex('networkSecurityGroups_Tiers')].subscriptionId]",
                  "tierName": "[parameters('tiers')[copyIndex('networkSecurityGroups_Tiers')].name]"
                }
              }
            ],
            "hub": "[filter(parameters('tiers'), lambda('tier', equals(lambdaVariables('tier').name, 'hub')))[0]]",
            "hubResourceGroupName": "[filter(parameters('resourceGroupNames'), lambda('name', contains(lambdaVariables('name'), 'hub')))[0]]",
            "networkSecurityGroups": "[union(variables('networkSecurityGroups_Tiers'), variables('networkSecurityGroup_Bastion'))]",
            "networkSecurityGroup_Bastion": "[if(parameters('deployBastion'), createArray(createObject('diagnosticLogs', variables('hub').nsgDiagLogs, 'diagnosticSettingName', variables('hub').namingConvention.bastionHostNetworkSecurityGroupDiagnosticSetting, 'flowLogsName', format('{0}{1}bastion', variables('hub').namingConvention.networkWatcherFlowLogsNetworkSecurityGroup, parameters('delimiter')), 'name', variables('hub').namingConvention.bastionHostNetworkSecurityGroup, 'namingConvention', variables('hub').namingConvention, 'resourceGroupName', variables('hubResourceGroupName'), 'storageAccountResourceId', parameters('storageAccountResourceIds')[0], 'subscriptionId', variables('hub').subscriptionId, 'tierName', format('hub{0}bas', parameters('delimiter')))), createArray())]",
            "operations": "[first(filter(parameters('tiers'), lambda('tier', equals(lambdaVariables('tier').name, 'operations'))))]",
            "operationsResourceGroupName": "[filter(parameters('resourceGroupNames'), lambda('name', contains(lambdaVariables('name'), 'operations')))[0]]",
            "publicIPAddresses": "[union(createArray(createObject('name', format('{0}{1}client', variables('hub').namingConvention.azureFirewallPublicIPAddress, parameters('delimiter')), 'diagName', format('{0}{1}client', variables('hub').namingConvention.azureFirewallPublicIPAddressDiagnosticSetting, parameters('delimiter'))), createObject('name', format('{0}{1}management', variables('hub').namingConvention.azureFirewallPublicIPAddress, parameters('delimiter')), 'diagName', format('{0}{1}management', variables('hub').namingConvention.azureFirewallPublicIPAddressDiagnosticSetting, parameters('delimiter')))), if(parameters('deployBastion'), createArray(createObject('name', variables('hub').namingConvention.bastionHostPublicIPAddress, 'diagName', variables('hub').namingConvention.bastionHostPublicIPAddressDiagnosticSetting)), createArray()))]"
          },
          "resources": [
            {
              "copy": {
                "name": "activityLogDiagnosticSettings",
                "count": "[length(parameters('tiers'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-activity-diags-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('tiers')[copyIndex()].subscriptionId]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "11844538401200280556"
                    }
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "microsoft.insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "name": "[format('diag-activity-log-{0}', subscription().subscriptionId)]",
                      "properties": {
                        "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                        "logs": [
                          {
                            "category": "Administrative",
                            "enabled": true
                          },
                          {
                            "category": "Security",
                            "enabled": true
                          },
                          {
                            "category": "ServiceHealth",
                            "enabled": true
                          },
                          {
                            "category": "Alert",
                            "enabled": true
                          },
                          {
                            "category": "Recommendation",
                            "enabled": true
                          },
                          {
                            "category": "Policy",
                            "enabled": true
                          },
                          {
                            "category": "Autoscale",
                            "enabled": true
                          },
                          {
                            "category": "ResourceHealth",
                            "enabled": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-law-diag-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('operations').subscriptionId]",
              "resourceGroup": "[variables('operationsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diagnosticStorageAccountName": {
                    "value": "[split(parameters('storageAccountResourceIds')[1], '/')[8]]"
                  },
                  "logAnalyticsWorkspaceDiagnosticSettingName": {
                    "value": "[variables('operations').namingConvention.logAnalyticsWorkspaceDiagnosticSetting]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]]"
                  },
                  "supportedClouds": {
                    "value": "[parameters('supportedClouds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "9566039617279037906"
                    }
                  },
                  "parameters": {
                    "diagnosticStorageAccountName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceDiagnosticSettingName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string"
                    },
                    "supportedClouds": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[contains(parameters('supportedClouds'), environment().name)]",
                      "type": "microsoft.insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('logAnalyticsWorkspaceName'))]",
                      "name": "[parameters('logAnalyticsWorkspaceDiagnosticSettingName')]",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                        "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('diagnosticStorageAccountName'))]",
                        "logs": [
                          {
                            "category": "Audit",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "category": "AllMetrics",
                            "enabled": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "copy": {
                "name": "networkSecurityGroupDiagnostics",
                "count": "[length(variables('networkSecurityGroups'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-nsg-diags-{0}-{1}', variables('networkSecurityGroups')[copyIndex()].tierName, parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('networkSecurityGroups')[copyIndex()].subscriptionId]",
              "resourceGroup": "[variables('networkSecurityGroups')[copyIndex()].resourceGroupName]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deployNetworkWatcherTrafficAnalytics": {
                    "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                  },
                  "flowLogsName": {
                    "value": "[variables('networkSecurityGroups')[copyIndex()].flowLogsName]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "logs": {
                    "value": "[variables('networkSecurityGroups')[copyIndex()].diagnosticLogs]"
                  },
                  "networkSecurityGroupDiagnosticSettingName": {
                    "value": "[variables('networkSecurityGroups')[copyIndex()].diagnosticSettingName]"
                  },
                  "networkSecurityGroupName": {
                    "value": "[variables('networkSecurityGroups')[copyIndex()].name]"
                  },
                  "networkWatcherFlowLogsRetentionDays": {
                    "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                  },
                  "networkWatcherFlowLogsType": {
                    "value": "[parameters('networkWatcherFlowLogsType')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[variables('networkSecurityGroups')[copyIndex()].storageAccountResourceId]"
                  },
                  "tiername": {
                    "value": "[variables('networkSecurityGroups')[copyIndex()].tierName]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "7553252170820965977"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deployNetworkWatcherTrafficAnalytics": {
                      "type": "bool"
                    },
                    "flowLogsName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "logs": {
                      "type": "array"
                    },
                    "networkSecurityGroupDiagnosticSettingName": {
                      "type": "string"
                    },
                    "networkSecurityGroupName": {
                      "type": "string"
                    },
                    "networkWatcherFlowLogsRetentionDays": {
                      "type": "int"
                    },
                    "networkWatcherFlowLogsType": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    },
                    "tiername": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "microsoft.insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('networkSecurityGroupName'))]",
                      "name": "[parameters('networkSecurityGroupDiagnosticSettingName')]",
                      "properties": {
                        "logs": "[parameters('logs')]",
                        "metrics": [],
                        "storageAccountId": "[parameters('storageAccountResourceId')]",
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      }
                    },
                    {
                      "condition": "[equals(parameters('networkWatcherFlowLogsType'), 'NetworkSecurityGroup')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-{0}-flowLogs-{1}', parameters('tiername'), parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "NetworkWatcherRG",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deployNetworkWatcherTrafficAnalytics": {
                            "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                          },
                          "flowLogsName": {
                            "value": "[parameters('flowLogsName')]"
                          },
                          "flowLogsRetentionDays": {
                            "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "networkWatcherName": {
                            "value": "[format('NetworkWatcher_{0}', parameters('location'))]"
                          },
                          "storageAccountResourceId": {
                            "value": "[parameters('storageAccountResourceId')]"
                          },
                          "targetResourceId": {
                            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "7167447529034829344"
                            }
                          },
                          "parameters": {
                            "deployNetworkWatcherTrafficAnalytics": {
                              "type": "bool"
                            },
                            "flowLogsName": {
                              "type": "string"
                            },
                            "flowLogsRetentionDays": {
                              "type": "int"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "networkWatcherName": {
                              "type": "string"
                            },
                            "storageAccountResourceId": {
                              "type": "string"
                            },
                            "targetResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkWatchers/flowLogs",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('networkWatcherName'), parameters('flowLogsName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "targetResourceId": "[parameters('targetResourceId')]",
                                "enabled": true,
                                "storageId": "[parameters('storageAccountResourceId')]",
                                "flowAnalyticsConfiguration": {
                                  "networkWatcherFlowAnalyticsConfiguration": {
                                    "enabled": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('deployNetworkWatcherTrafficAnalytics'), null())]",
                                    "workspaceResourceId": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('logAnalyticsWorkspaceResourceId'), null())]"
                                  }
                                },
                                "format": {
                                  "type": "JSON",
                                  "version": 2
                                },
                                "retentionPolicy": {
                                  "days": "[parameters('flowLogsRetentionDays')]",
                                  "enabled": true
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              "copy": {
                "name": "virtualNetworkDiagnostics",
                "count": "[length(parameters('tiers'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-vnet-diags-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('tiers')[copyIndex()].subscriptionId]",
              "resourceGroup": "[parameters('resourceGroupNames')[copyIndex()]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "deploymentNameSuffix": {
                    "value": "[parameters('deploymentNameSuffix')]"
                  },
                  "deployNetworkWatcherTrafficAnalytics": {
                    "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                  },
                  "flowLogsName": {
                    "value": "[parameters('tiers')[copyIndex()].namingConvention.networkWatcherFlowLogsVirtualNetwork]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "logs": {
                    "value": "[parameters('tiers')[copyIndex()].vnetDiagLogs]"
                  },
                  "logStorageAccountResourceId": {
                    "value": "[parameters('storageAccountResourceIds')[copyIndex()]]"
                  },
                  "metrics": {
                    "value": "[parameters('tiers')[copyIndex()].vnetDiagMetrics]"
                  },
                  "networkWatcherFlowLogsRetentionDays": {
                    "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                  },
                  "networkWatcherFlowLogsType": {
                    "value": "[parameters('networkWatcherFlowLogsType')]"
                  },
                  "tiername": {
                    "value": "[parameters('tiers')[copyIndex()].name]"
                  },
                  "virtualNetworkDiagnosticSettingName": {
                    "value": "[parameters('tiers')[copyIndex()].namingConvention.virtualNetworkDiagnosticSetting]"
                  },
                  "virtualNetworkName": {
                    "value": "[parameters('tiers')[copyIndex()].namingConvention.virtualNetwork]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "7600876738920372569"
                    }
                  },
                  "parameters": {
                    "deploymentNameSuffix": {
                      "type": "string"
                    },
                    "deployNetworkWatcherTrafficAnalytics": {
                      "type": "bool"
                    },
                    "flowLogsName": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "logs": {
                      "type": "array"
                    },
                    "logStorageAccountResourceId": {
                      "type": "string"
                    },
                    "metrics": {
                      "type": "array"
                    },
                    "networkWatcherFlowLogsRetentionDays": {
                      "type": "int"
                    },
                    "networkWatcherFlowLogsType": {
                      "type": "string"
                    },
                    "supportedClouds": {
                      "type": "array",
                      "defaultValue": [
                        "AzureCloud"
                      ]
                    },
                    "tiername": {
                      "type": "string"
                    },
                    "virtualNetworkDiagnosticSettingName": {
                      "type": "string"
                    },
                    "virtualNetworkName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "microsoft.insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('virtualNetworkName'))]",
                      "name": "[parameters('virtualNetworkDiagnosticSettingName')]",
                      "properties": {
                        "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                        "logs": "[if(contains(parameters('supportedClouds'), environment().name), parameters('logs'), createArray())]",
                        "metrics": "[parameters('metrics')]"
                      }
                    },
                    {
                      "condition": "[equals(parameters('networkWatcherFlowLogsType'), 'VirtualNetwork')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('deploy-{0}-flowLogs-{1}', parameters('tiername'), parameters('deploymentNameSuffix'))]",
                      "resourceGroup": "NetworkWatcherRG",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deployNetworkWatcherTrafficAnalytics": {
                            "value": "[parameters('deployNetworkWatcherTrafficAnalytics')]"
                          },
                          "flowLogsName": {
                            "value": "[parameters('flowLogsName')]"
                          },
                          "flowLogsRetentionDays": {
                            "value": "[parameters('networkWatcherFlowLogsRetentionDays')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "networkWatcherName": {
                            "value": "[format('NetworkWatcher_{0}', parameters('location'))]"
                          },
                          "storageAccountResourceId": {
                            "value": "[parameters('logStorageAccountResourceId')]"
                          },
                          "targetResourceId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "7167447529034829344"
                            }
                          },
                          "parameters": {
                            "deployNetworkWatcherTrafficAnalytics": {
                              "type": "bool"
                            },
                            "flowLogsName": {
                              "type": "string"
                            },
                            "flowLogsRetentionDays": {
                              "type": "int"
                            },
                            "location": {
                              "type": "string"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string"
                            },
                            "networkWatcherName": {
                              "type": "string"
                            },
                            "storageAccountResourceId": {
                              "type": "string"
                            },
                            "targetResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkWatchers/flowLogs",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('networkWatcherName'), parameters('flowLogsName'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "targetResourceId": "[parameters('targetResourceId')]",
                                "enabled": true,
                                "storageId": "[parameters('storageAccountResourceId')]",
                                "flowAnalyticsConfiguration": {
                                  "networkWatcherFlowAnalyticsConfiguration": {
                                    "enabled": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('deployNetworkWatcherTrafficAnalytics'), null())]",
                                    "workspaceResourceId": "[if(parameters('deployNetworkWatcherTrafficAnalytics'), parameters('logAnalyticsWorkspaceResourceId'), null())]"
                                  }
                                },
                                "format": {
                                  "type": "JSON",
                                  "version": 2
                                },
                                "retentionPolicy": {
                                  "days": "[parameters('flowLogsRetentionDays')]",
                                  "enabled": true
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              "copy": {
                "name": "publicIpAddressDiagnostics",
                "count": "[length(variables('publicIPAddresses'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-pip-diags-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('hub').subscriptionId]",
              "resourceGroup": "[variables('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hubStorageAccountResourceId": {
                    "value": "[parameters('storageAccountResourceIds')[0]]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "publicIPAddressDiagnosticSettingName": {
                    "value": "[variables('publicIPAddresses')[copyIndex()].diagName]"
                  },
                  "publicIPAddressDiagnosticsLogs": {
                    "value": "[parameters('publicIPAddressDiagnosticsLogs')]"
                  },
                  "publicIPAddressDiagnosticsMetrics": {
                    "value": "[parameters('publicIPAddressDiagnosticsMetrics')]"
                  },
                  "publicIPAddressName": {
                    "value": "[variables('publicIPAddresses')[copyIndex()].name]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "17158414203220282022"
                    }
                  },
                  "parameters": {
                    "hubStorageAccountResourceId": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "publicIPAddressDiagnosticSettingName": {
                      "type": "string"
                    },
                    "publicIPAddressDiagnosticsLogs": {
                      "type": "array"
                    },
                    "publicIPAddressDiagnosticsMetrics": {
                      "type": "array"
                    },
                    "publicIPAddressName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "microsoft.insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('publicIPAddressName'))]",
                      "name": "[parameters('publicIPAddressDiagnosticSettingName')]",
                      "properties": {
                        "storageAccountId": "[parameters('hubStorageAccountResourceId')]",
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]",
                        "logs": "[parameters('publicIPAddressDiagnosticsLogs')]",
                        "metrics": "[parameters('publicIPAddressDiagnosticsMetrics')]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-afw-diags-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('hub').subscriptionId]",
              "resourceGroup": "[variables('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "firewallDiagnosticSettingsName": {
                    "value": "[variables('hub').namingConvention.azureFirewallDiagnosticSetting]"
                  },
                  "firewallName": {
                    "value": "[variables('hub').namingConvention.azureFirewall]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "logs": {
                    "value": "[parameters('firewallDiagnosticsLogs')]"
                  },
                  "logStorageAccountResourceId": {
                    "value": "[parameters('storageAccountResourceIds')[0]]"
                  },
                  "metrics": {
                    "value": "[parameters('firewallDiagnosticsMetrics')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "17466386149815110954"
                    }
                  },
                  "parameters": {
                    "firewallDiagnosticSettingsName": {
                      "type": "string"
                    },
                    "firewallName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "logs": {
                      "type": "array"
                    },
                    "logStorageAccountResourceId": {
                      "type": "string"
                    },
                    "metrics": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "type": "microsoft.insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('firewallName'))]",
                      "name": "[parameters('firewallDiagnosticSettingsName')]",
                      "properties": {
                        "logs": "[parameters('logs')]",
                        "metrics": "[parameters('metrics')]",
                        "storageAccountId": "[parameters('logStorageAccountResourceId')]",
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      }
                    }
                  ],
                  "outputs": {
                    "privateIPAddress": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('firewallName')), '2021-02-01').ipConfigurations[0].properties.privateIPAddress]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-kv-diags-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('hub').subscriptionId]",
              "resourceGroup": "[variables('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultDiagnosticSettingName": {
                    "value": "[variables('hub').namingConvention.keyVaultDiagnosticSetting]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('keyVaultName')]"
                  },
                  "keyVaultStorageAccountId": {
                    "value": "[parameters('storageAccountResourceIds')[0]]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "logs": {
                    "value": "[parameters('keyVaultDiagnosticLogs')]"
                  },
                  "metrics": {
                    "value": "[parameters('keyVaultDiagnosticMetrics')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "16014737458307577601"
                    }
                  },
                  "parameters": {
                    "keyVaultDiagnosticSettingName": {
                      "type": "string"
                    },
                    "keyVaultName": {
                      "type": "string"
                    },
                    "keyVaultStorageAccountId": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "logs": {
                      "type": "array"
                    },
                    "metrics": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "type": "microsoft.insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
                      "name": "[parameters('keyVaultDiagnosticSettingName')]",
                      "properties": {
                        "logs": "[parameters('logs')]",
                        "metrics": "[parameters('metrics')]",
                        "storageAccountId": "[parameters('keyVaultStorageAccountId')]",
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "condition": "[parameters('deployBastion')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-bastion-diags-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('hub').subscriptionId]",
              "resourceGroup": "[variables('hubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diagnosticSettingName": {
                    "value": "[variables('hub').namingConvention.bastionHostDiagnosticSetting]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "logs": {
                    "value": "[parameters('bastionDiagnosticsLogs')]"
                  },
                  "metrics": {
                    "value": "[parameters('bastionDiagnosticsMetrics')]"
                  },
                  "name": {
                    "value": "[variables('hub').namingConvention.bastionHost]"
                  },
                  "storageAccountResourceId": {
                    "value": "[parameters('storageAccountResourceIds')[0]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "2780081320071382006"
                    }
                  },
                  "parameters": {
                    "diagnosticSettingName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "logs": {
                      "type": "array"
                    },
                    "metrics": {
                      "type": "array"
                    },
                    "name": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "microsoft.insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingName')]",
                      "properties": {
                        "logs": "[parameters('logs')]",
                        "metrics": "[parameters('metrics')]",
                        "storageAccountId": "[parameters('storageAccountResourceId')]",
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      }
                    }
                  ]
                }
              }
            },
            {
              "copy": {
                "name": "networkInterfaceDiagnostics",
                "count": "[length(parameters('networkInterfaceResourceIds'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-nic-diags-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[split(parameters('networkInterfaceResourceIds')[copyIndex()], '/')[2]]",
              "resourceGroup": "[split(parameters('networkInterfaceResourceIds')[copyIndex()], '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "logs": {
                    "value": []
                  },
                  "metrics": {
                    "value": "[parameters('networkInterfaceDiagnosticsMetrics')]"
                  },
                  "networkInterfaceResourceId": {
                    "value": "[parameters('networkInterfaceResourceIds')[copyIndex()]]"
                  },
                  "storageAccountResourceIds": {
                    "value": "[parameters('storageAccountResourceIds')]"
                  },
                  "tiers": {
                    "value": "[parameters('tiers')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "11731517069842306"
                    }
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "logs": {
                      "type": "array"
                    },
                    "metrics": {
                      "type": "array"
                    },
                    "networkInterfaceResourceId": {
                      "type": "string"
                    },
                    "storageAccountResourceIds": {
                      "type": "array"
                    },
                    "tiers": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "networkInterfaceDiagnosticSettingName": "[parameters('tiers')[variables('tierIndex')].namingConvention.virtualMachineNetworkInterfaceDiagnosticSetting]",
                    "storageAccountResourceId": "[parameters('storageAccountResourceIds')[variables('tierIndex')]]",
                    "tierIndex": "[if(contains(parameters('networkInterfaceResourceId'), '-ops-'), 1, if(contains(parameters('networkInterfaceResourceId'), '-svcs-'), 2, if(contains(parameters('networkInterfaceResourceId'), '-id-'), 3, 0)))]"
                  },
                  "resources": [
                    {
                      "type": "microsoft.insights/diagnosticSettings",
                      "apiVersion": "2017-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', split(parameters('networkInterfaceResourceId'), '/')[8])]",
                      "name": "[variables('networkInterfaceDiagnosticSettingName')]",
                      "properties": {
                        "logs": "[parameters('logs')]",
                        "metrics": "[parameters('metrics')]",
                        "storageAccountId": "[variables('storageAccountResourceId')]",
                        "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-remote-access-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-log-storage-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployPolicy')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-policies-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
          },
          "policy": {
            "value": "[parameters('policy')]"
          },
          "resourceGroupNames": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value]"
          },
          "tiers": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
          },
          "windowsAdministratorsGroupMembership": {
            "value": "[parameters('windowsVmAdminUsername')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "17081226624547073765"
            }
          },
          "parameters": {
            "deploymentNameSuffix": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "policy": {
              "type": "string"
            },
            "resourceGroupNames": {
              "type": "array"
            },
            "tiers": {
              "type": "array"
            },
            "windowsAdministratorsGroupMembership": {
              "type": "string"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "policyAssignment",
                "count": "[length(parameters('tiers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('assign-policy-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('tiers')[copyIndex()].subscriptionId]",
              "resourceGroup": "[parameters('resourceGroupNames')[copyIndex()]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "builtInAssignment": {
                    "value": "[parameters('policy')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "deployRemediation": {
                    "value": false
                  },
                  "windowsAdministratorsGroupMembership": {
                    "value": "[parameters('windowsAdministratorsGroupMembership')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "6523690578184870055"
                    }
                  },
                  "parameters": {
                    "builtInAssignment": {
                      "type": "string"
                    },
                    "deployRemediation": {
                      "type": "bool"
                    },
                    "location": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "windowsAdministratorsGroupMembership": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n  \"listOfMembersToExcludeFromWindowsVMAdministratorsGroup\": {\n    \"value\": \"admin\"\n  },\n  \"IncludeArcMachines\": {\n    \"value\": \"true\"\n  },\n  \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": {\n    \"value\": \"1.2\"\n  },\n  \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": {\n    \"value\": \"Compliant\"\n  },\n  \"requiredRetentionDays\": {\n    \"value\": \"365\"\n  },\n  \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": {\n    \"value\": \"NetworkWatcherRG\"\n  }\n}",
                    "$fxv#1": "{\n  \"IncludeArcMachines\": {\n    \"value\": \"true\"\n  },\n  \"MinimumTLSVersion-5752e6d6-1206-46d8-8ab1-ecc2f71a8112\": {\n    \"value\": \"1.2\"\n  },\n  \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": {\n    \"value\": \"Compliant\"\n  },\n  \"requiredRetentionDays\": {\n    \"value\": \"365\"\n  },\n  \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": {\n    \"value\": \"NetworkWatcherRG\"\n  }\n}",
                    "$fxv#2": "{\n  \"IncludeArcMachines\": {\n    \"value\": \"false\"\n  },\n  \"NotAvailableMachineState-bed48b13-6647-468e-aa2f-1af1d3f4dd40\": {\n    \"value\": \"Compliant\"\n  },\n  \"MinimumTLSVersionForWindowsServers\": {\n    \"value\": \"1.2\"\n  },\n  \"requiredRetentionDays\": {\n    \"value\": \"365\"\n  },\n  \"effect-febd0533-8e55-448f-b837-bd0e06f16469\": {\n    \"value\": \"audit\"\n  },\n  \"allowedContainerImagesRegex-febd0533-8e55-448f-b837-bd0e06f16469\": {\n    \"value\": \"^(.+){0}$\"\n  },\n  \"effect-95edb821-ddaf-4404-9732-666045e056b4\": {\n    \"value\": \"audit\"\n  },\n  \"effect-440b515e-a580-421e-abeb-b159a61ddcbc\": {\n    \"value\": \"audit\"\n  },\n  \"effect-233a2a17-77ca-4fb1-9b6b-69223d272a44\": {\n    \"value\": \"audit\"\n  },\n  \"effect-e345eecc-fa47-480f-9e88-67dcc122b164\": {\n    \"value\": \"audit\"\n  },\n  \"cpuLimit-e345eecc-fa47-480f-9e88-67dcc122b164\": {\n    \"value\": \"0\"\n  },\n  \"memoryLimit-e345eecc-fa47-480f-9e88-67dcc122b164\": {\n    \"value\": \"0\"\n  },\n  \"effect-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\n    \"value\": \"audit\"\n  },\n  \"runAsUserRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\n    \"value\": \"MustRunAsNonRoot\"\n  },\n  \"runAsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\n    \"value\": \"RunAsAny\"\n  },\n  \"supplementalGroupsRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\n    \"value\": \"RunAsAny\"\n  },\n  \"fsGroupRule-f06ddb64-5fa3-4b77-b166-acb36f7f6042\": {\n    \"value\": \"RunAsAny\"\n  },\n  \"effect-1c6e92c9-99f0-4e55-9cf2-0c234dc48f99\": {\n    \"value\": \"audit\"\n  },\n  \"effect-47a1ee2f-2a2a-4576-bf2a-e0e36709c2b8\": {\n    \"value\": \"audit\"\n  },\n  \"effect-df49d893-a74c-421d-bc95-c663042e5b80\": {\n    \"value\": \"audit\"\n  },\n  \"effect-1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d\": {\n    \"value\": \"audit\"\n  },\n  \"effect-c26596ff-4d70-4e6a-9a30-c2506bd2f80c\": {\n    \"value\": \"audit\"\n  },\n  \"effect-511f5417-5d12-434d-ab2e-816901e72a5e\": {\n    \"value\": \"audit\"\n  },\n  \"effect-82985f06-dc18-4a48-bc1c-b9f4f0098cfe\": {\n    \"value\": \"audit\"\n  },\n  \"effect-098fc59e-46c7-4d99-9b16-64990e543d75\": {\n    \"value\": \"audit\"\n  },\n  \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\": {\n    \"value\": \"enabled\"\n  },\n  \"aadAuthenticationInServiceFabricMonitoringEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-71ef260a-8f18-47b7-abcb-62d0673d94dc\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-862e97cf-49fc-4a5c-9de4-40d4e2e7c8eb\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-d9da03a1-f3c3-412a-9709-947156872263\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-b4ac1030-89c5-4697-8e00-28b5ba6a8811\": {\n    \"value\": \"audit\"\n  },\n  \"effect-ea0dfaed-95fb-448c-934e-d6e713ce393d\": {\n    \"value\": \"audit\"\n  },\n  \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-41425d9f-d1a5-499a-9932-f8ed8453932c\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-fc4d8e41-e223-45ea-9bf5-eada37891d87\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-86efb160-8de7-451d-bc08-5d475b0aadae\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-4ec52d6d-beb7-40c4-9a9e-fe753254690e\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-64d314f6-6062-4780-a861-c23e8951bee5\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-1fd32ebd-e4c3-4e13-a54a-d7422d4d95f6\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-fa298e57-9444-42ba-bf04-86e8470e32c7\": {\n    \"value\": \"audit\"\n  },\n  \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-1f905d99-2ab7-462c-a6b0-f709acca6c8f\": {\n    \"value\": \"audit\"\n  },\n  \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-ba769a63-b8cc-4b2d-abf6-ac33c7204be8\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-0aa61e00-0a01-4a3c-9945-e93cffedf0e6\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-47031206-ce96-41f8-861b-6a915f3de284\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\": {\n    \"value\": \"audit\"\n  },\n  \"effect-51522a96-0869-4791-82f3-981000c2c67f\": {\n    \"value\": \"audit\"\n  },\n  \"effect-b5ec538c-daa0-4006-8596-35468b9148e8\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-56a5ee18-2ae6-4810-86f7-18e39ce5629b\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-2e94d99a-8a36-4563-bc77-810d8893b671\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-1fafeaf6-7927-4059-a50a-8eb2a7a6f2b5\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-99e9ccd8-3db9-4592-b0d1-14b1715a4d8a\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-1f68a601-6e6d-4e42-babf-3f643a047ea2\": {\n    \"value\": \"audit\"\n  },\n  \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-ca91455f-eace-4f96-be59-e6e2c35b4816\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-702dd420-7fcc-42c5-afe8-4026edd20fe0\": {\n    \"value\": \"Audit\"\n  },\n  \"diagnosticsLogsInRedisCacheMonitoringEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"secureTransferToStorageAccountMonitoringEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-7d092e0a-7acd-40d2-a975-dca21cae48c4\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-2a1a9cdf-e04d-429a-8416-3bfb72a1b26f\": {\n    \"value\": \"Audit\"\n  },\n  \"disableUnrestrictedNetworkToStorageAccountMonitoringEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-55615ac9-af46-4a59-874e-391cc3dfb490\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-1b8ca024-1d5c-4dec-8995-b1a932b41780\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-53503636-bcc9-4748-9663-5348217f160f\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-40cec1dd-a100-4920-b15b-3024fe8901ab\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-a049bf77-880b-470f-ba6d-9f21c530cf83\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-ee980b6d-0eca-4501-8d54-f6290fd512c3\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-1d84d5fb-01f6-4d12-ba4f-4a26081d403d\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-37e0d2fe-28a5-43d6-a273-67d37d1f5606\": {\n    \"value\": \"Audit\"\n  },\n  \"identityDesignateMoreThanOneOwnerMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"diskEncryptionMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"emailNotificationToSubscriptionOwnerHighSeverityAlertsEnabledEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"functionAppDisableRemoteDebuggingMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"sqlDbEncryptionMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"vulnerabilityAssessmentOnManagedInstanceMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"ensurePHPVersionLatestForAPIAppEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"aadAuthenticationInSqlServerMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"vmssEndpointProtectionMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"vmssOsVulnerabilitiesMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"adaptiveApplicationControlsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForPostgreSQLEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"ensureJavaVersionLatestForWebAppEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"identityDesignateLessThanOwnersMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"securityContactEmailAddressForSubscriptionEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"webAppRestrictCORSAccessMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"identityRemoveExternalAccountWithWritePermissionsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"identityRemoveExternalAccountWithReadPermissionsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"identityRemoveDeprecatedAccountMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"functionAppEnforceHttpsMonitoringEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"ensurePythonVersionLatestForWebAppEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"ensurePythonVersionLatestForFunctionAppEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"ensurePHPVersionLatestForWebAppEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"ensurePythonVersionLatestForAPIAppEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"geoRedundantBackupShouldBeEnabledForAzureDatabaseForMySQLEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"systemUpdatesMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"ensureJavaVersionLatestForAPIAppEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"ensureHTTPVersionLatestForWebAppEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"apiAppRequireLatestTlsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"identityEnableMFAForWritePermissionsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"ensureHTTPVersionLatestForAPIAppEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"ensureJavaVersionLatestForFunctionAppEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"nextGenerationFirewallMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"useRbacRulesMonitoringEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"webAppEnforceHttpsMonitoringEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"sqlServerAuditingMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"vnetEnableDDoSProtectionMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"identityEnableMFAForOwnerPermissionsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"sqlServerAdvancedDataSecurityMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"sqlManagedInstanceAdvancedDataSecurityMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"endpointProtectionMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"jitNetworkAccessMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"apiAppEnforceHttpsMonitoringEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"geoRedundantStorageShouldBeEnabledForStorageAccountsEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"vmssSystemUpdatesMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"webAppDisableRemoteDebuggingMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"longtermGeoRedundantBackupEnabledAzureSQLDatabasesEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"systemConfigurationsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"ensureHTTPVersionLatestForFunctionAppEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"identityEnableMFAForReadPermissionsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"containerBenchmarkMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"apiAppDisableRemoteDebuggingMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"identityRemoveDeprecatedAccountWithOwnerPermissionsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"vulnerabilityAssessmentOnServerMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"webAppRequireLatestTlsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"identityRemoveExternalAccountWithOwnerPermissionsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"functionAppRequireLatestTlsMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"kubernetesServiceVersionUpToDateMonitoringEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"sqlDbVulnerabilityAssesmentMonitoringEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"membersToExcludeInLocalAdministratorsGroup\": {\n    \"value\": \"admin\"\n  },\n  \"PHPLatestVersionForAppServices\": {\n    \"value\": \"7.4\"\n  },\n  \"JavaLatestVersionForAppServices\": {\n    \"value\": \"11\"\n  },\n  \"WindowsPythonLatestVersionForAppServices\": {\n    \"value\": \"3.6\"\n  },\n  \"LinuxPythonLatestVersionForAppServices\": {\n    \"value\": \"3.9\"\n  },\n  \"ensureDotNetFrameworkLatestForFunctionAppEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"sqlManagedInstanceAdvancedDataSecurityEmailsMonitoringEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"vulnerabilityAssessmentMonitoringEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"ensureDotNetFrameworkLatestForWebAppEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"sqlServerAdvancedDataSecurityEmailsMonitoringEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"microsoftIaaSAntimalwareExtensionShouldBeDeployedOnWindowsServersEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"securityCenterStandardPricingTierShouldBeSelectedEffect\": {\n    \"value\": \"Audit\"\n  },\n  \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachinesEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"ensurePHPVersionLatestForFunctionAppEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"sqlManagedInstanceAdvancedDataSecurityEmailAdminsMonitoringEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"securityContactPhoneNumberShouldBeProvidedForSubscriptionEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"threatDetectionTypesOnManagedInstanceMonitoringEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"ensureDotNetFrameworkLatestForAPIAppEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"sqlServerAdvancedDataSecurityEmailAdminsMonitoringEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"threatDetectionTypesOnServerMonitoringEffect\": {\n    \"value\": \"Disabled\"\n  },\n  \"theLogAnalyticsAgentShouldBeInstalledOnVirtualMachineScaleSetsEffect\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"NetworkWatcherResourceGroupName\": {\n    \"value\": \"NetworkWatcherRG\"\n  }\n}",
                    "$fxv#3": "{\n  \"effect-09024ccc-0c5f-475e-9457-b7c0d9ed487b\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-0961003e-5a0a-4549-abde-af6a37f2724d\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-0b15565f-aa9e-48ba-8619-45960f2c314d\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-0e60b895-3786-45da-8377-9c6b4b6ac5f9\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-17k78e20-9358-41c9-923c-fb736d382a12\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-1bc1795e-d44a-4d48-9b3b-6fff0fd5f9ba\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"PHPLatestVersion\": {\n    \"value\": \"7.3\"\n  },\n  \"effect-22bee202-a82f-4305-9a2a-6d7f44d4dedb\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-26a828e1-e88f-464e-bbb3-c134a282b9de\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-34c877ad-507e-4c82-993e-3452a6e0ad3c\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-3c735d8a-a4ba-4a3a-b7cf-db7754cf57f4\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-404c3081-a854-4457-ae30-26a93ef643f9\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-47a6b606-51aa-4496-8bb7-64b11cf66adc\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-496223c3-ad65-4ecd-878a-bae78737e9ed\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"JavaLatestVersion\": {\n    \"value\": \"11\"\n  },\n  \"effect-4f11b553-d42e-4e3a-89be-32ca364cad4c\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-4f4f78b8-e367-4b10-a341-d9a4ad5cf1c7\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-5c607a2e-c700-4744-8254-d77e7c9eb5e4\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-5f76cf89-fbf2-47fd-a3f4-b891fa780b60\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-6b1cbf55-e8b6-442f-ba4c-7246b6381474\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-6d555dd1-86f2-4f1c-8ed7-5abae7c6cbab\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-7008174a-fd10-4ef0-817e-fc820a951d73\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"LinuxPythonLatestVersion\": {\n    \"value\": \"3.8\"\n  },\n  \"effect-7238174a-fd10-4ef0-817e-fc820a951d73\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-7261b898-8a84-4db8-9e04-18527132abb3\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-74c3584d-afae-46f7-a20a-6f8adba71a16\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-86b3d65f-7626-441e-b690-81a8b71cff60\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-88999f4c-376a-45c8-bcb3-4058f713cf39\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-8c122334-9d20-4eb8-89ea-ac9a705b74ae\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-8cb6aa8b-9e41-4f4e-aa25-089a7ac2581e\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-9297c21d-2ed6-4474-b48f-163f75654ce3\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-991310cd-e9f3-47bc-b7b6-f57b557d07db\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-9b597639-28e4-48eb-b506-56b05d366257\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-9d0b6ea4-93e2-4578-bf2f-6bb17d22b4bc\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-9daedab3-fb2d-461e-b861-71790eead4f6\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-a4af4a39-4135-47fb-b175-47fbdf85311d\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"setting-a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9\": {\n    \"value\": \"enabled\"\n  },\n  \"effect-a70ca396-0a34-413a-88e1-b956c1e683be\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-aa633080-8b72-40c4-a2d7-d00c03e80bed\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-abfb4388-5bf4-4ad7-ba82-2cd2f41ceae9\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-abfb7388-5bf4-4ad7-ba99-2cd2f41cebb9\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-af6cd1bd-1635-48cb-bde7-5b15693900b9\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-b7ddfbdc-1260-477d-91fd-98bd9be789a6\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-c3f317a7-a95c-4547-b7e7-11017ebdf2fe\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-cb510bfd-1cba-4d9f-a230-cb0976f4bb71\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-e1e5fd5d-3e4c-4ce1-8661-7d1873ae6b15\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-e2c1c086-2d84-4019-bff3-c44ccd95113c\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-e3576e28-8b17-4677-84c3-db2990658d64\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-e8cbc669-f12d-49eb-93e7-9273119e9933\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-e9c8d085-d9cc-4b17-9cdc-059f1f01f19e\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-ebb62a0c-3560-49e1-89ed-27e074e9f8ad\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-efbde977-ba53-4479-b8e9-10b957924fbf\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-f0e6e85b-9b9f-4a4b-b67b-f730d42f1b0b\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-f6de0be7-9a8a-4b8a-b349-43cf02d22f7c\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-f8456c1c-aa66-4dfb-861a-25d127b775c9\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-f9d614c5-c173-4d56-95a7-b4437057d193\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-fb893a29-21bb-418c-a157-e99480ec364c\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-feedbf84-6b99-488c-acc2-71c829aa5ffc\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-3b980d31-7904-4bb7-8575-5665739a8052\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-6e2593d9-add6-4083-9c9b-4b7d2188c899\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-b607c5de-e7d9-4eee-9e5c-83f1bcee4fa0\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-12430be1-6cc8-4527-a9a8-e3d38f250096\": {\n    \"value\": \"Audit\"\n  },\n  \"modeRequirement-12430be1-6cc8-4527-a9a8-e3d38f250096\": {\n    \"value\": \"Detection\"\n  },\n  \"effect-425bea59-a659-4cbb-8d31-34499bd030b8\": {\n    \"value\": \"Audit\"\n  },\n  \"modeRequirement-425bea59-a659-4cbb-8d31-34499bd030b8\": {\n    \"value\": \"Detection\"\n  },\n  \"effect-564feb30-bf6a-4854-b4bb-0d2d2d1e6c66\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-055aa869-bc98-4af8-bafc-23f1ab6ffe2c\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-013e242c-8828-4970-87b3-ab247555486d\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-d38fc420-0735-4ef3-ac11-c806f651a570\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-a1181c5f-672a-477a-979a-7d58aa086233\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-308fbb08-4ab8-4e67-9b29-592e93fb94fa\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-4da35fc9-c9e7-4960-aec9-797fe7d9051d\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-523b5cd1-3e23-492f-a539-13118b6d1e3a\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-7fe3b40f-802b-4cdd-8bd4-fd799c948cc2\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-c25d9a16-bc35-4e15-a7e5-9db606bf9ed4\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-b0f33259-77d7-4c9e-aac6-3aabcfae693c\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-037eea7a-bd0a-46c5-9a66-03aea78705d3\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-0725b4dd-7e76-479c-a735-68e7ee23d5ca\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-0820b7b9-23aa-4725-a1ce-ae4558f718e5\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fab\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-358c20a6-3f9e-4f0e-97ff-c6ce485e2aac\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-5744710e-cc2f-4ee8-8809-3b11e89f4bc9\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-ac4a19c2-fa67-49b4-8ae5-0b2e78c49457\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-c9d007d0-c057-4772-b18c-01e546713bcd\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-d0793b48-0edc-4296-a390-4c75d1bdfd71\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-e372f825-a257-4fb8-9175-797a8a8627d6\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-d158790f-bfb0-486c-8631-2dc6b4e8e6af\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-e802a67a-daf5-4436-9ea6-f6d821dd0c5d\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-a451c1ef-c6ca-483d-87ed-f49761e3ffb5\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftSql-servers-firewallRules-delete\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-delete\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-delete\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftNetwork-networkSecurityGroups-securityRules-delete\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-b954148f-4c11-4c38-8221-be76711e194a-MicrosoftClassicNetwork-networkSecurityGroups-securityRules-delete\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-ae89ebca-1c92-4898-ac2c-9f63decb045c\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-d26f7642-7545-4e18-9b75-8c9bbdee3a9a\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-1a4e592a-6a6e-44a5-9814-e36264ca96e7\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-7796937f-307b-4598-941c-67d3a05ebfe7\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-c5447c04-a4d7-4ba8-a263-c9ee321a6858\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-41388f1c-2db0-4c25-95b2-35d7f5ccbfa9\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-b02aacc0-b073-424e-8298-42b22829ee0a\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-057d6cfe-9c4f-4a6d-bc60-14420ea1f1a9\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-0ec47710-77ff-4a3d-9181-6aa50af424d0\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-48af4db5-9b8b-401c-8e74-076be876a430\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-82339799-d096-41ae-8538-b108becf0970\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-1b7aa243-30e4-4c9e-bca8-d0d3022b634a\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-ef2a8f2a-b3d9-49cd-a8a8-9a3aaaf647d9\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-bb91dfba-c30d-4263-9add-9c2384e659a6\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-e71308d3-144b-4262-b144-efdc3cc90517\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-2bdd0062-9d75-436e-89df-487dd8e4b3c7\": {\n    \"value\": \"Disabled\"\n  },\n  \"effect-4733ea7b-a883-42fe-8cac-97454c2a9e4a\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-67121cc7-ff39-4ab8-b7e3-95b84dab487d\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-6fac406b-40ca-413b-bf8e-0bf964659c25\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-81e74cea-30fd-40d5-802f-d72103c2aaaa\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-c349d81b-9985-44ae-a8da-ff98d108ede8\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-f4b53539-8df9-40e4-86c6-6b607703bd4e\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-ec068d99-e9c7-401f-8cef-5bdde4e6ccf1\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-048248b0-55cd-46da-b1ff-39efd52db260\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-0d134df8-db83-46fb-ad72-fe0c9428c8dd\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-2c89a2e5-7285-40fe-afe0-ae8654b92fb2\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-3657f5a0-770e-44a3-b44e-9431ba1e9735\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-617c02be-7f02-4efd-8836-3180d47b6c68\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-7d7be79c-23ba-4033-84dd-45e2a5ccdd67\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-87ba29ef-1ab3-4d82-b763-87fcd4f531f7\": {\n    \"value\": \"audit\"\n  },\n  \"effect-f7d52b2d-e161-4dfa-a82b-55e564167385\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-c43e4a30-77cb-48ab-a4dd-93f175c63b57\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-0b60c0b2-2dc2-4e1c-b5c9-abbed971de53\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-1e66c121-a66a-4b1f-9b83-0fd99bf0fc2d\": {\n    \"value\": \"Audit\"\n  },\n  \"effect-1f314764-cb73-4fc9-b863-8eca98ac36e9\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"effect-123a3936-f020-408a-ba0c-47873faf1534\": {\n    \"value\": \"AuditIfNotExists\"\n  },\n  \"resourceGroupName-b6e2945c-0b7b-40f5-9233-7a5323b5cdc6\": {\n    \"value\": \"NetworkWatcherRG\"\n  }\n}",
                    "modifiedAssignment": "[if(and(equals(toLower(environment().name), toLower('AzureCloud')), equals(toLower(parameters('builtInAssignment')), toLower('IL5'))), 'NISTRev4', parameters('builtInAssignment'))]",
                    "assignmentName": "[format('{0} {1}', variables('modifiedAssignment'), resourceGroup().name)]",
                    "agentVmssAssignmentName": "[format('Deploy VMSS Agents {0}', resourceGroup().name)]",
                    "agentVmAssignmentName": "[format('Deploy VM Agents {0}', resourceGroup().name)]",
                    "contributorRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                    "lawsReaderRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2020-09-01",
                      "name": "[variables('assignmentName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "policyDefinitionId": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', union(json(variables('$fxv#0')), createObject('listOfMembersToIncludeInWindowsVMAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership')), 'logAnalyticsWorkspaceIdforVMReporting', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]))))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', union(json(variables('$fxv#2')), createObject('logAnalyticsWorkspaceIDForVMAgents', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])), 'membersToIncludeInLocalAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership'))))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', union(json(variables('$fxv#3')), createObject('logAnalyticsWorkspaceId-f47b5582-33ec-4c5c-87c0-b010a6b2e917', createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId)), if(equals('AzureCloud', environment().name), createObject('MembersToExclude-69bf4abd-ca1e-4cf6-8b5a-762d42e61d4f', createObject('value', 'admin'), 'MembersToInclude-30f71ea1-ac77-4f26-9fc5-2d926bbd4ba7', createObject('value', parameters('windowsAdministratorsGroupMembership'))), createObject()))))[variables('modifiedAssignment')].id]",
                        "parameters": "[createObject('NISTRev4', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/cf25b9c1-bd23-4eb6-bd2c-f4f3ac644a5f', 'parameters', union(json(variables('$fxv#0')), createObject('listOfMembersToIncludeInWindowsVMAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership')), 'logAnalyticsWorkspaceIdforVMReporting', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]))))), 'NISTRev5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/179d1daa-458f-4e47-8086-2a68d0d6c38f', 'parameters', json(variables('$fxv#1'))), 'IL5', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/f9a961fa-3241-4b20-adc4-bbf8ad9d7197', 'parameters', union(json(variables('$fxv#2')), createObject('logAnalyticsWorkspaceIDForVMAgents', createObject('value', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])), 'membersToIncludeInLocalAdministratorsGroup', createObject('value', parameters('windowsAdministratorsGroupMembership'))))), 'CMMC', createObject('id', '/providers/Microsoft.Authorization/policySetDefinitions/b5629c75-5c77-4422-87b9-2509e680f8de', 'parameters', union(json(variables('$fxv#3')), createObject('logAnalyticsWorkspaceId-f47b5582-33ec-4c5c-87c0-b010a6b2e917', createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8]), '2021-06-01').customerId)), if(equals('AzureCloud', environment().name), createObject('MembersToExclude-69bf4abd-ca1e-4cf6-8b5a-762d42e61d4f', createObject('value', 'admin'), 'MembersToInclude-30f71ea1-ac77-4f26-9fc5-2d926bbd4ba7', createObject('value', parameters('windowsAdministratorsGroupMembership'))), createObject()))))[variables('modifiedAssignment')].parameters]"
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2020-09-01",
                      "name": "[variables('agentVmssAssignmentName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '75714362-cae7-409e-9b99-a8e5075b7fad')]",
                        "parameters": {
                          "logAnalytics_1": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                          }
                        }
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2020-09-01",
                      "name": "[variables('agentVmAssignmentName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '55f3eceb-5573-4f18-9695-226972c6d74a')]",
                        "parameters": {
                          "logAnalytics_1": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                          }
                        }
                      },
                      "identity": {
                        "type": "SystemAssigned"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[guid(variables('contributorRoleDefinitionId'), variables('assignmentName'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                        "principalId": "[if(empty(variables('modifiedAssignment')), '', reference(resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName')), '2020-09-01', 'full').identity.principalId)]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('assignmentName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmssAssignmentName'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                        "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmssAssignmentName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "name": "[guid(variables('contributorRoleDefinitionId'), variables('agentVmAssignmentName'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('contributorRoleDefinitionId')]",
                        "principalId": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('deployRemediation')]",
                      "type": "Microsoft.PolicyInsights/remediations",
                      "apiVersion": "2019-07-01",
                      "name": "VM-Agent-Policy-Remediation",
                      "properties": {
                        "policyAssignmentId": "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]",
                        "resourceDiscoveryMode": "ReEvaluateCompliance"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('Assign-Laws-Role-Policy-{0}', resourceGroup().name)]",
                      "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "targetResourceId": {
                            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[8])]"
                          },
                          "roleDefinitionId": {
                            "value": "[variables('lawsReaderRoleDefinitionId')]"
                          },
                          "principalId": {
                            "value": "[reference(resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName')), '2020-09-01', 'full').identity.principalId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "7891675450851212838"
                            }
                          },
                          "parameters": {
                            "targetResourceId": {
                              "type": "string"
                            },
                            "roleDefinitionId": {
                              "type": "string"
                            },
                            "principalId": {
                              "type": "string"
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "ServicePrincipal",
                              "allowedValues": [
                                "ForeignGroup",
                                "Group",
                                "ServicePrincipal",
                                "User"
                              ]
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "name": "[guid(parameters('targetResourceId'), parameters('roleDefinitionId'), parameters('principalId'))]",
                              "properties": {
                                "principalId": "[parameters('principalId')]",
                                "principalType": "[parameters('principalType')]",
                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                "description": "[parameters('description')]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Authorization/policyAssignments', variables('agentVmAssignmentName'))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-resource-groups-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployDefender')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-defender-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "defenderPlans": {
            "value": "[parameters('deployDefenderPlans')]"
          },
          "defenderSkuTier": {
            "value": "[parameters('defenderSkuTier')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "emailSecurityContact": {
            "value": "[parameters('emailSecurityContact')]"
          },
          "tiers": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "6857146124368734067"
            }
          },
          "parameters": {
            "defenderPlans": {
              "type": "array",
              "defaultValue": [
                "VirtualMachines"
              ]
            },
            "defenderSkuTier": {
              "type": "string"
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "emailSecurityContact": {
              "type": "string"
            },
            "tiers": {
              "type": "array"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "defenderForCloud",
                "count": "[length(parameters('tiers'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('set-defender-{0}-{1}', parameters('tiers')[copyIndex()].name, parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[parameters('tiers')[copyIndex()].subscriptionId]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "defenderPlans": {
                    "value": "[parameters('defenderPlans')]"
                  },
                  "defenderSkuTier": {
                    "value": "[parameters('defenderSkuTier')]"
                  },
                  "emailSecurityContact": {
                    "value": "[parameters('emailSecurityContact')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "12136007385622394002"
                    }
                  },
                  "parameters": {
                    "defenderPlans": {
                      "type": "array",
                      "defaultValue": [
                        "VirtualMachines"
                      ],
                      "metadata": {
                        "description": "Defender Paid protection Plans. Even if a customer selects the free sku, at least 1 paid protection plan must be specified."
                      }
                    },
                    "emailSecurityContact": {
                      "type": "string",
                      "metadata": {
                        "description": "Email address of the contact, in the form of john@doe.com"
                      }
                    },
                    "policySetDescription": {
                      "type": "string",
                      "defaultValue": "The Microsoft Cloud Security Benchmark initiative represents the policies and controls implementing security recommendations defined in Microsoft Cloud Security Benchmark v2, see https://aka.ms/azsecbm. This also serves as the Microsoft Defender for Cloud default policy initiative. You can directly assign this initiative, or manage its policies and compliance results within Microsoft Defender.",
                      "metadata": {
                        "description": "Policy Initiative description field"
                      }
                    },
                    "defenderSkuTier": {
                      "type": "string",
                      "defaultValue": "Free",
                      "metadata": {
                        "description": "[Standard/Free] The SKU for Defender. It defaults to \"Free\"."
                      }
                    }
                  },
                  "variables": {
                    "defenderPaidPlanConfig": {
                      "AzureCloud": {
                        "Api": {
                          "subPlan": "P1"
                        },
                        "appServices": {},
                        "KeyVaults": {
                          "subPlan": "PerKeyVault"
                        },
                        "Arm": {
                          "subPlan": "PerSubscription"
                        },
                        "CloudPosture": {
                          "extensions": [
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            },
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessVmScanning",
                              "isEnabled": "True"
                            },
                            {
                              "name": "EntraPermissionsManagement",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "Containers": {
                          "extensions": [
                            {
                              "name": "ContainerRegistriesVulnerabilityAssessments",
                              "isEnabled": "True"
                            },
                            {
                              "name": "AgentlessDiscoveryForKubernetes",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "CosmosDbs": {},
                        "StorageAccounts": {
                          "subPlan": "DefenderForStorageV2",
                          "extensions": [
                            {
                              "name": "OnUploadMalwareScanning",
                              "isEnabled": "True",
                              "additionalExtensionProperties": {
                                "CapGBPerMonthPerStorageAccount": "5000"
                              }
                            },
                            {
                              "name": "SensitiveDataDiscovery",
                              "isEnabled": "True"
                            }
                          ]
                        },
                        "VirtualMachines": {
                          "subPlan": "P1"
                        },
                        "SqlServerVirtualMachines": {},
                        "SqlServers": {},
                        "OpenSourceRelationalDatabases": {}
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "defenderFreeAllClouds",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[equals(parameters('defenderSkuTier'), 'Free')]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardNoSubplanNoExtensions",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), not(equals(environment().name, 'AzureCloud')))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "defenderStandardSubplanExtensionsAzureCloud",
                        "count": "[length(parameters('defenderPlans'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "condition": "[and(equals(parameters('defenderSkuTier'), 'Standard'), equals(environment().name, 'AzureCloud'))]",
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2023-01-01",
                      "name": "[parameters('defenderPlans')[copyIndex()]]",
                      "properties": {
                        "pricingTier": "[parameters('defenderSkuTier')]",
                        "subPlan": "[coalesce(tryGet(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'subPlan'), null())]",
                        "extensions": "[coalesce(tryGet(variables('defenderPaidPlanConfig')[environment().name][parameters('defenderPlans')[copyIndex()]], 'extensions'), null())]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('emailSecurityContact')))]",
                      "type": "Microsoft.Security/securityContacts",
                      "apiVersion": "2020-01-01-preview",
                      "name": "default",
                      "properties": {
                        "notificationsByRole": {
                          "roles": [
                            "AccountAdmin",
                            "Contributor",
                            "Owner",
                            "ServiceAdmin"
                          ],
                          "state": "On"
                        },
                        "alertNotifications": {
                          "state": "On"
                        },
                        "emails": "[parameters('emailSecurityContact')]"
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2022-06-01",
                      "name": "Microsoft Cloud Security Benchmark",
                      "properties": {
                        "displayName": "Defender Default",
                        "description": "[parameters('policySetDescription')]",
                        "enforcementMode": "DoNotEnforce",
                        "parameters": {},
                        "policyDefinitionId": "[tenantResourceId('Microsoft.Authorization/policySetDefinitions', '1f3afdf9-d0c9-4c3d-847f-89da613e70a8')]"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "azureFirewallResourceId": {
      "type": "string",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.azureFirewallResourceId.value]"
    },
    "diskEncryptionSetResourceId": {
      "type": "string",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-cmk-hub-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.diskEncryptionSetResourceId.value]"
    },
    "hubVirtualNetworkResourceId": {
      "type": "string",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hubVirtualNetworkResourceId.value]"
    },
    "identitySubnetResourceId": {
      "type": "string",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.identitySubnetResourceId.value]"
    },
    "locationProperties": {
      "type": "object",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.locationProperties.value]"
    },
    "logAnalyticsWorkspaceResourceId": {
      "type": "string",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
    },
    "privateLinkScopeResourceId": {
      "type": "string",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-monitoring-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateLinkScopeResourceId.value]"
    },
    "sharedServicesSubnetResourceId": {
      "type": "string",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-networking-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.sharedServicesSubnetResourceId.value]"
    },
    "tiers": {
      "type": "array",
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('get-logic-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.tiers.value]"
    }
  }
}