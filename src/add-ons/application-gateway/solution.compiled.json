{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "10800714441210384865"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Azure region for deployment"
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "A suffix to use for uniquely naming deployment-scoped modules (not part of resource names)."
      }
    },
    "hubVnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "Hub VNet resource ID where AppGateway subnet will reside"
      }
    },
    "appGatewaySubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.129.0/24",
      "metadata": {
        "description": "Address prefix to allocate for the Application Gateway subnet (must be within hub VNet address space and unused). Must be /24-/16 for v2 SKU."
      }
    },
    "appGatewaySubnetName": {
      "type": "string",
      "defaultValue": "AppGateway",
      "metadata": {
        "description": "Subnet name for the Application Gateway."
      }
    },
    "commonDefaults": {
      "type": "object",
      "metadata": {
        "description": "Common default settings object applied to each app unless overridden"
      }
    },
    "apps": {
      "type": "array",
      "metadata": {
        "description": "Array of application definitions (listeners, backend targets, optional overrides)"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to apply to all created resources"
      }
    },
    "existingWafPolicyId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Existing WAF policy resource ID (if provided, skip creating new policy)"
      }
    },
    "createSubnetNsg": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether to create and associate an NSG to the App Gateway subnet."
      }
    },
    "customAppGatewayFirewallRuleCollectionGroups": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional custom firewall rule collection groups for App Gateway egress. If empty, an opinionated default group will be created."
      }
    },
    "delimiter": {
      "type": "string",
      "defaultValue": "-",
      "metadata": {
        "description": "Delimiter used in MLZ naming convention (pass through from core)."
      }
    },
    "identifier": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Identifier / environment / location tokens used for naming; if not provided they will be inferred from hub VNet name when possible."
      }
    },
    "environmentAbbreviation": {
      "type": "string",
      "defaultValue": ""
    },
    "locationAbbreviation": {
      "type": "string",
      "defaultValue": ""
    },
    "networkName": {
      "type": "string",
      "defaultValue": "hub",
      "metadata": {
        "description": "Network name token for naming (e.g. hub). If not provided inferred from hub VNet name segmentation."
      }
    },
    "resourceAbbreviations": {
      "type": "object",
      "metadata": {
        "description": "Resource abbreviations object from core deployment (passed through from MLZ core)."
      }
    }
  },
  "variables": {
    "hubRgName": "[split(parameters('hubVnetResourceId'), '/')[4]]",
    "hubVnetName": "[last(split(parameters('hubVnetResourceId'), '/'))]",
    "inferredTokens": "[split(variables('hubVnetName'), parameters('delimiter'))]",
    "effectiveIdentifier": "[if(and(empty(parameters('identifier')), greater(length(variables('inferredTokens')), 0)), variables('inferredTokens')[0], parameters('identifier'))]",
    "effectiveEnvironment": "[if(and(empty(parameters('environmentAbbreviation')), greater(length(variables('inferredTokens')), 1)), variables('inferredTokens')[1], parameters('environmentAbbreviation'))]",
    "effectiveLocationAbbrev": "[if(and(empty(parameters('locationAbbreviation')), greater(length(variables('inferredTokens')), 2)), variables('inferredTokens')[2], parameters('locationAbbreviation'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "appgwSubnet",
      "resourceGroup": "[variables('hubRgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hubVnetResourceId": {
            "value": "[parameters('hubVnetResourceId')]"
          },
          "subnetName": {
            "value": "[parameters('appGatewaySubnetName')]"
          },
          "addressPrefix": {
            "value": "[parameters('appGatewaySubnetAddressPrefix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "4811124273067396172"
            }
          },
          "parameters": {
            "hubVnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Hub VNet resource ID where subnet will be created"
              }
            },
            "subnetName": {
              "type": "string",
              "defaultValue": "AppGateway",
              "metadata": {
                "description": "Subnet name for Application Gateway"
              }
            },
            "addressPrefix": {
              "type": "string",
              "defaultValue": "10.100.0.0/24",
              "metadata": {
                "description": "Address prefix for the subnet"
              }
            }
          },
          "variables": {
            "vnetName": "[last(split(parameters('hubVnetResourceId'), '/'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', variables('vnetName'), parameters('subnetName'))]",
              "properties": {
                "addressPrefix": "[parameters('addressPrefix')]"
              }
            }
          ],
          "outputs": {
            "subnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), parameters('subnetName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "[format('naming-appgw-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "delimiter": {
            "value": "[parameters('delimiter')]"
          },
          "identifier": {
            "value": "[variables('effectiveIdentifier')]"
          },
          "environmentAbbreviation": {
            "value": "[variables('effectiveEnvironment')]"
          },
          "locationAbbreviation": {
            "value": "[variables('effectiveLocationAbbrev')]"
          },
          "networkName": {
            "value": "[parameters('networkName')]"
          },
          "resourceAbbreviations": {
            "value": "[parameters('resourceAbbreviations')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "6859637770885056581"
            }
          },
          "parameters": {
            "delimiter": {
              "type": "string",
              "allowedValues": [
                "",
                "-"
              ]
            },
            "environmentAbbreviation": {
              "type": "string"
            },
            "identifier": {
              "type": "string"
            },
            "locationAbbreviation": {
              "type": "string"
            },
            "networkName": {
              "type": "string"
            },
            "resourceAbbreviations": {
              "type": "object"
            },
            "stampIndex": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "tokens": {
              "resource": "resource_token",
              "service": "service_token"
            },
            "namingConvention": "[format('{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}', toLower(parameters('identifier')), parameters('delimiter'), parameters('environmentAbbreviation'), parameters('delimiter'), parameters('locationAbbreviation'), parameters('delimiter'), parameters('networkName'), parameters('delimiter'), variables('tokens').resource, if(empty(parameters('stampIndex')), '', format('{0}{1}', parameters('delimiter'), parameters('stampIndex'))))]",
            "namingConvention_Service": "[format('{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}', toLower(parameters('identifier')), parameters('delimiter'), parameters('environmentAbbreviation'), parameters('delimiter'), parameters('locationAbbreviation'), parameters('delimiter'), parameters('networkName'), parameters('delimiter'), variables('tokens').service, parameters('delimiter'), variables('tokens').resource, if(empty(parameters('stampIndex')), '', format('{0}{1}', parameters('delimiter'), parameters('stampIndex'))))]",
            "names": {
              "actionGroup": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').actionGroups)]",
              "applicationGroup": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').applicationGroups)]",
              "applicationInsights": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').applicationInsights)]",
              "appServicePlan": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').appServicePlans)]",
              "automationAccount": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').automationAccounts)]",
              "automationAccountDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').automationAccounts)]",
              "automationAccountNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, parameters('resourceAbbreviations').automationAccounts)]",
              "automationAccountPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, parameters('resourceAbbreviations').automationAccounts)]",
              "availabilitySet": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').availabilitySets)]",
              "azureFirewall": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').azureFirewalls)]",
              "azureFirewallPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').publicIPAddresses), variables('tokens').service, parameters('resourceAbbreviations').azureFirewalls)]",
              "azureFirewallPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', parameters('resourceAbbreviations').publicIPAddresses, parameters('delimiter'), parameters('resourceAbbreviations').azureFirewalls))]",
              "azureFirewallDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').azureFirewalls)]",
              "azureFirewallPolicy": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').firewallPolicies)]",
              "applicationGateway": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').applicationGateways)]",
              "applicationGatewayPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').publicIPAddresses), variables('tokens').service, parameters('resourceAbbreviations').applicationGateways)]",
              "applicationGatewayDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').applicationGateways)]",
              "applicationGatewayWafPolicy": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').applicationGatewayWafPolicies)]",
              "applicationGatewayWafPolicyDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').applicationGatewayWafPolicies)]",
              "applicationGatewayRouteTable": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').routeTables), variables('tokens').service, parameters('resourceAbbreviations').applicationGateways)]",
              "applicationGatewayNetworkSecurityGroup": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkSecurityGroups), variables('tokens').service, parameters('resourceAbbreviations').applicationGateways)]",
              "bastionHost": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').bastionHosts)]",
              "bastionHostDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').bastionHosts)]",
              "bastionHostNetworkSecurityGroup": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkSecurityGroups), variables('tokens').service, parameters('resourceAbbreviations').bastionHosts)]",
              "bastionHostNetworkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', parameters('resourceAbbreviations').networkSecurityGroups, parameters('delimiter'), parameters('resourceAbbreviations').bastionHosts))]",
              "bastionHostPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').publicIPAddresses), variables('tokens').service, parameters('resourceAbbreviations').bastionHosts)]",
              "bastionHostPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', parameters('resourceAbbreviations').publicIPAddresses, parameters('delimiter'), parameters('resourceAbbreviations').bastionHosts))]",
              "computeGallery": "[replace(replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').computeGallieries), parameters('delimiter'), if(empty(parameters('delimiter')), '', '_'))]",
              "dataCollectionEndpoint": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').dataCollectionEndpoints)]",
              "dataCollectionRuleAssociation": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').dataCollectionRuleAssociations)]",
              "dataCollectionRule": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').dataCollectionRules)]",
              "diskAccess": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').diskAccesses)]",
              "diskAccessNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, parameters('resourceAbbreviations').diskAccesses)]",
              "diskAccessPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, parameters('resourceAbbreviations').diskAccesses)]",
              "diskEncryptionSet": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').diskEncryptionSets)]",
              "functionApp": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').functionApps)]",
              "functionAppNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, parameters('resourceAbbreviations').functionApps)]",
              "functionAppPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, parameters('resourceAbbreviations').functionApps)]",
              "hostPool": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').hostPools)]",
              "hostPoolDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').hostPools)]",
              "hostPoolNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, parameters('resourceAbbreviations').hostPools)]",
              "hostPoolPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, parameters('resourceAbbreviations').hostPools)]",
              "keyVault": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').keyVaults)]",
              "keyVaultDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').keyVaults)]",
              "keyVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, parameters('resourceAbbreviations').keyVaults)]",
              "keyVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, parameters('resourceAbbreviations').keyVaults)]",
              "localNetworkGateway": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').localNetworkGateways)]",
              "logAnalyticsWorkspace": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').logAnalyticsWorkspaces)]",
              "logAnalyticsWorkspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').logAnalyticsWorkspaces)]",
              "natGateway": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').natGateways)]",
              "natGatewayPublicIPPrefix": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').publicIPPrefixes), variables('tokens').service, parameters('resourceAbbreviations').natGateways)]",
              "netAppAccount": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').netAppAccounts)]",
              "netAppAccountCapacityPool": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').netAppAccountsCapacityPools), variables('tokens').service, parameters('resourceAbbreviations').netAppAccounts)]",
              "netAppAccountSmbServer": "[replace(replace(replace(replace(variables('namingConvention'), variables('tokens').resource, ''), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), parameters('delimiter'), '')]",
              "networkSecurityGroup": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').networkSecurityGroups)]",
              "networkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').networkSecurityGroups)]",
              "networkWatcherFlowLogsNetworkSecurityGroup": "[replace(variables('namingConvention'), variables('tokens').resource, format('{0}{1}{2}{3}{4}', parameters('resourceAbbreviations').networkWatchers, parameters('delimiter'), parameters('resourceAbbreviations').networkWatchersFlowLogs, parameters('delimiter'), parameters('resourceAbbreviations').networkSecurityGroups))]",
              "networkWatcherFlowLogsVirtualNetwork": "[replace(variables('namingConvention'), variables('tokens').resource, format('{0}{1}{2}{3}{4}', parameters('resourceAbbreviations').networkWatchers, parameters('delimiter'), parameters('resourceAbbreviations').networkWatchersFlowLogs, parameters('delimiter'), parameters('resourceAbbreviations').virtualNetworks))]",
              "privateLinkScope": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').privateLinkScopes)]",
              "privateLinkScopeNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, parameters('resourceAbbreviations').privateLinkScopes)]",
              "privateLinkScopePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, parameters('resourceAbbreviations').privateLinkScopes)]",
              "recoveryServicesVault": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').recoveryServicesVaults)]",
              "recoveryServicesVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, parameters('resourceAbbreviations').recoveryServicesVaults)]",
              "recoveryServicesVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, parameters('resourceAbbreviations').recoveryServicesVaults)]",
              "resourceGroup": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').resourceGroups)]",
              "routeTable": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').routeTables)]",
              "scalingPlan": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').scalingPlans)]",
              "scalingPlanDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').scalingPlans)]",
              "storageAccount": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').storageAccounts)]",
              "storageAccountBlobDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}blob', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "storageAccountBlobNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}blob', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "storageAccountBlobPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}blob', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "storageAccountFileDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}file', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "storageAccountFileNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}file', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "storageAccountFilePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}file', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "storageAccountQueueDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}queue', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "storageAccountQueueNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}queue', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "storageAccountQueuePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}queue', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "storageAccountTableDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}table', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "storageAccountTableNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}table', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "storageAccountTablePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}table', parameters('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
              "subnet": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').subnets)]",
              "userAssignedIdentity": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').userAssignedIdentities)]",
              "virtualMachine": "[replace(replace(replace(replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').virtualMachines), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), parameters('delimiter'), '')]",
              "virtualMachineDisk": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').disks), variables('tokens').service, format('{0}', parameters('resourceAbbreviations').virtualMachines))]",
              "virtualMachineNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, parameters('resourceAbbreviations').virtualMachines)]",
              "virtualMachineNetworkInterfaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', parameters('resourceAbbreviations').networkInterfaces, parameters('delimiter'), parameters('resourceAbbreviations').virtualMachines))]",
              "virtualNetwork": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').virtualNetworks)]",
              "virtualNetworkDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').virtualNetworks)]",
              "virtualNetworkGateway": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').virtualNetworkGateways)]",
              "virtualNetworkGatewayPublicIpAddress": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').publicIPAddresses), variables('tokens').service, parameters('resourceAbbreviations').virtualNetworkGateways)]",
              "workspace": "[replace(variables('namingConvention'), variables('tokens').resource, parameters('resourceAbbreviations').workspaces)]",
              "workspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').diagnosticSettings), variables('tokens').service, parameters('resourceAbbreviations').workspaces)]",
              "workspaceNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').networkInterfaces), variables('tokens').service, parameters('resourceAbbreviations').workspaces)]",
              "workspacePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, parameters('resourceAbbreviations').privateEndpoints), variables('tokens').service, parameters('resourceAbbreviations').workspaces)]"
            }
          },
          "resources": [],
          "outputs": {
            "names": {
              "type": "object",
              "value": "[variables('names')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "resolveFirewallIp",
      "resourceGroup": "[variables('hubRgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "firewallName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix'))), '2025-04-01').outputs.names.value.azureFirewall]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "186684667103979612"
            }
          },
          "parameters": {
            "firewallName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Azure Firewall."
              }
            }
          },
          "resources": [],
          "outputs": {
            "privateIpAddress": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('firewallName')), '2023-11-01').ipConfigurations[0].properties.privateIPAddress]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "appgwRouteTable",
      "resourceGroup": "[variables('hubRgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "routeTableName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix'))), '2025-04-01').outputs.names.value.applicationGatewayRouteTable]"
          },
          "firewallPrivateIp": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'resolveFirewallIp'), '2025-04-01').outputs.privateIpAddress.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "6597828544171021001"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Deployment location"
              }
            },
            "routeTableName": {
              "type": "string",
              "metadata": {
                "description": "Pre-computed route table name (from naming convention module)."
              }
            },
            "firewallPrivateIp": {
              "type": "string",
              "metadata": {
                "description": "Default route next hop IP (Firewall private IP)"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags object"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2024-05-01",
              "name": "[parameters('routeTableName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "disableBgpRoutePropagation": false,
                "routes": [
                  {
                    "name": "default-to-firewall",
                    "properties": {
                      "addressPrefix": "0.0.0.0/0",
                      "nextHopType": "VirtualAppliance",
                      "nextHopIpAddress": "[parameters('firewallPrivateIp')]"
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "routeTableId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/routeTables', parameters('routeTableName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'resolveFirewallIp')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "wafPolicyResolver",
      "resourceGroup": "[variables('hubRgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "existingWafPolicyId": {
            "value": "[parameters('existingWafPolicyId')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "17250880078494160005"
            }
          },
          "parameters": {
            "existingWafPolicyId": {
              "type": "string",
              "metadata": {
                "description": "Existing WAF policy resource ID. If provided, no new policy is created."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region (required only when creating a new policy)."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply when creating a new policy."
              }
            }
          },
          "variables": {
            "resolvedWafPolicyId": "[if(empty(parameters('existingWafPolicyId')), resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', 'appgw-waf-policy'), parameters('existingWafPolicyId'))]"
          },
          "resources": [
            {
              "condition": "[empty(parameters('existingWafPolicyId'))]",
              "type": "Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies",
              "apiVersion": "2023-09-01",
              "name": "appgw-waf-policy",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "policySettings": {
                  "state": "Enabled",
                  "mode": "Prevention"
                },
                "customRules": [],
                "managedRules": {
                  "managedRuleSets": [
                    {
                      "ruleSetType": "OWASP",
                      "ruleSetVersion": "3.2"
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "wafPolicyId": {
              "type": "string",
              "value": "[variables('resolvedWafPolicyId')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "appgwCore",
      "resourceGroup": "[variables('hubRgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "appGatewayName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix'))), '2025-04-01').outputs.names.value.applicationGateway]"
          },
          "publicIpName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix'))), '2025-04-01').outputs.names.value.applicationGatewayPublicIPAddress]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'appgwSubnet'), '2025-04-01').outputs.subnetId.value]"
          },
          "wafPolicyId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'wafPolicyResolver'), '2025-04-01').outputs.wafPolicyId.value]"
          },
          "commonDefaults": {
            "value": "[parameters('commonDefaults')]"
          },
          "apps": {
            "value": "[parameters('apps')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "6083917258367889794"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Deployment location"
              }
            },
            "appGatewayName": {
              "type": "string",
              "metadata": {
                "description": "Application Gateway resource name (from naming-convention module)"
              }
            },
            "publicIpName": {
              "type": "string",
              "metadata": {
                "description": "Public IP name (from naming-convention module)"
              }
            },
            "subnetId": {
              "type": "string",
              "metadata": {
                "description": "Subnet ID for the AppGateway"
              }
            },
            "wafPolicyId": {
              "type": "string",
              "metadata": {
                "description": "WAF policy resource ID"
              }
            },
            "commonDefaults": {
              "type": "object",
              "metadata": {
                "description": "Common defaults object (expects autoscaleMinCapacity?, autoscaleMaxCapacity?, backendPort?, backendProtocol?, healthProbePath?, enableHttp2?, defaultCertificateSecretId?, probeInterval?, probeTimeout?, unhealthyThreshold?)"
              }
            },
            "apps": {
              "type": "array",
              "metadata": {
                "description": "Apps array defining listeners/backends; minimal scaffold only uses first element"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags object"
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "backendAddresses",
                "count": "[length(variables('targets'))]",
                "input": "[if(equals(variables('targets')[copyIndex('backendAddresses')].type, 'ip'), createObject('ipAddress', variables('targets')[copyIndex('backendAddresses')].value), createObject('fqdn', variables('targets')[copyIndex('backendAddresses')].value))]"
              },
              {
                "name": "listenerNames",
                "count": "[length(variables('listeners'))]",
                "input": "[variables('listeners')[copyIndex('listenerNames')].name]"
              },
              {
                "name": "backendPoolNames",
                "count": "[length(variables('backendAddressPools'))]",
                "input": "[variables('backendAddressPools')[copyIndex('backendPoolNames')].name]"
              }
            ],
            "autoscaleMinCapacity": "[coalesce(parameters('commonDefaults').autoscaleMinCapacity, 2)]",
            "autoscaleMaxCapacity": "[coalesce(parameters('commonDefaults').autoscaleMaxCapacity, 4)]",
            "defaultBackendPort": "[coalesce(parameters('commonDefaults').backendPort, 443)]",
            "defaultBackendProtocol": "[coalesce(parameters('commonDefaults').backendProtocol, 'Https')]",
            "defaultHealthProbePath": "[coalesce(parameters('commonDefaults').healthProbePath, '/health')]",
            "enableHttp2": "[coalesce(parameters('commonDefaults').enableHttp2, false())]",
            "defaultCertificateSecretId": "[coalesce(parameters('commonDefaults').defaultCertificateSecretId, '')]",
            "listenerFrontendPort": "[coalesce(parameters('commonDefaults').listenerFrontendPort, 443)]",
            "probeInterval": "[coalesce(parameters('commonDefaults').probeInterval, 30)]",
            "probeTimeout": "[coalesce(parameters('commonDefaults').probeTimeout, 30)]",
            "unhealthyThreshold": "[coalesce(parameters('commonDefaults').unhealthyThreshold, 3)]",
            "firstApp": "[if(greater(length(parameters('apps')), 0), parameters('apps')[0], createObject())]",
            "hasApp": "[greater(length(parameters('apps')), 0)]",
            "sslCerts": "[if(variables('hasApp'), createArray(createObject('name', format('cert-{0}', variables('firstApp').name), 'properties', createObject('keyVaultSecretId', coalesce(variables('firstApp').certificateSecretId, variables('defaultCertificateSecretId'))))), createArray())]",
            "targets": "[if(variables('hasApp'), coalesce(variables('firstApp').backendTargets, createArray()), createArray())]",
            "backendAddressPools": "[if(variables('hasApp'), createArray(createObject('name', format('pool-{0}', variables('firstApp').name), 'properties', createObject('backendAddresses', variables('backendAddresses')))), createArray())]",
            "probes": "[if(variables('hasApp'), createArray(createObject('name', format('probe-{0}', variables('firstApp').name), 'properties', createObject('protocol', coalesce(variables('firstApp').backendProtocol, variables('defaultBackendProtocol')), 'path', coalesce(variables('firstApp').healthProbePath, variables('defaultHealthProbePath')), 'interval', variables('probeInterval'), 'timeout', variables('probeTimeout'), 'unhealthyThreshold', variables('unhealthyThreshold'), 'pickHostNameFromBackendHttpSettings', true(), 'minServers', 0, 'match', createObject('statusCodes', createArray('200-399'))))), createArray())]",
            "backendHttpSettings": "[if(variables('hasApp'), createArray(createObject('name', format('setting-{0}', variables('firstApp').name), 'properties', createObject('port', coalesce(variables('firstApp').backendPort, variables('defaultBackendPort')), 'protocol', coalesce(variables('firstApp').backendProtocol, variables('defaultBackendProtocol')), 'pickHostNameFromBackendAddress', true(), 'cookieBasedAffinity', 'Disabled', 'requestTimeout', 30, 'probe', if(greater(length(variables('probes')), 0), createObject('id', resourceId('Microsoft.Network/applicationGateways/probes', parameters('appGatewayName'), format('probe-{0}', variables('firstApp').name))), null())))), createArray())]",
            "listeners": "[if(variables('hasApp'), createArray(createObject('name', format('listener-{0}', variables('firstApp').name), 'properties', createObject('frontendIPConfiguration', createObject('id', resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('appGatewayName'), 'appgw-frontendip')), 'frontendPort', createObject('id', resourceId('Microsoft.Network/applicationGateways/frontendPorts', parameters('appGatewayName'), 'port-https')), 'hostNames', coalesce(variables('firstApp').hostNames, createArray()), 'protocol', 'Https', 'sslCertificate', if(greater(length(variables('sslCerts')), 0), createObject('id', resourceId('Microsoft.Network/applicationGateways/sslCertificates', parameters('appGatewayName'), format('cert-{0}', variables('firstApp').name))), null())))), createArray())]",
            "requestRoutingRules": "[if(variables('hasApp'), createArray(createObject('name', format('rule-{0}', variables('firstApp').name), 'properties', createObject('httpListener', if(greater(length(variables('listeners')), 0), createObject('id', resourceId('Microsoft.Network/applicationGateways/httpListeners', parameters('appGatewayName'), format('listener-{0}', variables('firstApp').name))), null()), 'backendAddressPool', if(greater(length(variables('backendAddressPools')), 0), createObject('id', resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('appGatewayName'), format('pool-{0}', variables('firstApp').name))), null()), 'backendHttpSettings', if(greater(length(variables('backendHttpSettings')), 0), createObject('id', resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('appGatewayName'), format('setting-{0}', variables('firstApp').name))), null()), 'ruleType', 'Basic'))), createArray())]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2022-09-01",
              "name": "[parameters('publicIpName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "properties": {
                "publicIPAllocationMethod": "Static"
              },
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/applicationGateways",
              "apiVersion": "2022-09-01",
              "name": "[parameters('appGatewayName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "WAF_v2",
                "tier": "WAF_v2",
                "capacity": "[variables('autoscaleMinCapacity')]"
              },
              "properties": {
                "firewallPolicy": {
                  "id": "[parameters('wafPolicyId')]"
                },
                "autoscaleConfiguration": {
                  "minCapacity": "[variables('autoscaleMinCapacity')]",
                  "maxCapacity": "[variables('autoscaleMaxCapacity')]"
                },
                "gatewayIPConfigurations": [
                  {
                    "name": "appgw-gatewayipconfig",
                    "properties": {
                      "subnet": {
                        "id": "[parameters('subnetId')]"
                      }
                    }
                  }
                ],
                "frontendIPConfigurations": [
                  {
                    "name": "appgw-frontendip",
                    "properties": {
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
                      }
                    }
                  }
                ],
                "frontendPorts": [
                  {
                    "name": "port-https",
                    "properties": {
                      "port": "[variables('listenerFrontendPort')]"
                    }
                  }
                ],
                "sslCertificates": "[variables('sslCerts')]",
                "probes": "[variables('probes')]",
                "backendAddressPools": "[variables('backendAddressPools')]",
                "backendHttpSettingsCollection": "[variables('backendHttpSettings')]",
                "httpListeners": "[variables('listeners')]",
                "requestRoutingRules": "[variables('requestRoutingRules')]",
                "enableHttp2": "[variables('enableHttp2')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
              ]
            }
          ],
          "outputs": {
            "appGatewayResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName'))]"
            },
            "publicIpAddress": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2022-09-01').ipAddress]"
            },
            "listenerNames": {
              "type": "array",
              "value": "[variables('listenerNames')]"
            },
            "backendPoolNames": {
              "type": "array",
              "value": "[variables('backendPoolNames')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'appgwSubnet')]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'wafPolicyResolver')]"
      ]
    },
    {
      "condition": "[parameters('createSubnetNsg')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "appgwNsg",
      "resourceGroup": "[variables('hubRgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "nsgName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix'))), '2025-04-01').outputs.names.value.applicationGatewayNetworkSecurityGroup]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "6464438825532117880"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region"
              }
            },
            "nsgName": {
              "type": "string",
              "metadata": {
                "description": "NSG name"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-11-01",
              "name": "[parameters('nsgName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowAzureLoadBalancer",
                    "properties": {
                      "priority": 100,
                      "direction": "Inbound",
                      "access": "Allow",
                      "protocol": "*",
                      "sourceAddressPrefix": "AzureLoadBalancer",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "destinationPortRange": "*"
                    }
                  },
                  {
                    "name": "AllowInternetOutbound",
                    "properties": {
                      "priority": 200,
                      "direction": "Outbound",
                      "access": "Allow",
                      "protocol": "*",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "Internet",
                      "destinationPortRange": "*"
                    }
                  },
                  {
                    "name": "AllowVNetOutbound",
                    "properties": {
                      "priority": 210,
                      "direction": "Outbound",
                      "access": "Allow",
                      "protocol": "*",
                      "sourceAddressPrefix": "*",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "destinationPortRange": "*"
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "nsgId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsgName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "appgwSubnetAssoc",
      "resourceGroup": "[variables('hubRgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hubVnetResourceId": {
            "value": "[parameters('hubVnetResourceId')]"
          },
          "subnetName": {
            "value": "[parameters('appGatewaySubnetName')]"
          },
          "addressPrefix": {
            "value": "[parameters('appGatewaySubnetAddressPrefix')]"
          },
          "routeTableId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'appgwRouteTable'), '2025-04-01').outputs.routeTableId.value]"
          },
          "nsgId": "[if(parameters('createSubnetNsg'), createObject('value', resourceId(subscription().subscriptionId, variables('hubRgName'), 'Microsoft.Network/networkSecurityGroups', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix'))), '2025-04-01').outputs.names.value.applicationGatewayNetworkSecurityGroup)), createObject('value', ''))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "17043683774084531916"
            }
          },
          "parameters": {
            "hubVnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Hub VNet resource ID"
              }
            },
            "subnetName": {
              "type": "string",
              "metadata": {
                "description": "Subnet name"
              }
            },
            "addressPrefix": {
              "type": "string",
              "metadata": {
                "description": "Subnet address prefix (for idempotent redefinition)"
              }
            },
            "routeTableId": {
              "type": "string",
              "metadata": {
                "description": "Route table ID to associate"
              }
            },
            "nsgId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional NSG ID (empty string for none)"
              }
            }
          },
          "variables": {
            "hubVnetName": "[last(split(parameters('hubVnetResourceId'), '/'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', variables('hubVnetName'), parameters('subnetName'))]",
              "properties": {
                "addressPrefix": "[parameters('addressPrefix')]",
                "networkSecurityGroup": "[if(empty(parameters('nsgId')), null(), createObject('id', parameters('nsgId')))]",
                "routeTable": {
                  "id": "[parameters('routeTableId')]"
                }
              }
            }
          ],
          "outputs": {
            "subnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('hubVnetName'), parameters('subnetName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'appgwRouteTable')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'appgwSubnet')]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2025-04-01",
      "name": "appGwFirewallRules",
      "resourceGroup": "[variables('hubRgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "firewallPolicyResourceId": {
            "value": "[resourceId(subscription().subscriptionId, variables('hubRgName'), 'Microsoft.Network/firewallPolicies', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix'))), '2025-04-01').outputs.names.value.azureFirewallPolicy)]"
          },
          "customRuleCollectionGroups": {
            "value": "[parameters('customAppGatewayFirewallRuleCollectionGroups')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.38.33.27573",
              "templateHash": "1757539371728418910"
            }
          },
          "parameters": {
            "firewallPolicyResourceId": {
              "type": "string",
              "metadata": {
                "description": "Firewall Policy resource ID to attach rule collection groups to."
              }
            },
            "customRuleCollectionGroups": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional custom rule collection groups (array of objects with name/properties)."
              }
            },
            "baselinePriority": {
              "type": "int",
              "defaultValue": 200,
              "metadata": {
                "description": "Priority for the baseline rule collection group (lower number = higher precedence)."
              }
            },
            "baselinePlatformCollectionPriority": {
              "type": "int",
              "defaultValue": 100,
              "metadata": {
                "description": "Priority used for the platform service tags rule collection within the baseline group."
              }
            },
            "baselineCrlOcspCollectionPriority": {
              "type": "int",
              "defaultValue": 110,
              "metadata": {
                "description": "Priority used for the CRL/OCSP application rule collection within the baseline group."
              }
            }
          },
          "variables": {
            "fpName": "[last(split(parameters('firewallPolicyResourceId'), '/'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
              "apiVersion": "2024-03-01",
              "name": "[format('{0}/{1}', variables('fpName'), 'AppGw-Baseline')]",
              "properties": {
                "priority": "[parameters('baselinePriority')]",
                "ruleCollections": [
                  {
                    "name": "AllowPlatformServiceTags",
                    "priority": "[parameters('baselinePlatformCollectionPriority')]",
                    "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                    "action": {
                      "type": "Allow"
                    },
                    "rules": [
                      {
                        "name": "AllowAzureControlPlane443",
                        "ruleType": "NetworkRule",
                        "ipProtocols": [
                          "TCP"
                        ],
                        "sourceAddresses": [
                          "*"
                        ],
                        "destinationAddresses": [
                          "AzureActiveDirectory",
                          "AzureResourceManager",
                          "AzureTrafficManager",
                          "AzureMonitor",
                          "Storage"
                        ],
                        "destinationPorts": [
                          "443"
                        ],
                        "sourceIpGroups": [],
                        "destinationIpGroups": [],
                        "destinationFqdns": []
                      }
                    ]
                  },
                  {
                    "name": "AllowCrlOcsp",
                    "priority": "[parameters('baselineCrlOcspCollectionPriority')]",
                    "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                    "action": {
                      "type": "Allow"
                    },
                    "rules": [
                      {
                        "name": "AllowCrlOcsp",
                        "ruleType": "ApplicationRule",
                        "sourceAddresses": [
                          "*"
                        ],
                        "protocols": [
                          {
                            "protocolType": "Https",
                            "port": 443
                          }
                        ],
                        "targetFqdns": [
                          "ocsp.digicert.com",
                          "crl3.digicert.com",
                          "crl.microsoft.com"
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "copy": {
                "name": "appGwCustomRuleGroups",
                "count": "[length(parameters('customRuleCollectionGroups'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
              "apiVersion": "2024-03-01",
              "name": "[format('{0}/{1}', variables('fpName'), parameters('customRuleCollectionGroups')[copyIndex()].name)]",
              "properties": "[parameters('customRuleCollectionGroups')[copyIndex()].properties]"
            }
          ],
          "outputs": {
            "baselineRuleCollectionGroupName": {
              "type": "string",
              "value": "AppGw-Baseline"
            },
            "customRuleCollectionGroupNames": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('customRuleCollectionGroups'))]",
                "input": "[parameters('customRuleCollectionGroups')[copyIndex()].name]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', format('naming-appgw-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "appGatewayResourceId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'appgwCore'), '2025-04-01').outputs.appGatewayResourceId.value]"
    },
    "appGatewayPublicIp": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'appgwCore'), '2025-04-01').outputs.publicIpAddress.value]"
    },
    "wafPolicyResourceId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'wafPolicyResolver'), '2025-04-01').outputs.wafPolicyId.value]"
    },
    "listenerNames": {
      "type": "array",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'appgwCore'), '2025-04-01').outputs.listenerNames.value]"
    },
    "backendPoolNames": {
      "type": "array",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('hubRgName')), 'Microsoft.Resources/deployments', 'appgwCore'), '2025-04-01').outputs.backendPoolNames.value]"
    }
  }
}