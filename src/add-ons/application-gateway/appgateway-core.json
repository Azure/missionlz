{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "13636804547152808620"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment location"
      }
    },
    "appGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Application Gateway resource name (from naming-convention module)"
      }
    },
    "publicIpName": {
      "type": "string",
      "metadata": {
        "description": "Public IP name (from naming-convention module)"
      }
    },
    "subnetId": {
      "type": "string",
      "metadata": {
        "description": "Subnet ID for the AppGateway"
      }
    },
    "wafPolicyId": {
      "type": "string",
      "metadata": {
        "description": "WAF policy resource ID"
      }
    },
    "commonDefaults": {
      "type": "object",
      "metadata": {
        "description": "Common defaults object (expects autoscaleMinCapacity?, autoscaleMaxCapacity?, backendPort?, backendProtocol?, healthProbePath?, enableHttp2?, defaultCertificateSecretId?, probeInterval?, probeTimeout?, unhealthyThreshold?)"
      }
    },
    "apps": {
      "type": "array",
      "metadata": {
        "description": "Apps array defining listeners/backends; minimal scaffold only uses first element"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags object"
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "backendAddresses",
        "count": "[length(variables('targets'))]",
        "input": "[if(equals(variables('targets')[copyIndex('backendAddresses')].type, 'ip'), createObject('ipAddress', variables('targets')[copyIndex('backendAddresses')].value), createObject('fqdn', variables('targets')[copyIndex('backendAddresses')].value))]"
      },
      {
        "name": "listenerNames",
        "count": "[length(variables('listeners'))]",
        "input": "[variables('listeners')[copyIndex('listenerNames')].name]"
      },
      {
        "name": "backendPoolNames",
        "count": "[length(variables('backendAddressPools'))]",
        "input": "[variables('backendAddressPools')[copyIndex('backendPoolNames')].name]"
      }
    ],
    "autoscaleMinCapacity": "[coalesce(parameters('commonDefaults').autoscaleMinCapacity, 2)]",
    "autoscaleMaxCapacity": "[coalesce(parameters('commonDefaults').autoscaleMaxCapacity, 4)]",
    "defaultBackendPort": "[coalesce(parameters('commonDefaults').backendPort, 443)]",
    "defaultBackendProtocol": "[coalesce(parameters('commonDefaults').backendProtocol, 'Https')]",
    "defaultHealthProbePath": "[coalesce(parameters('commonDefaults').healthProbePath, '/health')]",
    "enableHttp2": "[coalesce(parameters('commonDefaults').enableHttp2, false())]",
    "defaultCertificateSecretId": "[coalesce(parameters('commonDefaults').defaultCertificateSecretId, '')]",
    "listenerFrontendPort": "[coalesce(parameters('commonDefaults').listenerFrontendPort, 443)]",
    "probeInterval": "[coalesce(parameters('commonDefaults').probeInterval, 30)]",
    "probeTimeout": "[coalesce(parameters('commonDefaults').probeTimeout, 30)]",
    "unhealthyThreshold": "[coalesce(parameters('commonDefaults').unhealthyThreshold, 3)]",
    "firstApp": "[if(greater(length(parameters('apps')), 0), parameters('apps')[0], createObject())]",
    "hasApp": "[greater(length(parameters('apps')), 0)]",
    "sslCerts": "[if(variables('hasApp'), createArray(createObject('name', format('cert-{0}', variables('firstApp').name), 'properties', createObject('keyVaultSecretId', coalesce(variables('firstApp').certificateSecretId, variables('defaultCertificateSecretId'))))), createArray())]",
    "targets": "[if(variables('hasApp'), coalesce(variables('firstApp').backendTargets, createArray()), createArray())]",
    "backendAddressPools": "[if(variables('hasApp'), createArray(createObject('name', format('pool-{0}', variables('firstApp').name), 'properties', createObject('backendAddresses', variables('backendAddresses')))), createArray())]",
    "probes": "[if(variables('hasApp'), createArray(createObject('name', format('probe-{0}', variables('firstApp').name), 'properties', createObject('protocol', coalesce(variables('firstApp').backendProtocol, variables('defaultBackendProtocol')), 'path', coalesce(variables('firstApp').healthProbePath, variables('defaultHealthProbePath')), 'interval', variables('probeInterval'), 'timeout', variables('probeTimeout'), 'unhealthyThreshold', variables('unhealthyThreshold'), 'pickHostNameFromBackendHttpSettings', true(), 'minServers', 0, 'match', createObject('statusCodes', createArray('200-399'))))), createArray())]",
    "backendHttpSettings": "[if(variables('hasApp'), createArray(createObject('name', format('setting-{0}', variables('firstApp').name), 'properties', createObject('port', coalesce(variables('firstApp').backendPort, variables('defaultBackendPort')), 'protocol', coalesce(variables('firstApp').backendProtocol, variables('defaultBackendProtocol')), 'pickHostNameFromBackendAddress', true(), 'cookieBasedAffinity', 'Disabled', 'requestTimeout', 30, 'probe', if(greater(length(variables('probes')), 0), createObject('id', resourceId('Microsoft.Network/applicationGateways/probes', parameters('appGatewayName'), format('probe-{0}', variables('firstApp').name))), null())))), createArray())]",
    "listeners": "[if(variables('hasApp'), createArray(createObject('name', format('listener-{0}', variables('firstApp').name), 'properties', createObject('frontendIPConfiguration', createObject('id', resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('appGatewayName'), 'appgw-frontendip')), 'frontendPort', createObject('id', resourceId('Microsoft.Network/applicationGateways/frontendPorts', parameters('appGatewayName'), 'port-https')), 'hostNames', coalesce(variables('firstApp').hostNames, createArray()), 'protocol', 'Https', 'sslCertificate', if(greater(length(variables('sslCerts')), 0), createObject('id', resourceId('Microsoft.Network/applicationGateways/sslCertificates', parameters('appGatewayName'), format('cert-{0}', variables('firstApp').name))), null())))), createArray())]",
    "requestRoutingRules": "[if(variables('hasApp'), createArray(createObject('name', format('rule-{0}', variables('firstApp').name), 'properties', createObject('httpListener', if(greater(length(variables('listeners')), 0), createObject('id', resourceId('Microsoft.Network/applicationGateways/httpListeners', parameters('appGatewayName'), format('listener-{0}', variables('firstApp').name))), null()), 'backendAddressPool', if(greater(length(variables('backendAddressPools')), 0), createObject('id', resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('appGatewayName'), format('pool-{0}', variables('firstApp').name))), null()), 'backendHttpSettings', if(greater(length(variables('backendHttpSettings')), 0), createObject('id', resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('appGatewayName'), format('setting-{0}', variables('firstApp').name))), null()), 'ruleType', 'Basic'))), createArray())]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-09-01",
      "name": "[parameters('publicIpName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      },
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2022-09-01",
      "name": "[parameters('appGatewayName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "WAF_v2",
        "tier": "WAF_v2"
      },
      "properties": {
        "firewallPolicy": {
          "id": "[parameters('wafPolicyId')]"
        },
        "autoscaleConfiguration": {
          "minCapacity": "[variables('autoscaleMinCapacity')]",
          "maxCapacity": "[variables('autoscaleMaxCapacity')]"
        },
        "gatewayIPConfigurations": [
          {
            "name": "appgw-gatewayipconfig",
            "properties": {
              "subnet": {
                "id": "[parameters('subnetId')]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appgw-frontendip",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "port-https",
            "properties": {
              "port": "[variables('listenerFrontendPort')]"
            }
          }
        ],
        "sslCertificates": "[variables('sslCerts')]",
        "probes": "[variables('probes')]",
        "backendAddressPools": "[variables('backendAddressPools')]",
        "backendHttpSettingsCollection": "[variables('backendHttpSettings')]",
        "httpListeners": "[variables('listeners')]",
        "requestRoutingRules": "[variables('requestRoutingRules')]",
        "enableHttp2": "[variables('enableHttp2')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
      ]
    }
  ],
  "outputs": {
    "appGatewayResourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName'))]"
    },
    "publicIpAddress": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2022-09-01').ipAddress]"
    },
    "listenerNames": {
      "type": "array",
      "value": "[variables('listenerNames')]"
    },
    "backendPoolNames": {
      "type": "array",
      "value": "[variables('backendPoolNames')]"
    }
  }
}