{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "7560422085568639663"
    }
  },
  "parameters": {
    "natGatewayDeployments": {
      "type": "array",
      "metadata": {
        "description": "Array of NAT Gateway deployment settings. Each object must include subnetResourceId, zone, tcpIdleTimeout, and publicIpPrefixLength."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "A suffix to use for naming deployments uniquely."
      }
    }
  },
  "resources": [
    {
      "copy": {
        "name": "natGatewayDeployment",
        "count": "[length(parameters('natGatewayDeployments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('natGatewayDeployment-{0}-{1}', copyIndex(), parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subnetResourceId": {
            "value": "[parameters('natGatewayDeployments')[copyIndex()].subnetResourceId]"
          },
          "zone": {
            "value": "[parameters('natGatewayDeployments')[copyIndex()].zone]"
          },
          "tcpIdleTimeout": {
            "value": "[parameters('natGatewayDeployments')[copyIndex()].tcpIdleTimeout]"
          },
          "publicIpPrefixLength": {
            "value": "[parameters('natGatewayDeployments')[copyIndex()].publicIpPrefixLength]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "17851989259202845198"
            }
          },
          "parameters": {
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the subnet to attach the NAT Gateway to."
              }
            },
            "zone": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "1",
                "2",
                "3"
              ],
              "metadata": {
                "description": "Zone for the NAT Gateway. Use \"\" for no zone, or \"1\", \"2\", \"3\" for specific zones."
              }
            },
            "tcpIdleTimeout": {
              "type": "int",
              "defaultValue": 4,
              "minValue": 4,
              "maxValue": 120,
              "metadata": {
                "description": "TCP idle timeout in minutes for the NAT Gateway."
              }
            },
            "publicIpPrefixLength": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "The length of the public IP prefix for the NAT Gateway."
              }
            },
            "deploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "A suffix to use for naming deployments uniquely."
              }
            }
          },
          "variables": {
            "vnetResourceId": "[join(take(split(parameters('subnetResourceId'), '/'), 9), '/')]",
            "vnetName": "[split(variables('vnetResourceId'), '/')[8]]",
            "subnetName": "[split(parameters('subnetResourceId'), '/')[10]]",
            "subscriptionId": "[split(parameters('subnetResourceId'), '/')[2]]",
            "resourceGroupName": "[split(parameters('subnetResourceId'), '/')[4]]",
            "vnetNameParts": "[split(variables('vnetName'), '-')]",
            "identifier": "[variables('vnetNameParts')[0]]",
            "environmentAbbreviation": "[variables('vnetNameParts')[1]]",
            "networkName": "[variables('vnetNameParts')[3]]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('namingConvention-{0}', parameters('deploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "delimiter": {
                    "value": "-"
                  },
                  "environmentAbbreviation": {
                    "value": "[variables('environmentAbbreviation')]"
                  },
                  "location": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-09-01', 'full').location]"
                  },
                  "networkName": {
                    "value": "[variables('networkName')]"
                  },
                  "identifier": {
                    "value": "[variables('identifier')]"
                  },
                  "stampIndex": {
                    "value": ""
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "4751792817864339444"
                    }
                  },
                  "parameters": {
                    "delimiter": {
                      "type": "string",
                      "defaultValue": "-",
                      "allowedValues": [
                        "",
                        "-"
                      ]
                    },
                    "environmentAbbreviation": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "networkName": {
                      "type": "string"
                    },
                    "identifier": {
                      "type": "string"
                    },
                    "stampIndex": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "AzureChina": {
                        "chinaeast": {
                          "abbreviation": "cne",
                          "recoveryServicesGeo": "sha",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinaeast2": {
                          "abbreviation": "cne2",
                          "recoveryServicesGeo": "sha2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth": {
                          "abbreviation": "cnn",
                          "recoveryServicesGeo": "bjb",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "chinanorth2": {
                          "abbreviation": "cnn2",
                          "recoveryServicesGeo": "bjb2",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        }
                      },
                      "AzureCloud": {
                        "australiacentral": {
                          "abbreviation": "auc",
                          "recoveryServicesGeo": "acl",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiacentral2": {
                          "abbreviation": "auc2",
                          "recoveryServicesGeo": "acl2",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiaeast": {
                          "abbreviation": "aue",
                          "recoveryServicesGeo": "ae",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "australiasoutheast": {
                          "abbreviation": "ause",
                          "recoveryServicesGeo": "ase",
                          "timeDifference": "+10:00",
                          "timeZone": "AUS Eastern Standard Time"
                        },
                        "brazilsouth": {
                          "abbreviation": "brs",
                          "recoveryServicesGeo": "brs",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "brazilsoutheast": {
                          "abbreviation": "brse",
                          "recoveryServicesGeo": "bse",
                          "timeDifference": "-3:00",
                          "timeZone": "E. South America Standard Time"
                        },
                        "canadacentral": {
                          "abbreviation": "cac",
                          "recoveryServicesGeo": "cnc",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "canadaeast": {
                          "abbreviation": "cae",
                          "recoveryServicesGeo": "cne",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "centralindia": {
                          "abbreviation": "inc",
                          "recoveryServicesGeo": "inc",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "centralus": {
                          "abbreviation": "usc",
                          "recoveryServicesGeo": "cus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "eastasia": {
                          "abbreviation": "ase",
                          "recoveryServicesGeo": "ea",
                          "timeDifference": "+8:00",
                          "timeZone": "China Standard Time"
                        },
                        "eastus": {
                          "abbreviation": "use",
                          "recoveryServicesGeo": "eus",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "eastus2": {
                          "abbreviation": "use2",
                          "recoveryServicesGeo": "eus2",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "francecentral": {
                          "abbreviation": "frc",
                          "recoveryServicesGeo": "frc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "francesouth": {
                          "abbreviation": "frs",
                          "recoveryServicesGeo": "frs",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanynorth": {
                          "abbreviation": "den",
                          "recoveryServicesGeo": "gn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "germanywestcentral": {
                          "abbreviation": "dewc",
                          "recoveryServicesGeo": "gwc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "israelcentral": {
                          "abbreviation": "ilc",
                          "recoveryServicesGeo": "ilc",
                          "timeDifference": "+2:00",
                          "timeZone": "Israel Standard Time"
                        },
                        "italynorth": {
                          "abbreviation": "itn",
                          "recoveryServicesGeo": "itn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "japaneast": {
                          "abbreviation": "jpe",
                          "recoveryServicesGeo": "jpe",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "japanwest": {
                          "abbreviation": "jpw",
                          "recoveryServicesGeo": "jpw",
                          "timeDifference": "+9:00",
                          "timeZone": "Tokyo Standard Time"
                        },
                        "jioindiacentral": {
                          "abbreviation": "injc",
                          "recoveryServicesGeo": "jic",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "jioindiawest": {
                          "abbreviation": "injw",
                          "recoveryServicesGeo": "jiw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "koreacentral": {
                          "abbreviation": "krc",
                          "recoveryServicesGeo": "krc",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "koreasouth": {
                          "abbreviation": "krs",
                          "recoveryServicesGeo": "krs",
                          "timeDifference": "+9:00",
                          "timeZone": "Korea Standard Time"
                        },
                        "northcentralus": {
                          "abbreviation": "usnc",
                          "recoveryServicesGeo": "ncus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "northeurope": {
                          "abbreviation": "eun",
                          "recoveryServicesGeo": "ne",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "norwayeast": {
                          "abbreviation": "noe",
                          "recoveryServicesGeo": "nwe",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "norwaywest": {
                          "abbreviation": "now",
                          "recoveryServicesGeo": "nww",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "polandcentral": {
                          "abbreviation": "plc",
                          "recoveryServicesGeo": "plc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "qatarcentral": {
                          "abbreviation": "qac",
                          "recoveryServicesGeo": "qac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "southafricanorth": {
                          "abbreviation": "zan",
                          "recoveryServicesGeo": "san",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southafricawest": {
                          "abbreviation": "zaw",
                          "recoveryServicesGeo": "saw",
                          "timeDifference": "+2:00",
                          "timeZone": "South Africa Standard Time"
                        },
                        "southcentralus": {
                          "abbreviation": "ussc",
                          "recoveryServicesGeo": "scus",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "southeastasia": {
                          "abbreviation": "asse",
                          "recoveryServicesGeo": "sea",
                          "timeDifference": "+8:00",
                          "timeZone": "Singapore Standard Time"
                        },
                        "southindia": {
                          "abbreviation": "ins",
                          "recoveryServicesGeo": "ins",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "swedencentral": {
                          "abbreviation": "sec",
                          "recoveryServicesGeo": "sdc",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandnorth": {
                          "abbreviation": "chn",
                          "recoveryServicesGeo": "szn",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "switzerlandwest": {
                          "abbreviation": "chw",
                          "recoveryServicesGeo": "szw",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "uaecentral": {
                          "abbreviation": "aec",
                          "recoveryServicesGeo": "uac",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uaenorth": {
                          "abbreviation": "aen",
                          "recoveryServicesGeo": "uan",
                          "timeDifference": "+3:00",
                          "timeZone": "Arabian Standard Time"
                        },
                        "uksouth": {
                          "abbreviation": "uks",
                          "recoveryServicesGeo": "uks",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "ukwest": {
                          "abbreviation": "ukw",
                          "recoveryServicesGeo": "ukw",
                          "timeDifference": "0:00",
                          "timeZone": "GMT Standard Time"
                        },
                        "westcentralus": {
                          "abbreviation": "uswc",
                          "recoveryServicesGeo": "wcus",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "westeurope": {
                          "abbreviation": "euw",
                          "recoveryServicesGeo": "we",
                          "timeDifference": "+1:00",
                          "timeZone": "Central Europe Standard Time"
                        },
                        "westindia": {
                          "abbreviation": "inw",
                          "recoveryServicesGeo": "inw",
                          "timeDifference": "+5:30",
                          "timeZone": "India Standard Time"
                        },
                        "westus": {
                          "abbreviation": "usw",
                          "recoveryServicesGeo": "wus",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus2": {
                          "abbreviation": "usw2",
                          "recoveryServicesGeo": "wus2",
                          "timeDifference": "-8:00",
                          "timeZone": "Pacific Standard Time"
                        },
                        "westus3": {
                          "abbreviation": "usw3",
                          "recoveryServicesGeo": "wus3",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        }
                      },
                      "AzureUSGovernment": {
                        "usdodcentral": {
                          "abbreviation": "dodc",
                          "recoveryServicesGeo": "udc",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usdodeast": {
                          "abbreviation": "dode",
                          "recoveryServicesGeo": "ude",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        },
                        "usgovarizona": {
                          "abbreviation": "az",
                          "recoveryServicesGeo": "uga",
                          "timeDifference": "-7:00",
                          "timeZone": "Mountain Standard Time"
                        },
                        "usgovtexas": {
                          "abbreviation": "tx",
                          "recoveryServicesGeo": "ugt",
                          "timeDifference": "-6:00",
                          "timeZone": "Central Standard Time"
                        },
                        "usgovvirginia": {
                          "abbreviation": "va",
                          "recoveryServicesGeo": "ugv",
                          "timeDifference": "-5:00",
                          "timeZone": "Eastern Standard Time"
                        }
                      }
                    },
                    "$fxv#1": {
                      "actionGroups": "ag",
                      "applicationGroups": "vdag",
                      "applicationInsights": "appi",
                      "appServicePlans": "asp",
                      "automationAccounts": "aa",
                      "availabilitySets": "avail",
                      "azureFirewalls": "afw",
                      "bastionHosts": "bas",
                      "computeGallieries": "cg",
                      "dataCollectionEndpoints": "dce",
                      "dataCollectionRuleAssociations": "dcra",
                      "dataCollectionRules": "dcr",
                      "diagnosticSettings": "diag",
                      "diskAccesses": "da",
                      "diskEncryptionSets": "des",
                      "disks": "disk",
                      "firewallPolicies": "afwp",
                      "functionApps": "func",
                      "hostPools": "vdpool",
                      "ipConfigurations": "ipconf",
                      "keyVaults": "kv",
                      "localNetworkGateways": "lgw",
                      "logAnalyticsWorkspaces": "log",
                      "natGateways": "ng",
                      "netAppAccounts": "naa",
                      "netAppAccountsCapacityPools": "cp",
                      "networkInterfaces": "nic",
                      "networkSecurityGroups": "nsg",
                      "networkWatchers": "nw",
                      "networkWatchersFlowLogs": "fl",
                      "privateEndpoints": "pe",
                      "privateLinkScopes": "pls",
                      "publicIPAddresses": "pip",
                      "publicIPPrefixes": "ippre",
                      "recoveryServicesVaults": "rsv",
                      "remoteApplicationGroups": "vdag",
                      "resourceGroups": "rg",
                      "routeTables": "rt",
                      "scalingPlans": "vdscaling",
                      "storageAccounts": "st",
                      "subnets": "snet",
                      "userAssignedIdentities": "id",
                      "virtualMachines": "vm",
                      "virtualNetworkGateways": "vgw",
                      "virtualNetworks": "vnet",
                      "workspaces": "vdws"
                    },
                    "directionShortNames": {
                      "east": "e",
                      "eastcentral": "ec",
                      "north": "n",
                      "northcentral": "nc",
                      "south": "s",
                      "southcentral": "sc",
                      "west": "w",
                      "westcentral": "wc"
                    },
                    "locations": "[coalesce(tryGet(variables('$fxv#0'), environment().name), createObject(format('{0}', parameters('location')), createObject('abbreviation', variables('directionShortNames')[skip(parameters('location'), sub(length(parameters('location')), 4))], 'timeDifference', if(contains(parameters('location'), 'east'), '-5:00', if(contains(parameters('location'), 'west'), '-8:00', '0:00')), 'timeZone', if(contains(parameters('location'), 'east'), 'Eastern Standard Time', if(contains(parameters('location'), 'west'), 'Pacific Standard Time', 'GMT Standard Time')))))]",
                    "locationAbbreviation": "[variables('locations')[parameters('location')].abbreviation]",
                    "resourceAbbreviations": "[variables('$fxv#1')]",
                    "tokens": {
                      "resource": "resource_token",
                      "service": "service_token"
                    },
                    "namingConvention": "[format('{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}', toLower(parameters('identifier')), parameters('delimiter'), parameters('environmentAbbreviation'), parameters('delimiter'), variables('locationAbbreviation'), parameters('delimiter'), parameters('networkName'), parameters('delimiter'), variables('tokens').resource, if(empty(parameters('stampIndex')), '', format('{0}{1}', parameters('delimiter'), parameters('stampIndex'))))]",
                    "namingConvention_Service": "[format('{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}', toLower(parameters('identifier')), parameters('delimiter'), parameters('environmentAbbreviation'), parameters('delimiter'), variables('locationAbbreviation'), parameters('delimiter'), parameters('networkName'), parameters('delimiter'), variables('tokens').service, parameters('delimiter'), variables('tokens').resource, if(empty(parameters('stampIndex')), '', format('{0}{1}', parameters('delimiter'), parameters('stampIndex'))))]",
                    "names": {
                      "actionGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').actionGroups)]",
                      "applicationGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').applicationGroups)]",
                      "applicationInsights": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').applicationInsights)]",
                      "appServicePlan": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').appServicePlans)]",
                      "automationAccount": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').automationAccounts)]",
                      "automationAccountDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                      "automationAccountNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                      "automationAccountPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').automationAccounts)]",
                      "availabilitySet": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').availabilitySets)]",
                      "azureFirewall": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').azureFirewalls)]",
                      "azureFirewallPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), variables('tokens').service, variables('resourceAbbreviations').azureFirewalls)]",
                      "azureFirewallPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').publicIPAddresses, parameters('delimiter'), variables('resourceAbbreviations').azureFirewalls))]",
                      "azureFirewallDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').azureFirewalls)]",
                      "azureFirewallPolicy": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').firewallPolicies)]",
                      "bastionHost": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').bastionHosts)]",
                      "bastionHostDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                      "bastionHostNetworkSecurityGroup": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkSecurityGroups), variables('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                      "bastionHostNetworkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').networkSecurityGroups, parameters('delimiter'), variables('resourceAbbreviations').bastionHosts))]",
                      "bastionHostPublicIPAddress": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').publicIPAddresses), variables('tokens').service, variables('resourceAbbreviations').bastionHosts)]",
                      "bastionHostPublicIPAddressDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').publicIPAddresses, parameters('delimiter'), variables('resourceAbbreviations').bastionHosts))]",
                      "computeGallery": "[replace(replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').computeGallieries), parameters('delimiter'), if(empty(parameters('delimiter')), '', '_'))]",
                      "dataCollectionEndpoint": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').dataCollectionEndpoints)]",
                      "dataCollectionRuleAssociation": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').dataCollectionRuleAssociations)]",
                      "dataCollectionRule": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').dataCollectionRules)]",
                      "diskAccess": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').diskAccesses)]",
                      "diskAccessNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').diskAccesses)]",
                      "diskAccessPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').diskAccesses)]",
                      "diskEncryptionSet": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').diskEncryptionSets)]",
                      "functionApp": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').functionApps)]",
                      "functionAppNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').functionApps)]",
                      "functionAppPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').functionApps)]",
                      "hostPool": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').hostPools)]",
                      "hostPoolDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').hostPools)]",
                      "hostPoolNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').hostPools)]",
                      "hostPoolPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').hostPools)]",
                      "keyVault": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').keyVaults)]",
                      "keyVaultDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').keyVaults)]",
                      "keyVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').keyVaults)]",
                      "keyVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').keyVaults)]",
                      "localNetworkGateway": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').localNetworkGateways)]",
                      "logAnalyticsWorkspace": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
                      "logAnalyticsWorkspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').logAnalyticsWorkspaces)]",
                      "natGateway": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').natGateways)]",
                      "natGatewayPublicIPPrefix": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').publicIPPrefixes), variables('tokens').service, variables('resourceAbbreviations').natGateways)]",
                      "netAppAccount": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').netAppAccounts)]",
                      "netAppAccountCapacityPool": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').netAppAccountsCapacityPools), variables('tokens').service, variables('resourceAbbreviations').netAppAccounts)]",
                      "netAppAccountSmbServer": "[replace(replace(replace(replace(variables('namingConvention'), variables('tokens').resource, ''), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), parameters('delimiter'), '')]",
                      "networkSecurityGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').networkSecurityGroups)]",
                      "networkSecurityGroupDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').networkSecurityGroups)]",
                      "networkWatcherFlowLogsNetworkSecurityGroup": "[replace(variables('namingConvention'), variables('tokens').resource, format('{0}{1}{2}{3}{4}', variables('resourceAbbreviations').networkWatchers, parameters('delimiter'), variables('resourceAbbreviations').networkWatchersFlowLogs, parameters('delimiter'), variables('resourceAbbreviations').networkSecurityGroups))]",
                      "networkWatcherFlowLogsVirtualNetwork": "[replace(variables('namingConvention'), variables('tokens').resource, format('{0}{1}{2}{3}{4}', variables('resourceAbbreviations').networkWatchers, parameters('delimiter'), variables('resourceAbbreviations').networkWatchersFlowLogs, parameters('delimiter'), variables('resourceAbbreviations').virtualNetworks))]",
                      "privateLinkScope": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').privateLinkScopes)]",
                      "privateLinkScopeNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').privateLinkScopes)]",
                      "privateLinkScopePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').privateLinkScopes)]",
                      "recoveryServicesVault": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').recoveryServicesVaults)]",
                      "recoveryServicesVaultNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').recoveryServicesVaults)]",
                      "recoveryServicesVaultPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').recoveryServicesVaults)]",
                      "resourceGroup": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').resourceGroups)]",
                      "routeTable": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').routeTables)]",
                      "scalingPlan": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').scalingPlans)]",
                      "scalingPlanDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').scalingPlans)]",
                      "storageAccount": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').storageAccounts)]",
                      "storageAccountBlobDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}blob', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountBlobNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}blob', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountBlobPrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}blob', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountFileDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}file', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountFileNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}file', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountFilePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}file', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountQueueDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}queue', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountQueueNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}queue', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountQueuePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}queue', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountTableDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}table', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountTableNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, format('{0}{1}table', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "storageAccountTablePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, format('{0}{1}table', variables('resourceAbbreviations').storageAccounts, parameters('delimiter')))]",
                      "subnet": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').subnets)]",
                      "userAssignedIdentity": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').userAssignedIdentities)]",
                      "virtualMachine": "[replace(replace(replace(replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').virtualMachines), parameters('environmentAbbreviation'), first(parameters('environmentAbbreviation'))), parameters('networkName'), ''), parameters('delimiter'), '')]",
                      "virtualMachineDisk": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').disks), variables('tokens').service, format('{0}', variables('resourceAbbreviations').virtualMachines))]",
                      "virtualMachineNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').virtualMachines)]",
                      "virtualMachineNetworkInterfaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, format('{0}{1}{2}', variables('resourceAbbreviations').networkInterfaces, parameters('delimiter'), variables('resourceAbbreviations').virtualMachines))]",
                      "virtualNetwork": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').virtualNetworks)]",
                      "virtualNetworkDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').virtualNetworks)]",
                      "virtualNetworkGateway": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').virtualNetworkGateways)]",
                      "workspace": "[replace(variables('namingConvention'), variables('tokens').resource, variables('resourceAbbreviations').workspaces)]",
                      "workspaceDiagnosticSetting": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').diagnosticSettings), variables('tokens').service, variables('resourceAbbreviations').workspaces)]",
                      "workspaceNetworkInterface": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').networkInterfaces), variables('tokens').service, variables('resourceAbbreviations').workspaces)]",
                      "workspacePrivateEndpoint": "[replace(replace(variables('namingConvention_Service'), variables('tokens').resource, variables('resourceAbbreviations').privateEndpoints), variables('tokens').service, variables('resourceAbbreviations').workspaces)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "delimiter": {
                      "type": "string",
                      "value": "[parameters('delimiter')]"
                    },
                    "locations": {
                      "type": "object",
                      "value": "[variables('locations')]"
                    },
                    "names": {
                      "type": "object",
                      "value": "[variables('names')]"
                    },
                    "resourceAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceAbbreviations')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('natGateway-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hubFirewallResourceId": {
                    "value": "[variables('vnetResourceId')]"
                  },
                  "location": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('vnetName')), '2022-09-01', 'full').location]"
                  },
                  "zone": {
                    "value": "[parameters('zone')]"
                  },
                  "natGatewayName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('namingConvention-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.natGateway]"
                  },
                  "tcpIdleTimeout": {
                    "value": "[parameters('tcpIdleTimeout')]"
                  },
                  "publicIpPrefixLength": {
                    "value": "[parameters('publicIpPrefixLength')]"
                  },
                  "publicIpPrefixName": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('namingConvention-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.names.value.natGatewayPublicIPPrefix]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "2917237334703069298"
                    }
                  },
                  "parameters": {
                    "hubFirewallResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the hub firewall. Used to derive the resource group and VNet for deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region for deployment."
                      }
                    },
                    "zone": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "1",
                        "2",
                        "3"
                      ],
                      "metadata": {
                        "description": "Zone for deployment. Use \"\" for no zone, or \"1\", \"2\", \"3\" for specific zones."
                      }
                    },
                    "natGatewayName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name for the NAT Gateway. Should be generated using the existing naming convention module."
                      }
                    },
                    "tcpIdleTimeout": {
                      "type": "int",
                      "defaultValue": 4,
                      "minValue": 4,
                      "maxValue": 120,
                      "metadata": {
                        "description": "TCP idle timeout in minutes."
                      }
                    },
                    "publicIpPrefixLength": {
                      "type": "int",
                      "defaultValue": 30,
                      "metadata": {
                        "description": "The length of the public IP prefix to allocate for outbound connections. Must be /30 for two usable IPs."
                      }
                    },
                    "publicIpPrefixName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-prefix', parameters('natGatewayName'))]",
                      "metadata": {
                        "description": "The name for the public IP prefix resource."
                      }
                    }
                  },
                  "variables": {
                    "resourceGroupName": "[split(parameters('hubFirewallResourceId'), '/')[4]]",
                    "zoneArray": "[if(equals(parameters('zone'), ''), createArray(), createArray(parameters('zone')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPPrefixes",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('publicIpPrefixName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "zones": "[variables('zoneArray')]",
                      "properties": {
                        "prefixLength": "[parameters('publicIpPrefixLength')]",
                        "publicIPAddressVersion": "IPv4"
                      }
                    },
                    {
                      "type": "Microsoft.Network/natGateways",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('natGatewayName')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "zones": "[variables('zoneArray')]",
                      "properties": {
                        "publicIpPrefixes": [
                          {
                            "id": "[resourceId('Microsoft.Network/publicIPPrefixes', parameters('publicIpPrefixName'))]"
                          }
                        ],
                        "idleTimeoutInMinutes": "[parameters('tcpIdleTimeout')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPPrefixes', parameters('publicIpPrefixName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "natGatewayId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/natGateways', parameters('natGatewayName'))]"
                    },
                    "publicIpPrefixId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/publicIPPrefixes', parameters('publicIpPrefixName'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[variables('resourceGroupName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('namingConvention-{0}', parameters('deploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[variables('vnetName')]"
                  },
                  "subnetName": {
                    "value": "[variables('subnetName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "15904383694708222527"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the VNet containing the subnet."
                      }
                    },
                    "subnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet."
                      }
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "vnetName": {
                      "type": "string",
                      "value": "[parameters('vnetName')]"
                    },
                    "subnetName": {
                      "type": "string",
                      "value": "[parameters('subnetName')]"
                    },
                    "addressPrefix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').addressPrefix]"
                    },
                    "defaultOutboundAccess": {
                      "type": "bool",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').defaultOutboundAccess]"
                    },
                    "privateEndpointNetworkPolicies": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').privateEndpointNetworkPolicies]"
                    },
                    "privateLinkServiceNetworkPolicies": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01').privateLinkServiceNetworkPolicies]"
                    },
                    "delegations": {
                      "type": "array",
                      "value": "[coalesce(tryGet(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'delegations'), createArray())]"
                    },
                    "networkSecurityGroupId": {
                      "type": "string",
                      "value": "[coalesce(tryGet(tryGet(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'networkSecurityGroup'), 'id'), '')]"
                    },
                    "routeTableId": {
                      "type": "string",
                      "value": "[coalesce(tryGet(tryGet(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'routeTable'), 'id'), '')]"
                    },
                    "serviceEndpoints": {
                      "type": "array",
                      "value": "[coalesce(tryGet(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'serviceEndpoints'), createArray())]"
                    },
                    "serviceEndpointPolicies": {
                      "type": "array",
                      "value": "[coalesce(tryGet(reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName')), '2024-05-01'), 'serviceEndpointPolicies'), createArray())]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('attachNatGatewayToSubnet-{0}', parameters('deploymentNameSuffix'))]",
              "subscriptionId": "[variables('subscriptionId')]",
              "resourceGroup": "[variables('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vnetName.value]"
                  },
                  "subnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnetName.value]"
                  },
                  "natGatewayId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('natGateway-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.natGatewayId.value]"
                  },
                  "addressPrefix": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.addressPrefix.value]"
                  },
                  "defaultOutboundAccess": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.defaultOutboundAccess.value]"
                  },
                  "privateEndpointNetworkPolicies": "[if(and(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs, 'privateEndpointNetworkPolicies'), equals(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateEndpointNetworkPolicies.value, 'Enabled')), createObject('value', 'Disabled'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.privateEndpointNetworkPolicies.value))]",
                  "delegations": {
                    "value": "[coalesce(tryGet(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs, 'delegations'), 'value'), createArray())]"
                  },
                  "networkSecurityGroupId": {
                    "value": "[tryGet(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs, 'networkSecurityGroupId'), 'value')]"
                  },
                  "routeTableId": {
                    "value": "[tryGet(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs, 'routeTableId'), 'value')]"
                  },
                  "serviceEndpoints": {
                    "value": "[coalesce(tryGet(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs, 'serviceEndpoints'), 'value'), createArray())]"
                  },
                  "serviceEndpointPolicies": {
                    "value": "[coalesce(tryGet(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs, 'serviceEndpointPolicies'), 'value'), createArray())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "12941992335107766710"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the VNet containing the subnet."
                      }
                    },
                    "subnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet to attach the NAT Gateway to."
                      }
                    },
                    "natGatewayId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the NAT Gateway."
                      }
                    },
                    "addressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "The address prefix of the subnet."
                      }
                    },
                    "delegations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The delegations on the subnet."
                      }
                    },
                    "serviceEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The service endpoints on the subnet."
                      }
                    },
                    "serviceEndpointPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The service endpoint policies on the subnet."
                      }
                    },
                    "privateEndpointNetworkPolicies": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "metadata": {
                        "description": "The private endpoint network policies setting."
                      }
                    },
                    "privateLinkServiceNetworkPolicies": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "metadata": {
                        "description": "The private link service network policies setting."
                      }
                    },
                    "networkSecurityGroupId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The network security group resource ID."
                      }
                    },
                    "routeTableId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The route table resource ID."
                      }
                    },
                    "defaultOutboundAccess": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "The default outbound access setting."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2024-05-01",
                      "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('addressPrefix')]",
                        "natGateway": {
                          "id": "[parameters('natGatewayId')]"
                        },
                        "delegations": "[parameters('delegations')]",
                        "serviceEndpoints": "[parameters('serviceEndpoints')]",
                        "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]",
                        "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                        "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                        "defaultOutboundAccess": "[parameters('defaultOutboundAccess')]",
                        "networkSecurityGroup": "[if(empty(parameters('networkSecurityGroupId')), null(), createObject('id', parameters('networkSecurityGroupId')))]",
                        "routeTable": "[if(empty(parameters('routeTableId')), null(), createObject('id', parameters('routeTableId')))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('getSubnetInfo-{0}', parameters('deploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('resourceGroupName')), 'Microsoft.Resources/deployments', format('natGateway-{0}', parameters('deploymentNameSuffix')))]"
              ]
            }
          ]
        }
      }
    }
  ]
}