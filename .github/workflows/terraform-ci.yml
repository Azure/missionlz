name: Terraform CI pipeline

on:
  schedule:
    - cron: "0 8 * * 0" 
  workflow_dispatch: # Allows manual triggering as well

jobs:
  check-release:
    runs-on: ubuntu-latest

    steps:
      - name: Get latest release from upstream repo
        id: get_release
        run: |
          UPSTREAM_REPO="hashicorp/terraform-provider-azurerm" 
          API_URL="https://api.github.com/repos/${UPSTREAM_REPO}/releases/latest"
          
          # Fetch latest release tag
          RESPONSE=$(curl -s -H "Accept: application/vnd.github.v3+json" "${API_URL}")
          LATEST_TAG=$(echo "${RESPONSE}" | jq -r '.tag_name')

          # Remove the 'v' prefix from LATEST_TAG
          LATEST_TAG_STRIPPED=$(echo "$LATEST_TAG" | sed 's/^v//')

          echo "Latest release tag: ${LATEST_TAG_STRIPPED}"
          echo "LATEST_TAG=${LATEST_TAG_STRIPPED}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          ref: updating_terraform
          sparse-checkout: |
            src

      - name: Compare with stored version
        id: check_version
        working-directory: src/terraform/mlz
        run: |
          LAST_VERSION=$(grep -Eo 'version = "= 4\.[0-9]+\.[0-9]+"' * 2>/dev/null | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' || echo "none")
          echo "LAST_VERSION=${LAST_VERSION}" >> $GITHUB_ENV

          # Compare versions
          if [[ "$LATEST_TAG" != "${LAST_VERSION}" ]]; then
            echo "New release detected: $LATEST_TAG > ${LAST_VERSION}"
            echo "new_release=true" >> $GITHUB_ENV
          else
            echo "No new release found."
            echo "new_release=false" >> $GITHUB_ENV
          fi

      - name: Update stored version
        if: ${{ env.new_release == 'true' }}
        working-directory: src/terraform/mlz
        run: |
          # Escape special characters in LAST_VERSION and LATEST_TAG
          LAST_VERSION_ESCAPED=$(echo "$LAST_VERSION" | sed 's/[.[\*^$(){}?+|\/]/\\&/g')
          LATEST_TAG_ESCAPED=$(echo "$LATEST_TAG_STRIPPED" | sed 's/[.[\*^$(){}?+|\/]/\\&/g')

          if [[ -n "$LAST_VERSION" && -n "$LATEST_TAG" ]]; then
            sed -i "s/$LAST_VERSION_ESCAPED/$LATEST_TAG_ESCAPED/g" *
          else
            echo "Error: LAST_VERSION or LATEST_TAG is empty."
            exit 1
          fi

      - name: Trigger CI
        if: ${{ env.new_release == 'true' }}
        run: |
          echo "Running tasks for new release: $LATEST_TAG"
      
      - uses: azure/login@v2
        if: ${{ env.new_release == 'true' }}
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          environment: 'AzureUSGovernment'
      
      - name: Export Azure Credentials for Terraform
        if: ${{ env.new_release == 'true' }}
        run: |
          echo "ARM_CLIENT_ID=$(jq -r .clientId <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(jq -r .clientSecret <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(jq -r .tenantId <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
            terraform_version: 1.9.7

      - name: Terraform Init
        if: ${{ env.new_release == 'true' }} && success()
        working-directory: src/terraform/mlz
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.BACKEND_KEY }}" \
            -backend-config="environment=usgovernment"

      - name: Terraform Plan
        if: ${{ env.new_release == 'true' }} && success()
        working-directory: src/terraform/mlz
        run: |
          terraform plan --var "hub_subid=$ARM_SUBSCRIPTION_ID" -out=tfplan|| echo "Terraform Plan completed with non-zero exit code"

      - name: Terraform Apply
        if: ${{ env.new_release == 'true' }} && success()
        working-directory: src/terraform/mlz
        run: |
          terraform apply -auto-approve tfplan

      # TODO: Add a step to run the unit testing

      - name: Terraform Destroy
        if: ${{ env.new_release == 'true' }} && success()
        working-directory: src/terraform/mlz
        run: |
          terraform destroy --var "hub_subid=$ARM_SUBSCRIPTION_ID" -auto-approve

      - name: Commit changes and PR
        if: ${{ env.new_release == 'true' }} && success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Update version to $LATEST_TAG"
          git push origin updating_terraform
          gh pr create --title "Update version to $LATEST_TAG" --body "Automated PR to update version to $LATEST_TAG" --base main --head updating_terraform
