# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- mlz-azure-pipelines

pool:
  vmImage: ubuntu-latest

variables:
  ServiceConnectionName: $(CAzureConnection)
  
jobs:
- job: CommercialCloud_TF
  steps:
  - task: TerraformInstaller@0
    inputs:
        terraformVersion: '1.0.8'
  - task: AzureCLI@2
    displayName: "Deploy MLZ Terraform"
    inputs:
            azureSubscription: 'CAzureConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            addSpnToEnvironment: true
            inlineScript: |
               export ARM_CLIENT_ID=$(ClientId) `
               export ARM_CLIENT_SECRET=$(ClientSecret) `
               export ARM_SUBSCRIPTION_ID=$(subId) `
               export ARM_TENANT_ID=$(tenantId) `
               terraform init         
               terraform plan  -var "hub_subid=$(subid)"  -input=false      
               terraform apply -var "hub_subid=$(subid)" -auto-approve -input=false
            workingDirectory: '$(System.DefaultWorkingDirectory)/src/terraform/mlz'
            useGlobalConfig: true
  
  - task: AzureCLI@2
    displayName: "Teardown MLZ Terraform"
    inputs:
            azureSubscription: 'CAzureConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            addSpnToEnvironment: true
            inlineScript: |
               export ARM_CLIENT_ID=$(ClientId) `
               export ARM_CLIENT_SECRET=$(ClientSecret) `
               export ARM_SUBSCRIPTION_ID=$(subId) `
               export ARM_TENANT_ID=$(tenantId) `
               terraform init         
               terraform destroy -var "hub_subid=$(subid)" -auto-approve -input=false
            workingDirectory: '$(System.DefaultWorkingDirectory)/src/terraform/mlz'
            useGlobalConfig: true

