# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

schedules:
  - cron: "0 2 * * *"
    displayName: "Nightly - mlz Terraform azure US Gov cloud"
    branches:
      include:
        - main
    always: true

pool:
  vmImage: ubuntu-latest

variables:
  GServiceConnectionName: $(GAzureConnection)

jobs:
- job: GovCloud_TF
  steps:
  - task: TerraformInstaller@0
    inputs:
      terraformVersion: '1.0.8'

  - task: AzureCLI@2
    displayName: "Apply MLZ Terraform"
    inputs:
      azureSubscription: $(GAzureConnection)
      scriptType: 'bash'
      addSpnToEnvironment: true
      scriptLocation: 'inlineScript'
      inlineScript: |
        export ARM_CLIENT_ID=$(GClientId)
        export ARM_CLIENT_SECRET=$(GClientSecret)
        export ARM_SUBSCRIPTION_ID=$(GSubId)
        export ARM_TENANT_ID=$(GTenantId)
        export ARM_ENVIRONMENT=$(CloudEnv)
        terraform init
        terraform plan \
          -var "hub_subid=$(GSubid)" \
          -var metadata_host=$(MetadataHost) \
          -var environment=$(CloudEnv) \
          -var location=$(GLocation) \
          -input=false
        terraform apply -var "hub_subid=$(GSubid)" \
          -var metadata_host=$(MetadataHost) \
          -var environment=$(CloudEnv) \
          -var location=$(GLocation) \
          -auto-approve \
          -input=false
      workingDirectory: '$(System.DefaultWorkingDirectory)/src/terraform/mlz'
      useGlobalConfig: true

  - task: AzureCLI@2
    displayName: "Extract Values and Hydrate Variables for T3 Deployment"
    inputs:
      azureSubscription: $(GAzureConnection)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      addSpnToEnvironment: true
      inlineScript: |
        echo "##vso[task.setvariable variable=hubSubscriptionId;]$(terraform output -raw hub_subid)"
        echo "##vso[task.setvariable variable=hubVirtualNetworkName;]$(terraform output -raw hub_vnetname)"
        echo "##vso[task.setvariable variable=hubResourceGroupName;]$(terraform output -raw hub_rgname)"
        echo "##vso[task.setvariable variable=firewallPrivateIPAddress;]$(terraform output -raw firewall_private_ip)"
        echo "##vso[task.setvariable variable=lawsName;]$(terraform output -raw laws_name)"
        echo "##vso[task.setvariable variable=lawsRgName;]$(terraform output -raw laws_rgname)"
        echo "##vso[task.setvariable variable=tier1SubId;]$(terraform output -raw tier1_subid)"
        echo "##vso[task.setvariable variable=tier3SubId;]$(terraform output -raw tier1_subid)"
      workingDirectory: '$(System.DefaultWorkingDirectory)/src/terraform/mlz'
      useGlobalConfig: true

  - task: AzureCLI@2
    displayName: "Apply T3 Workload Terraform"
    inputs:
      azureSubscription: $(GAzureConnection)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      addSpnToEnvironment: true
      inlineScript: |
        export ARM_CLIENT_ID=$(GClientId)
        export ARM_CLIENT_SECRET=$(GClientSecret)
        export ARM_SUBSCRIPTION_ID=$(GSubId)
        export ARM_TENANT_ID=$(GTenantId)
        export ARM_ENVIRONMENT=$(CloudEnv)
        terraform init
        terraform apply -var "hub_subid=$(hubSubscriptionId)" \
          -var metadata_host=$(MetadataHost) \
          -var environment=$(CloudEnv) \
          -var location=$(GLocation) \
          -var "hub_rgname=$(hubResourceGroupName)" \
          -var "firewall_private_ip=$(firewallPrivateIPAddress)" \
          -var "hub_vnetname=$(hubVirtualNetworkName)" \
          -var "laws_name=$(lawsName)" \
          -var "laws_rgname=$(lawsRgName)" \
          -var "tier1_subid=$(tier1SubId)" \
          -var "tier3_subid=$(tier3SubId)" \
          -auto-approve \
          -input=false
      workingDirectory: '$(System.DefaultWorkingDirectory)/src/terraform/tier3'
      useGlobalConfig: true

  - task: AzureCLI@2
    displayName: "Destroy T3 Workload Terraform"
    condition: always()
    inputs:
      azureSubscription: $(GAzureConnection)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      addSpnToEnvironment: true
      inlineScript: |
        export ARM_CLIENT_ID=$(GClientId)
        export ARM_CLIENT_SECRET=$(GClientSecret)
        export ARM_SUBSCRIPTION_ID=$(GSubId)
        export ARM_TENANT_ID=$(GTenantId)
        export ARM_ENVIRONMENT=$(CloudEnv)
        terraform init
        terraform destroy -var "hub_subid=$(hubSubscriptionId)" \
          -var metadata_host=$(MetadataHost) \
          -var environment=$(CloudEnv) \
          -var location=$(GLocation) \
          -var "hub_rgname=$(hubResourceGroupName)" \
          -var "firewall_private_ip=$(firewallPrivateIPAddress)" \
          -var "hub_vnetname=$(hubVirtualNetworkName)" \
          -var "laws_name=$(lawsName)" \
          -var "laws_rgname=$(lawsRgName)" \
          -var "tier1_subid=$(tier1SubId)" \
          -var "tier3_subid=$(tier3SubId)" \
          -auto-approve \
          -input=false
      workingDirectory: '$(System.DefaultWorkingDirectory)/src/terraform/tier3'
      useGlobalConfig: true

  - task: AzureCLI@2
    displayName: "Destroy MLZ Terraform"
    condition: always()
    inputs:
      azureSubscription: $(GAzureConnection)
      scriptType: 'bash'
      addSpnToEnvironment: true
      scriptLocation: 'inlineScript'
      inlineScript: |
        export ARM_CLIENT_ID=$(GClientId)
        export ARM_CLIENT_SECRET=$(GClientSecret)
        export ARM_SUBSCRIPTION_ID=$(GSubId)
        export ARM_TENANT_ID=$(GTenantId)
        export ARM_ENVIRONMENT=$(CloudEnv)
        terraform init
        terraform destroy -var "hub_subid=$(GSubid)" \
          -var metadata_host=$(MetadataHost) \
          -var environment=$(CloudEnv) \
          -var location=$(GLocation) \
          -auto-approve \
          -input=false
      workingDirectory: '$(System.DefaultWorkingDirectory)/src/terraform/mlz'
      useGlobalConfig: true
